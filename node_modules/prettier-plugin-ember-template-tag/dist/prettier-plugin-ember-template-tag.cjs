"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value2) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key] = value2;
var __publicField = (obj, key, value2) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value2);
const contentTag = require("content-tag");
const PARSER_NAME = "ember-template-tag";
const PRINTER_NAME = "ember-template-tag-estree";
const TEMPLATE_TAG_NAME = "template";
const TEMPLATE_TAG_OPEN = `<${TEMPLATE_TAG_NAME}>`;
const TEMPLATE_TAG_CLOSE = `</${TEMPLATE_TAG_NAME}>`;
const templateExportDefault = {
  category: "Format",
  type: "boolean",
  default: false,
  description: 'Prepend default export template tags with "export default". Since 0.1.0.'
};
function getTemplateSingleQuote(options2) {
  const { singleQuote, templateSingleQuote: templateSingleQuote2 } = options2;
  return typeof templateSingleQuote2 === "boolean" ? templateSingleQuote2 : singleQuote;
}
const templateSingleQuote = {
  category: "Format",
  type: "boolean",
  description: "Use single quotes instead of double quotes within template tags. Since 0.0.3."
};
const options$3 = {
  templateExportDefault,
  templateSingleQuote
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, "__esModule")) return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k2) {
    var d = Object.getOwnPropertyDescriptor(n, k2);
    Object.defineProperty(a, k2, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k2];
      }
    });
  });
  return a;
}
var lib$d = {};
var file = {};
var lib$c = {};
var lib$b = {};
var isReactComponent = {};
var buildMatchMemberExpression = {};
var matchesPattern = {};
var generated$3 = {};
var shallowEqual = {};
var hasRequiredShallowEqual;
function requireShallowEqual() {
  if (hasRequiredShallowEqual) return shallowEqual;
  hasRequiredShallowEqual = 1;
  Object.defineProperty(shallowEqual, "__esModule", {
    value: true
  });
  shallowEqual.default = shallowEqual$1;
  function shallowEqual$1(actual, expected) {
    const keys = Object.keys(expected);
    for (const key of keys) {
      if (actual[key] !== expected[key]) {
        return false;
      }
    }
    return true;
  }
  return shallowEqual;
}
var deprecationWarning = {};
var hasRequiredDeprecationWarning;
function requireDeprecationWarning() {
  if (hasRequiredDeprecationWarning) return deprecationWarning;
  hasRequiredDeprecationWarning = 1;
  Object.defineProperty(deprecationWarning, "__esModule", {
    value: true
  });
  deprecationWarning.default = deprecationWarning$1;
  const warnings = /* @__PURE__ */ new Set();
  function deprecationWarning$1(oldName, newName, prefix = "", cacheKey = oldName) {
    if (warnings.has(cacheKey)) return;
    warnings.add(cacheKey);
    const {
      internal,
      trace
    } = captureShortStackTrace(1, 2);
    if (internal) {
      return;
    }
    console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
  }
  function captureShortStackTrace(skip, length) {
    const {
      stackTraceLimit,
      prepareStackTrace
    } = Error;
    let stackTrace;
    Error.stackTraceLimit = 1 + skip + length;
    Error.prepareStackTrace = function(err, stack) {
      stackTrace = stack;
    };
    new Error().stack;
    Error.stackTraceLimit = stackTraceLimit;
    Error.prepareStackTrace = prepareStackTrace;
    if (!stackTrace) return {
      internal: false,
      trace: ""
    };
    const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
    return {
      internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
      trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n")
    };
  }
  return deprecationWarning;
}
var hasRequiredGenerated$3;
function requireGenerated$3() {
  if (hasRequiredGenerated$3) return generated$3;
  hasRequiredGenerated$3 = 1;
  Object.defineProperty(generated$3, "__esModule", {
    value: true
  });
  generated$3.isAccessor = isAccessor;
  generated$3.isAnyTypeAnnotation = isAnyTypeAnnotation;
  generated$3.isArgumentPlaceholder = isArgumentPlaceholder;
  generated$3.isArrayExpression = isArrayExpression;
  generated$3.isArrayPattern = isArrayPattern;
  generated$3.isArrayTypeAnnotation = isArrayTypeAnnotation;
  generated$3.isArrowFunctionExpression = isArrowFunctionExpression;
  generated$3.isAssignmentExpression = isAssignmentExpression;
  generated$3.isAssignmentPattern = isAssignmentPattern;
  generated$3.isAwaitExpression = isAwaitExpression;
  generated$3.isBigIntLiteral = isBigIntLiteral;
  generated$3.isBinary = isBinary;
  generated$3.isBinaryExpression = isBinaryExpression;
  generated$3.isBindExpression = isBindExpression;
  generated$3.isBlock = isBlock;
  generated$3.isBlockParent = isBlockParent;
  generated$3.isBlockStatement = isBlockStatement;
  generated$3.isBooleanLiteral = isBooleanLiteral;
  generated$3.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
  generated$3.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
  generated$3.isBreakStatement = isBreakStatement;
  generated$3.isCallExpression = isCallExpression;
  generated$3.isCatchClause = isCatchClause;
  generated$3.isClass = isClass;
  generated$3.isClassAccessorProperty = isClassAccessorProperty;
  generated$3.isClassBody = isClassBody;
  generated$3.isClassDeclaration = isClassDeclaration;
  generated$3.isClassExpression = isClassExpression;
  generated$3.isClassImplements = isClassImplements;
  generated$3.isClassMethod = isClassMethod;
  generated$3.isClassPrivateMethod = isClassPrivateMethod;
  generated$3.isClassPrivateProperty = isClassPrivateProperty;
  generated$3.isClassProperty = isClassProperty;
  generated$3.isCompletionStatement = isCompletionStatement;
  generated$3.isConditional = isConditional;
  generated$3.isConditionalExpression = isConditionalExpression;
  generated$3.isContinueStatement = isContinueStatement;
  generated$3.isDebuggerStatement = isDebuggerStatement;
  generated$3.isDecimalLiteral = isDecimalLiteral;
  generated$3.isDeclaration = isDeclaration;
  generated$3.isDeclareClass = isDeclareClass;
  generated$3.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
  generated$3.isDeclareExportDeclaration = isDeclareExportDeclaration;
  generated$3.isDeclareFunction = isDeclareFunction;
  generated$3.isDeclareInterface = isDeclareInterface;
  generated$3.isDeclareModule = isDeclareModule;
  generated$3.isDeclareModuleExports = isDeclareModuleExports;
  generated$3.isDeclareOpaqueType = isDeclareOpaqueType;
  generated$3.isDeclareTypeAlias = isDeclareTypeAlias;
  generated$3.isDeclareVariable = isDeclareVariable;
  generated$3.isDeclaredPredicate = isDeclaredPredicate;
  generated$3.isDecorator = isDecorator;
  generated$3.isDirective = isDirective;
  generated$3.isDirectiveLiteral = isDirectiveLiteral;
  generated$3.isDoExpression = isDoExpression;
  generated$3.isDoWhileStatement = isDoWhileStatement;
  generated$3.isEmptyStatement = isEmptyStatement;
  generated$3.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
  generated$3.isEnumBody = isEnumBody;
  generated$3.isEnumBooleanBody = isEnumBooleanBody;
  generated$3.isEnumBooleanMember = isEnumBooleanMember;
  generated$3.isEnumDeclaration = isEnumDeclaration;
  generated$3.isEnumDefaultedMember = isEnumDefaultedMember;
  generated$3.isEnumMember = isEnumMember;
  generated$3.isEnumNumberBody = isEnumNumberBody;
  generated$3.isEnumNumberMember = isEnumNumberMember;
  generated$3.isEnumStringBody = isEnumStringBody;
  generated$3.isEnumStringMember = isEnumStringMember;
  generated$3.isEnumSymbolBody = isEnumSymbolBody;
  generated$3.isExistsTypeAnnotation = isExistsTypeAnnotation;
  generated$3.isExportAllDeclaration = isExportAllDeclaration;
  generated$3.isExportDeclaration = isExportDeclaration;
  generated$3.isExportDefaultDeclaration = isExportDefaultDeclaration;
  generated$3.isExportDefaultSpecifier = isExportDefaultSpecifier;
  generated$3.isExportNamedDeclaration = isExportNamedDeclaration;
  generated$3.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
  generated$3.isExportSpecifier = isExportSpecifier;
  generated$3.isExpression = isExpression;
  generated$3.isExpressionStatement = isExpressionStatement;
  generated$3.isExpressionWrapper = isExpressionWrapper;
  generated$3.isFile = isFile;
  generated$3.isFlow = isFlow;
  generated$3.isFlowBaseAnnotation = isFlowBaseAnnotation;
  generated$3.isFlowDeclaration = isFlowDeclaration;
  generated$3.isFlowPredicate = isFlowPredicate;
  generated$3.isFlowType = isFlowType;
  generated$3.isFor = isFor;
  generated$3.isForInStatement = isForInStatement;
  generated$3.isForOfStatement = isForOfStatement;
  generated$3.isForStatement = isForStatement;
  generated$3.isForXStatement = isForXStatement;
  generated$3.isFunction = isFunction;
  generated$3.isFunctionDeclaration = isFunctionDeclaration;
  generated$3.isFunctionExpression = isFunctionExpression;
  generated$3.isFunctionParent = isFunctionParent;
  generated$3.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
  generated$3.isFunctionTypeParam = isFunctionTypeParam;
  generated$3.isGenericTypeAnnotation = isGenericTypeAnnotation;
  generated$3.isIdentifier = isIdentifier;
  generated$3.isIfStatement = isIfStatement;
  generated$3.isImmutable = isImmutable2;
  generated$3.isImport = isImport;
  generated$3.isImportAttribute = isImportAttribute;
  generated$3.isImportDeclaration = isImportDeclaration;
  generated$3.isImportDefaultSpecifier = isImportDefaultSpecifier;
  generated$3.isImportExpression = isImportExpression;
  generated$3.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
  generated$3.isImportOrExportDeclaration = isImportOrExportDeclaration;
  generated$3.isImportSpecifier = isImportSpecifier;
  generated$3.isIndexedAccessType = isIndexedAccessType;
  generated$3.isInferredPredicate = isInferredPredicate;
  generated$3.isInterfaceDeclaration = isInterfaceDeclaration;
  generated$3.isInterfaceExtends = isInterfaceExtends;
  generated$3.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
  generated$3.isInterpreterDirective = isInterpreterDirective;
  generated$3.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
  generated$3.isJSX = isJSX;
  generated$3.isJSXAttribute = isJSXAttribute;
  generated$3.isJSXClosingElement = isJSXClosingElement;
  generated$3.isJSXClosingFragment = isJSXClosingFragment;
  generated$3.isJSXElement = isJSXElement;
  generated$3.isJSXEmptyExpression = isJSXEmptyExpression;
  generated$3.isJSXExpressionContainer = isJSXExpressionContainer;
  generated$3.isJSXFragment = isJSXFragment;
  generated$3.isJSXIdentifier = isJSXIdentifier;
  generated$3.isJSXMemberExpression = isJSXMemberExpression;
  generated$3.isJSXNamespacedName = isJSXNamespacedName;
  generated$3.isJSXOpeningElement = isJSXOpeningElement;
  generated$3.isJSXOpeningFragment = isJSXOpeningFragment;
  generated$3.isJSXSpreadAttribute = isJSXSpreadAttribute;
  generated$3.isJSXSpreadChild = isJSXSpreadChild;
  generated$3.isJSXText = isJSXText;
  generated$3.isLVal = isLVal;
  generated$3.isLabeledStatement = isLabeledStatement;
  generated$3.isLiteral = isLiteral;
  generated$3.isLogicalExpression = isLogicalExpression;
  generated$3.isLoop = isLoop;
  generated$3.isMemberExpression = isMemberExpression;
  generated$3.isMetaProperty = isMetaProperty;
  generated$3.isMethod = isMethod;
  generated$3.isMiscellaneous = isMiscellaneous;
  generated$3.isMixedTypeAnnotation = isMixedTypeAnnotation;
  generated$3.isModuleDeclaration = isModuleDeclaration;
  generated$3.isModuleExpression = isModuleExpression;
  generated$3.isModuleSpecifier = isModuleSpecifier;
  generated$3.isNewExpression = isNewExpression;
  generated$3.isNoop = isNoop;
  generated$3.isNullLiteral = isNullLiteral;
  generated$3.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
  generated$3.isNullableTypeAnnotation = isNullableTypeAnnotation;
  generated$3.isNumberLiteral = isNumberLiteral;
  generated$3.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
  generated$3.isNumberTypeAnnotation = isNumberTypeAnnotation;
  generated$3.isNumericLiteral = isNumericLiteral;
  generated$3.isObjectExpression = isObjectExpression;
  generated$3.isObjectMember = isObjectMember;
  generated$3.isObjectMethod = isObjectMethod;
  generated$3.isObjectPattern = isObjectPattern;
  generated$3.isObjectProperty = isObjectProperty;
  generated$3.isObjectTypeAnnotation = isObjectTypeAnnotation;
  generated$3.isObjectTypeCallProperty = isObjectTypeCallProperty;
  generated$3.isObjectTypeIndexer = isObjectTypeIndexer;
  generated$3.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
  generated$3.isObjectTypeProperty = isObjectTypeProperty;
  generated$3.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
  generated$3.isOpaqueType = isOpaqueType;
  generated$3.isOptionalCallExpression = isOptionalCallExpression;
  generated$3.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
  generated$3.isOptionalMemberExpression = isOptionalMemberExpression;
  generated$3.isParenthesizedExpression = isParenthesizedExpression;
  generated$3.isPattern = isPattern;
  generated$3.isPatternLike = isPatternLike;
  generated$3.isPipelineBareFunction = isPipelineBareFunction;
  generated$3.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
  generated$3.isPipelineTopicExpression = isPipelineTopicExpression;
  generated$3.isPlaceholder = isPlaceholder;
  generated$3.isPrivate = isPrivate;
  generated$3.isPrivateName = isPrivateName;
  generated$3.isProgram = isProgram;
  generated$3.isProperty = isProperty;
  generated$3.isPureish = isPureish;
  generated$3.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
  generated$3.isRecordExpression = isRecordExpression;
  generated$3.isRegExpLiteral = isRegExpLiteral;
  generated$3.isRegexLiteral = isRegexLiteral;
  generated$3.isRestElement = isRestElement;
  generated$3.isRestProperty = isRestProperty;
  generated$3.isReturnStatement = isReturnStatement;
  generated$3.isScopable = isScopable;
  generated$3.isSequenceExpression = isSequenceExpression;
  generated$3.isSpreadElement = isSpreadElement;
  generated$3.isSpreadProperty = isSpreadProperty;
  generated$3.isStandardized = isStandardized;
  generated$3.isStatement = isStatement;
  generated$3.isStaticBlock = isStaticBlock;
  generated$3.isStringLiteral = isStringLiteral;
  generated$3.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
  generated$3.isStringTypeAnnotation = isStringTypeAnnotation;
  generated$3.isSuper = isSuper;
  generated$3.isSwitchCase = isSwitchCase;
  generated$3.isSwitchStatement = isSwitchStatement;
  generated$3.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
  generated$3.isTSAnyKeyword = isTSAnyKeyword;
  generated$3.isTSArrayType = isTSArrayType;
  generated$3.isTSAsExpression = isTSAsExpression;
  generated$3.isTSBaseType = isTSBaseType;
  generated$3.isTSBigIntKeyword = isTSBigIntKeyword;
  generated$3.isTSBooleanKeyword = isTSBooleanKeyword;
  generated$3.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
  generated$3.isTSConditionalType = isTSConditionalType;
  generated$3.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
  generated$3.isTSConstructorType = isTSConstructorType;
  generated$3.isTSDeclareFunction = isTSDeclareFunction;
  generated$3.isTSDeclareMethod = isTSDeclareMethod;
  generated$3.isTSEntityName = isTSEntityName;
  generated$3.isTSEnumBody = isTSEnumBody;
  generated$3.isTSEnumDeclaration = isTSEnumDeclaration;
  generated$3.isTSEnumMember = isTSEnumMember;
  generated$3.isTSExportAssignment = isTSExportAssignment;
  generated$3.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
  generated$3.isTSExternalModuleReference = isTSExternalModuleReference;
  generated$3.isTSFunctionType = isTSFunctionType;
  generated$3.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
  generated$3.isTSImportType = isTSImportType;
  generated$3.isTSIndexSignature = isTSIndexSignature;
  generated$3.isTSIndexedAccessType = isTSIndexedAccessType;
  generated$3.isTSInferType = isTSInferType;
  generated$3.isTSInstantiationExpression = isTSInstantiationExpression;
  generated$3.isTSInterfaceBody = isTSInterfaceBody;
  generated$3.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
  generated$3.isTSIntersectionType = isTSIntersectionType;
  generated$3.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
  generated$3.isTSLiteralType = isTSLiteralType;
  generated$3.isTSMappedType = isTSMappedType;
  generated$3.isTSMethodSignature = isTSMethodSignature;
  generated$3.isTSModuleBlock = isTSModuleBlock;
  generated$3.isTSModuleDeclaration = isTSModuleDeclaration;
  generated$3.isTSNamedTupleMember = isTSNamedTupleMember;
  generated$3.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
  generated$3.isTSNeverKeyword = isTSNeverKeyword;
  generated$3.isTSNonNullExpression = isTSNonNullExpression;
  generated$3.isTSNullKeyword = isTSNullKeyword;
  generated$3.isTSNumberKeyword = isTSNumberKeyword;
  generated$3.isTSObjectKeyword = isTSObjectKeyword;
  generated$3.isTSOptionalType = isTSOptionalType;
  generated$3.isTSParameterProperty = isTSParameterProperty;
  generated$3.isTSParenthesizedType = isTSParenthesizedType;
  generated$3.isTSPropertySignature = isTSPropertySignature;
  generated$3.isTSQualifiedName = isTSQualifiedName;
  generated$3.isTSRestType = isTSRestType;
  generated$3.isTSSatisfiesExpression = isTSSatisfiesExpression;
  generated$3.isTSStringKeyword = isTSStringKeyword;
  generated$3.isTSSymbolKeyword = isTSSymbolKeyword;
  generated$3.isTSTemplateLiteralType = isTSTemplateLiteralType;
  generated$3.isTSThisType = isTSThisType;
  generated$3.isTSTupleType = isTSTupleType;
  generated$3.isTSType = isTSType;
  generated$3.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
  generated$3.isTSTypeAnnotation = isTSTypeAnnotation;
  generated$3.isTSTypeAssertion = isTSTypeAssertion;
  generated$3.isTSTypeElement = isTSTypeElement;
  generated$3.isTSTypeLiteral = isTSTypeLiteral;
  generated$3.isTSTypeOperator = isTSTypeOperator;
  generated$3.isTSTypeParameter = isTSTypeParameter;
  generated$3.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
  generated$3.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
  generated$3.isTSTypePredicate = isTSTypePredicate;
  generated$3.isTSTypeQuery = isTSTypeQuery;
  generated$3.isTSTypeReference = isTSTypeReference;
  generated$3.isTSUndefinedKeyword = isTSUndefinedKeyword;
  generated$3.isTSUnionType = isTSUnionType;
  generated$3.isTSUnknownKeyword = isTSUnknownKeyword;
  generated$3.isTSVoidKeyword = isTSVoidKeyword;
  generated$3.isTaggedTemplateExpression = isTaggedTemplateExpression;
  generated$3.isTemplateElement = isTemplateElement;
  generated$3.isTemplateLiteral = isTemplateLiteral;
  generated$3.isTerminatorless = isTerminatorless;
  generated$3.isThisExpression = isThisExpression;
  generated$3.isThisTypeAnnotation = isThisTypeAnnotation;
  generated$3.isThrowStatement = isThrowStatement;
  generated$3.isTopicReference = isTopicReference;
  generated$3.isTryStatement = isTryStatement;
  generated$3.isTupleExpression = isTupleExpression;
  generated$3.isTupleTypeAnnotation = isTupleTypeAnnotation;
  generated$3.isTypeAlias = isTypeAlias;
  generated$3.isTypeAnnotation = isTypeAnnotation;
  generated$3.isTypeCastExpression = isTypeCastExpression;
  generated$3.isTypeParameter = isTypeParameter;
  generated$3.isTypeParameterDeclaration = isTypeParameterDeclaration;
  generated$3.isTypeParameterInstantiation = isTypeParameterInstantiation;
  generated$3.isTypeScript = isTypeScript;
  generated$3.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
  generated$3.isUnaryExpression = isUnaryExpression;
  generated$3.isUnaryLike = isUnaryLike;
  generated$3.isUnionTypeAnnotation = isUnionTypeAnnotation;
  generated$3.isUpdateExpression = isUpdateExpression;
  generated$3.isUserWhitespacable = isUserWhitespacable;
  generated$3.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
  generated$3.isVariableDeclaration = isVariableDeclaration;
  generated$3.isVariableDeclarator = isVariableDeclarator;
  generated$3.isVariance = isVariance;
  generated$3.isVoidTypeAnnotation = isVoidTypeAnnotation;
  generated$3.isWhile = isWhile;
  generated$3.isWhileStatement = isWhileStatement;
  generated$3.isWithStatement = isWithStatement;
  generated$3.isYieldExpression = isYieldExpression;
  var _shallowEqual = requireShallowEqual();
  var _deprecationWarning = requireDeprecationWarning();
  function isArrayExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrayExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAssignmentExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AssignmentExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBinaryExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BinaryExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterpreterDirective(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterpreterDirective") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDirective(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Directive") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDirectiveLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DirectiveLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBlockStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BlockStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBreakStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BreakStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isCallExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "CallExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isCatchClause(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "CatchClause") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isConditionalExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ConditionalExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isContinueStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ContinueStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDebuggerStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DebuggerStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDoWhileStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DoWhileStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEmptyStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EmptyStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExpressionStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExpressionStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFile(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "File") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForInStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ForInStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ForStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Identifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIfStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "IfStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLabeledStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "LabeledStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStringLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StringLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumericLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NumericLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNullLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NullLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBooleanLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BooleanLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRegExpLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "RegExpLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLogicalExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "LogicalExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMemberExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "MemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNewExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NewExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isProgram(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Program") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRestElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "RestElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isReturnStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ReturnStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSequenceExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SequenceExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isParenthesizedExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ParenthesizedExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSwitchCase(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SwitchCase") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSwitchStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SwitchStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isThisExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ThisExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isThrowStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ThrowStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTryStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TryStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUnaryExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "UnaryExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUpdateExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "UpdateExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVariableDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "VariableDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVariableDeclarator(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "VariableDeclarator") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isWhileStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "WhileStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isWithStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "WithStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAssignmentPattern(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AssignmentPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArrayPattern(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrayPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArrowFunctionExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrowFunctionExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportAllDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportAllDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportDefaultDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportDefaultDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportNamedDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportNamedDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForOfStatement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ForOfStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportDefaultSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportDefaultSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportNamespaceSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportNamespaceSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMetaProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "MetaProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectPattern(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSpreadElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SpreadElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSuper(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Super") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTaggedTemplateExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TaggedTemplateExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTemplateElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TemplateElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTemplateLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TemplateLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isYieldExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "YieldExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAwaitExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AwaitExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImport(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Import") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBigIntLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BigIntLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportNamespaceSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportNamespaceSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOptionalMemberExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OptionalMemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOptionalCallExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OptionalCallExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassAccessorProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassAccessorProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassPrivateProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassPrivateProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassPrivateMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassPrivateMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPrivateName(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PrivateName") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStaticBlock(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StaticBlock") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportAttribute(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ImportAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAnyTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "AnyTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArrayTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArrayTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBooleanTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BooleanTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBooleanLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BooleanLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNullLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NullLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClassImplements(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ClassImplements") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareClass(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareClass") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareFunction(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareInterface(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareInterface") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareModule(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareModule") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareModuleExports(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareModuleExports") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareTypeAlias(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareTypeAlias") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareOpaqueType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareOpaqueType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareVariable(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareVariable") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareExportDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareExportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclareExportAllDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclareExportAllDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclaredPredicate(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DeclaredPredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExistsTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExistsTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionTypeParam(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "FunctionTypeParam") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isGenericTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "GenericTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInferredPredicate(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InferredPredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterfaceExtends(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterfaceExtends") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterfaceDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterfaceDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isInterfaceTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "InterfaceTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIntersectionTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "IntersectionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMixedTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "MixedTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEmptyTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EmptyTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNullableTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NullableTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumberLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NumberLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumberTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "NumberTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeInternalSlot(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeInternalSlot") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeCallProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeCallProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeIndexer(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeIndexer") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectTypeSpreadProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ObjectTypeSpreadProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOpaqueType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OpaqueType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isQualifiedTypeIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "QualifiedTypeIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStringLiteralTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StringLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStringTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "StringTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSymbolTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "SymbolTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isThisTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ThisTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTupleTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TupleTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeofTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeofTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeAlias(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeAlias") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeCastExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeCastExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeParameter(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeParameter") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeParameterDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeParameterDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeParameterInstantiation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TypeParameterInstantiation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUnionTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "UnionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVariance(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Variance") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isVoidTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "VoidTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumBooleanBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumBooleanBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumNumberBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumNumberBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumStringBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumStringBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumSymbolBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumSymbolBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumBooleanMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumBooleanMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumNumberMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumNumberMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumStringMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumStringMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumDefaultedMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "EnumDefaultedMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isIndexedAccessType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "IndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isOptionalIndexedAccessType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "OptionalIndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXAttribute(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXClosingElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXClosingElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXEmptyExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXEmptyExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXExpressionContainer(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXExpressionContainer") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXSpreadChild(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXSpreadChild") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXMemberExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXMemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXNamespacedName(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXNamespacedName") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXOpeningElement(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXOpeningElement") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXSpreadAttribute(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXSpreadAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXText(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXText") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXFragment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXOpeningFragment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXOpeningFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSXClosingFragment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "JSXClosingFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNoop(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Noop") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPlaceholder(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Placeholder") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isV8IntrinsicIdentifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "V8IntrinsicIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isArgumentPlaceholder(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ArgumentPlaceholder") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBindExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "BindExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDecorator(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "Decorator") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDoExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DoExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportDefaultSpecifier(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ExportDefaultSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRecordExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "RecordExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTupleExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TupleExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDecimalLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "DecimalLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isModuleExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "ModuleExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTopicReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TopicReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPipelineTopicExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PipelineTopicExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPipelineBareFunction(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PipelineBareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPipelinePrimaryTopicReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "PipelinePrimaryTopicReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSParameterProperty(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSParameterProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSDeclareFunction(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSDeclareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSDeclareMethod(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSDeclareMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSQualifiedName(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSQualifiedName") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSCallSignatureDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSCallSignatureDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSConstructSignatureDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSConstructSignatureDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSPropertySignature(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSPropertySignature") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSMethodSignature(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSMethodSignature") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIndexSignature(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIndexSignature") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSAnyKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSAnyKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSBooleanKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSBooleanKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSBigIntKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSBigIntKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIntrinsicKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIntrinsicKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNeverKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNeverKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNullKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNullKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNumberKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNumberKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSObjectKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSObjectKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSStringKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSStringKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSSymbolKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSSymbolKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSUndefinedKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSUndefinedKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSUnknownKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSUnknownKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSVoidKeyword(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSVoidKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSThisType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSThisType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSFunctionType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSFunctionType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSConstructorType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSConstructorType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypePredicate(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypePredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeQuery(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeQuery") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeLiteral(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSArrayType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSArrayType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTupleType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTupleType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSOptionalType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSOptionalType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSRestType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSRestType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNamedTupleMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNamedTupleMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSUnionType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSUnionType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIntersectionType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIntersectionType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSConditionalType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSConditionalType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInferType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInferType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSParenthesizedType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSParenthesizedType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeOperator(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeOperator") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSIndexedAccessType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSIndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSMappedType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSMappedType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTemplateLiteralType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTemplateLiteralType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSLiteralType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSLiteralType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSExpressionWithTypeArguments(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSExpressionWithTypeArguments") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInterfaceDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInterfaceDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInterfaceBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInterfaceBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeAliasDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeAliasDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSInstantiationExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSInstantiationExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSAsExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSAsExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSSatisfiesExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSSatisfiesExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeAssertion(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeAssertion") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEnumBody(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSEnumBody") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEnumDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSEnumDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEnumMember(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSEnumMember") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSModuleDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSModuleDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSModuleBlock(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSModuleBlock") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSImportType(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSImportType") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSImportEqualsDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSImportEqualsDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSExternalModuleReference(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSExternalModuleReference") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNonNullExpression(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNonNullExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSExportAssignment(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSExportAssignment") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSNamespaceExportDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSNamespaceExportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeAnnotation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeParameterInstantiation(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeParameterInstantiation") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeParameterDeclaration(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeParameterDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeParameter(node2, opts) {
    if (!node2) return false;
    if (node2.type !== "TSTypeParameter") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStandardized(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "InterpreterDirective":
      case "Directive":
      case "DirectiveLiteral":
      case "BlockStatement":
      case "BreakStatement":
      case "CallExpression":
      case "CatchClause":
      case "ConditionalExpression":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "File":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Identifier":
      case "IfStatement":
      case "LabeledStatement":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "Program":
      case "ObjectExpression":
      case "ObjectMethod":
      case "ObjectProperty":
      case "RestElement":
      case "ReturnStatement":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "SwitchCase":
      case "SwitchStatement":
      case "ThisExpression":
      case "ThrowStatement":
      case "TryStatement":
      case "UnaryExpression":
      case "UpdateExpression":
      case "VariableDeclaration":
      case "VariableDeclarator":
      case "WhileStatement":
      case "WithStatement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ArrowFunctionExpression":
      case "ClassBody":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ExportSpecifier":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ImportExpression":
      case "MetaProperty":
      case "ClassMethod":
      case "ObjectPattern":
      case "SpreadElement":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateElement":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "ExportNamespaceSpecifier":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
      case "StaticBlock":
      case "ImportAttribute":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Identifier":
          case "StringLiteral":
          case "BlockStatement":
          case "ClassBody":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExpression(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "CallExpression":
      case "ConditionalExpression":
      case "FunctionExpression":
      case "Identifier":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "ObjectExpression":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "ThisExpression":
      case "UnaryExpression":
      case "UpdateExpression":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ImportExpression":
      case "MetaProperty":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "TypeCastExpression":
      case "JSXElement":
      case "JSXFragment":
      case "BindExpression":
      case "DoExpression":
      case "RecordExpression":
      case "TupleExpression":
      case "DecimalLiteral":
      case "ModuleExpression":
      case "TopicReference":
      case "PipelineTopicExpression":
      case "PipelineBareFunction":
      case "PipelinePrimaryTopicReference":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Expression":
          case "Identifier":
          case "StringLiteral":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBinary(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BinaryExpression":
      case "LogicalExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isScopable(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node2.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBlockParent(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node2.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isBlock(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "Program":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node2.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isStatement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BlockStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "IfStatement":
      case "LabeledStatement":
      case "ReturnStatement":
      case "SwitchStatement":
      case "ThrowStatement":
      case "TryStatement":
      case "VariableDeclaration":
      case "WhileStatement":
      case "WithStatement":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
      case "TSImportEqualsDeclaration":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Statement":
          case "Declaration":
          case "BlockStatement":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTerminatorless(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
      case "YieldExpression":
      case "AwaitExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isCompletionStatement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isConditional(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ConditionalExpression":
      case "IfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLoop(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "WhileStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isWhile(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DoWhileStatement":
      case "WhileStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExpressionWrapper(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExpressionStatement":
      case "ParenthesizedExpression":
      case "TypeCastExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFor(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ForInStatement":
      case "ForStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isForXStatement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ForInStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunction(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFunctionParent(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPureish(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "ArrowFunctionExpression":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node2.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "FunctionDeclaration":
      case "VariableDeclaration":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
      case "TSImportEqualsDeclaration":
        break;
      case "Placeholder":
        if (node2.expectedNode === "Declaration") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPatternLike(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Identifier":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLVal(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Identifier":
      case "MemberExpression":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSParameterProperty":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node2.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSEntityName(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Identifier":
      case "TSQualifiedName":
        break;
      case "Placeholder":
        if (node2.expectedNode === "Identifier") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isLiteral(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "TemplateLiteral":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node2.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImmutable2(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "BigIntLiteral":
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXOpeningElement":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node2.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUserWhitespacable(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectMethod":
      case "ObjectProperty":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMethod(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectMethod":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isObjectMember(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectMethod":
      case "ObjectProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isProperty(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ObjectProperty":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isUnaryLike(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "UnaryExpression":
      case "SpreadElement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPattern(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
        break;
      case "Placeholder":
        if (node2.expectedNode === "Pattern") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isClass(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ClassExpression":
      case "ClassDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isImportOrExportDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isExportDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isModuleSpecifier(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ExportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isAccessor(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ClassAccessorProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isPrivate(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlow(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ClassImplements":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "DeclaredPredicate":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "FunctionTypeParam":
      case "GenericTypeAnnotation":
      case "InferredPredicate":
      case "InterfaceExtends":
      case "InterfaceDeclaration":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
      case "OpaqueType":
      case "QualifiedTypeIdentifier":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "TypeAlias":
      case "TypeAnnotation":
      case "TypeCastExpression":
      case "TypeParameter":
      case "TypeParameterDeclaration":
      case "TypeParameterInstantiation":
      case "UnionTypeAnnotation":
      case "Variance":
      case "VoidTypeAnnotation":
      case "EnumDeclaration":
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowType(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "GenericTypeAnnotation":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "UnionTypeAnnotation":
      case "VoidTypeAnnotation":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowBaseAnnotation(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "AnyTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NumberTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "VoidTypeAnnotation":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowDeclaration(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isFlowPredicate(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "DeclaredPredicate":
      case "InferredPredicate":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumBody(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isEnumMember(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isJSX(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXEmptyExpression":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXIdentifier":
      case "JSXMemberExpression":
      case "JSXNamespacedName":
      case "JSXOpeningElement":
      case "JSXSpreadAttribute":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isMiscellaneous(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "Noop":
      case "Placeholder":
      case "V8IntrinsicIdentifier":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTypeScript(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSParameterProperty":
      case "TSDeclareFunction":
      case "TSDeclareMethod":
      case "TSQualifiedName":
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSNamedTupleMember":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSTemplateLiteralType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSInterfaceDeclaration":
      case "TSInterfaceBody":
      case "TSTypeAliasDeclaration":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSEnumBody":
      case "TSEnumDeclaration":
      case "TSEnumMember":
      case "TSModuleDeclaration":
      case "TSModuleBlock":
      case "TSImportType":
      case "TSImportEqualsDeclaration":
      case "TSExternalModuleReference":
      case "TSNonNullExpression":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
      case "TSTypeAnnotation":
      case "TSTypeParameterInstantiation":
      case "TSTypeParameterDeclaration":
      case "TSTypeParameter":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSTypeElement(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSType(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSTemplateLiteralType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSImportType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isTSBaseType(node2, opts) {
    if (!node2) return false;
    switch (node2.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSTemplateLiteralType":
      case "TSLiteralType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isNumberLiteral(node2, opts) {
    (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");
    if (!node2) return false;
    if (node2.type !== "NumberLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRegexLiteral(node2, opts) {
    (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral");
    if (!node2) return false;
    if (node2.type !== "RegexLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isRestProperty(node2, opts) {
    (0, _deprecationWarning.default)("isRestProperty", "isRestElement");
    if (!node2) return false;
    if (node2.type !== "RestProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isSpreadProperty(node2, opts) {
    (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");
    if (!node2) return false;
    if (node2.type !== "SpreadProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node2, opts);
  }
  function isModuleDeclaration(node2, opts) {
    (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration");
    return isImportOrExportDeclaration(node2, opts);
  }
  return generated$3;
}
var hasRequiredMatchesPattern;
function requireMatchesPattern() {
  if (hasRequiredMatchesPattern) return matchesPattern;
  hasRequiredMatchesPattern = 1;
  Object.defineProperty(matchesPattern, "__esModule", {
    value: true
  });
  matchesPattern.default = matchesPattern$1;
  var _index = requireGenerated$3();
  function matchesPattern$1(member, match, allowPartial) {
    if (!(0, _index.isMemberExpression)(member)) return false;
    const parts = Array.isArray(match) ? match : match.split(".");
    const nodes = [];
    let node2;
    for (node2 = member; (0, _index.isMemberExpression)(node2); node2 = node2.object) {
      nodes.push(node2.property);
    }
    nodes.push(node2);
    if (nodes.length < parts.length) return false;
    if (!allowPartial && nodes.length > parts.length) return false;
    for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
      const node3 = nodes[j];
      let value2;
      if ((0, _index.isIdentifier)(node3)) {
        value2 = node3.name;
      } else if ((0, _index.isStringLiteral)(node3)) {
        value2 = node3.value;
      } else if ((0, _index.isThisExpression)(node3)) {
        value2 = "this";
      } else {
        return false;
      }
      if (parts[i] !== value2) return false;
    }
    return true;
  }
  return matchesPattern;
}
var hasRequiredBuildMatchMemberExpression;
function requireBuildMatchMemberExpression() {
  if (hasRequiredBuildMatchMemberExpression) return buildMatchMemberExpression;
  hasRequiredBuildMatchMemberExpression = 1;
  Object.defineProperty(buildMatchMemberExpression, "__esModule", {
    value: true
  });
  buildMatchMemberExpression.default = buildMatchMemberExpression$1;
  var _matchesPattern = requireMatchesPattern();
  function buildMatchMemberExpression$1(match, allowPartial) {
    const parts = match.split(".");
    return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
  }
  return buildMatchMemberExpression;
}
var hasRequiredIsReactComponent;
function requireIsReactComponent() {
  if (hasRequiredIsReactComponent) return isReactComponent;
  hasRequiredIsReactComponent = 1;
  Object.defineProperty(isReactComponent, "__esModule", {
    value: true
  });
  isReactComponent.default = void 0;
  var _buildMatchMemberExpression = requireBuildMatchMemberExpression();
  const isReactComponent$1 = (0, _buildMatchMemberExpression.default)("React.Component");
  isReactComponent.default = isReactComponent$1;
  return isReactComponent;
}
var isCompatTag = {};
var hasRequiredIsCompatTag;
function requireIsCompatTag() {
  if (hasRequiredIsCompatTag) return isCompatTag;
  hasRequiredIsCompatTag = 1;
  Object.defineProperty(isCompatTag, "__esModule", {
    value: true
  });
  isCompatTag.default = isCompatTag$1;
  function isCompatTag$1(tagName) {
    return !!tagName && /^[a-z]/.test(tagName);
  }
  return isCompatTag;
}
var buildChildren = {};
var cleanJSXElementLiteralChild = {};
var generated$2 = {};
var lowercase = {};
var validate = {};
var definitions = {};
var core = {};
var is = {};
var isType = {};
var hasRequiredIsType;
function requireIsType() {
  if (hasRequiredIsType) return isType;
  hasRequiredIsType = 1;
  Object.defineProperty(isType, "__esModule", {
    value: true
  });
  isType.default = isType$1;
  var _index = requireDefinitions();
  function isType$1(nodeType, targetType) {
    if (nodeType === targetType) return true;
    if (nodeType == null) return false;
    if (_index.ALIAS_KEYS[targetType]) return false;
    const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
    if (aliases != null && aliases.includes(nodeType)) return true;
    return false;
  }
  return isType;
}
var isPlaceholderType = {};
var hasRequiredIsPlaceholderType;
function requireIsPlaceholderType() {
  if (hasRequiredIsPlaceholderType) return isPlaceholderType;
  hasRequiredIsPlaceholderType = 1;
  Object.defineProperty(isPlaceholderType, "__esModule", {
    value: true
  });
  isPlaceholderType.default = isPlaceholderType$1;
  var _index = requireDefinitions();
  function isPlaceholderType$1(placeholderType, targetType) {
    if (placeholderType === targetType) return true;
    const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
    if (aliases != null && aliases.includes(targetType)) return true;
    return false;
  }
  return isPlaceholderType;
}
var hasRequiredIs;
function requireIs() {
  if (hasRequiredIs) return is;
  hasRequiredIs = 1;
  Object.defineProperty(is, "__esModule", {
    value: true
  });
  is.default = is$1;
  var _shallowEqual = requireShallowEqual();
  var _isType = requireIsType();
  var _isPlaceholderType = requireIsPlaceholderType();
  var _index = requireDefinitions();
  function is$1(type, node2, opts) {
    if (!node2) return false;
    const matches = (0, _isType.default)(node2.type, type);
    if (!matches) {
      if (!opts && node2.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS) {
        return (0, _isPlaceholderType.default)(node2.expectedNode, type);
      }
      return false;
    }
    if (opts === void 0) {
      return true;
    } else {
      return (0, _shallowEqual.default)(node2, opts);
    }
  }
  return is;
}
var isValidIdentifier = {};
var lib$a = {};
var identifier = {};
var hasRequiredIdentifier;
function requireIdentifier() {
  if (hasRequiredIdentifier) return identifier;
  hasRequiredIdentifier = 1;
  Object.defineProperty(identifier, "__esModule", {
    value: true
  });
  identifier.isIdentifierChar = isIdentifierChar;
  identifier.isIdentifierName = isIdentifierName;
  identifier.isIdentifierStart = isIdentifierStart;
  let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  let nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
  const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
  const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet(code, set) {
    let pos = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos += set[i];
      if (pos > code) return false;
      pos += set[i + 1];
      if (pos >= code) return true;
    }
    return false;
  }
  function isIdentifierStart(code) {
    if (code < 65) return code === 36;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  function isIdentifierName(name) {
    let isFirst = true;
    for (let i = 0; i < name.length; i++) {
      let cp = name.charCodeAt(i);
      if ((cp & 64512) === 55296 && i + 1 < name.length) {
        const trail = name.charCodeAt(++i);
        if ((trail & 64512) === 56320) {
          cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
      }
      if (isFirst) {
        isFirst = false;
        if (!isIdentifierStart(cp)) {
          return false;
        }
      } else if (!isIdentifierChar(cp)) {
        return false;
      }
    }
    return !isFirst;
  }
  return identifier;
}
var keyword = {};
var hasRequiredKeyword;
function requireKeyword() {
  if (hasRequiredKeyword) return keyword;
  hasRequiredKeyword = 1;
  Object.defineProperty(keyword, "__esModule", {
    value: true
  });
  keyword.isKeyword = isKeyword;
  keyword.isReservedWord = isReservedWord;
  keyword.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
  keyword.isStrictBindReservedWord = isStrictBindReservedWord;
  keyword.isStrictReservedWord = isStrictReservedWord;
  const reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords = new Set(reservedWords.keyword);
  const reservedWordsStrictSet = new Set(reservedWords.strict);
  const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
  function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
  }
  function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
  }
  function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
  }
  function isKeyword(word) {
    return keywords.has(word);
  }
  return keyword;
}
var hasRequiredLib$d;
function requireLib$d() {
  if (hasRequiredLib$d) return lib$a;
  hasRequiredLib$d = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "isIdentifierChar", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierChar;
      }
    });
    Object.defineProperty(exports2, "isIdentifierName", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierName;
      }
    });
    Object.defineProperty(exports2, "isIdentifierStart", {
      enumerable: true,
      get: function() {
        return _identifier.isIdentifierStart;
      }
    });
    Object.defineProperty(exports2, "isKeyword", {
      enumerable: true,
      get: function() {
        return _keyword.isKeyword;
      }
    });
    Object.defineProperty(exports2, "isReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isReservedWord;
      }
    });
    Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindOnlyReservedWord;
      }
    });
    Object.defineProperty(exports2, "isStrictBindReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictBindReservedWord;
      }
    });
    Object.defineProperty(exports2, "isStrictReservedWord", {
      enumerable: true,
      get: function() {
        return _keyword.isStrictReservedWord;
      }
    });
    var _identifier = requireIdentifier();
    var _keyword = requireKeyword();
  })(lib$a);
  return lib$a;
}
var hasRequiredIsValidIdentifier;
function requireIsValidIdentifier() {
  if (hasRequiredIsValidIdentifier) return isValidIdentifier;
  hasRequiredIsValidIdentifier = 1;
  Object.defineProperty(isValidIdentifier, "__esModule", {
    value: true
  });
  isValidIdentifier.default = isValidIdentifier$1;
  var _helperValidatorIdentifier = requireLib$d();
  function isValidIdentifier$1(name, reserved = true) {
    if (typeof name !== "string") return false;
    if (reserved) {
      if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {
        return false;
      }
    }
    return (0, _helperValidatorIdentifier.isIdentifierName)(name);
  }
  return isValidIdentifier;
}
var lib$9 = {};
var hasRequiredLib$c;
function requireLib$c() {
  if (hasRequiredLib$c) return lib$9;
  hasRequiredLib$c = 1;
  Object.defineProperty(lib$9, "__esModule", {
    value: true
  });
  lib$9.readCodePoint = readCodePoint;
  lib$9.readInt = readInt;
  lib$9.readStringContents = readStringContents;
  var _isDigit = function isDigit(code) {
    return code >= 48 && code <= 57;
  };
  const forbiddenNumericSeparatorSiblings = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  };
  const isAllowedNumericSeparatorSibling = {
    bin: (ch) => ch === 48 || ch === 49,
    oct: (ch) => ch >= 48 && ch <= 55,
    dec: (ch) => ch >= 48 && ch <= 57,
    hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
  };
  function readStringContents(type, input, pos, lineStart, curLine, errors) {
    const initialPos = pos;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos;
    const {
      length
    } = input;
    for (; ; ) {
      if (pos >= length) {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
        out += input.slice(chunkStart, pos);
        break;
      }
      const ch = input.charCodeAt(pos);
      if (isStringEnd(type, ch, input, pos)) {
        out += input.slice(chunkStart, pos);
        break;
      }
      if (ch === 92) {
        out += input.slice(chunkStart, pos);
        const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
        if (res.ch === null && !firstInvalidLoc) {
          firstInvalidLoc = {
            pos,
            lineStart,
            curLine
          };
        } else {
          out += res.ch;
        }
        ({
          pos,
          lineStart,
          curLine
        } = res);
        chunkStart = pos;
      } else if (ch === 8232 || ch === 8233) {
        ++pos;
        ++curLine;
        lineStart = pos;
      } else if (ch === 10 || ch === 13) {
        if (type === "template") {
          out += input.slice(chunkStart, pos) + "\n";
          ++pos;
          if (ch === 13 && input.charCodeAt(pos) === 10) {
            ++pos;
          }
          ++curLine;
          chunkStart = lineStart = pos;
        } else {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
        }
      } else {
        ++pos;
      }
    }
    return {
      pos,
      str: out,
      firstInvalidLoc,
      lineStart,
      curLine,
      containsInvalid: !!firstInvalidLoc
    };
  }
  function isStringEnd(type, ch, input, pos) {
    if (type === "template") {
      return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
  }
  function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos++;
    const res = (ch2) => ({
      pos,
      ch: ch2,
      lineStart,
      curLine
    });
    const ch = input.charCodeAt(pos++);
    switch (ch) {
      case 110:
        return res("\n");
      case 114:
        return res("\r");
      case 120: {
        let code;
        ({
          code,
          pos
        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
        return res(code === null ? null : String.fromCharCode(code));
      }
      case 117: {
        let code;
        ({
          code,
          pos
        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
        return res(code === null ? null : String.fromCodePoint(code));
      }
      case 116:
        return res("	");
      case 98:
        return res("\b");
      case 118:
        return res("\v");
      case 102:
        return res("\f");
      case 13:
        if (input.charCodeAt(pos) === 10) {
          ++pos;
        }
      case 10:
        lineStart = pos;
        ++curLine;
      case 8232:
      case 8233:
        return res("");
      case 56:
      case 57:
        if (inTemplate) {
          return res(null);
        } else {
          errors.strictNumericEscape(pos - 1, lineStart, curLine);
        }
      default:
        if (ch >= 48 && ch <= 55) {
          const startPos = pos - 1;
          const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          pos += octalStr.length - 1;
          const next = input.charCodeAt(pos);
          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(startPos, lineStart, curLine);
            }
          }
          return res(String.fromCharCode(octal));
        }
        return res(String.fromCharCode(ch));
    }
  }
  function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos;
    let n;
    ({
      n,
      pos
    } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
      if (throwOnInvalid) {
        errors.invalidEscapeSequence(initialPos, lineStart, curLine);
      } else {
        pos = initialPos - 1;
      }
    }
    return {
      code: n,
      pos
    };
  }
  function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code = input.charCodeAt(pos);
      let val;
      if (code === 95 && allowNumSeparator !== "bail") {
        const prev = input.charCodeAt(pos - 1);
        const next = input.charCodeAt(pos + 1);
        if (!allowNumSeparator) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.unexpectedNumericSeparator(pos, lineStart, curLine);
        }
        ++pos;
        continue;
      }
      if (code >= 97) {
        val = code - 97 + 10;
      } else if (code >= 65) {
        val = code - 65 + 10;
      } else if (_isDigit(code)) {
        val = code - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        if (val <= 9 && bailOnError) {
          return {
            n: null,
            pos
          };
        } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
          val = 0;
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }
      ++pos;
      total = total * radix + val;
    }
    if (pos === start || len != null && pos - start !== len || invalid) {
      return {
        n: null,
        pos
      };
    }
    return {
      n: total,
      pos
    };
  }
  function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input.charCodeAt(pos);
    let code;
    if (ch === 123) {
      ++pos;
      ({
        code,
        pos
      } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
      ++pos;
      if (code !== null && code > 1114111) {
        if (throwOnInvalid) {
          errors.invalidCodePoint(pos, lineStart, curLine);
        } else {
          return {
            code: null,
            pos
          };
        }
      }
    } else {
      ({
        code,
        pos
      } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
      code,
      pos
    };
  }
  return lib$9;
}
var constants = {};
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants) return constants;
  hasRequiredConstants = 1;
  Object.defineProperty(constants, "__esModule", {
    value: true
  });
  constants.UPDATE_OPERATORS = constants.UNARY_OPERATORS = constants.STRING_UNARY_OPERATORS = constants.STATEMENT_OR_BLOCK_KEYS = constants.NUMBER_UNARY_OPERATORS = constants.NUMBER_BINARY_OPERATORS = constants.LOGICAL_OPERATORS = constants.INHERIT_KEYS = constants.FOR_INIT_KEYS = constants.FLATTENABLE_KEYS = constants.EQUALITY_BINARY_OPERATORS = constants.COMPARISON_BINARY_OPERATORS = constants.COMMENT_KEYS = constants.BOOLEAN_UNARY_OPERATORS = constants.BOOLEAN_NUMBER_BINARY_OPERATORS = constants.BOOLEAN_BINARY_OPERATORS = constants.BINARY_OPERATORS = constants.ASSIGNMENT_OPERATORS = void 0;
  constants.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
  constants.FLATTENABLE_KEYS = ["body", "expressions"];
  constants.FOR_INIT_KEYS = ["left", "init"];
  constants.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
  const LOGICAL_OPERATORS = constants.LOGICAL_OPERATORS = ["||", "&&", "??"];
  constants.UPDATE_OPERATORS = ["++", "--"];
  const BOOLEAN_NUMBER_BINARY_OPERATORS = constants.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
  const EQUALITY_BINARY_OPERATORS = constants.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
  const COMPARISON_BINARY_OPERATORS = constants.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
  const BOOLEAN_BINARY_OPERATORS = constants.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
  const NUMBER_BINARY_OPERATORS = constants.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
  constants.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
  constants.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
  const BOOLEAN_UNARY_OPERATORS = constants.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
  const NUMBER_UNARY_OPERATORS = constants.NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
  const STRING_UNARY_OPERATORS = constants.STRING_UNARY_OPERATORS = ["typeof"];
  constants.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
  constants.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  };
  {
    constants.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
    constants.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
  }
  return constants;
}
var utils$1 = {};
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils$1;
  hasRequiredUtils$1 = 1;
  Object.defineProperty(utils$1, "__esModule", {
    value: true
  });
  utils$1.allExpandedTypes = utils$1.VISITOR_KEYS = utils$1.NODE_PARENT_VALIDATIONS = utils$1.NODE_FIELDS = utils$1.FLIPPED_ALIAS_KEYS = utils$1.DEPRECATED_KEYS = utils$1.BUILDER_KEYS = utils$1.ALIAS_KEYS = void 0;
  utils$1.arrayOf = arrayOf;
  utils$1.arrayOfType = arrayOfType;
  utils$1.assertEach = assertEach;
  utils$1.assertNodeOrValueType = assertNodeOrValueType;
  utils$1.assertNodeType = assertNodeType;
  utils$1.assertOneOf = assertOneOf;
  utils$1.assertOptionalChainStart = assertOptionalChainStart;
  utils$1.assertShape = assertShape;
  utils$1.assertValueType = assertValueType;
  utils$1.chain = chain;
  utils$1.default = defineType;
  utils$1.defineAliasedType = defineAliasedType;
  utils$1.validate = validate2;
  utils$1.validateArrayOfType = validateArrayOfType;
  utils$1.validateOptional = validateOptional;
  utils$1.validateOptionalType = validateOptionalType;
  utils$1.validateType = validateType;
  var _is = requireIs();
  var _validate = requireValidate();
  const VISITOR_KEYS = utils$1.VISITOR_KEYS = {};
  const ALIAS_KEYS = utils$1.ALIAS_KEYS = {};
  const FLIPPED_ALIAS_KEYS = utils$1.FLIPPED_ALIAS_KEYS = {};
  const NODE_FIELDS = utils$1.NODE_FIELDS = {};
  const BUILDER_KEYS = utils$1.BUILDER_KEYS = {};
  const DEPRECATED_KEYS = utils$1.DEPRECATED_KEYS = {};
  const NODE_PARENT_VALIDATIONS = utils$1.NODE_PARENT_VALIDATIONS = {};
  function getType(val) {
    if (Array.isArray(val)) {
      return "array";
    } else if (val === null) {
      return "null";
    } else {
      return typeof val;
    }
  }
  function validate2(validate3) {
    return {
      validate: validate3
    };
  }
  function validateType(...typeNames) {
    return validate2(assertNodeType(...typeNames));
  }
  function validateOptional(validate3) {
    return {
      validate: validate3,
      optional: true
    };
  }
  function validateOptionalType(...typeNames) {
    return {
      validate: assertNodeType(...typeNames),
      optional: true
    };
  }
  function arrayOf(elementType) {
    return chain(assertValueType("array"), assertEach(elementType));
  }
  function arrayOfType(...typeNames) {
    return arrayOf(assertNodeType(...typeNames));
  }
  function validateArrayOfType(...typeNames) {
    return validate2(arrayOfType(...typeNames));
  }
  function assertEach(callback) {
    const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {
    };
    function validator2(node2, key, val) {
      if (!Array.isArray(val)) return;
      let i = 0;
      const subKey = {
        toString() {
          return `${key}[${i}]`;
        }
      };
      for (; i < val.length; i++) {
        const v = val[i];
        callback(node2, subKey, v);
        childValidator(node2, subKey, v);
      }
    }
    validator2.each = callback;
    return validator2;
  }
  function assertOneOf(...values) {
    function validate3(node2, key, val) {
      if (!values.includes(val)) {
        throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
      }
    }
    validate3.oneOf = values;
    return validate3;
  }
  const allExpandedTypes = utils$1.allExpandedTypes = [];
  function assertNodeType(...types2) {
    const expandedTypes = /* @__PURE__ */ new Set();
    allExpandedTypes.push({
      types: types2,
      set: expandedTypes
    });
    function validate3(node2, key, val) {
      const valType = val == null ? void 0 : val.type;
      if (valType != null) {
        if (expandedTypes.has(valType)) {
          (0, _validate.validateChild)(node2, key, val);
          return;
        }
        if (valType === "Placeholder") {
          for (const type of types2) {
            if ((0, _is.default)(type, val)) {
              (0, _validate.validateChild)(node2, key, val);
              return;
            }
          }
        }
      }
      throw new TypeError(`Property ${key} of ${node2.type} expected node to be of a type ${JSON.stringify(types2)} but instead got ${JSON.stringify(valType)}`);
    }
    validate3.oneOfNodeTypes = types2;
    return validate3;
  }
  function assertNodeOrValueType(...types2) {
    function validate3(node2, key, val) {
      const primitiveType = getType(val);
      for (const type of types2) {
        if (primitiveType === type || (0, _is.default)(type, val)) {
          (0, _validate.validateChild)(node2, key, val);
          return;
        }
      }
      throw new TypeError(`Property ${key} of ${node2.type} expected node to be of a type ${JSON.stringify(types2)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
    }
    validate3.oneOfNodeOrValueTypes = types2;
    return validate3;
  }
  function assertValueType(type) {
    function validate3(node2, key, val) {
      if (getType(val) === type) {
        return;
      }
      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
    }
    validate3.type = type;
    return validate3;
  }
  function assertShape(shape) {
    const keys = Object.keys(shape);
    function validate3(node2, key, val) {
      const errors = [];
      for (const property of keys) {
        try {
          (0, _validate.validateField)(node2, property, val[property], shape[property]);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            errors.push(error2.message);
            continue;
          }
          throw error2;
        }
      }
      if (errors.length) {
        throw new TypeError(`Property ${key} of ${node2.type} expected to have the following:
${errors.join("\n")}`);
      }
    }
    validate3.shapeOf = shape;
    return validate3;
  }
  function assertOptionalChainStart() {
    function validate3(node2) {
      var _current;
      let current = node2;
      while (node2) {
        const {
          type
        } = current;
        if (type === "OptionalCallExpression") {
          if (current.optional) return;
          current = current.callee;
          continue;
        }
        if (type === "OptionalMemberExpression") {
          if (current.optional) return;
          current = current.object;
          continue;
        }
        break;
      }
      throw new TypeError(`Non-optional ${node2.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
    }
    return validate3;
  }
  function chain(...fns) {
    function validate3(...args) {
      for (const fn2 of fns) {
        fn2(...args);
      }
    }
    validate3.chainOf = fns;
    if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
      throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
    }
    return validate3;
  }
  const validTypeOpts = /* @__PURE__ */ new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]);
  const validFieldKeys = /* @__PURE__ */ new Set(["default", "optional", "deprecated", "validate"]);
  const store = {};
  function defineAliasedType(...aliases) {
    return (type, opts = {}) => {
      let defined = opts.aliases;
      if (!defined) {
        var _store$opts$inherits$;
        if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
        defined != null ? defined : defined = [];
        opts.aliases = defined;
      }
      const additional = aliases.filter((a) => !defined.includes(a));
      defined.unshift(...additional);
      defineType(type, opts);
    };
  }
  function defineType(type, opts = {}) {
    const inherits2 = opts.inherits && store[opts.inherits] || {};
    let fields = opts.fields;
    if (!fields) {
      fields = {};
      if (inherits2.fields) {
        const keys = Object.getOwnPropertyNames(inherits2.fields);
        for (const key of keys) {
          const field = inherits2.fields[key];
          const def = field.default;
          if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
            throw new Error("field defaults can only be primitives or empty arrays currently");
          }
          fields[key] = {
            default: Array.isArray(def) ? [] : def,
            optional: field.optional,
            deprecated: field.deprecated,
            validate: field.validate
          };
        }
      }
    }
    const visitor = opts.visitor || inherits2.visitor || [];
    const aliases = opts.aliases || inherits2.aliases || [];
    const builder2 = opts.builder || inherits2.builder || opts.visitor || [];
    for (const k2 of Object.keys(opts)) {
      if (!validTypeOpts.has(k2)) {
        throw new Error(`Unknown type option "${k2}" on ${type}`);
      }
    }
    if (opts.deprecatedAlias) {
      DEPRECATED_KEYS[opts.deprecatedAlias] = type;
    }
    for (const key of visitor.concat(builder2)) {
      fields[key] = fields[key] || {};
    }
    for (const key of Object.keys(fields)) {
      const field = fields[key];
      if (field.default !== void 0 && !builder2.includes(key)) {
        field.optional = true;
      }
      if (field.default === void 0) {
        field.default = null;
      } else if (!field.validate && field.default != null) {
        field.validate = assertValueType(getType(field.default));
      }
      for (const k2 of Object.keys(field)) {
        if (!validFieldKeys.has(k2)) {
          throw new Error(`Unknown field key "${k2}" on ${type}.${key}`);
        }
      }
    }
    VISITOR_KEYS[type] = opts.visitor = visitor;
    BUILDER_KEYS[type] = opts.builder = builder2;
    NODE_FIELDS[type] = opts.fields = fields;
    ALIAS_KEYS[type] = opts.aliases = aliases;
    aliases.forEach((alias) => {
      FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
      FLIPPED_ALIAS_KEYS[alias].push(type);
    });
    if (opts.validate) {
      NODE_PARENT_VALIDATIONS[type] = opts.validate;
    }
    store[type] = opts;
  }
  return utils$1;
}
var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore) return core;
  hasRequiredCore = 1;
  Object.defineProperty(core, "__esModule", {
    value: true
  });
  core.patternLikeCommon = core.importAttributes = core.functionTypeAnnotationCommon = core.functionDeclarationCommon = core.functionCommon = core.classMethodOrPropertyCommon = core.classMethodOrDeclareMethodCommon = void 0;
  var _is = requireIs();
  var _isValidIdentifier = requireIsValidIdentifier();
  var _helperValidatorIdentifier = requireLib$d();
  var _helperStringParser = requireLib$c();
  var _index = requireConstants();
  var _utils = requireUtils$1();
  const defineType = (0, _utils.defineAliasedType)("Standardized");
  defineType("ArrayExpression", {
    fields: {
      elements: {
        validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")),
        default: !process.env.BABEL_TYPES_8_BREAKING ? [] : void 0
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  defineType("AssignmentExpression", {
    fields: {
      operator: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("string") : Object.assign(function() {
          const identifier2 = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);
          const pattern = (0, _utils.assertOneOf)("=");
          return function(node2, key, val) {
            const validator2 = (0, _is.default)("Pattern", node2.left) ? pattern : identifier2;
            validator2(node2, key, val);
          };
        }(), {
          oneOf: _index.ASSIGNMENT_OPERATORS
        })
      },
      left: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });
  defineType("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)
      },
      left: {
        validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression");
          const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          const validator2 = Object.assign(function(node2, key, val) {
            const validator3 = node2.operator === "in" ? inOp : expression;
            validator3(node2, key, val);
          }, {
            oneOfNodeTypes: ["Expression", "PrivateName"]
          });
          return validator2;
        }()
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });
  defineType("InterpreterDirective", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("Directive", {
    visitor: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertNodeType)("DirectiveLiteral")
      }
    }
  });
  defineType("DirectiveLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, _utils.arrayOfType)("Directive"),
        default: []
      },
      body: (0, _utils.validateArrayOfType)("Statement")
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });
  defineType("BreakStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  defineType("CallExpression", {
    visitor: ["callee", "typeParameters", "typeArguments", "arguments"],
    builder: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: Object.assign({
      callee: {
        validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
      },
      arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      }
    }, {
      optional: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    }, process.env.BABEL_TYPES_8_BREAKING ? {} : {
      optional: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    })
  });
  defineType("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {
        validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    },
    aliases: ["Scopable", "BlockParent"]
  });
  defineType("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      alternate: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression", "Conditional"]
  });
  defineType("ContinueStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  defineType("DebuggerStatement", {
    aliases: ["Statement"]
  });
  defineType("DoWhileStatement", {
    builder: ["test", "body"],
    visitor: ["body", "test"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });
  defineType("EmptyStatement", {
    aliases: ["Statement"]
  });
  defineType("ExpressionStatement", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Statement", "ExpressionWrapper"]
  });
  defineType("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {
      program: {
        validate: (0, _utils.assertNodeType)("Program")
      },
      comments: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {
        }, {
          each: {
            oneOfNodeTypes: ["CommentBlock", "CommentLine"]
          }
        }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),
        optional: true
      },
      tokens: {
        validate: (0, _utils.assertEach)(Object.assign(() => {
        }, {
          type: "any"
        })),
        optional: true
      }
    }
  });
  defineType("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
        optional: true
      },
      test: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      update: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  const functionCommon = () => ({
    params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"),
    generator: {
      default: false
    },
    async: {
      default: false
    }
  });
  core.functionCommon = functionCommon;
  const functionTypeAnnotationCommon = () => ({
    returnType: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: true
    }
  });
  core.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
  const functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
    declare: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    id: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    }
  });
  core.functionDeclarationCommon = functionDeclarationCommon;
  defineType("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "typeParameters", "params", "predicate", "returnType", "body"],
    fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    }),
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
    validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
      const identifier2 = (0, _utils.assertNodeType)("Identifier");
      return function(parent, key, node2) {
        if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
          identifier2(node2, "id", node2.id);
        }
      };
    }()
  });
  defineType("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    })
  });
  const patternLikeCommon = () => ({
    typeAnnotation: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    decorators: {
      validate: (0, _utils.arrayOfType)("Decorator"),
      optional: true
    }
  });
  core.patternLikeCommon = patternLikeCommon;
  defineType("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation", "decorators"],
    aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
    fields: Object.assign({}, patternLikeCommon(), {
      name: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node2, key, val) {
          if (!(0, _isValidIdentifier.default)(val, false)) {
            throw new TypeError(`"${val}" is not a valid identifier name`);
          }
        }, {
          type: "string"
        })) : (0, _utils.assertValueType)("string")
      }
    }),
    validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node2) {
      const match = /\.(\w+)$/.exec(key.toString());
      if (!match) return;
      const [, parentKey] = match;
      const nonComp = {
        computed: false
      };
      if (parentKey === "property") {
        if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
        if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
      } else if (parentKey === "key") {
        if ((0, _is.default)("Property", parent, nonComp)) return;
        if ((0, _is.default)("Method", parent, nonComp)) return;
      } else if (parentKey === "exported") {
        if ((0, _is.default)("ExportSpecifier", parent)) return;
      } else if (parentKey === "imported") {
        if ((0, _is.default)("ImportSpecifier", parent, {
          imported: node2
        })) return;
      } else if (parentKey === "meta") {
        if ((0, _is.default)("MetaProperty", parent, {
          meta: node2
        })) return;
      }
      if (((0, _helperValidatorIdentifier.isKeyword)(node2.name) || (0, _helperValidatorIdentifier.isReservedWord)(node2.name, false)) && node2.name !== "this") {
        throw new TypeError(`"${node2.name}" is not a valid identifier`);
      }
    } : void 0
  });
  defineType("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _utils.assertNodeType)("Statement")
      },
      alternate: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("StringLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {
      value: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node2, key, val) {
        }, {
          type: "number"
        }))
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("NullLiteral", {
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("BooleanLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("boolean")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Pureish", "Literal"],
    fields: {
      pattern: {
        validate: (0, _utils.assertValueType)("string")
      },
      flags: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node2, key, val) {
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid) {
            throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
          }
        }, {
          type: "string"
        })) : (0, _utils.assertValueType)("string"),
        default: ""
      }
    }
  });
  defineType("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)
      },
      left: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("MemberExpression", {
    builder: ["object", "property", "computed", ...!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : []],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: Object.assign({
      object: {
        validate: (0, _utils.assertNodeType)("Expression", "Super")
      },
      property: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = function(node2, key, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key, val);
          };
          validator2.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
          return validator2;
        }()
      },
      computed: {
        default: false
      }
    }, !process.env.BABEL_TYPES_8_BREAKING ? {
      optional: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    } : {})
  });
  defineType("NewExpression", {
    inherits: "CallExpression"
  });
  defineType("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives", "sourceType", "interpreter"],
    fields: {
      sourceType: {
        validate: (0, _utils.assertOneOf)("script", "module"),
        default: "script"
      },
      interpreter: {
        validate: (0, _utils.assertNodeType)("InterpreterDirective"),
        default: null,
        optional: true
      },
      directives: {
        validate: (0, _utils.arrayOfType)("Directive"),
        default: []
      },
      body: (0, _utils.validateArrayOfType)("Statement")
    },
    aliases: ["Scopable", "BlockParent", "Block"]
  });
  defineType("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement")
    }
  });
  defineType("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
    visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      kind: Object.assign({
        validate: (0, _utils.assertOneOf)("method", "get", "set")
      }, !process.env.BABEL_TYPES_8_BREAKING ? {
        default: "method"
      } : {}),
      computed: {
        default: false
      },
      key: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = function(node2, key, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key, val);
          };
          validator2.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"];
          return validator2;
        }()
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    }),
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });
  defineType("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", ...!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : []],
    fields: {
      computed: {
        default: false
      },
      key: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = Object.assign(function(node2, key, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key, val);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
          });
          return validator2;
        }()
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
      },
      shorthand: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node2, key, shorthand) {
          if (!shorthand) return;
          if (node2.computed) {
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
          }
          if (!(0, _is.default)("Identifier", node2.key)) {
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
          }
        }, {
          type: "boolean"
        })) : (0, _utils.assertValueType)("boolean"),
        default: false
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      }
    },
    visitor: ["decorators", "key", "value"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"],
    validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
      const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");
      const expression = (0, _utils.assertNodeType)("Expression");
      return function(parent, key, node2) {
        const validator2 = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;
        validator2(node2, "value", node2.value);
      };
    }()
  });
  defineType("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    builder: ["argument"],
    aliases: ["LVal", "PatternLike"],
    deprecatedAlias: "RestProperty",
    fields: Object.assign({}, patternLikeCommon(), {
      argument: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      }
    }),
    validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
      const match = /(\w+)\[(\d+)\]/.exec(key.toString());
      if (!match) throw new Error("Internal Babel error: malformed key.");
      const [, listKey, index] = match;
      if (parent[listKey].length > +index + 1) {
        throw new TypeError(`RestElement must be last element of ${listKey}`);
      }
    } : void 0
  });
  defineType("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("SequenceExpression", {
    visitor: ["expressions"],
    fields: {
      expressions: (0, _utils.validateArrayOfType)("Expression")
    },
    aliases: ["Expression"]
  });
  defineType("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      consequent: (0, _utils.validateArrayOfType)("Statement")
    }
  });
  defineType("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      cases: (0, _utils.validateArrayOfType)("SwitchCase")
    }
  });
  defineType("ThisExpression", {
    aliases: ["Expression"]
  });
  defineType("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      block: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node2) {
          if (!node2.handler && !node2.finalizer) {
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
          }
        }, {
          oneOfNodeTypes: ["BlockStatement"]
        })) : (0, _utils.assertNodeType)("BlockStatement")
      },
      handler: {
        optional: true,
        validate: (0, _utils.assertNodeType)("CatchClause")
      },
      finalizer: {
        optional: true,
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    }
  });
  defineType("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: true
      },
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });
  defineType("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: false
      },
      argument: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")
      },
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });
  defineType("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      kind: {
        validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using")
      },
      declarations: (0, _utils.validateArrayOfType)("VariableDeclarator")
    },
    validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
      const withoutInit = (0, _utils.assertNodeType)("Identifier", "Placeholder");
      const constOrLetOrVar = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "Placeholder");
      const usingOrAwaitUsing = withoutInit;
      return function(parent, key, node2) {
        const {
          kind,
          declarations
        } = node2;
        const parentIsForX = (0, _is.default)("ForXStatement", parent, {
          left: node2
        });
        if (parentIsForX) {
          if (declarations.length !== 1) {
            throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
          }
        }
        for (const decl of declarations) {
          if (kind === "const" || kind === "let" || kind === "var") {
            if (!parentIsForX && !decl.init) {
              withoutInit(decl, "id", decl.id);
            } else {
              constOrLetOrVar(decl, "id", decl.id);
            }
          } else {
            usingOrAwaitUsing(decl, "id", decl.id);
          }
        }
      };
    })() : void 0
  });
  defineType("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern")
      },
      definite: {
        optional: true,
        validate: (0, _utils.assertValueType)("boolean")
      },
      init: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("AssignmentPattern", {
    visitor: ["left", "right", "decorators"],
    builder: ["left", "right"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      left: {
        validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      }
    })
  });
  defineType("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    builder: ["elements"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal")))
      }
    })
  });
  defineType("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["typeParameters", "params", "predicate", "returnType", "body"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      expression: {
        validate: (0, _utils.assertValueType)("boolean")
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    })
  });
  defineType("ClassBody", {
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")
    }
  });
  defineType("ClassExpression", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"],
    aliases: ["Scopable", "Class", "Expression"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      },
      ["superTypeParameters"]: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      },
      implements: {
        validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      },
      mixins: {
        validate: (0, _utils.assertNodeType)("InterfaceExtends"),
        optional: true
      }
    }
  });
  defineType("ClassDeclaration", {
    inherits: "ClassExpression",
    aliases: ["Scopable", "Class", "Statement", "Declaration"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      },
      ["superTypeParameters"]: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      },
      implements: {
        validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      },
      mixins: {
        validate: (0, _utils.assertNodeType)("InterfaceExtends"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      abstract: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    },
    validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
      const identifier2 = (0, _utils.assertNodeType)("Identifier");
      return function(parent, key, node2) {
        if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
          identifier2(node2, "id", node2.id);
        }
      };
    }()
  });
  const importAttributes = core.importAttributes = {
    attributes: {
      optional: true,
      validate: (0, _utils.arrayOfType)("ImportAttribute")
    },
    assertions: {
      deprecated: true,
      optional: true,
      validate: (0, _utils.arrayOfType)("ImportAttribute")
    }
  };
  defineType("ExportAllDeclaration", {
    builder: ["source"],
    visitor: ["source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: Object.assign({
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    }, importAttributes)
  });
  defineType("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"),
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
    }
  });
  defineType("ExportNamedDeclaration", {
    builder: ["declaration", "specifiers", "source"],
    visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: Object.assign({
      declaration: {
        optional: true,
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node2, key, val) {
          if (val && node2.specifiers.length) {
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
          }
          if (val && node2.source) {
            throw new TypeError("Cannot export a declaration from a source");
          }
        }, {
          oneOfNodeTypes: ["Declaration"]
        })) : (0, _utils.assertNodeType)("Declaration")
      }
    }, importAttributes, {
      specifiers: {
        default: [],
        validate: (0, _utils.arrayOf)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
          const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
          return Object.assign(function(node2, key, val) {
            const validator2 = node2.source ? sourced : sourceless;
            validator2(node2, key, val);
          }, {
            oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"]
          });
        }())
      },
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral"),
        optional: true
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    })
  });
  defineType("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      exportKind: {
        validate: (0, _utils.assertOneOf)("type", "value"),
        optional: true
      }
    }
  });
  defineType("ForOfStatement", {
    visitor: ["left", "right", "body"],
    builder: ["left", "right", "body", "await"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          }
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration");
          const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return Object.assign(function(node2, key, val) {
            if ((0, _is.default)("VariableDeclaration", val)) {
              declaration(node2, key, val);
            } else {
              lval(node2, key, val);
            }
          }, {
            oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"]
          });
        }()
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      },
      await: {
        default: false
      }
    }
  });
  defineType("ImportDeclaration", {
    builder: ["specifiers", "source"],
    visitor: ["specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
    fields: Object.assign({}, importAttributes, {
      module: {
        optional: true,
        validate: (0, _utils.assertValueType)("boolean")
      },
      phase: {
        default: null,
        validate: (0, _utils.assertOneOf)("source", "defer")
      },
      specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"),
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      },
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
        optional: true
      }
    })
  });
  defineType("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("ImportSpecifier", {
    visitor: ["imported", "local"],
    builder: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      imported: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
        optional: true
      }
    }
  });
  defineType("ImportExpression", {
    visitor: ["source", "options"],
    aliases: ["Expression"],
    fields: {
      phase: {
        default: null,
        validate: (0, _utils.assertOneOf)("source", "defer")
      },
      source: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      options: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      meta: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node2, key, val) {
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
              break;
          }
          if (!(0, _is.default)("Identifier", node2.property, {
            name: property
          })) {
            throw new TypeError("Unrecognised MetaProperty");
          }
        }, {
          oneOfNodeTypes: ["Identifier"]
        })) : (0, _utils.assertNodeType)("Identifier")
      },
      property: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  const classMethodOrPropertyCommon = () => ({
    abstract: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    accessibility: {
      validate: (0, _utils.assertOneOf)("public", "private", "protected"),
      optional: true
    },
    static: {
      default: false
    },
    override: {
      default: false
    },
    computed: {
      default: false
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    key: {
      validate: (0, _utils.chain)(function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
        const computed = (0, _utils.assertNodeType)("Expression");
        return function(node2, key, val) {
          const validator2 = node2.computed ? computed : normal;
          validator2(node2, key, val);
        };
      }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
    }
  });
  core.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
  const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
    params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"),
    kind: {
      validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
      default: "method"
    },
    access: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
      optional: true
    },
    decorators: {
      validate: (0, _utils.arrayOfType)("Decorator"),
      optional: true
    }
  });
  core.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
  defineType("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
    visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
    fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    })
  });
  defineType("ObjectPattern", {
    visitor: ["decorators", "properties", "typeAnnotation"],
    builder: ["properties"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty")
    })
  });
  defineType("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    deprecatedAlias: "SpreadProperty",
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("Super", {
    aliases: ["Expression"]
  });
  defineType("TaggedTemplateExpression", {
    visitor: ["tag", "typeParameters", "quasi"],
    builder: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      quasi: {
        validate: (0, _utils.assertNodeType)("TemplateLiteral")
      },
      ["typeParameters"]: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {
        validate: (0, _utils.chain)((0, _utils.assertShape)({
          raw: {
            validate: (0, _utils.assertValueType)("string")
          },
          cooked: {
            validate: (0, _utils.assertValueType)("string"),
            optional: true
          }
        }), function templateElementCookedValidator(node2) {
          const raw = node2.value.raw;
          let unterminatedCalled = false;
          const error2 = () => {
            throw new Error("Internal @babel/types error.");
          };
          const {
            str,
            firstInvalidLoc
          } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {
            unterminated() {
              unterminatedCalled = true;
            },
            strictNumericEscape: error2,
            invalidEscapeSequence: error2,
            numericSeparatorInEscapeSequence: error2,
            unexpectedNumericSeparator: error2,
            invalidDigit: error2,
            invalidCodePoint: error2
          });
          if (!unterminatedCalled) throw new Error("Invalid raw");
          node2.value.cooked = firstInvalidLoc ? null : str;
        })
      },
      tail: {
        default: false
      }
    }
  });
  defineType("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: (0, _utils.validateArrayOfType)("TemplateElement"),
      expressions: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node2, key, val) {
          if (node2.quasis.length !== val.length + 1) {
            throw new TypeError(`Number of ${node2.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node2.quasis.length}`);
          }
        })
      }
    }
  });
  defineType("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node2, key, val) {
          if (val && !node2.argument) {
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
          }
        }, {
          type: "boolean"
        })) : (0, _utils.assertValueType)("boolean"),
        default: false
      },
      argument: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("Import", {
    aliases: ["Expression"]
  });
  defineType("BigIntLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("OptionalMemberExpression", {
    builder: ["object", "property", "computed", "optional"],
    visitor: ["object", "property"],
    aliases: ["Expression"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      property: {
        validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator2 = Object.assign(function(node2, key, val) {
            const validator3 = node2.computed ? computed : normal;
            validator3(node2, key, val);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier"]
          });
          return validator2;
        }()
      },
      computed: {
        default: false
      },
      optional: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
      }
    }
  });
  defineType("OptionalCallExpression", {
    visitor: ["callee", "typeParameters", "typeArguments", "arguments"],
    builder: ["callee", "arguments", "optional"],
    aliases: ["Expression"],
    fields: Object.assign({
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
      optional: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
      },
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      }
    }, {
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    })
  });
  defineType("ClassProperty", {
    visitor: ["decorators", "variance", "key", "typeAnnotation", "value"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property"],
    fields: Object.assign({}, classMethodOrPropertyCommon(), {
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    })
  });
  defineType("ClassAccessorProperty", {
    visitor: ["decorators", "key", "typeAnnotation", "value"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property", "Accessor"],
    fields: Object.assign({}, classMethodOrPropertyCommon(), {
      key: {
        validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          return function(node2, key, val) {
            const validator2 = node2.computed ? computed : normal;
            validator2(node2, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    })
  });
  defineType("ClassPrivateProperty", {
    visitor: ["decorators", "variance", "key", "typeAnnotation", "value"],
    builder: ["key", "value", "decorators", "static"],
    aliases: ["Property", "Private"],
    fields: {
      key: {
        validate: (0, _utils.assertNodeType)("PrivateName")
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      },
      static: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      optional: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    }
  });
  defineType("ClassPrivateMethod", {
    builder: ["kind", "key", "params", "body", "static"],
    visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
    fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
      kind: {
        validate: (0, _utils.assertOneOf)("get", "set", "method"),
        default: "method"
      },
      key: {
        validate: (0, _utils.assertNodeType)("PrivateName")
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    })
  });
  defineType("PrivateName", {
    visitor: ["id"],
    aliases: ["Private"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("StaticBlock", {
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("Statement")
    },
    aliases: ["Scopable", "BlockParent", "FunctionParent"]
  });
  defineType("ImportAttribute", {
    visitor: ["key", "value"],
    fields: {
      key: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      value: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      }
    }
  });
  return core;
}
var flow$1 = {};
var hasRequiredFlow$1;
function requireFlow$1() {
  if (hasRequiredFlow$1) return flow$1;
  hasRequiredFlow$1 = 1;
  var _core = requireCore();
  var _utils = requireUtils$1();
  const defineType = (0, _utils.defineAliasedType)("Flow");
  const defineInterfaceishType = (name) => {
    const isDeclareClass = name === "DeclareClass";
    defineType(name, {
      builder: ["id", "typeParameters", "extends", "body"],
      visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))
      }, isDeclareClass ? {
        mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
        implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))
      } : {}, {
        body: (0, _utils.validateType)("ObjectTypeAnnotation")
      })
    });
  };
  defineType("AnyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["FlowType"],
    fields: {
      elementType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("BooleanTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("BooleanLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("NullLiteralTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ClassImplements", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineInterfaceishType("DeclareClass");
  defineType("DeclareFunction", {
    builder: ["id"],
    visitor: ["id", "predicate"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
    }
  });
  defineInterfaceishType("DeclareInterface");
  defineType("DeclareModule", {
    builder: ["id", "body", "kind"],
    visitor: ["id", "body"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier", "StringLiteral"),
      body: (0, _utils.validateType)("BlockStatement"),
      kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
    }
  });
  defineType("DeclareModuleExports", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
    }
  });
  defineType("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("DeclareOpaqueType", {
    visitor: ["id", "typeParameters", "supertype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, _utils.validateOptionalType)("FlowType"),
      impltype: (0, _utils.validateOptionalType)("FlowType")
    }
  });
  defineType("DeclareVariable", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("DeclareExportDeclaration", {
    visitor: ["declaration", "specifiers", "source", "attributes"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: Object.assign({
      declaration: (0, _utils.validateOptionalType)("Flow"),
      specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")),
      source: (0, _utils.validateOptionalType)("StringLiteral"),
      default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }, _core.importAttributes)
  });
  defineType("DeclareExportAllDeclaration", {
    visitor: ["source", "attributes"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: Object.assign({
      source: (0, _utils.validateType)("StringLiteral"),
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    }, _core.importAttributes)
  });
  defineType("DeclaredPredicate", {
    visitor: ["value"],
    aliases: ["FlowPredicate"],
    fields: {
      value: (0, _utils.validateType)("Flow")
    }
  });
  defineType("ExistsTypeAnnotation", {
    aliases: ["FlowType"]
  });
  defineType("FunctionTypeAnnotation", {
    builder: ["typeParameters", "params", "rest", "returnType"],
    visitor: ["typeParameters", "this", "params", "rest", "returnType"],
    aliases: ["FlowType"],
    fields: {
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      params: (0, _utils.validateArrayOfType)("FunctionTypeParam"),
      rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
      this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
      returnType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    fields: {
      name: (0, _utils.validateOptionalType)("Identifier"),
      typeAnnotation: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["FlowType"],
    fields: {
      id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineType("InferredPredicate", {
    aliases: ["FlowPredicate"]
  });
  defineType("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineInterfaceishType("InterfaceDeclaration");
  defineType("InterfaceTypeAnnotation", {
    visitor: ["extends", "body"],
    aliases: ["FlowType"],
    fields: {
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      body: (0, _utils.validateType)("ObjectTypeAnnotation")
    }
  });
  defineType("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("MixedTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("EmptyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowType"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("NumberLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
    }
  });
  defineType("NumberTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties", "internalSlots"],
    aliases: ["FlowType"],
    builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
    fields: {
      properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")),
      indexers: {
        validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
        optional: true,
        default: []
      },
      callProperties: {
        validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
        optional: true,
        default: []
      },
      internalSlots: {
        validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
        optional: true,
        default: []
      },
      exact: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      },
      inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeInternalSlot", {
    visitor: ["id", "value"],
    builder: ["id", "value", "optional", "static", "method"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      value: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["UserWhitespacable"],
    fields: {
      value: (0, _utils.validateType)("FlowType"),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeIndexer", {
    visitor: ["variance", "id", "key", "value"],
    builder: ["id", "key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, _utils.validateOptionalType)("Identifier"),
      key: (0, _utils.validateType)("FlowType"),
      value: (0, _utils.validateType)("FlowType"),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      variance: (0, _utils.validateOptionalType)("Variance")
    }
  });
  defineType("ObjectTypeProperty", {
    visitor: ["key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      key: (0, _utils.validateType)("Identifier", "StringLiteral"),
      value: (0, _utils.validateType)("FlowType"),
      kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      variance: (0, _utils.validateOptionalType)("Variance"),
      method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeSpreadProperty", {
    visitor: ["argument"],
    aliases: ["UserWhitespacable"],
    fields: {
      argument: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("OpaqueType", {
    visitor: ["id", "typeParameters", "supertype", "impltype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, _utils.validateOptionalType)("FlowType"),
      impltype: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("QualifiedTypeIdentifier", {
    visitor: ["qualification", "id"],
    builder: ["id", "qualification"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier")
    }
  });
  defineType("StringLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
    }
  });
  defineType("StringTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("SymbolTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ThisTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["FlowType"],
    fields: {
      argument: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["ExpressionWrapper", "Expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
    }
  });
  defineType("TypeParameter", {
    visitor: ["bound", "default", "variance"],
    fields: {
      name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
      bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
      default: (0, _utils.validateOptionalType)("FlowType"),
      variance: (0, _utils.validateOptionalType)("Variance")
    }
  });
  defineType("TypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
    }
  });
  defineType("TypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("Variance", {
    builder: ["kind"],
    fields: {
      kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
    }
  });
  defineType("VoidTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("EnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody")
    }
  });
  defineType("EnumBooleanBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumNumberBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumStringBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumSymbolBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumBooleanMember", {
    aliases: ["EnumMember"],
    builder: ["id"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("BooleanLiteral")
    }
  });
  defineType("EnumNumberMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("NumericLiteral")
    }
  });
  defineType("EnumStringMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("StringLiteral")
    }
  });
  defineType("EnumDefaultedMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("IndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, _utils.validateType)("FlowType"),
      indexType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("OptionalIndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, _utils.validateType)("FlowType"),
      indexType: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  return flow$1;
}
var jsx$1 = {};
var hasRequiredJsx$1;
function requireJsx$1() {
  if (hasRequiredJsx$1) return jsx$1;
  hasRequiredJsx$1 = 1;
  var _utils = requireUtils$1();
  const defineType = (0, _utils.defineAliasedType)("JSX");
  defineType("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
      },
      value: {
        optional: true,
        validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });
  defineType("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      }
    }
  });
  defineType("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["Immutable", "Expression"],
    fields: Object.assign({
      openingElement: {
        validate: (0, _utils.assertNodeType)("JSXOpeningElement")
      },
      closingElement: {
        optional: true,
        validate: (0, _utils.assertNodeType)("JSXClosingElement")
      },
      children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
    }, {
      selfClosing: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    })
  });
  defineType("JSXEmptyExpression", {});
  defineType("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
      }
    }
  });
  defineType("JSXSpreadChild", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("JSXIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("JSXMemberExpression", {
    visitor: ["object", "property"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
      },
      property: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      }
    }
  });
  defineType("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    fields: {
      namespace: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      },
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      }
    }
  });
  defineType("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "typeParameters", "typeArguments", "attributes"],
    aliases: ["Immutable"],
    fields: Object.assign({
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      },
      selfClosing: {
        default: false
      },
      attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"),
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      }
    }, {
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    })
  });
  defineType("JSXSpreadAttribute", {
    visitor: ["argument"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("JSXText", {
    aliases: ["Immutable"],
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("JSXFragment", {
    builder: ["openingFragment", "closingFragment", "children"],
    visitor: ["openingFragment", "children", "closingFragment"],
    aliases: ["Immutable", "Expression"],
    fields: {
      openingFragment: {
        validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
      },
      closingFragment: {
        validate: (0, _utils.assertNodeType)("JSXClosingFragment")
      },
      children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
    }
  });
  defineType("JSXOpeningFragment", {
    aliases: ["Immutable"]
  });
  defineType("JSXClosingFragment", {
    aliases: ["Immutable"]
  });
  return jsx$1;
}
var misc = {};
var placeholders = {};
var hasRequiredPlaceholders;
function requirePlaceholders() {
  if (hasRequiredPlaceholders) return placeholders;
  hasRequiredPlaceholders = 1;
  Object.defineProperty(placeholders, "__esModule", {
    value: true
  });
  placeholders.PLACEHOLDERS_FLIPPED_ALIAS = placeholders.PLACEHOLDERS_ALIAS = placeholders.PLACEHOLDERS = void 0;
  var _utils = requireUtils$1();
  const PLACEHOLDERS = placeholders.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
  const PLACEHOLDERS_ALIAS = placeholders.PLACEHOLDERS_ALIAS = {
    Declaration: ["Statement"],
    Pattern: ["PatternLike", "LVal"]
  };
  for (const type of PLACEHOLDERS) {
    const alias = _utils.ALIAS_KEYS[type];
    if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
  }
  const PLACEHOLDERS_FLIPPED_ALIAS = placeholders.PLACEHOLDERS_FLIPPED_ALIAS = {};
  Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
    PLACEHOLDERS_ALIAS[type].forEach((alias) => {
      if (!hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
        PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
      }
      PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
    });
  });
  return placeholders;
}
var hasRequiredMisc;
function requireMisc() {
  if (hasRequiredMisc) return misc;
  hasRequiredMisc = 1;
  var _utils = requireUtils$1();
  var _placeholders = requirePlaceholders();
  var _core = requireCore();
  const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
  {
    defineType("Noop", {
      visitor: []
    });
  }
  defineType("Placeholder", {
    visitor: [],
    builder: ["expectedNode", "name"],
    fields: Object.assign({
      name: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      expectedNode: {
        validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
      }
    }, (0, _core.patternLikeCommon)())
  });
  defineType("V8IntrinsicIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  return misc;
}
var experimental = {};
var hasRequiredExperimental;
function requireExperimental() {
  if (hasRequiredExperimental) return experimental;
  hasRequiredExperimental = 1;
  var _utils = requireUtils$1();
  (0, _utils.default)("ArgumentPlaceholder", {});
  (0, _utils.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: !process.env.BABEL_TYPES_8_BREAKING ? {
      object: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      },
      callee: {
        validate: Object.assign(() => {
        }, {
          oneOfNodeTypes: ["Expression"]
        })
      }
    } : {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  (0, _utils.default)("Decorator", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  (0, _utils.default)("DoExpression", {
    visitor: ["body"],
    builder: ["body", "async"],
    aliases: ["Expression"],
    fields: {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      async: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      }
    }
  });
  (0, _utils.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  (0, _utils.default)("RecordExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement")
    }
  });
  (0, _utils.default)("TupleExpression", {
    fields: {
      elements: {
        validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"),
        default: []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  {
    (0, _utils.default)("DecimalLiteral", {
      builder: ["value"],
      fields: {
        value: {
          validate: (0, _utils.assertValueType)("string")
        }
      },
      aliases: ["Expression", "Pureish", "Literal", "Immutable"]
    });
  }
  (0, _utils.default)("ModuleExpression", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.assertNodeType)("Program")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("TopicReference", {
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelineTopicExpression", {
    builder: ["expression"],
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelineBareFunction", {
    builder: ["callee"],
    visitor: ["callee"],
    fields: {
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelinePrimaryTopicReference", {
    aliases: ["Expression"]
  });
  return experimental;
}
var typescript$2 = {};
var hasRequiredTypescript$1;
function requireTypescript$1() {
  if (hasRequiredTypescript$1) return typescript$2;
  hasRequiredTypescript$1 = 1;
  var _utils = requireUtils$1();
  var _core = requireCore();
  var _is = requireIs();
  const defineType = (0, _utils.defineAliasedType)("TypeScript");
  const bool = (0, _utils.assertValueType)("boolean");
  const tSFunctionTypeAnnotationCommon = () => ({
    returnType: {
      validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
      optional: true
    }
  });
  defineType("TSParameterProperty", {
    aliases: ["LVal"],
    visitor: ["parameter"],
    fields: {
      accessibility: {
        validate: (0, _utils.assertOneOf)("public", "private", "protected"),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      parameter: {
        validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
      },
      override: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.arrayOfType)("Decorator"),
        optional: true
      }
    }
  });
  defineType("TSDeclareFunction", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
  });
  defineType("TSDeclareMethod", {
    visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
  });
  defineType("TSQualifiedName", {
    aliases: ["TSEntityName"],
    visitor: ["left", "right"],
    fields: {
      left: (0, _utils.validateType)("TSEntityName"),
      right: (0, _utils.validateType)("Identifier")
    }
  });
  const signatureDeclarationCommon = () => ({
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    ["parameters"]: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"),
    ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")
  });
  const callConstructSignatureDeclaration = {
    aliases: ["TSTypeElement"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"],
    fields: signatureDeclarationCommon()
  };
  defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
  defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
  const namedTypeElementCommon = () => ({
    key: (0, _utils.validateType)("Expression"),
    computed: {
      default: false
    },
    optional: (0, _utils.validateOptional)(bool)
  });
  defineType("TSPropertySignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeAnnotation"],
    fields: Object.assign({}, namedTypeElementCommon(), {
      readonly: (0, _utils.validateOptional)(bool),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
      kind: {
        optional: true,
        validate: (0, _utils.assertOneOf)("get", "set")
      }
    })
  });
  defineType("TSMethodSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
    fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), {
      kind: {
        validate: (0, _utils.assertOneOf)("method", "get", "set")
      }
    })
  });
  defineType("TSIndexSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["parameters", "typeAnnotation"],
    fields: {
      readonly: (0, _utils.validateOptional)(bool),
      static: (0, _utils.validateOptional)(bool),
      parameters: (0, _utils.validateArrayOfType)("Identifier"),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
    }
  });
  const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
  for (const type of tsKeywordTypes) {
    defineType(type, {
      aliases: ["TSType", "TSBaseType"],
      visitor: [],
      fields: {}
    });
  }
  defineType("TSThisType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: {}
  });
  const fnOrCtrBase = {
    aliases: ["TSType"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"]
  };
  defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, {
    fields: signatureDeclarationCommon()
  }));
  defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, {
    fields: Object.assign({}, signatureDeclarationCommon(), {
      abstract: (0, _utils.validateOptional)(bool)
    })
  }));
  defineType("TSTypeReference", {
    aliases: ["TSType"],
    visitor: ["typeName", "typeParameters"],
    fields: {
      typeName: (0, _utils.validateType)("TSEntityName"),
      ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSTypePredicate", {
    aliases: ["TSType"],
    visitor: ["parameterName", "typeAnnotation"],
    builder: ["parameterName", "typeAnnotation", "asserts"],
    fields: {
      parameterName: (0, _utils.validateType)("Identifier", "TSThisType"),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
      asserts: (0, _utils.validateOptional)(bool)
    }
  });
  defineType("TSTypeQuery", {
    aliases: ["TSType"],
    visitor: ["exprName", "typeParameters"],
    fields: {
      exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"),
      ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSTypeLiteral", {
    aliases: ["TSType"],
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("TSTypeElement")
    }
  });
  defineType("TSArrayType", {
    aliases: ["TSType"],
    visitor: ["elementType"],
    fields: {
      elementType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSTupleType", {
    aliases: ["TSType"],
    visitor: ["elementTypes"],
    fields: {
      elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember")
    }
  });
  defineType("TSOptionalType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSRestType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSNamedTupleMember", {
    visitor: ["label", "elementType"],
    builder: ["label", "elementType", "optional"],
    fields: {
      label: (0, _utils.validateType)("Identifier"),
      optional: {
        validate: bool,
        default: false
      },
      elementType: (0, _utils.validateType)("TSType")
    }
  });
  const unionOrIntersection = {
    aliases: ["TSType"],
    visitor: ["types"],
    fields: {
      types: (0, _utils.validateArrayOfType)("TSType")
    }
  };
  defineType("TSUnionType", unionOrIntersection);
  defineType("TSIntersectionType", unionOrIntersection);
  defineType("TSConditionalType", {
    aliases: ["TSType"],
    visitor: ["checkType", "extendsType", "trueType", "falseType"],
    fields: {
      checkType: (0, _utils.validateType)("TSType"),
      extendsType: (0, _utils.validateType)("TSType"),
      trueType: (0, _utils.validateType)("TSType"),
      falseType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSInferType", {
    aliases: ["TSType"],
    visitor: ["typeParameter"],
    fields: {
      typeParameter: (0, _utils.validateType)("TSTypeParameter")
    }
  });
  defineType("TSParenthesizedType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSTypeOperator", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSIndexedAccessType", {
    aliases: ["TSType"],
    visitor: ["objectType", "indexType"],
    fields: {
      objectType: (0, _utils.validateType)("TSType"),
      indexType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSMappedType", {
    aliases: ["TSType"],
    visitor: ["typeParameter", "nameType", "typeAnnotation"],
    builder: ["typeParameter", "typeAnnotation", "nameType"],
    fields: Object.assign({}, {
      typeParameter: (0, _utils.validateType)("TSTypeParameter")
    }, {
      readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
      optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
      typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
      nameType: (0, _utils.validateOptionalType)("TSType")
    })
  });
  defineType("TSTemplateLiteralType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: ["quasis", "types"],
    fields: {
      quasis: (0, _utils.validateArrayOfType)("TemplateElement"),
      types: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")), function(node2, key, val) {
          if (node2.quasis.length !== val.length + 1) {
            throw new TypeError(`Number of ${node2.type} quasis should be exactly one more than the number of types.
Expected ${val.length + 1} quasis but got ${node2.quasis.length}`);
          }
        })
      }
    }
  });
  defineType("TSLiteralType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: ["literal"],
    fields: {
      literal: {
        validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
          const unaryOperator = (0, _utils.assertOneOf)("-");
          const literal2 = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator2(parent, key, node2) {
            if ((0, _is.default)("UnaryExpression", node2)) {
              unaryOperator(node2, "operator", node2.operator);
              unaryExpression(node2, "argument", node2.argument);
            } else {
              literal2(parent, key, node2);
            }
          }
          validator2.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];
          return validator2;
        }()
      }
    }
  });
  {
    defineType("TSExpressionWithTypeArguments", {
      aliases: ["TSType"],
      visitor: ["expression", "typeParameters"],
      fields: {
        expression: (0, _utils.validateType)("TSEntityName"),
        typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
      }
    });
  }
  defineType("TSInterfaceDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "extends", "body"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
      body: (0, _utils.validateType)("TSInterfaceBody")
    }
  });
  defineType("TSInterfaceBody", {
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("TSTypeElement")
    }
  });
  defineType("TSTypeAliasDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "typeAnnotation"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSInstantiationExpression", {
    aliases: ["Expression"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  const TSTypeExpression = {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression", "typeAnnotation"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  };
  defineType("TSAsExpression", TSTypeExpression);
  defineType("TSSatisfiesExpression", TSTypeExpression);
  defineType("TSTypeAssertion", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["typeAnnotation", "expression"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType"),
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSEnumBody", {
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("TSEnumMember")
    }
  });
  {
    defineType("TSEnumDeclaration", {
      aliases: ["Statement", "Declaration"],
      visitor: ["id", "members"],
      fields: {
        declare: (0, _utils.validateOptional)(bool),
        const: (0, _utils.validateOptional)(bool),
        id: (0, _utils.validateType)("Identifier"),
        members: (0, _utils.validateArrayOfType)("TSEnumMember"),
        initializer: (0, _utils.validateOptionalType)("Expression"),
        body: (0, _utils.validateOptionalType)("TSEnumBody")
      }
    });
  }
  defineType("TSEnumMember", {
    visitor: ["id", "initializer"],
    fields: {
      id: (0, _utils.validateType)("Identifier", "StringLiteral"),
      initializer: (0, _utils.validateOptionalType)("Expression")
    }
  });
  defineType("TSModuleDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: Object.assign({
      kind: {
        validate: (0, _utils.assertOneOf)("global", "module", "namespace")
      },
      declare: (0, _utils.validateOptional)(bool)
    }, {
      global: (0, _utils.validateOptional)(bool)
    }, {
      id: (0, _utils.validateType)("Identifier", "StringLiteral"),
      body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration")
    })
  });
  defineType("TSModuleBlock", {
    aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("Statement")
    }
  });
  defineType("TSImportType", {
    aliases: ["TSType"],
    builder: ["argument", "qualifier", "typeParameters"],
    visitor: ["argument", "options", "qualifier", "typeParameters"],
    fields: {
      argument: (0, _utils.validateType)("StringLiteral"),
      qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
      ["typeParameters"]: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"),
      options: {
        validate: (0, _utils.assertNodeType)("ObjectExpression"),
        optional: true
      }
    }
  });
  defineType("TSImportEqualsDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "moduleReference"],
    fields: Object.assign({}, {
      isExport: (0, _utils.validate)(bool)
    }, {
      id: (0, _utils.validateType)("Identifier"),
      moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"),
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "value"),
        optional: true
      }
    })
  });
  defineType("TSExternalModuleReference", {
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("StringLiteral")
    }
  });
  defineType("TSNonNullExpression", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSExportAssignment", {
    aliases: ["Statement"],
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSNamespaceExportDeclaration", {
    aliases: ["Statement"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("TSTypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TSType")
      }
    }
  });
  defineType("TSTypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validateArrayOfType)("TSType")
    }
  });
  defineType("TSTypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validateArrayOfType)("TSTypeParameter")
    }
  });
  defineType("TSTypeParameter", {
    builder: ["constraint", "default", "name"],
    visitor: ["constraint", "default"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      },
      in: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      out: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      const: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      constraint: {
        validate: (0, _utils.assertNodeType)("TSType"),
        optional: true
      },
      default: {
        validate: (0, _utils.assertNodeType)("TSType"),
        optional: true
      }
    }
  });
  return typescript$2;
}
var deprecatedAliases = {};
var hasRequiredDeprecatedAliases;
function requireDeprecatedAliases() {
  if (hasRequiredDeprecatedAliases) return deprecatedAliases;
  hasRequiredDeprecatedAliases = 1;
  Object.defineProperty(deprecatedAliases, "__esModule", {
    value: true
  });
  deprecatedAliases.DEPRECATED_ALIASES = void 0;
  deprecatedAliases.DEPRECATED_ALIASES = {
    ModuleDeclaration: "ImportOrExportDeclaration"
  };
  return deprecatedAliases;
}
var hasRequiredDefinitions;
function requireDefinitions() {
  if (hasRequiredDefinitions) return definitions;
  hasRequiredDefinitions = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "ALIAS_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports2, "BUILDER_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.BUILDER_KEYS;
      }
    });
    Object.defineProperty(exports2, "DEPRECATED_ALIASES", {
      enumerable: true,
      get: function() {
        return _deprecatedAliases.DEPRECATED_ALIASES;
      }
    });
    Object.defineProperty(exports2, "DEPRECATED_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.DEPRECATED_KEYS;
      }
    });
    Object.defineProperty(exports2, "FLIPPED_ALIAS_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.FLIPPED_ALIAS_KEYS;
      }
    });
    Object.defineProperty(exports2, "NODE_FIELDS", {
      enumerable: true,
      get: function() {
        return _utils.NODE_FIELDS;
      }
    });
    Object.defineProperty(exports2, "NODE_PARENT_VALIDATIONS", {
      enumerable: true,
      get: function() {
        return _utils.NODE_PARENT_VALIDATIONS;
      }
    });
    Object.defineProperty(exports2, "PLACEHOLDERS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS;
      }
    });
    Object.defineProperty(exports2, "PLACEHOLDERS_ALIAS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_ALIAS;
      }
    });
    Object.defineProperty(exports2, "PLACEHOLDERS_FLIPPED_ALIAS", {
      enumerable: true,
      get: function() {
        return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
      }
    });
    exports2.TYPES = void 0;
    Object.defineProperty(exports2, "VISITOR_KEYS", {
      enumerable: true,
      get: function() {
        return _utils.VISITOR_KEYS;
      }
    });
    requireCore();
    requireFlow$1();
    requireJsx$1();
    requireMisc();
    requireExperimental();
    requireTypescript$1();
    var _utils = requireUtils$1();
    var _placeholders = requirePlaceholders();
    var _deprecatedAliases = requireDeprecatedAliases();
    Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
      _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
    });
    for (const {
      types: types2,
      set
    } of _utils.allExpandedTypes) {
      for (const type of types2) {
        const aliases = _utils.FLIPPED_ALIAS_KEYS[type];
        if (aliases) {
          aliases.forEach(set.add, set);
        } else {
          set.add(type);
        }
      }
    }
    exports2.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
  })(definitions);
  return definitions;
}
var hasRequiredValidate;
function requireValidate() {
  if (hasRequiredValidate) return validate;
  hasRequiredValidate = 1;
  Object.defineProperty(validate, "__esModule", {
    value: true
  });
  validate.default = validate$1;
  validate.validateChild = validateChild;
  validate.validateField = validateField;
  validate.validateInternal = validateInternal;
  var _index = requireDefinitions();
  function validate$1(node2, key, val) {
    if (!node2) return;
    const fields = _index.NODE_FIELDS[node2.type];
    if (!fields) return;
    const field = fields[key];
    validateField(node2, key, val, field);
    validateChild(node2, key, val);
  }
  function validateInternal(field, node2, key, val, maybeNode) {
    if (!(field != null && field.validate)) return;
    if (field.optional && val == null) return;
    field.validate(node2, key, val);
    if (maybeNode) {
      var _NODE_PARENT_VALIDATI;
      const type = val.type;
      if (type == null) return;
      (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node2, key, val);
    }
  }
  function validateField(node2, key, val, field) {
    if (!(field != null && field.validate)) return;
    if (field.optional && val == null) return;
    field.validate(node2, key, val);
  }
  function validateChild(node2, key, val) {
    var _NODE_PARENT_VALIDATI2;
    const type = val == null ? void 0 : val.type;
    if (type == null) return;
    (_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node2, key, val);
  }
  return validate;
}
var hasRequiredLowercase;
function requireLowercase() {
  if (hasRequiredLowercase) return lowercase;
  hasRequiredLowercase = 1;
  Object.defineProperty(lowercase, "__esModule", {
    value: true
  });
  lowercase.anyTypeAnnotation = anyTypeAnnotation;
  lowercase.argumentPlaceholder = argumentPlaceholder;
  lowercase.arrayExpression = arrayExpression;
  lowercase.arrayPattern = arrayPattern;
  lowercase.arrayTypeAnnotation = arrayTypeAnnotation;
  lowercase.arrowFunctionExpression = arrowFunctionExpression;
  lowercase.assignmentExpression = assignmentExpression;
  lowercase.assignmentPattern = assignmentPattern;
  lowercase.awaitExpression = awaitExpression;
  lowercase.bigIntLiteral = bigIntLiteral;
  lowercase.binaryExpression = binaryExpression;
  lowercase.bindExpression = bindExpression;
  lowercase.blockStatement = blockStatement;
  lowercase.booleanLiteral = booleanLiteral;
  lowercase.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
  lowercase.booleanTypeAnnotation = booleanTypeAnnotation;
  lowercase.breakStatement = breakStatement;
  lowercase.callExpression = callExpression;
  lowercase.catchClause = catchClause;
  lowercase.classAccessorProperty = classAccessorProperty;
  lowercase.classBody = classBody;
  lowercase.classDeclaration = classDeclaration;
  lowercase.classExpression = classExpression;
  lowercase.classImplements = classImplements;
  lowercase.classMethod = classMethod;
  lowercase.classPrivateMethod = classPrivateMethod;
  lowercase.classPrivateProperty = classPrivateProperty;
  lowercase.classProperty = classProperty;
  lowercase.conditionalExpression = conditionalExpression;
  lowercase.continueStatement = continueStatement;
  lowercase.debuggerStatement = debuggerStatement;
  lowercase.decimalLiteral = decimalLiteral;
  lowercase.declareClass = declareClass;
  lowercase.declareExportAllDeclaration = declareExportAllDeclaration;
  lowercase.declareExportDeclaration = declareExportDeclaration;
  lowercase.declareFunction = declareFunction;
  lowercase.declareInterface = declareInterface;
  lowercase.declareModule = declareModule;
  lowercase.declareModuleExports = declareModuleExports;
  lowercase.declareOpaqueType = declareOpaqueType;
  lowercase.declareTypeAlias = declareTypeAlias;
  lowercase.declareVariable = declareVariable;
  lowercase.declaredPredicate = declaredPredicate;
  lowercase.decorator = decorator;
  lowercase.directive = directive;
  lowercase.directiveLiteral = directiveLiteral;
  lowercase.doExpression = doExpression;
  lowercase.doWhileStatement = doWhileStatement;
  lowercase.emptyStatement = emptyStatement;
  lowercase.emptyTypeAnnotation = emptyTypeAnnotation;
  lowercase.enumBooleanBody = enumBooleanBody;
  lowercase.enumBooleanMember = enumBooleanMember;
  lowercase.enumDeclaration = enumDeclaration;
  lowercase.enumDefaultedMember = enumDefaultedMember;
  lowercase.enumNumberBody = enumNumberBody;
  lowercase.enumNumberMember = enumNumberMember;
  lowercase.enumStringBody = enumStringBody;
  lowercase.enumStringMember = enumStringMember;
  lowercase.enumSymbolBody = enumSymbolBody;
  lowercase.existsTypeAnnotation = existsTypeAnnotation;
  lowercase.exportAllDeclaration = exportAllDeclaration;
  lowercase.exportDefaultDeclaration = exportDefaultDeclaration;
  lowercase.exportDefaultSpecifier = exportDefaultSpecifier;
  lowercase.exportNamedDeclaration = exportNamedDeclaration;
  lowercase.exportNamespaceSpecifier = exportNamespaceSpecifier;
  lowercase.exportSpecifier = exportSpecifier;
  lowercase.expressionStatement = expressionStatement;
  lowercase.file = file2;
  lowercase.forInStatement = forInStatement;
  lowercase.forOfStatement = forOfStatement;
  lowercase.forStatement = forStatement;
  lowercase.functionDeclaration = functionDeclaration;
  lowercase.functionExpression = functionExpression;
  lowercase.functionTypeAnnotation = functionTypeAnnotation;
  lowercase.functionTypeParam = functionTypeParam;
  lowercase.genericTypeAnnotation = genericTypeAnnotation;
  lowercase.identifier = identifier2;
  lowercase.ifStatement = ifStatement;
  lowercase.import = _import;
  lowercase.importAttribute = importAttribute;
  lowercase.importDeclaration = importDeclaration;
  lowercase.importDefaultSpecifier = importDefaultSpecifier;
  lowercase.importExpression = importExpression;
  lowercase.importNamespaceSpecifier = importNamespaceSpecifier;
  lowercase.importSpecifier = importSpecifier;
  lowercase.indexedAccessType = indexedAccessType;
  lowercase.inferredPredicate = inferredPredicate;
  lowercase.interfaceDeclaration = interfaceDeclaration;
  lowercase.interfaceExtends = interfaceExtends;
  lowercase.interfaceTypeAnnotation = interfaceTypeAnnotation;
  lowercase.interpreterDirective = interpreterDirective;
  lowercase.intersectionTypeAnnotation = intersectionTypeAnnotation;
  lowercase.jSXAttribute = lowercase.jsxAttribute = jsxAttribute;
  lowercase.jSXClosingElement = lowercase.jsxClosingElement = jsxClosingElement;
  lowercase.jSXClosingFragment = lowercase.jsxClosingFragment = jsxClosingFragment;
  lowercase.jSXElement = lowercase.jsxElement = jsxElement;
  lowercase.jSXEmptyExpression = lowercase.jsxEmptyExpression = jsxEmptyExpression;
  lowercase.jSXExpressionContainer = lowercase.jsxExpressionContainer = jsxExpressionContainer;
  lowercase.jSXFragment = lowercase.jsxFragment = jsxFragment;
  lowercase.jSXIdentifier = lowercase.jsxIdentifier = jsxIdentifier;
  lowercase.jSXMemberExpression = lowercase.jsxMemberExpression = jsxMemberExpression;
  lowercase.jSXNamespacedName = lowercase.jsxNamespacedName = jsxNamespacedName;
  lowercase.jSXOpeningElement = lowercase.jsxOpeningElement = jsxOpeningElement;
  lowercase.jSXOpeningFragment = lowercase.jsxOpeningFragment = jsxOpeningFragment;
  lowercase.jSXSpreadAttribute = lowercase.jsxSpreadAttribute = jsxSpreadAttribute;
  lowercase.jSXSpreadChild = lowercase.jsxSpreadChild = jsxSpreadChild;
  lowercase.jSXText = lowercase.jsxText = jsxText;
  lowercase.labeledStatement = labeledStatement;
  lowercase.logicalExpression = logicalExpression;
  lowercase.memberExpression = memberExpression;
  lowercase.metaProperty = metaProperty;
  lowercase.mixedTypeAnnotation = mixedTypeAnnotation;
  lowercase.moduleExpression = moduleExpression;
  lowercase.newExpression = newExpression;
  lowercase.noop = noop;
  lowercase.nullLiteral = nullLiteral;
  lowercase.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
  lowercase.nullableTypeAnnotation = nullableTypeAnnotation;
  lowercase.numberLiteral = NumberLiteral;
  lowercase.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
  lowercase.numberTypeAnnotation = numberTypeAnnotation;
  lowercase.numericLiteral = numericLiteral;
  lowercase.objectExpression = objectExpression;
  lowercase.objectMethod = objectMethod;
  lowercase.objectPattern = objectPattern;
  lowercase.objectProperty = objectProperty;
  lowercase.objectTypeAnnotation = objectTypeAnnotation;
  lowercase.objectTypeCallProperty = objectTypeCallProperty;
  lowercase.objectTypeIndexer = objectTypeIndexer;
  lowercase.objectTypeInternalSlot = objectTypeInternalSlot;
  lowercase.objectTypeProperty = objectTypeProperty;
  lowercase.objectTypeSpreadProperty = objectTypeSpreadProperty;
  lowercase.opaqueType = opaqueType;
  lowercase.optionalCallExpression = optionalCallExpression;
  lowercase.optionalIndexedAccessType = optionalIndexedAccessType;
  lowercase.optionalMemberExpression = optionalMemberExpression;
  lowercase.parenthesizedExpression = parenthesizedExpression;
  lowercase.pipelineBareFunction = pipelineBareFunction;
  lowercase.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
  lowercase.pipelineTopicExpression = pipelineTopicExpression;
  lowercase.placeholder = placeholder;
  lowercase.privateName = privateName;
  lowercase.program = program;
  lowercase.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
  lowercase.recordExpression = recordExpression;
  lowercase.regExpLiteral = regExpLiteral;
  lowercase.regexLiteral = RegexLiteral;
  lowercase.restElement = restElement;
  lowercase.restProperty = RestProperty;
  lowercase.returnStatement = returnStatement;
  lowercase.sequenceExpression = sequenceExpression;
  lowercase.spreadElement = spreadElement;
  lowercase.spreadProperty = SpreadProperty;
  lowercase.staticBlock = staticBlock;
  lowercase.stringLiteral = stringLiteral;
  lowercase.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
  lowercase.stringTypeAnnotation = stringTypeAnnotation;
  lowercase.super = _super;
  lowercase.switchCase = switchCase;
  lowercase.switchStatement = switchStatement;
  lowercase.symbolTypeAnnotation = symbolTypeAnnotation;
  lowercase.taggedTemplateExpression = taggedTemplateExpression;
  lowercase.templateElement = templateElement;
  lowercase.templateLiteral = templateLiteral;
  lowercase.thisExpression = thisExpression;
  lowercase.thisTypeAnnotation = thisTypeAnnotation;
  lowercase.throwStatement = throwStatement;
  lowercase.topicReference = topicReference;
  lowercase.tryStatement = tryStatement;
  lowercase.tSAnyKeyword = lowercase.tsAnyKeyword = tsAnyKeyword;
  lowercase.tSArrayType = lowercase.tsArrayType = tsArrayType;
  lowercase.tSAsExpression = lowercase.tsAsExpression = tsAsExpression;
  lowercase.tSBigIntKeyword = lowercase.tsBigIntKeyword = tsBigIntKeyword;
  lowercase.tSBooleanKeyword = lowercase.tsBooleanKeyword = tsBooleanKeyword;
  lowercase.tSCallSignatureDeclaration = lowercase.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
  lowercase.tSConditionalType = lowercase.tsConditionalType = tsConditionalType;
  lowercase.tSConstructSignatureDeclaration = lowercase.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
  lowercase.tSConstructorType = lowercase.tsConstructorType = tsConstructorType;
  lowercase.tSDeclareFunction = lowercase.tsDeclareFunction = tsDeclareFunction;
  lowercase.tSDeclareMethod = lowercase.tsDeclareMethod = tsDeclareMethod;
  lowercase.tSEnumBody = lowercase.tsEnumBody = tsEnumBody;
  lowercase.tSEnumDeclaration = lowercase.tsEnumDeclaration = tsEnumDeclaration;
  lowercase.tSEnumMember = lowercase.tsEnumMember = tsEnumMember;
  lowercase.tSExportAssignment = lowercase.tsExportAssignment = tsExportAssignment;
  lowercase.tSExpressionWithTypeArguments = lowercase.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
  lowercase.tSExternalModuleReference = lowercase.tsExternalModuleReference = tsExternalModuleReference;
  lowercase.tSFunctionType = lowercase.tsFunctionType = tsFunctionType;
  lowercase.tSImportEqualsDeclaration = lowercase.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
  lowercase.tSImportType = lowercase.tsImportType = tsImportType;
  lowercase.tSIndexSignature = lowercase.tsIndexSignature = tsIndexSignature;
  lowercase.tSIndexedAccessType = lowercase.tsIndexedAccessType = tsIndexedAccessType;
  lowercase.tSInferType = lowercase.tsInferType = tsInferType;
  lowercase.tSInstantiationExpression = lowercase.tsInstantiationExpression = tsInstantiationExpression;
  lowercase.tSInterfaceBody = lowercase.tsInterfaceBody = tsInterfaceBody;
  lowercase.tSInterfaceDeclaration = lowercase.tsInterfaceDeclaration = tsInterfaceDeclaration;
  lowercase.tSIntersectionType = lowercase.tsIntersectionType = tsIntersectionType;
  lowercase.tSIntrinsicKeyword = lowercase.tsIntrinsicKeyword = tsIntrinsicKeyword;
  lowercase.tSLiteralType = lowercase.tsLiteralType = tsLiteralType;
  lowercase.tSMappedType = lowercase.tsMappedType = tsMappedType;
  lowercase.tSMethodSignature = lowercase.tsMethodSignature = tsMethodSignature;
  lowercase.tSModuleBlock = lowercase.tsModuleBlock = tsModuleBlock;
  lowercase.tSModuleDeclaration = lowercase.tsModuleDeclaration = tsModuleDeclaration;
  lowercase.tSNamedTupleMember = lowercase.tsNamedTupleMember = tsNamedTupleMember;
  lowercase.tSNamespaceExportDeclaration = lowercase.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
  lowercase.tSNeverKeyword = lowercase.tsNeverKeyword = tsNeverKeyword;
  lowercase.tSNonNullExpression = lowercase.tsNonNullExpression = tsNonNullExpression;
  lowercase.tSNullKeyword = lowercase.tsNullKeyword = tsNullKeyword;
  lowercase.tSNumberKeyword = lowercase.tsNumberKeyword = tsNumberKeyword;
  lowercase.tSObjectKeyword = lowercase.tsObjectKeyword = tsObjectKeyword;
  lowercase.tSOptionalType = lowercase.tsOptionalType = tsOptionalType;
  lowercase.tSParameterProperty = lowercase.tsParameterProperty = tsParameterProperty;
  lowercase.tSParenthesizedType = lowercase.tsParenthesizedType = tsParenthesizedType;
  lowercase.tSPropertySignature = lowercase.tsPropertySignature = tsPropertySignature;
  lowercase.tSQualifiedName = lowercase.tsQualifiedName = tsQualifiedName;
  lowercase.tSRestType = lowercase.tsRestType = tsRestType;
  lowercase.tSSatisfiesExpression = lowercase.tsSatisfiesExpression = tsSatisfiesExpression;
  lowercase.tSStringKeyword = lowercase.tsStringKeyword = tsStringKeyword;
  lowercase.tSSymbolKeyword = lowercase.tsSymbolKeyword = tsSymbolKeyword;
  lowercase.tSTemplateLiteralType = lowercase.tsTemplateLiteralType = tsTemplateLiteralType;
  lowercase.tSThisType = lowercase.tsThisType = tsThisType;
  lowercase.tSTupleType = lowercase.tsTupleType = tsTupleType;
  lowercase.tSTypeAliasDeclaration = lowercase.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
  lowercase.tSTypeAnnotation = lowercase.tsTypeAnnotation = tsTypeAnnotation;
  lowercase.tSTypeAssertion = lowercase.tsTypeAssertion = tsTypeAssertion;
  lowercase.tSTypeLiteral = lowercase.tsTypeLiteral = tsTypeLiteral;
  lowercase.tSTypeOperator = lowercase.tsTypeOperator = tsTypeOperator;
  lowercase.tSTypeParameter = lowercase.tsTypeParameter = tsTypeParameter;
  lowercase.tSTypeParameterDeclaration = lowercase.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
  lowercase.tSTypeParameterInstantiation = lowercase.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
  lowercase.tSTypePredicate = lowercase.tsTypePredicate = tsTypePredicate;
  lowercase.tSTypeQuery = lowercase.tsTypeQuery = tsTypeQuery;
  lowercase.tSTypeReference = lowercase.tsTypeReference = tsTypeReference;
  lowercase.tSUndefinedKeyword = lowercase.tsUndefinedKeyword = tsUndefinedKeyword;
  lowercase.tSUnionType = lowercase.tsUnionType = tsUnionType;
  lowercase.tSUnknownKeyword = lowercase.tsUnknownKeyword = tsUnknownKeyword;
  lowercase.tSVoidKeyword = lowercase.tsVoidKeyword = tsVoidKeyword;
  lowercase.tupleExpression = tupleExpression;
  lowercase.tupleTypeAnnotation = tupleTypeAnnotation;
  lowercase.typeAlias = typeAlias;
  lowercase.typeAnnotation = typeAnnotation;
  lowercase.typeCastExpression = typeCastExpression;
  lowercase.typeParameter = typeParameter;
  lowercase.typeParameterDeclaration = typeParameterDeclaration;
  lowercase.typeParameterInstantiation = typeParameterInstantiation;
  lowercase.typeofTypeAnnotation = typeofTypeAnnotation;
  lowercase.unaryExpression = unaryExpression;
  lowercase.unionTypeAnnotation = unionTypeAnnotation;
  lowercase.updateExpression = updateExpression;
  lowercase.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
  lowercase.variableDeclaration = variableDeclaration;
  lowercase.variableDeclarator = variableDeclarator;
  lowercase.variance = variance;
  lowercase.voidTypeAnnotation = voidTypeAnnotation;
  lowercase.whileStatement = whileStatement;
  lowercase.withStatement = withStatement;
  lowercase.yieldExpression = yieldExpression;
  var _validate = requireValidate();
  var _deprecationWarning = requireDeprecationWarning();
  var utils2 = requireUtils$1();
  const {
    validateInternal: validate2
  } = _validate;
  const {
    NODE_FIELDS
  } = utils2;
  function arrayExpression(elements = []) {
    const node2 = {
      type: "ArrayExpression",
      elements
    };
    const defs = NODE_FIELDS.ArrayExpression;
    validate2(defs.elements, node2, "elements", elements, 1);
    return node2;
  }
  function assignmentExpression(operator, left, right) {
    const node2 = {
      type: "AssignmentExpression",
      operator,
      left,
      right
    };
    const defs = NODE_FIELDS.AssignmentExpression;
    validate2(defs.operator, node2, "operator", operator);
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function binaryExpression(operator, left, right) {
    const node2 = {
      type: "BinaryExpression",
      operator,
      left,
      right
    };
    const defs = NODE_FIELDS.BinaryExpression;
    validate2(defs.operator, node2, "operator", operator);
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function interpreterDirective(value2) {
    const node2 = {
      type: "InterpreterDirective",
      value: value2
    };
    const defs = NODE_FIELDS.InterpreterDirective;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function directive(value2) {
    const node2 = {
      type: "Directive",
      value: value2
    };
    const defs = NODE_FIELDS.Directive;
    validate2(defs.value, node2, "value", value2, 1);
    return node2;
  }
  function directiveLiteral(value2) {
    const node2 = {
      type: "DirectiveLiteral",
      value: value2
    };
    const defs = NODE_FIELDS.DirectiveLiteral;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function blockStatement(body, directives = []) {
    const node2 = {
      type: "BlockStatement",
      body,
      directives
    };
    const defs = NODE_FIELDS.BlockStatement;
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.directives, node2, "directives", directives, 1);
    return node2;
  }
  function breakStatement(label = null) {
    const node2 = {
      type: "BreakStatement",
      label
    };
    const defs = NODE_FIELDS.BreakStatement;
    validate2(defs.label, node2, "label", label, 1);
    return node2;
  }
  function callExpression(callee, _arguments) {
    const node2 = {
      type: "CallExpression",
      callee,
      arguments: _arguments
    };
    const defs = NODE_FIELDS.CallExpression;
    validate2(defs.callee, node2, "callee", callee, 1);
    validate2(defs.arguments, node2, "arguments", _arguments, 1);
    return node2;
  }
  function catchClause(param = null, body) {
    const node2 = {
      type: "CatchClause",
      param,
      body
    };
    const defs = NODE_FIELDS.CatchClause;
    validate2(defs.param, node2, "param", param, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function conditionalExpression(test, consequent, alternate) {
    const node2 = {
      type: "ConditionalExpression",
      test,
      consequent,
      alternate
    };
    const defs = NODE_FIELDS.ConditionalExpression;
    validate2(defs.test, node2, "test", test, 1);
    validate2(defs.consequent, node2, "consequent", consequent, 1);
    validate2(defs.alternate, node2, "alternate", alternate, 1);
    return node2;
  }
  function continueStatement(label = null) {
    const node2 = {
      type: "ContinueStatement",
      label
    };
    const defs = NODE_FIELDS.ContinueStatement;
    validate2(defs.label, node2, "label", label, 1);
    return node2;
  }
  function debuggerStatement() {
    return {
      type: "DebuggerStatement"
    };
  }
  function doWhileStatement(test, body) {
    const node2 = {
      type: "DoWhileStatement",
      test,
      body
    };
    const defs = NODE_FIELDS.DoWhileStatement;
    validate2(defs.test, node2, "test", test, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function emptyStatement() {
    return {
      type: "EmptyStatement"
    };
  }
  function expressionStatement(expression) {
    const node2 = {
      type: "ExpressionStatement",
      expression
    };
    const defs = NODE_FIELDS.ExpressionStatement;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function file2(program2, comments2 = null, tokens = null) {
    const node2 = {
      type: "File",
      program: program2,
      comments: comments2,
      tokens
    };
    const defs = NODE_FIELDS.File;
    validate2(defs.program, node2, "program", program2, 1);
    validate2(defs.comments, node2, "comments", comments2, 1);
    validate2(defs.tokens, node2, "tokens", tokens);
    return node2;
  }
  function forInStatement(left, right, body) {
    const node2 = {
      type: "ForInStatement",
      left,
      right,
      body
    };
    const defs = NODE_FIELDS.ForInStatement;
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function forStatement(init = null, test = null, update = null, body) {
    const node2 = {
      type: "ForStatement",
      init,
      test,
      update,
      body
    };
    const defs = NODE_FIELDS.ForStatement;
    validate2(defs.init, node2, "init", init, 1);
    validate2(defs.test, node2, "test", test, 1);
    validate2(defs.update, node2, "update", update, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function functionDeclaration(id = null, params, body, generator = false, async2 = false) {
    const node2 = {
      type: "FunctionDeclaration",
      id,
      params,
      body,
      generator,
      async: async2
    };
    const defs = NODE_FIELDS.FunctionDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.generator, node2, "generator", generator);
    validate2(defs.async, node2, "async", async2);
    return node2;
  }
  function functionExpression(id = null, params, body, generator = false, async2 = false) {
    const node2 = {
      type: "FunctionExpression",
      id,
      params,
      body,
      generator,
      async: async2
    };
    const defs = NODE_FIELDS.FunctionExpression;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.generator, node2, "generator", generator);
    validate2(defs.async, node2, "async", async2);
    return node2;
  }
  function identifier2(name) {
    const node2 = {
      type: "Identifier",
      name
    };
    const defs = NODE_FIELDS.Identifier;
    validate2(defs.name, node2, "name", name);
    return node2;
  }
  function ifStatement(test, consequent, alternate = null) {
    const node2 = {
      type: "IfStatement",
      test,
      consequent,
      alternate
    };
    const defs = NODE_FIELDS.IfStatement;
    validate2(defs.test, node2, "test", test, 1);
    validate2(defs.consequent, node2, "consequent", consequent, 1);
    validate2(defs.alternate, node2, "alternate", alternate, 1);
    return node2;
  }
  function labeledStatement(label, body) {
    const node2 = {
      type: "LabeledStatement",
      label,
      body
    };
    const defs = NODE_FIELDS.LabeledStatement;
    validate2(defs.label, node2, "label", label, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function stringLiteral(value2) {
    const node2 = {
      type: "StringLiteral",
      value: value2
    };
    const defs = NODE_FIELDS.StringLiteral;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function numericLiteral(value2) {
    const node2 = {
      type: "NumericLiteral",
      value: value2
    };
    const defs = NODE_FIELDS.NumericLiteral;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function nullLiteral() {
    return {
      type: "NullLiteral"
    };
  }
  function booleanLiteral(value2) {
    const node2 = {
      type: "BooleanLiteral",
      value: value2
    };
    const defs = NODE_FIELDS.BooleanLiteral;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function regExpLiteral(pattern, flags = "") {
    const node2 = {
      type: "RegExpLiteral",
      pattern,
      flags
    };
    const defs = NODE_FIELDS.RegExpLiteral;
    validate2(defs.pattern, node2, "pattern", pattern);
    validate2(defs.flags, node2, "flags", flags);
    return node2;
  }
  function logicalExpression(operator, left, right) {
    const node2 = {
      type: "LogicalExpression",
      operator,
      left,
      right
    };
    const defs = NODE_FIELDS.LogicalExpression;
    validate2(defs.operator, node2, "operator", operator);
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function memberExpression(object, property, computed = false, optional = null) {
    const node2 = {
      type: "MemberExpression",
      object,
      property,
      computed,
      optional
    };
    const defs = NODE_FIELDS.MemberExpression;
    validate2(defs.object, node2, "object", object, 1);
    validate2(defs.property, node2, "property", property, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.optional, node2, "optional", optional);
    return node2;
  }
  function newExpression(callee, _arguments) {
    const node2 = {
      type: "NewExpression",
      callee,
      arguments: _arguments
    };
    const defs = NODE_FIELDS.NewExpression;
    validate2(defs.callee, node2, "callee", callee, 1);
    validate2(defs.arguments, node2, "arguments", _arguments, 1);
    return node2;
  }
  function program(body, directives = [], sourceType = "script", interpreter = null) {
    const node2 = {
      type: "Program",
      body,
      directives,
      sourceType,
      interpreter
    };
    const defs = NODE_FIELDS.Program;
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.directives, node2, "directives", directives, 1);
    validate2(defs.sourceType, node2, "sourceType", sourceType);
    validate2(defs.interpreter, node2, "interpreter", interpreter, 1);
    return node2;
  }
  function objectExpression(properties) {
    const node2 = {
      type: "ObjectExpression",
      properties
    };
    const defs = NODE_FIELDS.ObjectExpression;
    validate2(defs.properties, node2, "properties", properties, 1);
    return node2;
  }
  function objectMethod(kind = "method", key, params, body, computed = false, generator = false, async2 = false) {
    const node2 = {
      type: "ObjectMethod",
      kind,
      key,
      params,
      body,
      computed,
      generator,
      async: async2
    };
    const defs = NODE_FIELDS.ObjectMethod;
    validate2(defs.kind, node2, "kind", kind);
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.generator, node2, "generator", generator);
    validate2(defs.async, node2, "async", async2);
    return node2;
  }
  function objectProperty(key, value2, computed = false, shorthand = false, decorators = null) {
    const node2 = {
      type: "ObjectProperty",
      key,
      value: value2,
      computed,
      shorthand,
      decorators
    };
    const defs = NODE_FIELDS.ObjectProperty;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.shorthand, node2, "shorthand", shorthand);
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    return node2;
  }
  function restElement(argument) {
    const node2 = {
      type: "RestElement",
      argument
    };
    const defs = NODE_FIELDS.RestElement;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function returnStatement(argument = null) {
    const node2 = {
      type: "ReturnStatement",
      argument
    };
    const defs = NODE_FIELDS.ReturnStatement;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function sequenceExpression(expressions2) {
    const node2 = {
      type: "SequenceExpression",
      expressions: expressions2
    };
    const defs = NODE_FIELDS.SequenceExpression;
    validate2(defs.expressions, node2, "expressions", expressions2, 1);
    return node2;
  }
  function parenthesizedExpression(expression) {
    const node2 = {
      type: "ParenthesizedExpression",
      expression
    };
    const defs = NODE_FIELDS.ParenthesizedExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function switchCase(test = null, consequent) {
    const node2 = {
      type: "SwitchCase",
      test,
      consequent
    };
    const defs = NODE_FIELDS.SwitchCase;
    validate2(defs.test, node2, "test", test, 1);
    validate2(defs.consequent, node2, "consequent", consequent, 1);
    return node2;
  }
  function switchStatement(discriminant, cases) {
    const node2 = {
      type: "SwitchStatement",
      discriminant,
      cases
    };
    const defs = NODE_FIELDS.SwitchStatement;
    validate2(defs.discriminant, node2, "discriminant", discriminant, 1);
    validate2(defs.cases, node2, "cases", cases, 1);
    return node2;
  }
  function thisExpression() {
    return {
      type: "ThisExpression"
    };
  }
  function throwStatement(argument) {
    const node2 = {
      type: "ThrowStatement",
      argument
    };
    const defs = NODE_FIELDS.ThrowStatement;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function tryStatement(block, handler = null, finalizer = null) {
    const node2 = {
      type: "TryStatement",
      block,
      handler,
      finalizer
    };
    const defs = NODE_FIELDS.TryStatement;
    validate2(defs.block, node2, "block", block, 1);
    validate2(defs.handler, node2, "handler", handler, 1);
    validate2(defs.finalizer, node2, "finalizer", finalizer, 1);
    return node2;
  }
  function unaryExpression(operator, argument, prefix = true) {
    const node2 = {
      type: "UnaryExpression",
      operator,
      argument,
      prefix
    };
    const defs = NODE_FIELDS.UnaryExpression;
    validate2(defs.operator, node2, "operator", operator);
    validate2(defs.argument, node2, "argument", argument, 1);
    validate2(defs.prefix, node2, "prefix", prefix);
    return node2;
  }
  function updateExpression(operator, argument, prefix = false) {
    const node2 = {
      type: "UpdateExpression",
      operator,
      argument,
      prefix
    };
    const defs = NODE_FIELDS.UpdateExpression;
    validate2(defs.operator, node2, "operator", operator);
    validate2(defs.argument, node2, "argument", argument, 1);
    validate2(defs.prefix, node2, "prefix", prefix);
    return node2;
  }
  function variableDeclaration(kind, declarations) {
    const node2 = {
      type: "VariableDeclaration",
      kind,
      declarations
    };
    const defs = NODE_FIELDS.VariableDeclaration;
    validate2(defs.kind, node2, "kind", kind);
    validate2(defs.declarations, node2, "declarations", declarations, 1);
    return node2;
  }
  function variableDeclarator(id, init = null) {
    const node2 = {
      type: "VariableDeclarator",
      id,
      init
    };
    const defs = NODE_FIELDS.VariableDeclarator;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.init, node2, "init", init, 1);
    return node2;
  }
  function whileStatement(test, body) {
    const node2 = {
      type: "WhileStatement",
      test,
      body
    };
    const defs = NODE_FIELDS.WhileStatement;
    validate2(defs.test, node2, "test", test, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function withStatement(object, body) {
    const node2 = {
      type: "WithStatement",
      object,
      body
    };
    const defs = NODE_FIELDS.WithStatement;
    validate2(defs.object, node2, "object", object, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function assignmentPattern(left, right) {
    const node2 = {
      type: "AssignmentPattern",
      left,
      right
    };
    const defs = NODE_FIELDS.AssignmentPattern;
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function arrayPattern(elements) {
    const node2 = {
      type: "ArrayPattern",
      elements
    };
    const defs = NODE_FIELDS.ArrayPattern;
    validate2(defs.elements, node2, "elements", elements, 1);
    return node2;
  }
  function arrowFunctionExpression(params, body, async2 = false) {
    const node2 = {
      type: "ArrowFunctionExpression",
      params,
      body,
      async: async2,
      expression: null
    };
    const defs = NODE_FIELDS.ArrowFunctionExpression;
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.async, node2, "async", async2);
    return node2;
  }
  function classBody(body) {
    const node2 = {
      type: "ClassBody",
      body
    };
    const defs = NODE_FIELDS.ClassBody;
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function classExpression(id = null, superClass = null, body, decorators = null) {
    const node2 = {
      type: "ClassExpression",
      id,
      superClass,
      body,
      decorators
    };
    const defs = NODE_FIELDS.ClassExpression;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.superClass, node2, "superClass", superClass, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    return node2;
  }
  function classDeclaration(id = null, superClass = null, body, decorators = null) {
    const node2 = {
      type: "ClassDeclaration",
      id,
      superClass,
      body,
      decorators
    };
    const defs = NODE_FIELDS.ClassDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.superClass, node2, "superClass", superClass, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    return node2;
  }
  function exportAllDeclaration(source) {
    const node2 = {
      type: "ExportAllDeclaration",
      source
    };
    const defs = NODE_FIELDS.ExportAllDeclaration;
    validate2(defs.source, node2, "source", source, 1);
    return node2;
  }
  function exportDefaultDeclaration(declaration) {
    const node2 = {
      type: "ExportDefaultDeclaration",
      declaration
    };
    const defs = NODE_FIELDS.ExportDefaultDeclaration;
    validate2(defs.declaration, node2, "declaration", declaration, 1);
    return node2;
  }
  function exportNamedDeclaration(declaration = null, specifiers = [], source = null) {
    const node2 = {
      type: "ExportNamedDeclaration",
      declaration,
      specifiers,
      source
    };
    const defs = NODE_FIELDS.ExportNamedDeclaration;
    validate2(defs.declaration, node2, "declaration", declaration, 1);
    validate2(defs.specifiers, node2, "specifiers", specifiers, 1);
    validate2(defs.source, node2, "source", source, 1);
    return node2;
  }
  function exportSpecifier(local, exported) {
    const node2 = {
      type: "ExportSpecifier",
      local,
      exported
    };
    const defs = NODE_FIELDS.ExportSpecifier;
    validate2(defs.local, node2, "local", local, 1);
    validate2(defs.exported, node2, "exported", exported, 1);
    return node2;
  }
  function forOfStatement(left, right, body, _await = false) {
    const node2 = {
      type: "ForOfStatement",
      left,
      right,
      body,
      await: _await
    };
    const defs = NODE_FIELDS.ForOfStatement;
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.await, node2, "await", _await);
    return node2;
  }
  function importDeclaration(specifiers, source) {
    const node2 = {
      type: "ImportDeclaration",
      specifiers,
      source
    };
    const defs = NODE_FIELDS.ImportDeclaration;
    validate2(defs.specifiers, node2, "specifiers", specifiers, 1);
    validate2(defs.source, node2, "source", source, 1);
    return node2;
  }
  function importDefaultSpecifier(local) {
    const node2 = {
      type: "ImportDefaultSpecifier",
      local
    };
    const defs = NODE_FIELDS.ImportDefaultSpecifier;
    validate2(defs.local, node2, "local", local, 1);
    return node2;
  }
  function importNamespaceSpecifier(local) {
    const node2 = {
      type: "ImportNamespaceSpecifier",
      local
    };
    const defs = NODE_FIELDS.ImportNamespaceSpecifier;
    validate2(defs.local, node2, "local", local, 1);
    return node2;
  }
  function importSpecifier(local, imported) {
    const node2 = {
      type: "ImportSpecifier",
      local,
      imported
    };
    const defs = NODE_FIELDS.ImportSpecifier;
    validate2(defs.local, node2, "local", local, 1);
    validate2(defs.imported, node2, "imported", imported, 1);
    return node2;
  }
  function importExpression(source, options2 = null) {
    const node2 = {
      type: "ImportExpression",
      source,
      options: options2
    };
    const defs = NODE_FIELDS.ImportExpression;
    validate2(defs.source, node2, "source", source, 1);
    validate2(defs.options, node2, "options", options2, 1);
    return node2;
  }
  function metaProperty(meta, property) {
    const node2 = {
      type: "MetaProperty",
      meta,
      property
    };
    const defs = NODE_FIELDS.MetaProperty;
    validate2(defs.meta, node2, "meta", meta, 1);
    validate2(defs.property, node2, "property", property, 1);
    return node2;
  }
  function classMethod(kind = "method", key, params, body, computed = false, _static = false, generator = false, async2 = false) {
    const node2 = {
      type: "ClassMethod",
      kind,
      key,
      params,
      body,
      computed,
      static: _static,
      generator,
      async: async2
    };
    const defs = NODE_FIELDS.ClassMethod;
    validate2(defs.kind, node2, "kind", kind);
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.static, node2, "static", _static);
    validate2(defs.generator, node2, "generator", generator);
    validate2(defs.async, node2, "async", async2);
    return node2;
  }
  function objectPattern(properties) {
    const node2 = {
      type: "ObjectPattern",
      properties
    };
    const defs = NODE_FIELDS.ObjectPattern;
    validate2(defs.properties, node2, "properties", properties, 1);
    return node2;
  }
  function spreadElement(argument) {
    const node2 = {
      type: "SpreadElement",
      argument
    };
    const defs = NODE_FIELDS.SpreadElement;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function _super() {
    return {
      type: "Super"
    };
  }
  function taggedTemplateExpression(tag, quasi) {
    const node2 = {
      type: "TaggedTemplateExpression",
      tag,
      quasi
    };
    const defs = NODE_FIELDS.TaggedTemplateExpression;
    validate2(defs.tag, node2, "tag", tag, 1);
    validate2(defs.quasi, node2, "quasi", quasi, 1);
    return node2;
  }
  function templateElement(value2, tail = false) {
    const node2 = {
      type: "TemplateElement",
      value: value2,
      tail
    };
    const defs = NODE_FIELDS.TemplateElement;
    validate2(defs.value, node2, "value", value2);
    validate2(defs.tail, node2, "tail", tail);
    return node2;
  }
  function templateLiteral(quasis, expressions2) {
    const node2 = {
      type: "TemplateLiteral",
      quasis,
      expressions: expressions2
    };
    const defs = NODE_FIELDS.TemplateLiteral;
    validate2(defs.quasis, node2, "quasis", quasis, 1);
    validate2(defs.expressions, node2, "expressions", expressions2, 1);
    return node2;
  }
  function yieldExpression(argument = null, delegate = false) {
    const node2 = {
      type: "YieldExpression",
      argument,
      delegate
    };
    const defs = NODE_FIELDS.YieldExpression;
    validate2(defs.argument, node2, "argument", argument, 1);
    validate2(defs.delegate, node2, "delegate", delegate);
    return node2;
  }
  function awaitExpression(argument) {
    const node2 = {
      type: "AwaitExpression",
      argument
    };
    const defs = NODE_FIELDS.AwaitExpression;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function _import() {
    return {
      type: "Import"
    };
  }
  function bigIntLiteral(value2) {
    const node2 = {
      type: "BigIntLiteral",
      value: value2
    };
    const defs = NODE_FIELDS.BigIntLiteral;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function exportNamespaceSpecifier(exported) {
    const node2 = {
      type: "ExportNamespaceSpecifier",
      exported
    };
    const defs = NODE_FIELDS.ExportNamespaceSpecifier;
    validate2(defs.exported, node2, "exported", exported, 1);
    return node2;
  }
  function optionalMemberExpression(object, property, computed = false, optional) {
    const node2 = {
      type: "OptionalMemberExpression",
      object,
      property,
      computed,
      optional
    };
    const defs = NODE_FIELDS.OptionalMemberExpression;
    validate2(defs.object, node2, "object", object, 1);
    validate2(defs.property, node2, "property", property, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.optional, node2, "optional", optional);
    return node2;
  }
  function optionalCallExpression(callee, _arguments, optional) {
    const node2 = {
      type: "OptionalCallExpression",
      callee,
      arguments: _arguments,
      optional
    };
    const defs = NODE_FIELDS.OptionalCallExpression;
    validate2(defs.callee, node2, "callee", callee, 1);
    validate2(defs.arguments, node2, "arguments", _arguments, 1);
    validate2(defs.optional, node2, "optional", optional);
    return node2;
  }
  function classProperty(key, value2 = null, typeAnnotation2 = null, decorators = null, computed = false, _static = false) {
    const node2 = {
      type: "ClassProperty",
      key,
      value: value2,
      typeAnnotation: typeAnnotation2,
      decorators,
      computed,
      static: _static
    };
    const defs = NODE_FIELDS.ClassProperty;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.static, node2, "static", _static);
    return node2;
  }
  function classAccessorProperty(key, value2 = null, typeAnnotation2 = null, decorators = null, computed = false, _static = false) {
    const node2 = {
      type: "ClassAccessorProperty",
      key,
      value: value2,
      typeAnnotation: typeAnnotation2,
      decorators,
      computed,
      static: _static
    };
    const defs = NODE_FIELDS.ClassAccessorProperty;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    validate2(defs.computed, node2, "computed", computed);
    validate2(defs.static, node2, "static", _static);
    return node2;
  }
  function classPrivateProperty(key, value2 = null, decorators = null, _static = false) {
    const node2 = {
      type: "ClassPrivateProperty",
      key,
      value: value2,
      decorators,
      static: _static
    };
    const defs = NODE_FIELDS.ClassPrivateProperty;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    validate2(defs.static, node2, "static", _static);
    return node2;
  }
  function classPrivateMethod(kind = "method", key, params, body, _static = false) {
    const node2 = {
      type: "ClassPrivateMethod",
      kind,
      key,
      params,
      body,
      static: _static
    };
    const defs = NODE_FIELDS.ClassPrivateMethod;
    validate2(defs.kind, node2, "kind", kind);
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.static, node2, "static", _static);
    return node2;
  }
  function privateName(id) {
    const node2 = {
      type: "PrivateName",
      id
    };
    const defs = NODE_FIELDS.PrivateName;
    validate2(defs.id, node2, "id", id, 1);
    return node2;
  }
  function staticBlock(body) {
    const node2 = {
      type: "StaticBlock",
      body
    };
    const defs = NODE_FIELDS.StaticBlock;
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function importAttribute(key, value2) {
    const node2 = {
      type: "ImportAttribute",
      key,
      value: value2
    };
    const defs = NODE_FIELDS.ImportAttribute;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    return node2;
  }
  function anyTypeAnnotation() {
    return {
      type: "AnyTypeAnnotation"
    };
  }
  function arrayTypeAnnotation(elementType) {
    const node2 = {
      type: "ArrayTypeAnnotation",
      elementType
    };
    const defs = NODE_FIELDS.ArrayTypeAnnotation;
    validate2(defs.elementType, node2, "elementType", elementType, 1);
    return node2;
  }
  function booleanTypeAnnotation() {
    return {
      type: "BooleanTypeAnnotation"
    };
  }
  function booleanLiteralTypeAnnotation(value2) {
    const node2 = {
      type: "BooleanLiteralTypeAnnotation",
      value: value2
    };
    const defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function nullLiteralTypeAnnotation() {
    return {
      type: "NullLiteralTypeAnnotation"
    };
  }
  function classImplements(id, typeParameters = null) {
    const node2 = {
      type: "ClassImplements",
      id,
      typeParameters
    };
    const defs = NODE_FIELDS.ClassImplements;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function declareClass(id, typeParameters = null, _extends = null, body) {
    const node2 = {
      type: "DeclareClass",
      id,
      typeParameters,
      extends: _extends,
      body
    };
    const defs = NODE_FIELDS.DeclareClass;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.extends, node2, "extends", _extends, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function declareFunction(id) {
    const node2 = {
      type: "DeclareFunction",
      id
    };
    const defs = NODE_FIELDS.DeclareFunction;
    validate2(defs.id, node2, "id", id, 1);
    return node2;
  }
  function declareInterface(id, typeParameters = null, _extends = null, body) {
    const node2 = {
      type: "DeclareInterface",
      id,
      typeParameters,
      extends: _extends,
      body
    };
    const defs = NODE_FIELDS.DeclareInterface;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.extends, node2, "extends", _extends, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function declareModule(id, body, kind = null) {
    const node2 = {
      type: "DeclareModule",
      id,
      body,
      kind
    };
    const defs = NODE_FIELDS.DeclareModule;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.kind, node2, "kind", kind);
    return node2;
  }
  function declareModuleExports(typeAnnotation2) {
    const node2 = {
      type: "DeclareModuleExports",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.DeclareModuleExports;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function declareTypeAlias(id, typeParameters = null, right) {
    const node2 = {
      type: "DeclareTypeAlias",
      id,
      typeParameters,
      right
    };
    const defs = NODE_FIELDS.DeclareTypeAlias;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function declareOpaqueType(id, typeParameters = null, supertype = null) {
    const node2 = {
      type: "DeclareOpaqueType",
      id,
      typeParameters,
      supertype
    };
    const defs = NODE_FIELDS.DeclareOpaqueType;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.supertype, node2, "supertype", supertype, 1);
    return node2;
  }
  function declareVariable(id) {
    const node2 = {
      type: "DeclareVariable",
      id
    };
    const defs = NODE_FIELDS.DeclareVariable;
    validate2(defs.id, node2, "id", id, 1);
    return node2;
  }
  function declareExportDeclaration(declaration = null, specifiers = null, source = null, attributes = null) {
    const node2 = {
      type: "DeclareExportDeclaration",
      declaration,
      specifiers,
      source,
      attributes
    };
    const defs = NODE_FIELDS.DeclareExportDeclaration;
    validate2(defs.declaration, node2, "declaration", declaration, 1);
    validate2(defs.specifiers, node2, "specifiers", specifiers, 1);
    validate2(defs.source, node2, "source", source, 1);
    validate2(defs.attributes, node2, "attributes", attributes, 1);
    return node2;
  }
  function declareExportAllDeclaration(source, attributes = null) {
    const node2 = {
      type: "DeclareExportAllDeclaration",
      source,
      attributes
    };
    const defs = NODE_FIELDS.DeclareExportAllDeclaration;
    validate2(defs.source, node2, "source", source, 1);
    validate2(defs.attributes, node2, "attributes", attributes, 1);
    return node2;
  }
  function declaredPredicate(value2) {
    const node2 = {
      type: "DeclaredPredicate",
      value: value2
    };
    const defs = NODE_FIELDS.DeclaredPredicate;
    validate2(defs.value, node2, "value", value2, 1);
    return node2;
  }
  function existsTypeAnnotation() {
    return {
      type: "ExistsTypeAnnotation"
    };
  }
  function functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {
    const node2 = {
      type: "FunctionTypeAnnotation",
      typeParameters,
      params,
      rest,
      returnType
    };
    const defs = NODE_FIELDS.FunctionTypeAnnotation;
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.rest, node2, "rest", rest, 1);
    validate2(defs.returnType, node2, "returnType", returnType, 1);
    return node2;
  }
  function functionTypeParam(name = null, typeAnnotation2) {
    const node2 = {
      type: "FunctionTypeParam",
      name,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.FunctionTypeParam;
    validate2(defs.name, node2, "name", name, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function genericTypeAnnotation(id, typeParameters = null) {
    const node2 = {
      type: "GenericTypeAnnotation",
      id,
      typeParameters
    };
    const defs = NODE_FIELDS.GenericTypeAnnotation;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function inferredPredicate() {
    return {
      type: "InferredPredicate"
    };
  }
  function interfaceExtends(id, typeParameters = null) {
    const node2 = {
      type: "InterfaceExtends",
      id,
      typeParameters
    };
    const defs = NODE_FIELDS.InterfaceExtends;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function interfaceDeclaration(id, typeParameters = null, _extends = null, body) {
    const node2 = {
      type: "InterfaceDeclaration",
      id,
      typeParameters,
      extends: _extends,
      body
    };
    const defs = NODE_FIELDS.InterfaceDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.extends, node2, "extends", _extends, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function interfaceTypeAnnotation(_extends = null, body) {
    const node2 = {
      type: "InterfaceTypeAnnotation",
      extends: _extends,
      body
    };
    const defs = NODE_FIELDS.InterfaceTypeAnnotation;
    validate2(defs.extends, node2, "extends", _extends, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function intersectionTypeAnnotation(types2) {
    const node2 = {
      type: "IntersectionTypeAnnotation",
      types: types2
    };
    const defs = NODE_FIELDS.IntersectionTypeAnnotation;
    validate2(defs.types, node2, "types", types2, 1);
    return node2;
  }
  function mixedTypeAnnotation() {
    return {
      type: "MixedTypeAnnotation"
    };
  }
  function emptyTypeAnnotation() {
    return {
      type: "EmptyTypeAnnotation"
    };
  }
  function nullableTypeAnnotation(typeAnnotation2) {
    const node2 = {
      type: "NullableTypeAnnotation",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.NullableTypeAnnotation;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function numberLiteralTypeAnnotation(value2) {
    const node2 = {
      type: "NumberLiteralTypeAnnotation",
      value: value2
    };
    const defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function numberTypeAnnotation() {
    return {
      type: "NumberTypeAnnotation"
    };
  }
  function objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
    const node2 = {
      type: "ObjectTypeAnnotation",
      properties,
      indexers,
      callProperties,
      internalSlots,
      exact
    };
    const defs = NODE_FIELDS.ObjectTypeAnnotation;
    validate2(defs.properties, node2, "properties", properties, 1);
    validate2(defs.indexers, node2, "indexers", indexers, 1);
    validate2(defs.callProperties, node2, "callProperties", callProperties, 1);
    validate2(defs.internalSlots, node2, "internalSlots", internalSlots, 1);
    validate2(defs.exact, node2, "exact", exact);
    return node2;
  }
  function objectTypeInternalSlot(id, value2, optional, _static, method) {
    const node2 = {
      type: "ObjectTypeInternalSlot",
      id,
      value: value2,
      optional,
      static: _static,
      method
    };
    const defs = NODE_FIELDS.ObjectTypeInternalSlot;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.optional, node2, "optional", optional);
    validate2(defs.static, node2, "static", _static);
    validate2(defs.method, node2, "method", method);
    return node2;
  }
  function objectTypeCallProperty(value2) {
    const node2 = {
      type: "ObjectTypeCallProperty",
      value: value2,
      static: null
    };
    const defs = NODE_FIELDS.ObjectTypeCallProperty;
    validate2(defs.value, node2, "value", value2, 1);
    return node2;
  }
  function objectTypeIndexer(id = null, key, value2, variance2 = null) {
    const node2 = {
      type: "ObjectTypeIndexer",
      id,
      key,
      value: value2,
      variance: variance2,
      static: null
    };
    const defs = NODE_FIELDS.ObjectTypeIndexer;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.variance, node2, "variance", variance2, 1);
    return node2;
  }
  function objectTypeProperty(key, value2, variance2 = null) {
    const node2 = {
      type: "ObjectTypeProperty",
      key,
      value: value2,
      variance: variance2,
      kind: null,
      method: null,
      optional: null,
      proto: null,
      static: null
    };
    const defs = NODE_FIELDS.ObjectTypeProperty;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.value, node2, "value", value2, 1);
    validate2(defs.variance, node2, "variance", variance2, 1);
    return node2;
  }
  function objectTypeSpreadProperty(argument) {
    const node2 = {
      type: "ObjectTypeSpreadProperty",
      argument
    };
    const defs = NODE_FIELDS.ObjectTypeSpreadProperty;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function opaqueType(id, typeParameters = null, supertype = null, impltype) {
    const node2 = {
      type: "OpaqueType",
      id,
      typeParameters,
      supertype,
      impltype
    };
    const defs = NODE_FIELDS.OpaqueType;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.supertype, node2, "supertype", supertype, 1);
    validate2(defs.impltype, node2, "impltype", impltype, 1);
    return node2;
  }
  function qualifiedTypeIdentifier(id, qualification) {
    const node2 = {
      type: "QualifiedTypeIdentifier",
      id,
      qualification
    };
    const defs = NODE_FIELDS.QualifiedTypeIdentifier;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.qualification, node2, "qualification", qualification, 1);
    return node2;
  }
  function stringLiteralTypeAnnotation(value2) {
    const node2 = {
      type: "StringLiteralTypeAnnotation",
      value: value2
    };
    const defs = NODE_FIELDS.StringLiteralTypeAnnotation;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function stringTypeAnnotation() {
    return {
      type: "StringTypeAnnotation"
    };
  }
  function symbolTypeAnnotation() {
    return {
      type: "SymbolTypeAnnotation"
    };
  }
  function thisTypeAnnotation() {
    return {
      type: "ThisTypeAnnotation"
    };
  }
  function tupleTypeAnnotation(types2) {
    const node2 = {
      type: "TupleTypeAnnotation",
      types: types2
    };
    const defs = NODE_FIELDS.TupleTypeAnnotation;
    validate2(defs.types, node2, "types", types2, 1);
    return node2;
  }
  function typeofTypeAnnotation(argument) {
    const node2 = {
      type: "TypeofTypeAnnotation",
      argument
    };
    const defs = NODE_FIELDS.TypeofTypeAnnotation;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function typeAlias(id, typeParameters = null, right) {
    const node2 = {
      type: "TypeAlias",
      id,
      typeParameters,
      right
    };
    const defs = NODE_FIELDS.TypeAlias;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function typeAnnotation(typeAnnotation2) {
    const node2 = {
      type: "TypeAnnotation",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TypeAnnotation;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function typeCastExpression(expression, typeAnnotation2) {
    const node2 = {
      type: "TypeCastExpression",
      expression,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TypeCastExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function typeParameter(bound = null, _default = null, variance2 = null) {
    const node2 = {
      type: "TypeParameter",
      bound,
      default: _default,
      variance: variance2,
      name: null
    };
    const defs = NODE_FIELDS.TypeParameter;
    validate2(defs.bound, node2, "bound", bound, 1);
    validate2(defs.default, node2, "default", _default, 1);
    validate2(defs.variance, node2, "variance", variance2, 1);
    return node2;
  }
  function typeParameterDeclaration(params) {
    const node2 = {
      type: "TypeParameterDeclaration",
      params
    };
    const defs = NODE_FIELDS.TypeParameterDeclaration;
    validate2(defs.params, node2, "params", params, 1);
    return node2;
  }
  function typeParameterInstantiation(params) {
    const node2 = {
      type: "TypeParameterInstantiation",
      params
    };
    const defs = NODE_FIELDS.TypeParameterInstantiation;
    validate2(defs.params, node2, "params", params, 1);
    return node2;
  }
  function unionTypeAnnotation(types2) {
    const node2 = {
      type: "UnionTypeAnnotation",
      types: types2
    };
    const defs = NODE_FIELDS.UnionTypeAnnotation;
    validate2(defs.types, node2, "types", types2, 1);
    return node2;
  }
  function variance(kind) {
    const node2 = {
      type: "Variance",
      kind
    };
    const defs = NODE_FIELDS.Variance;
    validate2(defs.kind, node2, "kind", kind);
    return node2;
  }
  function voidTypeAnnotation() {
    return {
      type: "VoidTypeAnnotation"
    };
  }
  function enumDeclaration(id, body) {
    const node2 = {
      type: "EnumDeclaration",
      id,
      body
    };
    const defs = NODE_FIELDS.EnumDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function enumBooleanBody(members) {
    const node2 = {
      type: "EnumBooleanBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    };
    const defs = NODE_FIELDS.EnumBooleanBody;
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function enumNumberBody(members) {
    const node2 = {
      type: "EnumNumberBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    };
    const defs = NODE_FIELDS.EnumNumberBody;
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function enumStringBody(members) {
    const node2 = {
      type: "EnumStringBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    };
    const defs = NODE_FIELDS.EnumStringBody;
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function enumSymbolBody(members) {
    const node2 = {
      type: "EnumSymbolBody",
      members,
      hasUnknownMembers: null
    };
    const defs = NODE_FIELDS.EnumSymbolBody;
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function enumBooleanMember(id) {
    const node2 = {
      type: "EnumBooleanMember",
      id,
      init: null
    };
    const defs = NODE_FIELDS.EnumBooleanMember;
    validate2(defs.id, node2, "id", id, 1);
    return node2;
  }
  function enumNumberMember(id, init) {
    const node2 = {
      type: "EnumNumberMember",
      id,
      init
    };
    const defs = NODE_FIELDS.EnumNumberMember;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.init, node2, "init", init, 1);
    return node2;
  }
  function enumStringMember(id, init) {
    const node2 = {
      type: "EnumStringMember",
      id,
      init
    };
    const defs = NODE_FIELDS.EnumStringMember;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.init, node2, "init", init, 1);
    return node2;
  }
  function enumDefaultedMember(id) {
    const node2 = {
      type: "EnumDefaultedMember",
      id
    };
    const defs = NODE_FIELDS.EnumDefaultedMember;
    validate2(defs.id, node2, "id", id, 1);
    return node2;
  }
  function indexedAccessType(objectType, indexType) {
    const node2 = {
      type: "IndexedAccessType",
      objectType,
      indexType
    };
    const defs = NODE_FIELDS.IndexedAccessType;
    validate2(defs.objectType, node2, "objectType", objectType, 1);
    validate2(defs.indexType, node2, "indexType", indexType, 1);
    return node2;
  }
  function optionalIndexedAccessType(objectType, indexType) {
    const node2 = {
      type: "OptionalIndexedAccessType",
      objectType,
      indexType,
      optional: null
    };
    const defs = NODE_FIELDS.OptionalIndexedAccessType;
    validate2(defs.objectType, node2, "objectType", objectType, 1);
    validate2(defs.indexType, node2, "indexType", indexType, 1);
    return node2;
  }
  function jsxAttribute(name, value2 = null) {
    const node2 = {
      type: "JSXAttribute",
      name,
      value: value2
    };
    const defs = NODE_FIELDS.JSXAttribute;
    validate2(defs.name, node2, "name", name, 1);
    validate2(defs.value, node2, "value", value2, 1);
    return node2;
  }
  function jsxClosingElement(name) {
    const node2 = {
      type: "JSXClosingElement",
      name
    };
    const defs = NODE_FIELDS.JSXClosingElement;
    validate2(defs.name, node2, "name", name, 1);
    return node2;
  }
  function jsxElement(openingElement, closingElement = null, children, selfClosing = null) {
    const node2 = {
      type: "JSXElement",
      openingElement,
      closingElement,
      children,
      selfClosing
    };
    const defs = NODE_FIELDS.JSXElement;
    validate2(defs.openingElement, node2, "openingElement", openingElement, 1);
    validate2(defs.closingElement, node2, "closingElement", closingElement, 1);
    validate2(defs.children, node2, "children", children, 1);
    validate2(defs.selfClosing, node2, "selfClosing", selfClosing);
    return node2;
  }
  function jsxEmptyExpression() {
    return {
      type: "JSXEmptyExpression"
    };
  }
  function jsxExpressionContainer(expression) {
    const node2 = {
      type: "JSXExpressionContainer",
      expression
    };
    const defs = NODE_FIELDS.JSXExpressionContainer;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function jsxSpreadChild(expression) {
    const node2 = {
      type: "JSXSpreadChild",
      expression
    };
    const defs = NODE_FIELDS.JSXSpreadChild;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function jsxIdentifier(name) {
    const node2 = {
      type: "JSXIdentifier",
      name
    };
    const defs = NODE_FIELDS.JSXIdentifier;
    validate2(defs.name, node2, "name", name);
    return node2;
  }
  function jsxMemberExpression(object, property) {
    const node2 = {
      type: "JSXMemberExpression",
      object,
      property
    };
    const defs = NODE_FIELDS.JSXMemberExpression;
    validate2(defs.object, node2, "object", object, 1);
    validate2(defs.property, node2, "property", property, 1);
    return node2;
  }
  function jsxNamespacedName(namespace, name) {
    const node2 = {
      type: "JSXNamespacedName",
      namespace,
      name
    };
    const defs = NODE_FIELDS.JSXNamespacedName;
    validate2(defs.namespace, node2, "namespace", namespace, 1);
    validate2(defs.name, node2, "name", name, 1);
    return node2;
  }
  function jsxOpeningElement(name, attributes, selfClosing = false) {
    const node2 = {
      type: "JSXOpeningElement",
      name,
      attributes,
      selfClosing
    };
    const defs = NODE_FIELDS.JSXOpeningElement;
    validate2(defs.name, node2, "name", name, 1);
    validate2(defs.attributes, node2, "attributes", attributes, 1);
    validate2(defs.selfClosing, node2, "selfClosing", selfClosing);
    return node2;
  }
  function jsxSpreadAttribute(argument) {
    const node2 = {
      type: "JSXSpreadAttribute",
      argument
    };
    const defs = NODE_FIELDS.JSXSpreadAttribute;
    validate2(defs.argument, node2, "argument", argument, 1);
    return node2;
  }
  function jsxText(value2) {
    const node2 = {
      type: "JSXText",
      value: value2
    };
    const defs = NODE_FIELDS.JSXText;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function jsxFragment(openingFragment, closingFragment, children) {
    const node2 = {
      type: "JSXFragment",
      openingFragment,
      closingFragment,
      children
    };
    const defs = NODE_FIELDS.JSXFragment;
    validate2(defs.openingFragment, node2, "openingFragment", openingFragment, 1);
    validate2(defs.closingFragment, node2, "closingFragment", closingFragment, 1);
    validate2(defs.children, node2, "children", children, 1);
    return node2;
  }
  function jsxOpeningFragment() {
    return {
      type: "JSXOpeningFragment"
    };
  }
  function jsxClosingFragment() {
    return {
      type: "JSXClosingFragment"
    };
  }
  function noop() {
    return {
      type: "Noop"
    };
  }
  function placeholder(expectedNode, name) {
    const node2 = {
      type: "Placeholder",
      expectedNode,
      name
    };
    const defs = NODE_FIELDS.Placeholder;
    validate2(defs.expectedNode, node2, "expectedNode", expectedNode);
    validate2(defs.name, node2, "name", name, 1);
    return node2;
  }
  function v8IntrinsicIdentifier(name) {
    const node2 = {
      type: "V8IntrinsicIdentifier",
      name
    };
    const defs = NODE_FIELDS.V8IntrinsicIdentifier;
    validate2(defs.name, node2, "name", name);
    return node2;
  }
  function argumentPlaceholder() {
    return {
      type: "ArgumentPlaceholder"
    };
  }
  function bindExpression(object, callee) {
    const node2 = {
      type: "BindExpression",
      object,
      callee
    };
    const defs = NODE_FIELDS.BindExpression;
    validate2(defs.object, node2, "object", object, 1);
    validate2(defs.callee, node2, "callee", callee, 1);
    return node2;
  }
  function decorator(expression) {
    const node2 = {
      type: "Decorator",
      expression
    };
    const defs = NODE_FIELDS.Decorator;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function doExpression(body, async2 = false) {
    const node2 = {
      type: "DoExpression",
      body,
      async: async2
    };
    const defs = NODE_FIELDS.DoExpression;
    validate2(defs.body, node2, "body", body, 1);
    validate2(defs.async, node2, "async", async2);
    return node2;
  }
  function exportDefaultSpecifier(exported) {
    const node2 = {
      type: "ExportDefaultSpecifier",
      exported
    };
    const defs = NODE_FIELDS.ExportDefaultSpecifier;
    validate2(defs.exported, node2, "exported", exported, 1);
    return node2;
  }
  function recordExpression(properties) {
    const node2 = {
      type: "RecordExpression",
      properties
    };
    const defs = NODE_FIELDS.RecordExpression;
    validate2(defs.properties, node2, "properties", properties, 1);
    return node2;
  }
  function tupleExpression(elements = []) {
    const node2 = {
      type: "TupleExpression",
      elements
    };
    const defs = NODE_FIELDS.TupleExpression;
    validate2(defs.elements, node2, "elements", elements, 1);
    return node2;
  }
  function decimalLiteral(value2) {
    const node2 = {
      type: "DecimalLiteral",
      value: value2
    };
    const defs = NODE_FIELDS.DecimalLiteral;
    validate2(defs.value, node2, "value", value2);
    return node2;
  }
  function moduleExpression(body) {
    const node2 = {
      type: "ModuleExpression",
      body
    };
    const defs = NODE_FIELDS.ModuleExpression;
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function topicReference() {
    return {
      type: "TopicReference"
    };
  }
  function pipelineTopicExpression(expression) {
    const node2 = {
      type: "PipelineTopicExpression",
      expression
    };
    const defs = NODE_FIELDS.PipelineTopicExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function pipelineBareFunction(callee) {
    const node2 = {
      type: "PipelineBareFunction",
      callee
    };
    const defs = NODE_FIELDS.PipelineBareFunction;
    validate2(defs.callee, node2, "callee", callee, 1);
    return node2;
  }
  function pipelinePrimaryTopicReference() {
    return {
      type: "PipelinePrimaryTopicReference"
    };
  }
  function tsParameterProperty(parameter) {
    const node2 = {
      type: "TSParameterProperty",
      parameter
    };
    const defs = NODE_FIELDS.TSParameterProperty;
    validate2(defs.parameter, node2, "parameter", parameter, 1);
    return node2;
  }
  function tsDeclareFunction(id = null, typeParameters = null, params, returnType = null) {
    const node2 = {
      type: "TSDeclareFunction",
      id,
      typeParameters,
      params,
      returnType
    };
    const defs = NODE_FIELDS.TSDeclareFunction;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.returnType, node2, "returnType", returnType, 1);
    return node2;
  }
  function tsDeclareMethod(decorators = null, key, typeParameters = null, params, returnType = null) {
    const node2 = {
      type: "TSDeclareMethod",
      decorators,
      key,
      typeParameters,
      params,
      returnType
    };
    const defs = NODE_FIELDS.TSDeclareMethod;
    validate2(defs.decorators, node2, "decorators", decorators, 1);
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.params, node2, "params", params, 1);
    validate2(defs.returnType, node2, "returnType", returnType, 1);
    return node2;
  }
  function tsQualifiedName(left, right) {
    const node2 = {
      type: "TSQualifiedName",
      left,
      right
    };
    const defs = NODE_FIELDS.TSQualifiedName;
    validate2(defs.left, node2, "left", left, 1);
    validate2(defs.right, node2, "right", right, 1);
    return node2;
  }
  function tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
    const node2 = {
      type: "TSCallSignatureDeclaration",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSCallSignatureDeclaration;
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.parameters, node2, "parameters", parameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation2 = null) {
    const node2 = {
      type: "TSConstructSignatureDeclaration",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSConstructSignatureDeclaration;
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.parameters, node2, "parameters", parameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsPropertySignature(key, typeAnnotation2 = null) {
    const node2 = {
      type: "TSPropertySignature",
      key,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSPropertySignature;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsMethodSignature(key, typeParameters = null, parameters, typeAnnotation2 = null) {
    const node2 = {
      type: "TSMethodSignature",
      key,
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2,
      kind: null
    };
    const defs = NODE_FIELDS.TSMethodSignature;
    validate2(defs.key, node2, "key", key, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.parameters, node2, "parameters", parameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsIndexSignature(parameters, typeAnnotation2 = null) {
    const node2 = {
      type: "TSIndexSignature",
      parameters,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSIndexSignature;
    validate2(defs.parameters, node2, "parameters", parameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsAnyKeyword() {
    return {
      type: "TSAnyKeyword"
    };
  }
  function tsBooleanKeyword() {
    return {
      type: "TSBooleanKeyword"
    };
  }
  function tsBigIntKeyword() {
    return {
      type: "TSBigIntKeyword"
    };
  }
  function tsIntrinsicKeyword() {
    return {
      type: "TSIntrinsicKeyword"
    };
  }
  function tsNeverKeyword() {
    return {
      type: "TSNeverKeyword"
    };
  }
  function tsNullKeyword() {
    return {
      type: "TSNullKeyword"
    };
  }
  function tsNumberKeyword() {
    return {
      type: "TSNumberKeyword"
    };
  }
  function tsObjectKeyword() {
    return {
      type: "TSObjectKeyword"
    };
  }
  function tsStringKeyword() {
    return {
      type: "TSStringKeyword"
    };
  }
  function tsSymbolKeyword() {
    return {
      type: "TSSymbolKeyword"
    };
  }
  function tsUndefinedKeyword() {
    return {
      type: "TSUndefinedKeyword"
    };
  }
  function tsUnknownKeyword() {
    return {
      type: "TSUnknownKeyword"
    };
  }
  function tsVoidKeyword() {
    return {
      type: "TSVoidKeyword"
    };
  }
  function tsThisType() {
    return {
      type: "TSThisType"
    };
  }
  function tsFunctionType(typeParameters = null, parameters, typeAnnotation2 = null) {
    const node2 = {
      type: "TSFunctionType",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSFunctionType;
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.parameters, node2, "parameters", parameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsConstructorType(typeParameters = null, parameters, typeAnnotation2 = null) {
    const node2 = {
      type: "TSConstructorType",
      typeParameters,
      parameters,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSConstructorType;
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.parameters, node2, "parameters", parameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsTypeReference(typeName, typeParameters = null) {
    const node2 = {
      type: "TSTypeReference",
      typeName,
      typeParameters
    };
    const defs = NODE_FIELDS.TSTypeReference;
    validate2(defs.typeName, node2, "typeName", typeName, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function tsTypePredicate(parameterName, typeAnnotation2 = null, asserts = null) {
    const node2 = {
      type: "TSTypePredicate",
      parameterName,
      typeAnnotation: typeAnnotation2,
      asserts
    };
    const defs = NODE_FIELDS.TSTypePredicate;
    validate2(defs.parameterName, node2, "parameterName", parameterName, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    validate2(defs.asserts, node2, "asserts", asserts);
    return node2;
  }
  function tsTypeQuery(exprName, typeParameters = null) {
    const node2 = {
      type: "TSTypeQuery",
      exprName,
      typeParameters
    };
    const defs = NODE_FIELDS.TSTypeQuery;
    validate2(defs.exprName, node2, "exprName", exprName, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function tsTypeLiteral(members) {
    const node2 = {
      type: "TSTypeLiteral",
      members
    };
    const defs = NODE_FIELDS.TSTypeLiteral;
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function tsArrayType(elementType) {
    const node2 = {
      type: "TSArrayType",
      elementType
    };
    const defs = NODE_FIELDS.TSArrayType;
    validate2(defs.elementType, node2, "elementType", elementType, 1);
    return node2;
  }
  function tsTupleType(elementTypes) {
    const node2 = {
      type: "TSTupleType",
      elementTypes
    };
    const defs = NODE_FIELDS.TSTupleType;
    validate2(defs.elementTypes, node2, "elementTypes", elementTypes, 1);
    return node2;
  }
  function tsOptionalType(typeAnnotation2) {
    const node2 = {
      type: "TSOptionalType",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSOptionalType;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsRestType(typeAnnotation2) {
    const node2 = {
      type: "TSRestType",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSRestType;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsNamedTupleMember(label, elementType, optional = false) {
    const node2 = {
      type: "TSNamedTupleMember",
      label,
      elementType,
      optional
    };
    const defs = NODE_FIELDS.TSNamedTupleMember;
    validate2(defs.label, node2, "label", label, 1);
    validate2(defs.elementType, node2, "elementType", elementType, 1);
    validate2(defs.optional, node2, "optional", optional);
    return node2;
  }
  function tsUnionType(types2) {
    const node2 = {
      type: "TSUnionType",
      types: types2
    };
    const defs = NODE_FIELDS.TSUnionType;
    validate2(defs.types, node2, "types", types2, 1);
    return node2;
  }
  function tsIntersectionType(types2) {
    const node2 = {
      type: "TSIntersectionType",
      types: types2
    };
    const defs = NODE_FIELDS.TSIntersectionType;
    validate2(defs.types, node2, "types", types2, 1);
    return node2;
  }
  function tsConditionalType(checkType, extendsType, trueType, falseType) {
    const node2 = {
      type: "TSConditionalType",
      checkType,
      extendsType,
      trueType,
      falseType
    };
    const defs = NODE_FIELDS.TSConditionalType;
    validate2(defs.checkType, node2, "checkType", checkType, 1);
    validate2(defs.extendsType, node2, "extendsType", extendsType, 1);
    validate2(defs.trueType, node2, "trueType", trueType, 1);
    validate2(defs.falseType, node2, "falseType", falseType, 1);
    return node2;
  }
  function tsInferType(typeParameter2) {
    const node2 = {
      type: "TSInferType",
      typeParameter: typeParameter2
    };
    const defs = NODE_FIELDS.TSInferType;
    validate2(defs.typeParameter, node2, "typeParameter", typeParameter2, 1);
    return node2;
  }
  function tsParenthesizedType(typeAnnotation2) {
    const node2 = {
      type: "TSParenthesizedType",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSParenthesizedType;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsTypeOperator(typeAnnotation2) {
    const node2 = {
      type: "TSTypeOperator",
      typeAnnotation: typeAnnotation2,
      operator: null
    };
    const defs = NODE_FIELDS.TSTypeOperator;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsIndexedAccessType(objectType, indexType) {
    const node2 = {
      type: "TSIndexedAccessType",
      objectType,
      indexType
    };
    const defs = NODE_FIELDS.TSIndexedAccessType;
    validate2(defs.objectType, node2, "objectType", objectType, 1);
    validate2(defs.indexType, node2, "indexType", indexType, 1);
    return node2;
  }
  function tsMappedType(typeParameter2, typeAnnotation2 = null, nameType = null) {
    const node2 = {
      type: "TSMappedType",
      typeParameter: typeParameter2,
      typeAnnotation: typeAnnotation2,
      nameType
    };
    const defs = NODE_FIELDS.TSMappedType;
    validate2(defs.typeParameter, node2, "typeParameter", typeParameter2, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    validate2(defs.nameType, node2, "nameType", nameType, 1);
    return node2;
  }
  function tsTemplateLiteralType(quasis, types2) {
    const node2 = {
      type: "TSTemplateLiteralType",
      quasis,
      types: types2
    };
    const defs = NODE_FIELDS.TSTemplateLiteralType;
    validate2(defs.quasis, node2, "quasis", quasis, 1);
    validate2(defs.types, node2, "types", types2, 1);
    return node2;
  }
  function tsLiteralType(literal2) {
    const node2 = {
      type: "TSLiteralType",
      literal: literal2
    };
    const defs = NODE_FIELDS.TSLiteralType;
    validate2(defs.literal, node2, "literal", literal2, 1);
    return node2;
  }
  function tsExpressionWithTypeArguments(expression, typeParameters = null) {
    const node2 = {
      type: "TSExpressionWithTypeArguments",
      expression,
      typeParameters
    };
    const defs = NODE_FIELDS.TSExpressionWithTypeArguments;
    validate2(defs.expression, node2, "expression", expression, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function tsInterfaceDeclaration(id, typeParameters = null, _extends = null, body) {
    const node2 = {
      type: "TSInterfaceDeclaration",
      id,
      typeParameters,
      extends: _extends,
      body
    };
    const defs = NODE_FIELDS.TSInterfaceDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.extends, node2, "extends", _extends, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function tsInterfaceBody(body) {
    const node2 = {
      type: "TSInterfaceBody",
      body
    };
    const defs = NODE_FIELDS.TSInterfaceBody;
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function tsTypeAliasDeclaration(id, typeParameters = null, typeAnnotation2) {
    const node2 = {
      type: "TSTypeAliasDeclaration",
      id,
      typeParameters,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSTypeAliasDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsInstantiationExpression(expression, typeParameters = null) {
    const node2 = {
      type: "TSInstantiationExpression",
      expression,
      typeParameters
    };
    const defs = NODE_FIELDS.TSInstantiationExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function tsAsExpression(expression, typeAnnotation2) {
    const node2 = {
      type: "TSAsExpression",
      expression,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSAsExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsSatisfiesExpression(expression, typeAnnotation2) {
    const node2 = {
      type: "TSSatisfiesExpression",
      expression,
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSSatisfiesExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsTypeAssertion(typeAnnotation2, expression) {
    const node2 = {
      type: "TSTypeAssertion",
      typeAnnotation: typeAnnotation2,
      expression
    };
    const defs = NODE_FIELDS.TSTypeAssertion;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function tsEnumBody(members) {
    const node2 = {
      type: "TSEnumBody",
      members
    };
    const defs = NODE_FIELDS.TSEnumBody;
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function tsEnumDeclaration(id, members) {
    const node2 = {
      type: "TSEnumDeclaration",
      id,
      members
    };
    const defs = NODE_FIELDS.TSEnumDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.members, node2, "members", members, 1);
    return node2;
  }
  function tsEnumMember(id, initializer = null) {
    const node2 = {
      type: "TSEnumMember",
      id,
      initializer
    };
    const defs = NODE_FIELDS.TSEnumMember;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.initializer, node2, "initializer", initializer, 1);
    return node2;
  }
  function tsModuleDeclaration(id, body) {
    const node2 = {
      type: "TSModuleDeclaration",
      id,
      body,
      kind: null
    };
    const defs = NODE_FIELDS.TSModuleDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function tsModuleBlock(body) {
    const node2 = {
      type: "TSModuleBlock",
      body
    };
    const defs = NODE_FIELDS.TSModuleBlock;
    validate2(defs.body, node2, "body", body, 1);
    return node2;
  }
  function tsImportType(argument, qualifier = null, typeParameters = null) {
    const node2 = {
      type: "TSImportType",
      argument,
      qualifier,
      typeParameters
    };
    const defs = NODE_FIELDS.TSImportType;
    validate2(defs.argument, node2, "argument", argument, 1);
    validate2(defs.qualifier, node2, "qualifier", qualifier, 1);
    validate2(defs.typeParameters, node2, "typeParameters", typeParameters, 1);
    return node2;
  }
  function tsImportEqualsDeclaration(id, moduleReference) {
    const node2 = {
      type: "TSImportEqualsDeclaration",
      id,
      moduleReference,
      isExport: null
    };
    const defs = NODE_FIELDS.TSImportEqualsDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    validate2(defs.moduleReference, node2, "moduleReference", moduleReference, 1);
    return node2;
  }
  function tsExternalModuleReference(expression) {
    const node2 = {
      type: "TSExternalModuleReference",
      expression
    };
    const defs = NODE_FIELDS.TSExternalModuleReference;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function tsNonNullExpression(expression) {
    const node2 = {
      type: "TSNonNullExpression",
      expression
    };
    const defs = NODE_FIELDS.TSNonNullExpression;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function tsExportAssignment(expression) {
    const node2 = {
      type: "TSExportAssignment",
      expression
    };
    const defs = NODE_FIELDS.TSExportAssignment;
    validate2(defs.expression, node2, "expression", expression, 1);
    return node2;
  }
  function tsNamespaceExportDeclaration(id) {
    const node2 = {
      type: "TSNamespaceExportDeclaration",
      id
    };
    const defs = NODE_FIELDS.TSNamespaceExportDeclaration;
    validate2(defs.id, node2, "id", id, 1);
    return node2;
  }
  function tsTypeAnnotation(typeAnnotation2) {
    const node2 = {
      type: "TSTypeAnnotation",
      typeAnnotation: typeAnnotation2
    };
    const defs = NODE_FIELDS.TSTypeAnnotation;
    validate2(defs.typeAnnotation, node2, "typeAnnotation", typeAnnotation2, 1);
    return node2;
  }
  function tsTypeParameterInstantiation(params) {
    const node2 = {
      type: "TSTypeParameterInstantiation",
      params
    };
    const defs = NODE_FIELDS.TSTypeParameterInstantiation;
    validate2(defs.params, node2, "params", params, 1);
    return node2;
  }
  function tsTypeParameterDeclaration(params) {
    const node2 = {
      type: "TSTypeParameterDeclaration",
      params
    };
    const defs = NODE_FIELDS.TSTypeParameterDeclaration;
    validate2(defs.params, node2, "params", params, 1);
    return node2;
  }
  function tsTypeParameter(constraint = null, _default = null, name) {
    const node2 = {
      type: "TSTypeParameter",
      constraint,
      default: _default,
      name
    };
    const defs = NODE_FIELDS.TSTypeParameter;
    validate2(defs.constraint, node2, "constraint", constraint, 1);
    validate2(defs.default, node2, "default", _default, 1);
    validate2(defs.name, node2, "name", name);
    return node2;
  }
  function NumberLiteral(value2) {
    (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type ");
    return numericLiteral(value2);
  }
  function RegexLiteral(pattern, flags = "") {
    (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type ");
    return regExpLiteral(pattern, flags);
  }
  function RestProperty(argument) {
    (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type ");
    return restElement(argument);
  }
  function SpreadProperty(argument) {
    (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type ");
    return spreadElement(argument);
  }
  return lowercase;
}
var uppercase = {};
var hasRequiredUppercase;
function requireUppercase() {
  if (hasRequiredUppercase) return uppercase;
  hasRequiredUppercase = 1;
  Object.defineProperty(uppercase, "__esModule", {
    value: true
  });
  uppercase.JSXIdentifier = uppercase.JSXFragment = uppercase.JSXExpressionContainer = uppercase.JSXEmptyExpression = uppercase.JSXElement = uppercase.JSXClosingFragment = uppercase.JSXClosingElement = uppercase.JSXAttribute = uppercase.IntersectionTypeAnnotation = uppercase.InterpreterDirective = uppercase.InterfaceTypeAnnotation = uppercase.InterfaceExtends = uppercase.InterfaceDeclaration = uppercase.InferredPredicate = uppercase.IndexedAccessType = uppercase.ImportSpecifier = uppercase.ImportNamespaceSpecifier = uppercase.ImportExpression = uppercase.ImportDefaultSpecifier = uppercase.ImportDeclaration = uppercase.ImportAttribute = uppercase.Import = uppercase.IfStatement = uppercase.Identifier = uppercase.GenericTypeAnnotation = uppercase.FunctionTypeParam = uppercase.FunctionTypeAnnotation = uppercase.FunctionExpression = uppercase.FunctionDeclaration = uppercase.ForStatement = uppercase.ForOfStatement = uppercase.ForInStatement = uppercase.File = uppercase.ExpressionStatement = uppercase.ExportSpecifier = uppercase.ExportNamespaceSpecifier = uppercase.ExportNamedDeclaration = uppercase.ExportDefaultSpecifier = uppercase.ExportDefaultDeclaration = uppercase.ExportAllDeclaration = uppercase.ExistsTypeAnnotation = uppercase.EnumSymbolBody = uppercase.EnumStringMember = uppercase.EnumStringBody = uppercase.EnumNumberMember = uppercase.EnumNumberBody = uppercase.EnumDefaultedMember = uppercase.EnumDeclaration = uppercase.EnumBooleanMember = uppercase.EnumBooleanBody = uppercase.EmptyTypeAnnotation = uppercase.EmptyStatement = uppercase.DoWhileStatement = uppercase.DoExpression = uppercase.DirectiveLiteral = uppercase.Directive = uppercase.Decorator = uppercase.DeclaredPredicate = uppercase.DeclareVariable = uppercase.DeclareTypeAlias = uppercase.DeclareOpaqueType = uppercase.DeclareModuleExports = uppercase.DeclareModule = uppercase.DeclareInterface = uppercase.DeclareFunction = uppercase.DeclareExportDeclaration = uppercase.DeclareExportAllDeclaration = uppercase.DeclareClass = uppercase.DecimalLiteral = uppercase.DebuggerStatement = uppercase.ContinueStatement = uppercase.ConditionalExpression = uppercase.ClassProperty = uppercase.ClassPrivateProperty = uppercase.ClassPrivateMethod = uppercase.ClassMethod = uppercase.ClassImplements = uppercase.ClassExpression = uppercase.ClassDeclaration = uppercase.ClassBody = uppercase.ClassAccessorProperty = uppercase.CatchClause = uppercase.CallExpression = uppercase.BreakStatement = uppercase.BooleanTypeAnnotation = uppercase.BooleanLiteralTypeAnnotation = uppercase.BooleanLiteral = uppercase.BlockStatement = uppercase.BindExpression = uppercase.BinaryExpression = uppercase.BigIntLiteral = uppercase.AwaitExpression = uppercase.AssignmentPattern = uppercase.AssignmentExpression = uppercase.ArrowFunctionExpression = uppercase.ArrayTypeAnnotation = uppercase.ArrayPattern = uppercase.ArrayExpression = uppercase.ArgumentPlaceholder = uppercase.AnyTypeAnnotation = void 0;
  uppercase.TSNumberKeyword = uppercase.TSNullKeyword = uppercase.TSNonNullExpression = uppercase.TSNeverKeyword = uppercase.TSNamespaceExportDeclaration = uppercase.TSNamedTupleMember = uppercase.TSModuleDeclaration = uppercase.TSModuleBlock = uppercase.TSMethodSignature = uppercase.TSMappedType = uppercase.TSLiteralType = uppercase.TSIntrinsicKeyword = uppercase.TSIntersectionType = uppercase.TSInterfaceDeclaration = uppercase.TSInterfaceBody = uppercase.TSInstantiationExpression = uppercase.TSInferType = uppercase.TSIndexedAccessType = uppercase.TSIndexSignature = uppercase.TSImportType = uppercase.TSImportEqualsDeclaration = uppercase.TSFunctionType = uppercase.TSExternalModuleReference = uppercase.TSExpressionWithTypeArguments = uppercase.TSExportAssignment = uppercase.TSEnumMember = uppercase.TSEnumDeclaration = uppercase.TSEnumBody = uppercase.TSDeclareMethod = uppercase.TSDeclareFunction = uppercase.TSConstructorType = uppercase.TSConstructSignatureDeclaration = uppercase.TSConditionalType = uppercase.TSCallSignatureDeclaration = uppercase.TSBooleanKeyword = uppercase.TSBigIntKeyword = uppercase.TSAsExpression = uppercase.TSArrayType = uppercase.TSAnyKeyword = uppercase.SymbolTypeAnnotation = uppercase.SwitchStatement = uppercase.SwitchCase = uppercase.Super = uppercase.StringTypeAnnotation = uppercase.StringLiteralTypeAnnotation = uppercase.StringLiteral = uppercase.StaticBlock = uppercase.SpreadProperty = uppercase.SpreadElement = uppercase.SequenceExpression = uppercase.ReturnStatement = uppercase.RestProperty = uppercase.RestElement = uppercase.RegexLiteral = uppercase.RegExpLiteral = uppercase.RecordExpression = uppercase.QualifiedTypeIdentifier = uppercase.Program = uppercase.PrivateName = uppercase.Placeholder = uppercase.PipelineTopicExpression = uppercase.PipelinePrimaryTopicReference = uppercase.PipelineBareFunction = uppercase.ParenthesizedExpression = uppercase.OptionalMemberExpression = uppercase.OptionalIndexedAccessType = uppercase.OptionalCallExpression = uppercase.OpaqueType = uppercase.ObjectTypeSpreadProperty = uppercase.ObjectTypeProperty = uppercase.ObjectTypeInternalSlot = uppercase.ObjectTypeIndexer = uppercase.ObjectTypeCallProperty = uppercase.ObjectTypeAnnotation = uppercase.ObjectProperty = uppercase.ObjectPattern = uppercase.ObjectMethod = uppercase.ObjectExpression = uppercase.NumericLiteral = uppercase.NumberTypeAnnotation = uppercase.NumberLiteralTypeAnnotation = uppercase.NumberLiteral = uppercase.NullableTypeAnnotation = uppercase.NullLiteralTypeAnnotation = uppercase.NullLiteral = uppercase.Noop = uppercase.NewExpression = uppercase.ModuleExpression = uppercase.MixedTypeAnnotation = uppercase.MetaProperty = uppercase.MemberExpression = uppercase.LogicalExpression = uppercase.LabeledStatement = uppercase.JSXText = uppercase.JSXSpreadChild = uppercase.JSXSpreadAttribute = uppercase.JSXOpeningFragment = uppercase.JSXOpeningElement = uppercase.JSXNamespacedName = uppercase.JSXMemberExpression = void 0;
  uppercase.YieldExpression = uppercase.WithStatement = uppercase.WhileStatement = uppercase.VoidTypeAnnotation = uppercase.Variance = uppercase.VariableDeclarator = uppercase.VariableDeclaration = uppercase.V8IntrinsicIdentifier = uppercase.UpdateExpression = uppercase.UnionTypeAnnotation = uppercase.UnaryExpression = uppercase.TypeofTypeAnnotation = uppercase.TypeParameterInstantiation = uppercase.TypeParameterDeclaration = uppercase.TypeParameter = uppercase.TypeCastExpression = uppercase.TypeAnnotation = uppercase.TypeAlias = uppercase.TupleTypeAnnotation = uppercase.TupleExpression = uppercase.TryStatement = uppercase.TopicReference = uppercase.ThrowStatement = uppercase.ThisTypeAnnotation = uppercase.ThisExpression = uppercase.TemplateLiteral = uppercase.TemplateElement = uppercase.TaggedTemplateExpression = uppercase.TSVoidKeyword = uppercase.TSUnknownKeyword = uppercase.TSUnionType = uppercase.TSUndefinedKeyword = uppercase.TSTypeReference = uppercase.TSTypeQuery = uppercase.TSTypePredicate = uppercase.TSTypeParameterInstantiation = uppercase.TSTypeParameterDeclaration = uppercase.TSTypeParameter = uppercase.TSTypeOperator = uppercase.TSTypeLiteral = uppercase.TSTypeAssertion = uppercase.TSTypeAnnotation = uppercase.TSTypeAliasDeclaration = uppercase.TSTupleType = uppercase.TSThisType = uppercase.TSTemplateLiteralType = uppercase.TSSymbolKeyword = uppercase.TSStringKeyword = uppercase.TSSatisfiesExpression = uppercase.TSRestType = uppercase.TSQualifiedName = uppercase.TSPropertySignature = uppercase.TSParenthesizedType = uppercase.TSParameterProperty = uppercase.TSOptionalType = uppercase.TSObjectKeyword = void 0;
  var b = requireLowercase();
  requireDeprecationWarning();
  function alias(lowercase2) {
    {
      return b[lowercase2];
    }
  }
  uppercase.ArrayExpression = alias("arrayExpression");
  uppercase.AssignmentExpression = alias("assignmentExpression");
  uppercase.BinaryExpression = alias("binaryExpression");
  uppercase.InterpreterDirective = alias("interpreterDirective");
  uppercase.Directive = alias("directive");
  uppercase.DirectiveLiteral = alias("directiveLiteral");
  uppercase.BlockStatement = alias("blockStatement");
  uppercase.BreakStatement = alias("breakStatement");
  uppercase.CallExpression = alias("callExpression");
  uppercase.CatchClause = alias("catchClause");
  uppercase.ConditionalExpression = alias("conditionalExpression");
  uppercase.ContinueStatement = alias("continueStatement");
  uppercase.DebuggerStatement = alias("debuggerStatement");
  uppercase.DoWhileStatement = alias("doWhileStatement");
  uppercase.EmptyStatement = alias("emptyStatement");
  uppercase.ExpressionStatement = alias("expressionStatement");
  uppercase.File = alias("file");
  uppercase.ForInStatement = alias("forInStatement");
  uppercase.ForStatement = alias("forStatement");
  uppercase.FunctionDeclaration = alias("functionDeclaration");
  uppercase.FunctionExpression = alias("functionExpression");
  uppercase.Identifier = alias("identifier");
  uppercase.IfStatement = alias("ifStatement");
  uppercase.LabeledStatement = alias("labeledStatement");
  uppercase.StringLiteral = alias("stringLiteral");
  uppercase.NumericLiteral = alias("numericLiteral");
  uppercase.NullLiteral = alias("nullLiteral");
  uppercase.BooleanLiteral = alias("booleanLiteral");
  uppercase.RegExpLiteral = alias("regExpLiteral");
  uppercase.LogicalExpression = alias("logicalExpression");
  uppercase.MemberExpression = alias("memberExpression");
  uppercase.NewExpression = alias("newExpression");
  uppercase.Program = alias("program");
  uppercase.ObjectExpression = alias("objectExpression");
  uppercase.ObjectMethod = alias("objectMethod");
  uppercase.ObjectProperty = alias("objectProperty");
  uppercase.RestElement = alias("restElement");
  uppercase.ReturnStatement = alias("returnStatement");
  uppercase.SequenceExpression = alias("sequenceExpression");
  uppercase.ParenthesizedExpression = alias("parenthesizedExpression");
  uppercase.SwitchCase = alias("switchCase");
  uppercase.SwitchStatement = alias("switchStatement");
  uppercase.ThisExpression = alias("thisExpression");
  uppercase.ThrowStatement = alias("throwStatement");
  uppercase.TryStatement = alias("tryStatement");
  uppercase.UnaryExpression = alias("unaryExpression");
  uppercase.UpdateExpression = alias("updateExpression");
  uppercase.VariableDeclaration = alias("variableDeclaration");
  uppercase.VariableDeclarator = alias("variableDeclarator");
  uppercase.WhileStatement = alias("whileStatement");
  uppercase.WithStatement = alias("withStatement");
  uppercase.AssignmentPattern = alias("assignmentPattern");
  uppercase.ArrayPattern = alias("arrayPattern");
  uppercase.ArrowFunctionExpression = alias("arrowFunctionExpression");
  uppercase.ClassBody = alias("classBody");
  uppercase.ClassExpression = alias("classExpression");
  uppercase.ClassDeclaration = alias("classDeclaration");
  uppercase.ExportAllDeclaration = alias("exportAllDeclaration");
  uppercase.ExportDefaultDeclaration = alias("exportDefaultDeclaration");
  uppercase.ExportNamedDeclaration = alias("exportNamedDeclaration");
  uppercase.ExportSpecifier = alias("exportSpecifier");
  uppercase.ForOfStatement = alias("forOfStatement");
  uppercase.ImportDeclaration = alias("importDeclaration");
  uppercase.ImportDefaultSpecifier = alias("importDefaultSpecifier");
  uppercase.ImportNamespaceSpecifier = alias("importNamespaceSpecifier");
  uppercase.ImportSpecifier = alias("importSpecifier");
  uppercase.ImportExpression = alias("importExpression");
  uppercase.MetaProperty = alias("metaProperty");
  uppercase.ClassMethod = alias("classMethod");
  uppercase.ObjectPattern = alias("objectPattern");
  uppercase.SpreadElement = alias("spreadElement");
  uppercase.Super = alias("super");
  uppercase.TaggedTemplateExpression = alias("taggedTemplateExpression");
  uppercase.TemplateElement = alias("templateElement");
  uppercase.TemplateLiteral = alias("templateLiteral");
  uppercase.YieldExpression = alias("yieldExpression");
  uppercase.AwaitExpression = alias("awaitExpression");
  uppercase.Import = alias("import");
  uppercase.BigIntLiteral = alias("bigIntLiteral");
  uppercase.ExportNamespaceSpecifier = alias("exportNamespaceSpecifier");
  uppercase.OptionalMemberExpression = alias("optionalMemberExpression");
  uppercase.OptionalCallExpression = alias("optionalCallExpression");
  uppercase.ClassProperty = alias("classProperty");
  uppercase.ClassAccessorProperty = alias("classAccessorProperty");
  uppercase.ClassPrivateProperty = alias("classPrivateProperty");
  uppercase.ClassPrivateMethod = alias("classPrivateMethod");
  uppercase.PrivateName = alias("privateName");
  uppercase.StaticBlock = alias("staticBlock");
  uppercase.ImportAttribute = alias("importAttribute");
  uppercase.AnyTypeAnnotation = alias("anyTypeAnnotation");
  uppercase.ArrayTypeAnnotation = alias("arrayTypeAnnotation");
  uppercase.BooleanTypeAnnotation = alias("booleanTypeAnnotation");
  uppercase.BooleanLiteralTypeAnnotation = alias("booleanLiteralTypeAnnotation");
  uppercase.NullLiteralTypeAnnotation = alias("nullLiteralTypeAnnotation");
  uppercase.ClassImplements = alias("classImplements");
  uppercase.DeclareClass = alias("declareClass");
  uppercase.DeclareFunction = alias("declareFunction");
  uppercase.DeclareInterface = alias("declareInterface");
  uppercase.DeclareModule = alias("declareModule");
  uppercase.DeclareModuleExports = alias("declareModuleExports");
  uppercase.DeclareTypeAlias = alias("declareTypeAlias");
  uppercase.DeclareOpaqueType = alias("declareOpaqueType");
  uppercase.DeclareVariable = alias("declareVariable");
  uppercase.DeclareExportDeclaration = alias("declareExportDeclaration");
  uppercase.DeclareExportAllDeclaration = alias("declareExportAllDeclaration");
  uppercase.DeclaredPredicate = alias("declaredPredicate");
  uppercase.ExistsTypeAnnotation = alias("existsTypeAnnotation");
  uppercase.FunctionTypeAnnotation = alias("functionTypeAnnotation");
  uppercase.FunctionTypeParam = alias("functionTypeParam");
  uppercase.GenericTypeAnnotation = alias("genericTypeAnnotation");
  uppercase.InferredPredicate = alias("inferredPredicate");
  uppercase.InterfaceExtends = alias("interfaceExtends");
  uppercase.InterfaceDeclaration = alias("interfaceDeclaration");
  uppercase.InterfaceTypeAnnotation = alias("interfaceTypeAnnotation");
  uppercase.IntersectionTypeAnnotation = alias("intersectionTypeAnnotation");
  uppercase.MixedTypeAnnotation = alias("mixedTypeAnnotation");
  uppercase.EmptyTypeAnnotation = alias("emptyTypeAnnotation");
  uppercase.NullableTypeAnnotation = alias("nullableTypeAnnotation");
  uppercase.NumberLiteralTypeAnnotation = alias("numberLiteralTypeAnnotation");
  uppercase.NumberTypeAnnotation = alias("numberTypeAnnotation");
  uppercase.ObjectTypeAnnotation = alias("objectTypeAnnotation");
  uppercase.ObjectTypeInternalSlot = alias("objectTypeInternalSlot");
  uppercase.ObjectTypeCallProperty = alias("objectTypeCallProperty");
  uppercase.ObjectTypeIndexer = alias("objectTypeIndexer");
  uppercase.ObjectTypeProperty = alias("objectTypeProperty");
  uppercase.ObjectTypeSpreadProperty = alias("objectTypeSpreadProperty");
  uppercase.OpaqueType = alias("opaqueType");
  uppercase.QualifiedTypeIdentifier = alias("qualifiedTypeIdentifier");
  uppercase.StringLiteralTypeAnnotation = alias("stringLiteralTypeAnnotation");
  uppercase.StringTypeAnnotation = alias("stringTypeAnnotation");
  uppercase.SymbolTypeAnnotation = alias("symbolTypeAnnotation");
  uppercase.ThisTypeAnnotation = alias("thisTypeAnnotation");
  uppercase.TupleTypeAnnotation = alias("tupleTypeAnnotation");
  uppercase.TypeofTypeAnnotation = alias("typeofTypeAnnotation");
  uppercase.TypeAlias = alias("typeAlias");
  uppercase.TypeAnnotation = alias("typeAnnotation");
  uppercase.TypeCastExpression = alias("typeCastExpression");
  uppercase.TypeParameter = alias("typeParameter");
  uppercase.TypeParameterDeclaration = alias("typeParameterDeclaration");
  uppercase.TypeParameterInstantiation = alias("typeParameterInstantiation");
  uppercase.UnionTypeAnnotation = alias("unionTypeAnnotation");
  uppercase.Variance = alias("variance");
  uppercase.VoidTypeAnnotation = alias("voidTypeAnnotation");
  uppercase.EnumDeclaration = alias("enumDeclaration");
  uppercase.EnumBooleanBody = alias("enumBooleanBody");
  uppercase.EnumNumberBody = alias("enumNumberBody");
  uppercase.EnumStringBody = alias("enumStringBody");
  uppercase.EnumSymbolBody = alias("enumSymbolBody");
  uppercase.EnumBooleanMember = alias("enumBooleanMember");
  uppercase.EnumNumberMember = alias("enumNumberMember");
  uppercase.EnumStringMember = alias("enumStringMember");
  uppercase.EnumDefaultedMember = alias("enumDefaultedMember");
  uppercase.IndexedAccessType = alias("indexedAccessType");
  uppercase.OptionalIndexedAccessType = alias("optionalIndexedAccessType");
  uppercase.JSXAttribute = alias("jsxAttribute");
  uppercase.JSXClosingElement = alias("jsxClosingElement");
  uppercase.JSXElement = alias("jsxElement");
  uppercase.JSXEmptyExpression = alias("jsxEmptyExpression");
  uppercase.JSXExpressionContainer = alias("jsxExpressionContainer");
  uppercase.JSXSpreadChild = alias("jsxSpreadChild");
  uppercase.JSXIdentifier = alias("jsxIdentifier");
  uppercase.JSXMemberExpression = alias("jsxMemberExpression");
  uppercase.JSXNamespacedName = alias("jsxNamespacedName");
  uppercase.JSXOpeningElement = alias("jsxOpeningElement");
  uppercase.JSXSpreadAttribute = alias("jsxSpreadAttribute");
  uppercase.JSXText = alias("jsxText");
  uppercase.JSXFragment = alias("jsxFragment");
  uppercase.JSXOpeningFragment = alias("jsxOpeningFragment");
  uppercase.JSXClosingFragment = alias("jsxClosingFragment");
  uppercase.Noop = alias("noop");
  uppercase.Placeholder = alias("placeholder");
  uppercase.V8IntrinsicIdentifier = alias("v8IntrinsicIdentifier");
  uppercase.ArgumentPlaceholder = alias("argumentPlaceholder");
  uppercase.BindExpression = alias("bindExpression");
  uppercase.Decorator = alias("decorator");
  uppercase.DoExpression = alias("doExpression");
  uppercase.ExportDefaultSpecifier = alias("exportDefaultSpecifier");
  uppercase.RecordExpression = alias("recordExpression");
  uppercase.TupleExpression = alias("tupleExpression");
  uppercase.DecimalLiteral = alias("decimalLiteral");
  uppercase.ModuleExpression = alias("moduleExpression");
  uppercase.TopicReference = alias("topicReference");
  uppercase.PipelineTopicExpression = alias("pipelineTopicExpression");
  uppercase.PipelineBareFunction = alias("pipelineBareFunction");
  uppercase.PipelinePrimaryTopicReference = alias("pipelinePrimaryTopicReference");
  uppercase.TSParameterProperty = alias("tsParameterProperty");
  uppercase.TSDeclareFunction = alias("tsDeclareFunction");
  uppercase.TSDeclareMethod = alias("tsDeclareMethod");
  uppercase.TSQualifiedName = alias("tsQualifiedName");
  uppercase.TSCallSignatureDeclaration = alias("tsCallSignatureDeclaration");
  uppercase.TSConstructSignatureDeclaration = alias("tsConstructSignatureDeclaration");
  uppercase.TSPropertySignature = alias("tsPropertySignature");
  uppercase.TSMethodSignature = alias("tsMethodSignature");
  uppercase.TSIndexSignature = alias("tsIndexSignature");
  uppercase.TSAnyKeyword = alias("tsAnyKeyword");
  uppercase.TSBooleanKeyword = alias("tsBooleanKeyword");
  uppercase.TSBigIntKeyword = alias("tsBigIntKeyword");
  uppercase.TSIntrinsicKeyword = alias("tsIntrinsicKeyword");
  uppercase.TSNeverKeyword = alias("tsNeverKeyword");
  uppercase.TSNullKeyword = alias("tsNullKeyword");
  uppercase.TSNumberKeyword = alias("tsNumberKeyword");
  uppercase.TSObjectKeyword = alias("tsObjectKeyword");
  uppercase.TSStringKeyword = alias("tsStringKeyword");
  uppercase.TSSymbolKeyword = alias("tsSymbolKeyword");
  uppercase.TSUndefinedKeyword = alias("tsUndefinedKeyword");
  uppercase.TSUnknownKeyword = alias("tsUnknownKeyword");
  uppercase.TSVoidKeyword = alias("tsVoidKeyword");
  uppercase.TSThisType = alias("tsThisType");
  uppercase.TSFunctionType = alias("tsFunctionType");
  uppercase.TSConstructorType = alias("tsConstructorType");
  uppercase.TSTypeReference = alias("tsTypeReference");
  uppercase.TSTypePredicate = alias("tsTypePredicate");
  uppercase.TSTypeQuery = alias("tsTypeQuery");
  uppercase.TSTypeLiteral = alias("tsTypeLiteral");
  uppercase.TSArrayType = alias("tsArrayType");
  uppercase.TSTupleType = alias("tsTupleType");
  uppercase.TSOptionalType = alias("tsOptionalType");
  uppercase.TSRestType = alias("tsRestType");
  uppercase.TSNamedTupleMember = alias("tsNamedTupleMember");
  uppercase.TSUnionType = alias("tsUnionType");
  uppercase.TSIntersectionType = alias("tsIntersectionType");
  uppercase.TSConditionalType = alias("tsConditionalType");
  uppercase.TSInferType = alias("tsInferType");
  uppercase.TSParenthesizedType = alias("tsParenthesizedType");
  uppercase.TSTypeOperator = alias("tsTypeOperator");
  uppercase.TSIndexedAccessType = alias("tsIndexedAccessType");
  uppercase.TSMappedType = alias("tsMappedType");
  uppercase.TSTemplateLiteralType = alias("tsTemplateLiteralType");
  uppercase.TSLiteralType = alias("tsLiteralType");
  uppercase.TSExpressionWithTypeArguments = alias("tsExpressionWithTypeArguments");
  uppercase.TSInterfaceDeclaration = alias("tsInterfaceDeclaration");
  uppercase.TSInterfaceBody = alias("tsInterfaceBody");
  uppercase.TSTypeAliasDeclaration = alias("tsTypeAliasDeclaration");
  uppercase.TSInstantiationExpression = alias("tsInstantiationExpression");
  uppercase.TSAsExpression = alias("tsAsExpression");
  uppercase.TSSatisfiesExpression = alias("tsSatisfiesExpression");
  uppercase.TSTypeAssertion = alias("tsTypeAssertion");
  uppercase.TSEnumBody = alias("tsEnumBody");
  uppercase.TSEnumDeclaration = alias("tsEnumDeclaration");
  uppercase.TSEnumMember = alias("tsEnumMember");
  uppercase.TSModuleDeclaration = alias("tsModuleDeclaration");
  uppercase.TSModuleBlock = alias("tsModuleBlock");
  uppercase.TSImportType = alias("tsImportType");
  uppercase.TSImportEqualsDeclaration = alias("tsImportEqualsDeclaration");
  uppercase.TSExternalModuleReference = alias("tsExternalModuleReference");
  uppercase.TSNonNullExpression = alias("tsNonNullExpression");
  uppercase.TSExportAssignment = alias("tsExportAssignment");
  uppercase.TSNamespaceExportDeclaration = alias("tsNamespaceExportDeclaration");
  uppercase.TSTypeAnnotation = alias("tsTypeAnnotation");
  uppercase.TSTypeParameterInstantiation = alias("tsTypeParameterInstantiation");
  uppercase.TSTypeParameterDeclaration = alias("tsTypeParameterDeclaration");
  uppercase.TSTypeParameter = alias("tsTypeParameter");
  uppercase.NumberLiteral = b.numberLiteral;
  uppercase.RegexLiteral = b.regexLiteral;
  uppercase.RestProperty = b.restProperty;
  uppercase.SpreadProperty = b.spreadProperty;
  return uppercase;
}
var hasRequiredGenerated$2;
function requireGenerated$2() {
  if (hasRequiredGenerated$2) return generated$2;
  hasRequiredGenerated$2 = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _lowercase = requireLowercase();
    Object.keys(_lowercase).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _lowercase[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _lowercase[key];
        }
      });
    });
    var _uppercase = requireUppercase();
    Object.keys(_uppercase).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _uppercase[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _uppercase[key];
        }
      });
    });
  })(generated$2);
  return generated$2;
}
var hasRequiredCleanJSXElementLiteralChild;
function requireCleanJSXElementLiteralChild() {
  if (hasRequiredCleanJSXElementLiteralChild) return cleanJSXElementLiteralChild;
  hasRequiredCleanJSXElementLiteralChild = 1;
  Object.defineProperty(cleanJSXElementLiteralChild, "__esModule", {
    value: true
  });
  cleanJSXElementLiteralChild.default = cleanJSXElementLiteralChild$1;
  var _index = requireGenerated$2();
  var _index2 = requireLib$b();
  function cleanJSXElementLiteralChild$1(child, args) {
    const lines = child.value.split(/\r\n|\n|\r/);
    let lastNonEmptyLine = 0;
    for (let i = 0; i < lines.length; i++) {
      if (/[^ \t]/.exec(lines[i])) {
        lastNonEmptyLine = i;
      }
    }
    let str = "";
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const isFirstLine = i === 0;
      const isLastLine = i === lines.length - 1;
      const isLastNonEmptyLine = i === lastNonEmptyLine;
      let trimmedLine = line.replace(/\t/g, " ");
      if (!isFirstLine) {
        trimmedLine = trimmedLine.replace(/^ +/, "");
      }
      if (!isLastLine) {
        trimmedLine = trimmedLine.replace(/ +$/, "");
      }
      if (trimmedLine) {
        if (!isLastNonEmptyLine) {
          trimmedLine += " ";
        }
        str += trimmedLine;
      }
    }
    if (str) args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
  }
  return cleanJSXElementLiteralChild;
}
var hasRequiredBuildChildren;
function requireBuildChildren() {
  if (hasRequiredBuildChildren) return buildChildren;
  hasRequiredBuildChildren = 1;
  Object.defineProperty(buildChildren, "__esModule", {
    value: true
  });
  buildChildren.default = buildChildren$1;
  var _index = requireGenerated$3();
  var _cleanJSXElementLiteralChild = requireCleanJSXElementLiteralChild();
  function buildChildren$1(node2) {
    const elements = [];
    for (let i = 0; i < node2.children.length; i++) {
      let child = node2.children[i];
      if ((0, _index.isJSXText)(child)) {
        (0, _cleanJSXElementLiteralChild.default)(child, elements);
        continue;
      }
      if ((0, _index.isJSXExpressionContainer)(child)) child = child.expression;
      if ((0, _index.isJSXEmptyExpression)(child)) continue;
      elements.push(child);
    }
    return elements;
  }
  return buildChildren;
}
var assertNode = {};
var isNode = {};
var hasRequiredIsNode;
function requireIsNode() {
  if (hasRequiredIsNode) return isNode;
  hasRequiredIsNode = 1;
  Object.defineProperty(isNode, "__esModule", {
    value: true
  });
  isNode.default = isNode$1;
  var _index = requireDefinitions();
  function isNode$1(node2) {
    return !!(node2 && _index.VISITOR_KEYS[node2.type]);
  }
  return isNode;
}
var hasRequiredAssertNode;
function requireAssertNode() {
  if (hasRequiredAssertNode) return assertNode;
  hasRequiredAssertNode = 1;
  Object.defineProperty(assertNode, "__esModule", {
    value: true
  });
  assertNode.default = assertNode$1;
  var _isNode = requireIsNode();
  function assertNode$1(node2) {
    if (!(0, _isNode.default)(node2)) {
      var _node$type;
      const type = (_node$type = node2 == null ? void 0 : node2.type) != null ? _node$type : JSON.stringify(node2);
      throw new TypeError(`Not a valid node of type "${type}"`);
    }
  }
  return assertNode;
}
var generated$1 = {};
var hasRequiredGenerated$1;
function requireGenerated$1() {
  if (hasRequiredGenerated$1) return generated$1;
  hasRequiredGenerated$1 = 1;
  Object.defineProperty(generated$1, "__esModule", {
    value: true
  });
  generated$1.assertAccessor = assertAccessor;
  generated$1.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
  generated$1.assertArgumentPlaceholder = assertArgumentPlaceholder;
  generated$1.assertArrayExpression = assertArrayExpression;
  generated$1.assertArrayPattern = assertArrayPattern;
  generated$1.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
  generated$1.assertArrowFunctionExpression = assertArrowFunctionExpression;
  generated$1.assertAssignmentExpression = assertAssignmentExpression;
  generated$1.assertAssignmentPattern = assertAssignmentPattern;
  generated$1.assertAwaitExpression = assertAwaitExpression;
  generated$1.assertBigIntLiteral = assertBigIntLiteral;
  generated$1.assertBinary = assertBinary;
  generated$1.assertBinaryExpression = assertBinaryExpression;
  generated$1.assertBindExpression = assertBindExpression;
  generated$1.assertBlock = assertBlock;
  generated$1.assertBlockParent = assertBlockParent;
  generated$1.assertBlockStatement = assertBlockStatement;
  generated$1.assertBooleanLiteral = assertBooleanLiteral;
  generated$1.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
  generated$1.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
  generated$1.assertBreakStatement = assertBreakStatement;
  generated$1.assertCallExpression = assertCallExpression;
  generated$1.assertCatchClause = assertCatchClause;
  generated$1.assertClass = assertClass;
  generated$1.assertClassAccessorProperty = assertClassAccessorProperty;
  generated$1.assertClassBody = assertClassBody;
  generated$1.assertClassDeclaration = assertClassDeclaration;
  generated$1.assertClassExpression = assertClassExpression;
  generated$1.assertClassImplements = assertClassImplements;
  generated$1.assertClassMethod = assertClassMethod;
  generated$1.assertClassPrivateMethod = assertClassPrivateMethod;
  generated$1.assertClassPrivateProperty = assertClassPrivateProperty;
  generated$1.assertClassProperty = assertClassProperty;
  generated$1.assertCompletionStatement = assertCompletionStatement;
  generated$1.assertConditional = assertConditional;
  generated$1.assertConditionalExpression = assertConditionalExpression;
  generated$1.assertContinueStatement = assertContinueStatement;
  generated$1.assertDebuggerStatement = assertDebuggerStatement;
  generated$1.assertDecimalLiteral = assertDecimalLiteral;
  generated$1.assertDeclaration = assertDeclaration;
  generated$1.assertDeclareClass = assertDeclareClass;
  generated$1.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
  generated$1.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
  generated$1.assertDeclareFunction = assertDeclareFunction;
  generated$1.assertDeclareInterface = assertDeclareInterface;
  generated$1.assertDeclareModule = assertDeclareModule;
  generated$1.assertDeclareModuleExports = assertDeclareModuleExports;
  generated$1.assertDeclareOpaqueType = assertDeclareOpaqueType;
  generated$1.assertDeclareTypeAlias = assertDeclareTypeAlias;
  generated$1.assertDeclareVariable = assertDeclareVariable;
  generated$1.assertDeclaredPredicate = assertDeclaredPredicate;
  generated$1.assertDecorator = assertDecorator;
  generated$1.assertDirective = assertDirective;
  generated$1.assertDirectiveLiteral = assertDirectiveLiteral;
  generated$1.assertDoExpression = assertDoExpression;
  generated$1.assertDoWhileStatement = assertDoWhileStatement;
  generated$1.assertEmptyStatement = assertEmptyStatement;
  generated$1.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
  generated$1.assertEnumBody = assertEnumBody;
  generated$1.assertEnumBooleanBody = assertEnumBooleanBody;
  generated$1.assertEnumBooleanMember = assertEnumBooleanMember;
  generated$1.assertEnumDeclaration = assertEnumDeclaration;
  generated$1.assertEnumDefaultedMember = assertEnumDefaultedMember;
  generated$1.assertEnumMember = assertEnumMember;
  generated$1.assertEnumNumberBody = assertEnumNumberBody;
  generated$1.assertEnumNumberMember = assertEnumNumberMember;
  generated$1.assertEnumStringBody = assertEnumStringBody;
  generated$1.assertEnumStringMember = assertEnumStringMember;
  generated$1.assertEnumSymbolBody = assertEnumSymbolBody;
  generated$1.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
  generated$1.assertExportAllDeclaration = assertExportAllDeclaration;
  generated$1.assertExportDeclaration = assertExportDeclaration;
  generated$1.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
  generated$1.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
  generated$1.assertExportNamedDeclaration = assertExportNamedDeclaration;
  generated$1.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
  generated$1.assertExportSpecifier = assertExportSpecifier;
  generated$1.assertExpression = assertExpression;
  generated$1.assertExpressionStatement = assertExpressionStatement;
  generated$1.assertExpressionWrapper = assertExpressionWrapper;
  generated$1.assertFile = assertFile;
  generated$1.assertFlow = assertFlow;
  generated$1.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
  generated$1.assertFlowDeclaration = assertFlowDeclaration;
  generated$1.assertFlowPredicate = assertFlowPredicate;
  generated$1.assertFlowType = assertFlowType;
  generated$1.assertFor = assertFor;
  generated$1.assertForInStatement = assertForInStatement;
  generated$1.assertForOfStatement = assertForOfStatement;
  generated$1.assertForStatement = assertForStatement;
  generated$1.assertForXStatement = assertForXStatement;
  generated$1.assertFunction = assertFunction;
  generated$1.assertFunctionDeclaration = assertFunctionDeclaration;
  generated$1.assertFunctionExpression = assertFunctionExpression;
  generated$1.assertFunctionParent = assertFunctionParent;
  generated$1.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
  generated$1.assertFunctionTypeParam = assertFunctionTypeParam;
  generated$1.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
  generated$1.assertIdentifier = assertIdentifier;
  generated$1.assertIfStatement = assertIfStatement;
  generated$1.assertImmutable = assertImmutable;
  generated$1.assertImport = assertImport;
  generated$1.assertImportAttribute = assertImportAttribute;
  generated$1.assertImportDeclaration = assertImportDeclaration;
  generated$1.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
  generated$1.assertImportExpression = assertImportExpression;
  generated$1.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
  generated$1.assertImportOrExportDeclaration = assertImportOrExportDeclaration;
  generated$1.assertImportSpecifier = assertImportSpecifier;
  generated$1.assertIndexedAccessType = assertIndexedAccessType;
  generated$1.assertInferredPredicate = assertInferredPredicate;
  generated$1.assertInterfaceDeclaration = assertInterfaceDeclaration;
  generated$1.assertInterfaceExtends = assertInterfaceExtends;
  generated$1.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
  generated$1.assertInterpreterDirective = assertInterpreterDirective;
  generated$1.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
  generated$1.assertJSX = assertJSX;
  generated$1.assertJSXAttribute = assertJSXAttribute;
  generated$1.assertJSXClosingElement = assertJSXClosingElement;
  generated$1.assertJSXClosingFragment = assertJSXClosingFragment;
  generated$1.assertJSXElement = assertJSXElement;
  generated$1.assertJSXEmptyExpression = assertJSXEmptyExpression;
  generated$1.assertJSXExpressionContainer = assertJSXExpressionContainer;
  generated$1.assertJSXFragment = assertJSXFragment;
  generated$1.assertJSXIdentifier = assertJSXIdentifier;
  generated$1.assertJSXMemberExpression = assertJSXMemberExpression;
  generated$1.assertJSXNamespacedName = assertJSXNamespacedName;
  generated$1.assertJSXOpeningElement = assertJSXOpeningElement;
  generated$1.assertJSXOpeningFragment = assertJSXOpeningFragment;
  generated$1.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
  generated$1.assertJSXSpreadChild = assertJSXSpreadChild;
  generated$1.assertJSXText = assertJSXText;
  generated$1.assertLVal = assertLVal;
  generated$1.assertLabeledStatement = assertLabeledStatement;
  generated$1.assertLiteral = assertLiteral;
  generated$1.assertLogicalExpression = assertLogicalExpression;
  generated$1.assertLoop = assertLoop;
  generated$1.assertMemberExpression = assertMemberExpression;
  generated$1.assertMetaProperty = assertMetaProperty;
  generated$1.assertMethod = assertMethod;
  generated$1.assertMiscellaneous = assertMiscellaneous;
  generated$1.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
  generated$1.assertModuleDeclaration = assertModuleDeclaration;
  generated$1.assertModuleExpression = assertModuleExpression;
  generated$1.assertModuleSpecifier = assertModuleSpecifier;
  generated$1.assertNewExpression = assertNewExpression;
  generated$1.assertNoop = assertNoop;
  generated$1.assertNullLiteral = assertNullLiteral;
  generated$1.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
  generated$1.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
  generated$1.assertNumberLiteral = assertNumberLiteral;
  generated$1.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
  generated$1.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
  generated$1.assertNumericLiteral = assertNumericLiteral;
  generated$1.assertObjectExpression = assertObjectExpression;
  generated$1.assertObjectMember = assertObjectMember;
  generated$1.assertObjectMethod = assertObjectMethod;
  generated$1.assertObjectPattern = assertObjectPattern;
  generated$1.assertObjectProperty = assertObjectProperty;
  generated$1.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
  generated$1.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
  generated$1.assertObjectTypeIndexer = assertObjectTypeIndexer;
  generated$1.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
  generated$1.assertObjectTypeProperty = assertObjectTypeProperty;
  generated$1.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
  generated$1.assertOpaqueType = assertOpaqueType;
  generated$1.assertOptionalCallExpression = assertOptionalCallExpression;
  generated$1.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
  generated$1.assertOptionalMemberExpression = assertOptionalMemberExpression;
  generated$1.assertParenthesizedExpression = assertParenthesizedExpression;
  generated$1.assertPattern = assertPattern;
  generated$1.assertPatternLike = assertPatternLike;
  generated$1.assertPipelineBareFunction = assertPipelineBareFunction;
  generated$1.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
  generated$1.assertPipelineTopicExpression = assertPipelineTopicExpression;
  generated$1.assertPlaceholder = assertPlaceholder;
  generated$1.assertPrivate = assertPrivate;
  generated$1.assertPrivateName = assertPrivateName;
  generated$1.assertProgram = assertProgram;
  generated$1.assertProperty = assertProperty;
  generated$1.assertPureish = assertPureish;
  generated$1.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
  generated$1.assertRecordExpression = assertRecordExpression;
  generated$1.assertRegExpLiteral = assertRegExpLiteral;
  generated$1.assertRegexLiteral = assertRegexLiteral;
  generated$1.assertRestElement = assertRestElement;
  generated$1.assertRestProperty = assertRestProperty;
  generated$1.assertReturnStatement = assertReturnStatement;
  generated$1.assertScopable = assertScopable;
  generated$1.assertSequenceExpression = assertSequenceExpression;
  generated$1.assertSpreadElement = assertSpreadElement;
  generated$1.assertSpreadProperty = assertSpreadProperty;
  generated$1.assertStandardized = assertStandardized;
  generated$1.assertStatement = assertStatement;
  generated$1.assertStaticBlock = assertStaticBlock;
  generated$1.assertStringLiteral = assertStringLiteral;
  generated$1.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
  generated$1.assertStringTypeAnnotation = assertStringTypeAnnotation;
  generated$1.assertSuper = assertSuper;
  generated$1.assertSwitchCase = assertSwitchCase;
  generated$1.assertSwitchStatement = assertSwitchStatement;
  generated$1.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
  generated$1.assertTSAnyKeyword = assertTSAnyKeyword;
  generated$1.assertTSArrayType = assertTSArrayType;
  generated$1.assertTSAsExpression = assertTSAsExpression;
  generated$1.assertTSBaseType = assertTSBaseType;
  generated$1.assertTSBigIntKeyword = assertTSBigIntKeyword;
  generated$1.assertTSBooleanKeyword = assertTSBooleanKeyword;
  generated$1.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
  generated$1.assertTSConditionalType = assertTSConditionalType;
  generated$1.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
  generated$1.assertTSConstructorType = assertTSConstructorType;
  generated$1.assertTSDeclareFunction = assertTSDeclareFunction;
  generated$1.assertTSDeclareMethod = assertTSDeclareMethod;
  generated$1.assertTSEntityName = assertTSEntityName;
  generated$1.assertTSEnumBody = assertTSEnumBody;
  generated$1.assertTSEnumDeclaration = assertTSEnumDeclaration;
  generated$1.assertTSEnumMember = assertTSEnumMember;
  generated$1.assertTSExportAssignment = assertTSExportAssignment;
  generated$1.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
  generated$1.assertTSExternalModuleReference = assertTSExternalModuleReference;
  generated$1.assertTSFunctionType = assertTSFunctionType;
  generated$1.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
  generated$1.assertTSImportType = assertTSImportType;
  generated$1.assertTSIndexSignature = assertTSIndexSignature;
  generated$1.assertTSIndexedAccessType = assertTSIndexedAccessType;
  generated$1.assertTSInferType = assertTSInferType;
  generated$1.assertTSInstantiationExpression = assertTSInstantiationExpression;
  generated$1.assertTSInterfaceBody = assertTSInterfaceBody;
  generated$1.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
  generated$1.assertTSIntersectionType = assertTSIntersectionType;
  generated$1.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
  generated$1.assertTSLiteralType = assertTSLiteralType;
  generated$1.assertTSMappedType = assertTSMappedType;
  generated$1.assertTSMethodSignature = assertTSMethodSignature;
  generated$1.assertTSModuleBlock = assertTSModuleBlock;
  generated$1.assertTSModuleDeclaration = assertTSModuleDeclaration;
  generated$1.assertTSNamedTupleMember = assertTSNamedTupleMember;
  generated$1.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
  generated$1.assertTSNeverKeyword = assertTSNeverKeyword;
  generated$1.assertTSNonNullExpression = assertTSNonNullExpression;
  generated$1.assertTSNullKeyword = assertTSNullKeyword;
  generated$1.assertTSNumberKeyword = assertTSNumberKeyword;
  generated$1.assertTSObjectKeyword = assertTSObjectKeyword;
  generated$1.assertTSOptionalType = assertTSOptionalType;
  generated$1.assertTSParameterProperty = assertTSParameterProperty;
  generated$1.assertTSParenthesizedType = assertTSParenthesizedType;
  generated$1.assertTSPropertySignature = assertTSPropertySignature;
  generated$1.assertTSQualifiedName = assertTSQualifiedName;
  generated$1.assertTSRestType = assertTSRestType;
  generated$1.assertTSSatisfiesExpression = assertTSSatisfiesExpression;
  generated$1.assertTSStringKeyword = assertTSStringKeyword;
  generated$1.assertTSSymbolKeyword = assertTSSymbolKeyword;
  generated$1.assertTSTemplateLiteralType = assertTSTemplateLiteralType;
  generated$1.assertTSThisType = assertTSThisType;
  generated$1.assertTSTupleType = assertTSTupleType;
  generated$1.assertTSType = assertTSType;
  generated$1.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
  generated$1.assertTSTypeAnnotation = assertTSTypeAnnotation;
  generated$1.assertTSTypeAssertion = assertTSTypeAssertion;
  generated$1.assertTSTypeElement = assertTSTypeElement;
  generated$1.assertTSTypeLiteral = assertTSTypeLiteral;
  generated$1.assertTSTypeOperator = assertTSTypeOperator;
  generated$1.assertTSTypeParameter = assertTSTypeParameter;
  generated$1.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
  generated$1.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
  generated$1.assertTSTypePredicate = assertTSTypePredicate;
  generated$1.assertTSTypeQuery = assertTSTypeQuery;
  generated$1.assertTSTypeReference = assertTSTypeReference;
  generated$1.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
  generated$1.assertTSUnionType = assertTSUnionType;
  generated$1.assertTSUnknownKeyword = assertTSUnknownKeyword;
  generated$1.assertTSVoidKeyword = assertTSVoidKeyword;
  generated$1.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
  generated$1.assertTemplateElement = assertTemplateElement;
  generated$1.assertTemplateLiteral = assertTemplateLiteral;
  generated$1.assertTerminatorless = assertTerminatorless;
  generated$1.assertThisExpression = assertThisExpression;
  generated$1.assertThisTypeAnnotation = assertThisTypeAnnotation;
  generated$1.assertThrowStatement = assertThrowStatement;
  generated$1.assertTopicReference = assertTopicReference;
  generated$1.assertTryStatement = assertTryStatement;
  generated$1.assertTupleExpression = assertTupleExpression;
  generated$1.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
  generated$1.assertTypeAlias = assertTypeAlias;
  generated$1.assertTypeAnnotation = assertTypeAnnotation;
  generated$1.assertTypeCastExpression = assertTypeCastExpression;
  generated$1.assertTypeParameter = assertTypeParameter;
  generated$1.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
  generated$1.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
  generated$1.assertTypeScript = assertTypeScript;
  generated$1.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
  generated$1.assertUnaryExpression = assertUnaryExpression;
  generated$1.assertUnaryLike = assertUnaryLike;
  generated$1.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
  generated$1.assertUpdateExpression = assertUpdateExpression;
  generated$1.assertUserWhitespacable = assertUserWhitespacable;
  generated$1.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
  generated$1.assertVariableDeclaration = assertVariableDeclaration;
  generated$1.assertVariableDeclarator = assertVariableDeclarator;
  generated$1.assertVariance = assertVariance;
  generated$1.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
  generated$1.assertWhile = assertWhile;
  generated$1.assertWhileStatement = assertWhileStatement;
  generated$1.assertWithStatement = assertWithStatement;
  generated$1.assertYieldExpression = assertYieldExpression;
  var _is = requireIs();
  var _deprecationWarning = requireDeprecationWarning();
  function assert2(type, node2, opts) {
    if (!(0, _is.default)(type, node2, opts)) {
      throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node2.type}".`);
    }
  }
  function assertArrayExpression(node2, opts) {
    assert2("ArrayExpression", node2, opts);
  }
  function assertAssignmentExpression(node2, opts) {
    assert2("AssignmentExpression", node2, opts);
  }
  function assertBinaryExpression(node2, opts) {
    assert2("BinaryExpression", node2, opts);
  }
  function assertInterpreterDirective(node2, opts) {
    assert2("InterpreterDirective", node2, opts);
  }
  function assertDirective(node2, opts) {
    assert2("Directive", node2, opts);
  }
  function assertDirectiveLiteral(node2, opts) {
    assert2("DirectiveLiteral", node2, opts);
  }
  function assertBlockStatement(node2, opts) {
    assert2("BlockStatement", node2, opts);
  }
  function assertBreakStatement(node2, opts) {
    assert2("BreakStatement", node2, opts);
  }
  function assertCallExpression(node2, opts) {
    assert2("CallExpression", node2, opts);
  }
  function assertCatchClause(node2, opts) {
    assert2("CatchClause", node2, opts);
  }
  function assertConditionalExpression(node2, opts) {
    assert2("ConditionalExpression", node2, opts);
  }
  function assertContinueStatement(node2, opts) {
    assert2("ContinueStatement", node2, opts);
  }
  function assertDebuggerStatement(node2, opts) {
    assert2("DebuggerStatement", node2, opts);
  }
  function assertDoWhileStatement(node2, opts) {
    assert2("DoWhileStatement", node2, opts);
  }
  function assertEmptyStatement(node2, opts) {
    assert2("EmptyStatement", node2, opts);
  }
  function assertExpressionStatement(node2, opts) {
    assert2("ExpressionStatement", node2, opts);
  }
  function assertFile(node2, opts) {
    assert2("File", node2, opts);
  }
  function assertForInStatement(node2, opts) {
    assert2("ForInStatement", node2, opts);
  }
  function assertForStatement(node2, opts) {
    assert2("ForStatement", node2, opts);
  }
  function assertFunctionDeclaration(node2, opts) {
    assert2("FunctionDeclaration", node2, opts);
  }
  function assertFunctionExpression(node2, opts) {
    assert2("FunctionExpression", node2, opts);
  }
  function assertIdentifier(node2, opts) {
    assert2("Identifier", node2, opts);
  }
  function assertIfStatement(node2, opts) {
    assert2("IfStatement", node2, opts);
  }
  function assertLabeledStatement(node2, opts) {
    assert2("LabeledStatement", node2, opts);
  }
  function assertStringLiteral(node2, opts) {
    assert2("StringLiteral", node2, opts);
  }
  function assertNumericLiteral(node2, opts) {
    assert2("NumericLiteral", node2, opts);
  }
  function assertNullLiteral(node2, opts) {
    assert2("NullLiteral", node2, opts);
  }
  function assertBooleanLiteral(node2, opts) {
    assert2("BooleanLiteral", node2, opts);
  }
  function assertRegExpLiteral(node2, opts) {
    assert2("RegExpLiteral", node2, opts);
  }
  function assertLogicalExpression(node2, opts) {
    assert2("LogicalExpression", node2, opts);
  }
  function assertMemberExpression(node2, opts) {
    assert2("MemberExpression", node2, opts);
  }
  function assertNewExpression(node2, opts) {
    assert2("NewExpression", node2, opts);
  }
  function assertProgram(node2, opts) {
    assert2("Program", node2, opts);
  }
  function assertObjectExpression(node2, opts) {
    assert2("ObjectExpression", node2, opts);
  }
  function assertObjectMethod(node2, opts) {
    assert2("ObjectMethod", node2, opts);
  }
  function assertObjectProperty(node2, opts) {
    assert2("ObjectProperty", node2, opts);
  }
  function assertRestElement(node2, opts) {
    assert2("RestElement", node2, opts);
  }
  function assertReturnStatement(node2, opts) {
    assert2("ReturnStatement", node2, opts);
  }
  function assertSequenceExpression(node2, opts) {
    assert2("SequenceExpression", node2, opts);
  }
  function assertParenthesizedExpression(node2, opts) {
    assert2("ParenthesizedExpression", node2, opts);
  }
  function assertSwitchCase(node2, opts) {
    assert2("SwitchCase", node2, opts);
  }
  function assertSwitchStatement(node2, opts) {
    assert2("SwitchStatement", node2, opts);
  }
  function assertThisExpression(node2, opts) {
    assert2("ThisExpression", node2, opts);
  }
  function assertThrowStatement(node2, opts) {
    assert2("ThrowStatement", node2, opts);
  }
  function assertTryStatement(node2, opts) {
    assert2("TryStatement", node2, opts);
  }
  function assertUnaryExpression(node2, opts) {
    assert2("UnaryExpression", node2, opts);
  }
  function assertUpdateExpression(node2, opts) {
    assert2("UpdateExpression", node2, opts);
  }
  function assertVariableDeclaration(node2, opts) {
    assert2("VariableDeclaration", node2, opts);
  }
  function assertVariableDeclarator(node2, opts) {
    assert2("VariableDeclarator", node2, opts);
  }
  function assertWhileStatement(node2, opts) {
    assert2("WhileStatement", node2, opts);
  }
  function assertWithStatement(node2, opts) {
    assert2("WithStatement", node2, opts);
  }
  function assertAssignmentPattern(node2, opts) {
    assert2("AssignmentPattern", node2, opts);
  }
  function assertArrayPattern(node2, opts) {
    assert2("ArrayPattern", node2, opts);
  }
  function assertArrowFunctionExpression(node2, opts) {
    assert2("ArrowFunctionExpression", node2, opts);
  }
  function assertClassBody(node2, opts) {
    assert2("ClassBody", node2, opts);
  }
  function assertClassExpression(node2, opts) {
    assert2("ClassExpression", node2, opts);
  }
  function assertClassDeclaration(node2, opts) {
    assert2("ClassDeclaration", node2, opts);
  }
  function assertExportAllDeclaration(node2, opts) {
    assert2("ExportAllDeclaration", node2, opts);
  }
  function assertExportDefaultDeclaration(node2, opts) {
    assert2("ExportDefaultDeclaration", node2, opts);
  }
  function assertExportNamedDeclaration(node2, opts) {
    assert2("ExportNamedDeclaration", node2, opts);
  }
  function assertExportSpecifier(node2, opts) {
    assert2("ExportSpecifier", node2, opts);
  }
  function assertForOfStatement(node2, opts) {
    assert2("ForOfStatement", node2, opts);
  }
  function assertImportDeclaration(node2, opts) {
    assert2("ImportDeclaration", node2, opts);
  }
  function assertImportDefaultSpecifier(node2, opts) {
    assert2("ImportDefaultSpecifier", node2, opts);
  }
  function assertImportNamespaceSpecifier(node2, opts) {
    assert2("ImportNamespaceSpecifier", node2, opts);
  }
  function assertImportSpecifier(node2, opts) {
    assert2("ImportSpecifier", node2, opts);
  }
  function assertImportExpression(node2, opts) {
    assert2("ImportExpression", node2, opts);
  }
  function assertMetaProperty(node2, opts) {
    assert2("MetaProperty", node2, opts);
  }
  function assertClassMethod(node2, opts) {
    assert2("ClassMethod", node2, opts);
  }
  function assertObjectPattern(node2, opts) {
    assert2("ObjectPattern", node2, opts);
  }
  function assertSpreadElement(node2, opts) {
    assert2("SpreadElement", node2, opts);
  }
  function assertSuper(node2, opts) {
    assert2("Super", node2, opts);
  }
  function assertTaggedTemplateExpression(node2, opts) {
    assert2("TaggedTemplateExpression", node2, opts);
  }
  function assertTemplateElement(node2, opts) {
    assert2("TemplateElement", node2, opts);
  }
  function assertTemplateLiteral(node2, opts) {
    assert2("TemplateLiteral", node2, opts);
  }
  function assertYieldExpression(node2, opts) {
    assert2("YieldExpression", node2, opts);
  }
  function assertAwaitExpression(node2, opts) {
    assert2("AwaitExpression", node2, opts);
  }
  function assertImport(node2, opts) {
    assert2("Import", node2, opts);
  }
  function assertBigIntLiteral(node2, opts) {
    assert2("BigIntLiteral", node2, opts);
  }
  function assertExportNamespaceSpecifier(node2, opts) {
    assert2("ExportNamespaceSpecifier", node2, opts);
  }
  function assertOptionalMemberExpression(node2, opts) {
    assert2("OptionalMemberExpression", node2, opts);
  }
  function assertOptionalCallExpression(node2, opts) {
    assert2("OptionalCallExpression", node2, opts);
  }
  function assertClassProperty(node2, opts) {
    assert2("ClassProperty", node2, opts);
  }
  function assertClassAccessorProperty(node2, opts) {
    assert2("ClassAccessorProperty", node2, opts);
  }
  function assertClassPrivateProperty(node2, opts) {
    assert2("ClassPrivateProperty", node2, opts);
  }
  function assertClassPrivateMethod(node2, opts) {
    assert2("ClassPrivateMethod", node2, opts);
  }
  function assertPrivateName(node2, opts) {
    assert2("PrivateName", node2, opts);
  }
  function assertStaticBlock(node2, opts) {
    assert2("StaticBlock", node2, opts);
  }
  function assertImportAttribute(node2, opts) {
    assert2("ImportAttribute", node2, opts);
  }
  function assertAnyTypeAnnotation(node2, opts) {
    assert2("AnyTypeAnnotation", node2, opts);
  }
  function assertArrayTypeAnnotation(node2, opts) {
    assert2("ArrayTypeAnnotation", node2, opts);
  }
  function assertBooleanTypeAnnotation(node2, opts) {
    assert2("BooleanTypeAnnotation", node2, opts);
  }
  function assertBooleanLiteralTypeAnnotation(node2, opts) {
    assert2("BooleanLiteralTypeAnnotation", node2, opts);
  }
  function assertNullLiteralTypeAnnotation(node2, opts) {
    assert2("NullLiteralTypeAnnotation", node2, opts);
  }
  function assertClassImplements(node2, opts) {
    assert2("ClassImplements", node2, opts);
  }
  function assertDeclareClass(node2, opts) {
    assert2("DeclareClass", node2, opts);
  }
  function assertDeclareFunction(node2, opts) {
    assert2("DeclareFunction", node2, opts);
  }
  function assertDeclareInterface(node2, opts) {
    assert2("DeclareInterface", node2, opts);
  }
  function assertDeclareModule(node2, opts) {
    assert2("DeclareModule", node2, opts);
  }
  function assertDeclareModuleExports(node2, opts) {
    assert2("DeclareModuleExports", node2, opts);
  }
  function assertDeclareTypeAlias(node2, opts) {
    assert2("DeclareTypeAlias", node2, opts);
  }
  function assertDeclareOpaqueType(node2, opts) {
    assert2("DeclareOpaqueType", node2, opts);
  }
  function assertDeclareVariable(node2, opts) {
    assert2("DeclareVariable", node2, opts);
  }
  function assertDeclareExportDeclaration(node2, opts) {
    assert2("DeclareExportDeclaration", node2, opts);
  }
  function assertDeclareExportAllDeclaration(node2, opts) {
    assert2("DeclareExportAllDeclaration", node2, opts);
  }
  function assertDeclaredPredicate(node2, opts) {
    assert2("DeclaredPredicate", node2, opts);
  }
  function assertExistsTypeAnnotation(node2, opts) {
    assert2("ExistsTypeAnnotation", node2, opts);
  }
  function assertFunctionTypeAnnotation(node2, opts) {
    assert2("FunctionTypeAnnotation", node2, opts);
  }
  function assertFunctionTypeParam(node2, opts) {
    assert2("FunctionTypeParam", node2, opts);
  }
  function assertGenericTypeAnnotation(node2, opts) {
    assert2("GenericTypeAnnotation", node2, opts);
  }
  function assertInferredPredicate(node2, opts) {
    assert2("InferredPredicate", node2, opts);
  }
  function assertInterfaceExtends(node2, opts) {
    assert2("InterfaceExtends", node2, opts);
  }
  function assertInterfaceDeclaration(node2, opts) {
    assert2("InterfaceDeclaration", node2, opts);
  }
  function assertInterfaceTypeAnnotation(node2, opts) {
    assert2("InterfaceTypeAnnotation", node2, opts);
  }
  function assertIntersectionTypeAnnotation(node2, opts) {
    assert2("IntersectionTypeAnnotation", node2, opts);
  }
  function assertMixedTypeAnnotation(node2, opts) {
    assert2("MixedTypeAnnotation", node2, opts);
  }
  function assertEmptyTypeAnnotation(node2, opts) {
    assert2("EmptyTypeAnnotation", node2, opts);
  }
  function assertNullableTypeAnnotation(node2, opts) {
    assert2("NullableTypeAnnotation", node2, opts);
  }
  function assertNumberLiteralTypeAnnotation(node2, opts) {
    assert2("NumberLiteralTypeAnnotation", node2, opts);
  }
  function assertNumberTypeAnnotation(node2, opts) {
    assert2("NumberTypeAnnotation", node2, opts);
  }
  function assertObjectTypeAnnotation(node2, opts) {
    assert2("ObjectTypeAnnotation", node2, opts);
  }
  function assertObjectTypeInternalSlot(node2, opts) {
    assert2("ObjectTypeInternalSlot", node2, opts);
  }
  function assertObjectTypeCallProperty(node2, opts) {
    assert2("ObjectTypeCallProperty", node2, opts);
  }
  function assertObjectTypeIndexer(node2, opts) {
    assert2("ObjectTypeIndexer", node2, opts);
  }
  function assertObjectTypeProperty(node2, opts) {
    assert2("ObjectTypeProperty", node2, opts);
  }
  function assertObjectTypeSpreadProperty(node2, opts) {
    assert2("ObjectTypeSpreadProperty", node2, opts);
  }
  function assertOpaqueType(node2, opts) {
    assert2("OpaqueType", node2, opts);
  }
  function assertQualifiedTypeIdentifier(node2, opts) {
    assert2("QualifiedTypeIdentifier", node2, opts);
  }
  function assertStringLiteralTypeAnnotation(node2, opts) {
    assert2("StringLiteralTypeAnnotation", node2, opts);
  }
  function assertStringTypeAnnotation(node2, opts) {
    assert2("StringTypeAnnotation", node2, opts);
  }
  function assertSymbolTypeAnnotation(node2, opts) {
    assert2("SymbolTypeAnnotation", node2, opts);
  }
  function assertThisTypeAnnotation(node2, opts) {
    assert2("ThisTypeAnnotation", node2, opts);
  }
  function assertTupleTypeAnnotation(node2, opts) {
    assert2("TupleTypeAnnotation", node2, opts);
  }
  function assertTypeofTypeAnnotation(node2, opts) {
    assert2("TypeofTypeAnnotation", node2, opts);
  }
  function assertTypeAlias(node2, opts) {
    assert2("TypeAlias", node2, opts);
  }
  function assertTypeAnnotation(node2, opts) {
    assert2("TypeAnnotation", node2, opts);
  }
  function assertTypeCastExpression(node2, opts) {
    assert2("TypeCastExpression", node2, opts);
  }
  function assertTypeParameter(node2, opts) {
    assert2("TypeParameter", node2, opts);
  }
  function assertTypeParameterDeclaration(node2, opts) {
    assert2("TypeParameterDeclaration", node2, opts);
  }
  function assertTypeParameterInstantiation(node2, opts) {
    assert2("TypeParameterInstantiation", node2, opts);
  }
  function assertUnionTypeAnnotation(node2, opts) {
    assert2("UnionTypeAnnotation", node2, opts);
  }
  function assertVariance(node2, opts) {
    assert2("Variance", node2, opts);
  }
  function assertVoidTypeAnnotation(node2, opts) {
    assert2("VoidTypeAnnotation", node2, opts);
  }
  function assertEnumDeclaration(node2, opts) {
    assert2("EnumDeclaration", node2, opts);
  }
  function assertEnumBooleanBody(node2, opts) {
    assert2("EnumBooleanBody", node2, opts);
  }
  function assertEnumNumberBody(node2, opts) {
    assert2("EnumNumberBody", node2, opts);
  }
  function assertEnumStringBody(node2, opts) {
    assert2("EnumStringBody", node2, opts);
  }
  function assertEnumSymbolBody(node2, opts) {
    assert2("EnumSymbolBody", node2, opts);
  }
  function assertEnumBooleanMember(node2, opts) {
    assert2("EnumBooleanMember", node2, opts);
  }
  function assertEnumNumberMember(node2, opts) {
    assert2("EnumNumberMember", node2, opts);
  }
  function assertEnumStringMember(node2, opts) {
    assert2("EnumStringMember", node2, opts);
  }
  function assertEnumDefaultedMember(node2, opts) {
    assert2("EnumDefaultedMember", node2, opts);
  }
  function assertIndexedAccessType(node2, opts) {
    assert2("IndexedAccessType", node2, opts);
  }
  function assertOptionalIndexedAccessType(node2, opts) {
    assert2("OptionalIndexedAccessType", node2, opts);
  }
  function assertJSXAttribute(node2, opts) {
    assert2("JSXAttribute", node2, opts);
  }
  function assertJSXClosingElement(node2, opts) {
    assert2("JSXClosingElement", node2, opts);
  }
  function assertJSXElement(node2, opts) {
    assert2("JSXElement", node2, opts);
  }
  function assertJSXEmptyExpression(node2, opts) {
    assert2("JSXEmptyExpression", node2, opts);
  }
  function assertJSXExpressionContainer(node2, opts) {
    assert2("JSXExpressionContainer", node2, opts);
  }
  function assertJSXSpreadChild(node2, opts) {
    assert2("JSXSpreadChild", node2, opts);
  }
  function assertJSXIdentifier(node2, opts) {
    assert2("JSXIdentifier", node2, opts);
  }
  function assertJSXMemberExpression(node2, opts) {
    assert2("JSXMemberExpression", node2, opts);
  }
  function assertJSXNamespacedName(node2, opts) {
    assert2("JSXNamespacedName", node2, opts);
  }
  function assertJSXOpeningElement(node2, opts) {
    assert2("JSXOpeningElement", node2, opts);
  }
  function assertJSXSpreadAttribute(node2, opts) {
    assert2("JSXSpreadAttribute", node2, opts);
  }
  function assertJSXText(node2, opts) {
    assert2("JSXText", node2, opts);
  }
  function assertJSXFragment(node2, opts) {
    assert2("JSXFragment", node2, opts);
  }
  function assertJSXOpeningFragment(node2, opts) {
    assert2("JSXOpeningFragment", node2, opts);
  }
  function assertJSXClosingFragment(node2, opts) {
    assert2("JSXClosingFragment", node2, opts);
  }
  function assertNoop(node2, opts) {
    assert2("Noop", node2, opts);
  }
  function assertPlaceholder(node2, opts) {
    assert2("Placeholder", node2, opts);
  }
  function assertV8IntrinsicIdentifier(node2, opts) {
    assert2("V8IntrinsicIdentifier", node2, opts);
  }
  function assertArgumentPlaceholder(node2, opts) {
    assert2("ArgumentPlaceholder", node2, opts);
  }
  function assertBindExpression(node2, opts) {
    assert2("BindExpression", node2, opts);
  }
  function assertDecorator(node2, opts) {
    assert2("Decorator", node2, opts);
  }
  function assertDoExpression(node2, opts) {
    assert2("DoExpression", node2, opts);
  }
  function assertExportDefaultSpecifier(node2, opts) {
    assert2("ExportDefaultSpecifier", node2, opts);
  }
  function assertRecordExpression(node2, opts) {
    assert2("RecordExpression", node2, opts);
  }
  function assertTupleExpression(node2, opts) {
    assert2("TupleExpression", node2, opts);
  }
  function assertDecimalLiteral(node2, opts) {
    assert2("DecimalLiteral", node2, opts);
  }
  function assertModuleExpression(node2, opts) {
    assert2("ModuleExpression", node2, opts);
  }
  function assertTopicReference(node2, opts) {
    assert2("TopicReference", node2, opts);
  }
  function assertPipelineTopicExpression(node2, opts) {
    assert2("PipelineTopicExpression", node2, opts);
  }
  function assertPipelineBareFunction(node2, opts) {
    assert2("PipelineBareFunction", node2, opts);
  }
  function assertPipelinePrimaryTopicReference(node2, opts) {
    assert2("PipelinePrimaryTopicReference", node2, opts);
  }
  function assertTSParameterProperty(node2, opts) {
    assert2("TSParameterProperty", node2, opts);
  }
  function assertTSDeclareFunction(node2, opts) {
    assert2("TSDeclareFunction", node2, opts);
  }
  function assertTSDeclareMethod(node2, opts) {
    assert2("TSDeclareMethod", node2, opts);
  }
  function assertTSQualifiedName(node2, opts) {
    assert2("TSQualifiedName", node2, opts);
  }
  function assertTSCallSignatureDeclaration(node2, opts) {
    assert2("TSCallSignatureDeclaration", node2, opts);
  }
  function assertTSConstructSignatureDeclaration(node2, opts) {
    assert2("TSConstructSignatureDeclaration", node2, opts);
  }
  function assertTSPropertySignature(node2, opts) {
    assert2("TSPropertySignature", node2, opts);
  }
  function assertTSMethodSignature(node2, opts) {
    assert2("TSMethodSignature", node2, opts);
  }
  function assertTSIndexSignature(node2, opts) {
    assert2("TSIndexSignature", node2, opts);
  }
  function assertTSAnyKeyword(node2, opts) {
    assert2("TSAnyKeyword", node2, opts);
  }
  function assertTSBooleanKeyword(node2, opts) {
    assert2("TSBooleanKeyword", node2, opts);
  }
  function assertTSBigIntKeyword(node2, opts) {
    assert2("TSBigIntKeyword", node2, opts);
  }
  function assertTSIntrinsicKeyword(node2, opts) {
    assert2("TSIntrinsicKeyword", node2, opts);
  }
  function assertTSNeverKeyword(node2, opts) {
    assert2("TSNeverKeyword", node2, opts);
  }
  function assertTSNullKeyword(node2, opts) {
    assert2("TSNullKeyword", node2, opts);
  }
  function assertTSNumberKeyword(node2, opts) {
    assert2("TSNumberKeyword", node2, opts);
  }
  function assertTSObjectKeyword(node2, opts) {
    assert2("TSObjectKeyword", node2, opts);
  }
  function assertTSStringKeyword(node2, opts) {
    assert2("TSStringKeyword", node2, opts);
  }
  function assertTSSymbolKeyword(node2, opts) {
    assert2("TSSymbolKeyword", node2, opts);
  }
  function assertTSUndefinedKeyword(node2, opts) {
    assert2("TSUndefinedKeyword", node2, opts);
  }
  function assertTSUnknownKeyword(node2, opts) {
    assert2("TSUnknownKeyword", node2, opts);
  }
  function assertTSVoidKeyword(node2, opts) {
    assert2("TSVoidKeyword", node2, opts);
  }
  function assertTSThisType(node2, opts) {
    assert2("TSThisType", node2, opts);
  }
  function assertTSFunctionType(node2, opts) {
    assert2("TSFunctionType", node2, opts);
  }
  function assertTSConstructorType(node2, opts) {
    assert2("TSConstructorType", node2, opts);
  }
  function assertTSTypeReference(node2, opts) {
    assert2("TSTypeReference", node2, opts);
  }
  function assertTSTypePredicate(node2, opts) {
    assert2("TSTypePredicate", node2, opts);
  }
  function assertTSTypeQuery(node2, opts) {
    assert2("TSTypeQuery", node2, opts);
  }
  function assertTSTypeLiteral(node2, opts) {
    assert2("TSTypeLiteral", node2, opts);
  }
  function assertTSArrayType(node2, opts) {
    assert2("TSArrayType", node2, opts);
  }
  function assertTSTupleType(node2, opts) {
    assert2("TSTupleType", node2, opts);
  }
  function assertTSOptionalType(node2, opts) {
    assert2("TSOptionalType", node2, opts);
  }
  function assertTSRestType(node2, opts) {
    assert2("TSRestType", node2, opts);
  }
  function assertTSNamedTupleMember(node2, opts) {
    assert2("TSNamedTupleMember", node2, opts);
  }
  function assertTSUnionType(node2, opts) {
    assert2("TSUnionType", node2, opts);
  }
  function assertTSIntersectionType(node2, opts) {
    assert2("TSIntersectionType", node2, opts);
  }
  function assertTSConditionalType(node2, opts) {
    assert2("TSConditionalType", node2, opts);
  }
  function assertTSInferType(node2, opts) {
    assert2("TSInferType", node2, opts);
  }
  function assertTSParenthesizedType(node2, opts) {
    assert2("TSParenthesizedType", node2, opts);
  }
  function assertTSTypeOperator(node2, opts) {
    assert2("TSTypeOperator", node2, opts);
  }
  function assertTSIndexedAccessType(node2, opts) {
    assert2("TSIndexedAccessType", node2, opts);
  }
  function assertTSMappedType(node2, opts) {
    assert2("TSMappedType", node2, opts);
  }
  function assertTSTemplateLiteralType(node2, opts) {
    assert2("TSTemplateLiteralType", node2, opts);
  }
  function assertTSLiteralType(node2, opts) {
    assert2("TSLiteralType", node2, opts);
  }
  function assertTSExpressionWithTypeArguments(node2, opts) {
    assert2("TSExpressionWithTypeArguments", node2, opts);
  }
  function assertTSInterfaceDeclaration(node2, opts) {
    assert2("TSInterfaceDeclaration", node2, opts);
  }
  function assertTSInterfaceBody(node2, opts) {
    assert2("TSInterfaceBody", node2, opts);
  }
  function assertTSTypeAliasDeclaration(node2, opts) {
    assert2("TSTypeAliasDeclaration", node2, opts);
  }
  function assertTSInstantiationExpression(node2, opts) {
    assert2("TSInstantiationExpression", node2, opts);
  }
  function assertTSAsExpression(node2, opts) {
    assert2("TSAsExpression", node2, opts);
  }
  function assertTSSatisfiesExpression(node2, opts) {
    assert2("TSSatisfiesExpression", node2, opts);
  }
  function assertTSTypeAssertion(node2, opts) {
    assert2("TSTypeAssertion", node2, opts);
  }
  function assertTSEnumBody(node2, opts) {
    assert2("TSEnumBody", node2, opts);
  }
  function assertTSEnumDeclaration(node2, opts) {
    assert2("TSEnumDeclaration", node2, opts);
  }
  function assertTSEnumMember(node2, opts) {
    assert2("TSEnumMember", node2, opts);
  }
  function assertTSModuleDeclaration(node2, opts) {
    assert2("TSModuleDeclaration", node2, opts);
  }
  function assertTSModuleBlock(node2, opts) {
    assert2("TSModuleBlock", node2, opts);
  }
  function assertTSImportType(node2, opts) {
    assert2("TSImportType", node2, opts);
  }
  function assertTSImportEqualsDeclaration(node2, opts) {
    assert2("TSImportEqualsDeclaration", node2, opts);
  }
  function assertTSExternalModuleReference(node2, opts) {
    assert2("TSExternalModuleReference", node2, opts);
  }
  function assertTSNonNullExpression(node2, opts) {
    assert2("TSNonNullExpression", node2, opts);
  }
  function assertTSExportAssignment(node2, opts) {
    assert2("TSExportAssignment", node2, opts);
  }
  function assertTSNamespaceExportDeclaration(node2, opts) {
    assert2("TSNamespaceExportDeclaration", node2, opts);
  }
  function assertTSTypeAnnotation(node2, opts) {
    assert2("TSTypeAnnotation", node2, opts);
  }
  function assertTSTypeParameterInstantiation(node2, opts) {
    assert2("TSTypeParameterInstantiation", node2, opts);
  }
  function assertTSTypeParameterDeclaration(node2, opts) {
    assert2("TSTypeParameterDeclaration", node2, opts);
  }
  function assertTSTypeParameter(node2, opts) {
    assert2("TSTypeParameter", node2, opts);
  }
  function assertStandardized(node2, opts) {
    assert2("Standardized", node2, opts);
  }
  function assertExpression(node2, opts) {
    assert2("Expression", node2, opts);
  }
  function assertBinary(node2, opts) {
    assert2("Binary", node2, opts);
  }
  function assertScopable(node2, opts) {
    assert2("Scopable", node2, opts);
  }
  function assertBlockParent(node2, opts) {
    assert2("BlockParent", node2, opts);
  }
  function assertBlock(node2, opts) {
    assert2("Block", node2, opts);
  }
  function assertStatement(node2, opts) {
    assert2("Statement", node2, opts);
  }
  function assertTerminatorless(node2, opts) {
    assert2("Terminatorless", node2, opts);
  }
  function assertCompletionStatement(node2, opts) {
    assert2("CompletionStatement", node2, opts);
  }
  function assertConditional(node2, opts) {
    assert2("Conditional", node2, opts);
  }
  function assertLoop(node2, opts) {
    assert2("Loop", node2, opts);
  }
  function assertWhile(node2, opts) {
    assert2("While", node2, opts);
  }
  function assertExpressionWrapper(node2, opts) {
    assert2("ExpressionWrapper", node2, opts);
  }
  function assertFor(node2, opts) {
    assert2("For", node2, opts);
  }
  function assertForXStatement(node2, opts) {
    assert2("ForXStatement", node2, opts);
  }
  function assertFunction(node2, opts) {
    assert2("Function", node2, opts);
  }
  function assertFunctionParent(node2, opts) {
    assert2("FunctionParent", node2, opts);
  }
  function assertPureish(node2, opts) {
    assert2("Pureish", node2, opts);
  }
  function assertDeclaration(node2, opts) {
    assert2("Declaration", node2, opts);
  }
  function assertPatternLike(node2, opts) {
    assert2("PatternLike", node2, opts);
  }
  function assertLVal(node2, opts) {
    assert2("LVal", node2, opts);
  }
  function assertTSEntityName(node2, opts) {
    assert2("TSEntityName", node2, opts);
  }
  function assertLiteral(node2, opts) {
    assert2("Literal", node2, opts);
  }
  function assertImmutable(node2, opts) {
    assert2("Immutable", node2, opts);
  }
  function assertUserWhitespacable(node2, opts) {
    assert2("UserWhitespacable", node2, opts);
  }
  function assertMethod(node2, opts) {
    assert2("Method", node2, opts);
  }
  function assertObjectMember(node2, opts) {
    assert2("ObjectMember", node2, opts);
  }
  function assertProperty(node2, opts) {
    assert2("Property", node2, opts);
  }
  function assertUnaryLike(node2, opts) {
    assert2("UnaryLike", node2, opts);
  }
  function assertPattern(node2, opts) {
    assert2("Pattern", node2, opts);
  }
  function assertClass(node2, opts) {
    assert2("Class", node2, opts);
  }
  function assertImportOrExportDeclaration(node2, opts) {
    assert2("ImportOrExportDeclaration", node2, opts);
  }
  function assertExportDeclaration(node2, opts) {
    assert2("ExportDeclaration", node2, opts);
  }
  function assertModuleSpecifier(node2, opts) {
    assert2("ModuleSpecifier", node2, opts);
  }
  function assertAccessor(node2, opts) {
    assert2("Accessor", node2, opts);
  }
  function assertPrivate(node2, opts) {
    assert2("Private", node2, opts);
  }
  function assertFlow(node2, opts) {
    assert2("Flow", node2, opts);
  }
  function assertFlowType(node2, opts) {
    assert2("FlowType", node2, opts);
  }
  function assertFlowBaseAnnotation(node2, opts) {
    assert2("FlowBaseAnnotation", node2, opts);
  }
  function assertFlowDeclaration(node2, opts) {
    assert2("FlowDeclaration", node2, opts);
  }
  function assertFlowPredicate(node2, opts) {
    assert2("FlowPredicate", node2, opts);
  }
  function assertEnumBody(node2, opts) {
    assert2("EnumBody", node2, opts);
  }
  function assertEnumMember(node2, opts) {
    assert2("EnumMember", node2, opts);
  }
  function assertJSX(node2, opts) {
    assert2("JSX", node2, opts);
  }
  function assertMiscellaneous(node2, opts) {
    assert2("Miscellaneous", node2, opts);
  }
  function assertTypeScript(node2, opts) {
    assert2("TypeScript", node2, opts);
  }
  function assertTSTypeElement(node2, opts) {
    assert2("TSTypeElement", node2, opts);
  }
  function assertTSType(node2, opts) {
    assert2("TSType", node2, opts);
  }
  function assertTSBaseType(node2, opts) {
    assert2("TSBaseType", node2, opts);
  }
  function assertNumberLiteral(node2, opts) {
    (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");
    assert2("NumberLiteral", node2, opts);
  }
  function assertRegexLiteral(node2, opts) {
    (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral");
    assert2("RegexLiteral", node2, opts);
  }
  function assertRestProperty(node2, opts) {
    (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");
    assert2("RestProperty", node2, opts);
  }
  function assertSpreadProperty(node2, opts) {
    (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");
    assert2("SpreadProperty", node2, opts);
  }
  function assertModuleDeclaration(node2, opts) {
    (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");
    assert2("ModuleDeclaration", node2, opts);
  }
  return generated$1;
}
var createTypeAnnotationBasedOnTypeof = {};
var hasRequiredCreateTypeAnnotationBasedOnTypeof;
function requireCreateTypeAnnotationBasedOnTypeof() {
  if (hasRequiredCreateTypeAnnotationBasedOnTypeof) return createTypeAnnotationBasedOnTypeof;
  hasRequiredCreateTypeAnnotationBasedOnTypeof = 1;
  Object.defineProperty(createTypeAnnotationBasedOnTypeof, "__esModule", {
    value: true
  });
  createTypeAnnotationBasedOnTypeof.default = void 0;
  var _index = requireGenerated$2();
  createTypeAnnotationBasedOnTypeof.default = createTypeAnnotationBasedOnTypeof$1;
  function createTypeAnnotationBasedOnTypeof$1(type) {
    switch (type) {
      case "string":
        return (0, _index.stringTypeAnnotation)();
      case "number":
        return (0, _index.numberTypeAnnotation)();
      case "undefined":
        return (0, _index.voidTypeAnnotation)();
      case "boolean":
        return (0, _index.booleanTypeAnnotation)();
      case "function":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
      case "object":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
      case "symbol":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
      case "bigint":
        return (0, _index.anyTypeAnnotation)();
    }
    throw new Error("Invalid typeof value: " + type);
  }
  return createTypeAnnotationBasedOnTypeof;
}
var createFlowUnionType = {};
var removeTypeDuplicates$1 = {};
var hasRequiredRemoveTypeDuplicates$1;
function requireRemoveTypeDuplicates$1() {
  if (hasRequiredRemoveTypeDuplicates$1) return removeTypeDuplicates$1;
  hasRequiredRemoveTypeDuplicates$1 = 1;
  Object.defineProperty(removeTypeDuplicates$1, "__esModule", {
    value: true
  });
  removeTypeDuplicates$1.default = removeTypeDuplicates2;
  var _index = requireGenerated$3();
  function getQualifiedName(node2) {
    return (0, _index.isIdentifier)(node2) ? node2.name : `${node2.id.name}.${getQualifiedName(node2.qualification)}`;
  }
  function removeTypeDuplicates2(nodesIn) {
    const nodes = Array.from(nodesIn);
    const generics = /* @__PURE__ */ new Map();
    const bases = /* @__PURE__ */ new Map();
    const typeGroups = /* @__PURE__ */ new Set();
    const types2 = [];
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      if (!node2) continue;
      if (types2.includes(node2)) {
        continue;
      }
      if ((0, _index.isAnyTypeAnnotation)(node2)) {
        return [node2];
      }
      if ((0, _index.isFlowBaseAnnotation)(node2)) {
        bases.set(node2.type, node2);
        continue;
      }
      if ((0, _index.isUnionTypeAnnotation)(node2)) {
        if (!typeGroups.has(node2.types)) {
          nodes.push(...node2.types);
          typeGroups.add(node2.types);
        }
        continue;
      }
      if ((0, _index.isGenericTypeAnnotation)(node2)) {
        const name = getQualifiedName(node2.id);
        if (generics.has(name)) {
          let existing = generics.get(name);
          if (existing.typeParameters) {
            if (node2.typeParameters) {
              existing.typeParameters.params.push(...node2.typeParameters.params);
              existing.typeParameters.params = removeTypeDuplicates2(existing.typeParameters.params);
            }
          } else {
            existing = node2.typeParameters;
          }
        } else {
          generics.set(name, node2);
        }
        continue;
      }
      types2.push(node2);
    }
    for (const [, baseType] of bases) {
      types2.push(baseType);
    }
    for (const [, genericName] of generics) {
      types2.push(genericName);
    }
    return types2;
  }
  return removeTypeDuplicates$1;
}
var hasRequiredCreateFlowUnionType;
function requireCreateFlowUnionType() {
  if (hasRequiredCreateFlowUnionType) return createFlowUnionType;
  hasRequiredCreateFlowUnionType = 1;
  Object.defineProperty(createFlowUnionType, "__esModule", {
    value: true
  });
  createFlowUnionType.default = createFlowUnionType$1;
  var _index = requireGenerated$2();
  var _removeTypeDuplicates = requireRemoveTypeDuplicates$1();
  function createFlowUnionType$1(types2) {
    const flattened = (0, _removeTypeDuplicates.default)(types2);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return (0, _index.unionTypeAnnotation)(flattened);
    }
  }
  return createFlowUnionType;
}
var createTSUnionType = {};
var removeTypeDuplicates = {};
var hasRequiredRemoveTypeDuplicates;
function requireRemoveTypeDuplicates() {
  if (hasRequiredRemoveTypeDuplicates) return removeTypeDuplicates;
  hasRequiredRemoveTypeDuplicates = 1;
  Object.defineProperty(removeTypeDuplicates, "__esModule", {
    value: true
  });
  removeTypeDuplicates.default = removeTypeDuplicates$12;
  var _index = requireGenerated$3();
  function getQualifiedName(node2) {
    return (0, _index.isIdentifier)(node2) ? node2.name : (0, _index.isThisExpression)(node2) ? "this" : `${node2.right.name}.${getQualifiedName(node2.left)}`;
  }
  function removeTypeDuplicates$12(nodesIn) {
    const nodes = Array.from(nodesIn);
    const generics = /* @__PURE__ */ new Map();
    const bases = /* @__PURE__ */ new Map();
    const typeGroups = /* @__PURE__ */ new Set();
    const types2 = [];
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      if (!node2) continue;
      if (types2.includes(node2)) {
        continue;
      }
      if ((0, _index.isTSAnyKeyword)(node2)) {
        return [node2];
      }
      if ((0, _index.isTSBaseType)(node2)) {
        bases.set(node2.type, node2);
        continue;
      }
      if ((0, _index.isTSUnionType)(node2)) {
        if (!typeGroups.has(node2.types)) {
          nodes.push(...node2.types);
          typeGroups.add(node2.types);
        }
        continue;
      }
      const typeArgumentsKey = "typeParameters";
      if ((0, _index.isTSTypeReference)(node2) && node2[typeArgumentsKey]) {
        const typeArguments = node2[typeArgumentsKey];
        const name = getQualifiedName(node2.typeName);
        if (generics.has(name)) {
          let existing = generics.get(name);
          const existingTypeArguments = existing[typeArgumentsKey];
          if (existingTypeArguments) {
            existingTypeArguments.params.push(...typeArguments.params);
            existingTypeArguments.params = removeTypeDuplicates$12(existingTypeArguments.params);
          } else {
            existing = typeArguments;
          }
        } else {
          generics.set(name, node2);
        }
        continue;
      }
      types2.push(node2);
    }
    for (const [, baseType] of bases) {
      types2.push(baseType);
    }
    for (const [, genericName] of generics) {
      types2.push(genericName);
    }
    return types2;
  }
  return removeTypeDuplicates;
}
var hasRequiredCreateTSUnionType;
function requireCreateTSUnionType() {
  if (hasRequiredCreateTSUnionType) return createTSUnionType;
  hasRequiredCreateTSUnionType = 1;
  Object.defineProperty(createTSUnionType, "__esModule", {
    value: true
  });
  createTSUnionType.default = createTSUnionType$1;
  var _index = requireGenerated$2();
  var _removeTypeDuplicates = requireRemoveTypeDuplicates();
  var _index2 = requireGenerated$3();
  function createTSUnionType$1(typeAnnotations) {
    const types2 = typeAnnotations.map((type) => {
      return (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;
    });
    const flattened = (0, _removeTypeDuplicates.default)(types2);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return (0, _index.tsUnionType)(flattened);
    }
  }
  return createTSUnionType;
}
var productions = {};
var hasRequiredProductions;
function requireProductions() {
  if (hasRequiredProductions) return productions;
  hasRequiredProductions = 1;
  Object.defineProperty(productions, "__esModule", {
    value: true
  });
  productions.buildUndefinedNode = buildUndefinedNode;
  var _index = requireGenerated$2();
  function buildUndefinedNode() {
    return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
  }
  return productions;
}
var cloneNode = {};
var hasRequiredCloneNode;
function requireCloneNode() {
  if (hasRequiredCloneNode) return cloneNode;
  hasRequiredCloneNode = 1;
  Object.defineProperty(cloneNode, "__esModule", {
    value: true
  });
  cloneNode.default = cloneNode$1;
  var _index = requireDefinitions();
  var _index2 = requireGenerated$3();
  const {
    hasOwn
  } = {
    hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)
  };
  function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
    if (obj && typeof obj.type === "string") {
      return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);
    }
    return obj;
  }
  function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
    if (Array.isArray(obj)) {
      return obj.map((node2) => cloneIfNode(node2, deep, withoutLoc, commentsCache));
    }
    return cloneIfNode(obj, deep, withoutLoc, commentsCache);
  }
  function cloneNode$1(node2, deep = true, withoutLoc = false) {
    return cloneNodeInternal(node2, deep, withoutLoc, /* @__PURE__ */ new Map());
  }
  function cloneNodeInternal(node2, deep = true, withoutLoc = false, commentsCache) {
    if (!node2) return node2;
    const {
      type
    } = node2;
    const newNode = {
      type: node2.type
    };
    if ((0, _index2.isIdentifier)(node2)) {
      newNode.name = node2.name;
      if (hasOwn(node2, "optional") && typeof node2.optional === "boolean") {
        newNode.optional = node2.optional;
      }
      if (hasOwn(node2, "typeAnnotation")) {
        newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node2.typeAnnotation, true, withoutLoc, commentsCache) : node2.typeAnnotation;
      }
      if (hasOwn(node2, "decorators")) {
        newNode.decorators = deep ? cloneIfNodeOrArray(node2.decorators, true, withoutLoc, commentsCache) : node2.decorators;
      }
    } else if (!hasOwn(_index.NODE_FIELDS, type)) {
      throw new Error(`Unknown node type: "${type}"`);
    } else {
      for (const field of Object.keys(_index.NODE_FIELDS[type])) {
        if (hasOwn(node2, field)) {
          if (deep) {
            newNode[field] = (0, _index2.isFile)(node2) && field === "comments" ? maybeCloneComments(node2.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node2[field], true, withoutLoc, commentsCache);
          } else {
            newNode[field] = node2[field];
          }
        }
      }
    }
    if (hasOwn(node2, "loc")) {
      if (withoutLoc) {
        newNode.loc = null;
      } else {
        newNode.loc = node2.loc;
      }
    }
    if (hasOwn(node2, "leadingComments")) {
      newNode.leadingComments = maybeCloneComments(node2.leadingComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node2, "innerComments")) {
      newNode.innerComments = maybeCloneComments(node2.innerComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node2, "trailingComments")) {
      newNode.trailingComments = maybeCloneComments(node2.trailingComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node2, "extra")) {
      newNode.extra = Object.assign({}, node2.extra);
    }
    return newNode;
  }
  function maybeCloneComments(comments2, deep, withoutLoc, commentsCache) {
    if (!comments2 || !deep) {
      return comments2;
    }
    return comments2.map((comment) => {
      const cache2 = commentsCache.get(comment);
      if (cache2) return cache2;
      const {
        type,
        value: value2,
        loc
      } = comment;
      const ret = {
        type,
        value: value2,
        loc
      };
      if (withoutLoc) {
        ret.loc = null;
      }
      commentsCache.set(comment, ret);
      return ret;
    });
  }
  return cloneNode;
}
var clone = {};
var hasRequiredClone;
function requireClone() {
  if (hasRequiredClone) return clone;
  hasRequiredClone = 1;
  Object.defineProperty(clone, "__esModule", {
    value: true
  });
  clone.default = clone$1;
  var _cloneNode = requireCloneNode();
  function clone$1(node2) {
    return (0, _cloneNode.default)(node2, false);
  }
  return clone;
}
var cloneDeep$1 = {};
var hasRequiredCloneDeep$1;
function requireCloneDeep$1() {
  if (hasRequiredCloneDeep$1) return cloneDeep$1;
  hasRequiredCloneDeep$1 = 1;
  Object.defineProperty(cloneDeep$1, "__esModule", {
    value: true
  });
  cloneDeep$1.default = cloneDeep2;
  var _cloneNode = requireCloneNode();
  function cloneDeep2(node2) {
    return (0, _cloneNode.default)(node2);
  }
  return cloneDeep$1;
}
var cloneDeepWithoutLoc = {};
var hasRequiredCloneDeepWithoutLoc;
function requireCloneDeepWithoutLoc() {
  if (hasRequiredCloneDeepWithoutLoc) return cloneDeepWithoutLoc;
  hasRequiredCloneDeepWithoutLoc = 1;
  Object.defineProperty(cloneDeepWithoutLoc, "__esModule", {
    value: true
  });
  cloneDeepWithoutLoc.default = cloneDeepWithoutLoc$1;
  var _cloneNode = requireCloneNode();
  function cloneDeepWithoutLoc$1(node2) {
    return (0, _cloneNode.default)(node2, true, true);
  }
  return cloneDeepWithoutLoc;
}
var cloneWithoutLoc = {};
var hasRequiredCloneWithoutLoc;
function requireCloneWithoutLoc() {
  if (hasRequiredCloneWithoutLoc) return cloneWithoutLoc;
  hasRequiredCloneWithoutLoc = 1;
  Object.defineProperty(cloneWithoutLoc, "__esModule", {
    value: true
  });
  cloneWithoutLoc.default = cloneWithoutLoc$1;
  var _cloneNode = requireCloneNode();
  function cloneWithoutLoc$1(node2) {
    return (0, _cloneNode.default)(node2, false, true);
  }
  return cloneWithoutLoc;
}
var addComment = {};
var addComments = {};
var hasRequiredAddComments;
function requireAddComments() {
  if (hasRequiredAddComments) return addComments;
  hasRequiredAddComments = 1;
  Object.defineProperty(addComments, "__esModule", {
    value: true
  });
  addComments.default = addComments$1;
  function addComments$1(node2, type, comments2) {
    if (!comments2 || !node2) return node2;
    const key = `${type}Comments`;
    if (node2[key]) {
      if (type === "leading") {
        node2[key] = comments2.concat(node2[key]);
      } else {
        node2[key].push(...comments2);
      }
    } else {
      node2[key] = comments2;
    }
    return node2;
  }
  return addComments;
}
var hasRequiredAddComment;
function requireAddComment() {
  if (hasRequiredAddComment) return addComment;
  hasRequiredAddComment = 1;
  Object.defineProperty(addComment, "__esModule", {
    value: true
  });
  addComment.default = addComment$1;
  var _addComments = requireAddComments();
  function addComment$1(node2, type, content, line) {
    return (0, _addComments.default)(node2, type, [{
      type: line ? "CommentLine" : "CommentBlock",
      value: content
    }]);
  }
  return addComment;
}
var inheritInnerComments = {};
var inherit = {};
var hasRequiredInherit;
function requireInherit() {
  if (hasRequiredInherit) return inherit;
  hasRequiredInherit = 1;
  Object.defineProperty(inherit, "__esModule", {
    value: true
  });
  inherit.default = inherit$1;
  function inherit$1(key, child, parent) {
    if (child && parent) {
      child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
    }
  }
  return inherit;
}
var hasRequiredInheritInnerComments;
function requireInheritInnerComments() {
  if (hasRequiredInheritInnerComments) return inheritInnerComments;
  hasRequiredInheritInnerComments = 1;
  Object.defineProperty(inheritInnerComments, "__esModule", {
    value: true
  });
  inheritInnerComments.default = inheritInnerComments$1;
  var _inherit = requireInherit();
  function inheritInnerComments$1(child, parent) {
    (0, _inherit.default)("innerComments", child, parent);
  }
  return inheritInnerComments;
}
var inheritLeadingComments = {};
var hasRequiredInheritLeadingComments;
function requireInheritLeadingComments() {
  if (hasRequiredInheritLeadingComments) return inheritLeadingComments;
  hasRequiredInheritLeadingComments = 1;
  Object.defineProperty(inheritLeadingComments, "__esModule", {
    value: true
  });
  inheritLeadingComments.default = inheritLeadingComments$1;
  var _inherit = requireInherit();
  function inheritLeadingComments$1(child, parent) {
    (0, _inherit.default)("leadingComments", child, parent);
  }
  return inheritLeadingComments;
}
var inheritsComments = {};
var inheritTrailingComments = {};
var hasRequiredInheritTrailingComments;
function requireInheritTrailingComments() {
  if (hasRequiredInheritTrailingComments) return inheritTrailingComments;
  hasRequiredInheritTrailingComments = 1;
  Object.defineProperty(inheritTrailingComments, "__esModule", {
    value: true
  });
  inheritTrailingComments.default = inheritTrailingComments$1;
  var _inherit = requireInherit();
  function inheritTrailingComments$1(child, parent) {
    (0, _inherit.default)("trailingComments", child, parent);
  }
  return inheritTrailingComments;
}
var hasRequiredInheritsComments;
function requireInheritsComments() {
  if (hasRequiredInheritsComments) return inheritsComments;
  hasRequiredInheritsComments = 1;
  Object.defineProperty(inheritsComments, "__esModule", {
    value: true
  });
  inheritsComments.default = inheritsComments$1;
  var _inheritTrailingComments = requireInheritTrailingComments();
  var _inheritLeadingComments = requireInheritLeadingComments();
  var _inheritInnerComments = requireInheritInnerComments();
  function inheritsComments$1(child, parent) {
    (0, _inheritTrailingComments.default)(child, parent);
    (0, _inheritLeadingComments.default)(child, parent);
    (0, _inheritInnerComments.default)(child, parent);
    return child;
  }
  return inheritsComments;
}
var removeComments = {};
var hasRequiredRemoveComments;
function requireRemoveComments() {
  if (hasRequiredRemoveComments) return removeComments;
  hasRequiredRemoveComments = 1;
  Object.defineProperty(removeComments, "__esModule", {
    value: true
  });
  removeComments.default = removeComments$1;
  var _index = requireConstants();
  function removeComments$1(node2) {
    _index.COMMENT_KEYS.forEach((key) => {
      node2[key] = null;
    });
    return node2;
  }
  return removeComments;
}
var generated = {};
var hasRequiredGenerated;
function requireGenerated() {
  if (hasRequiredGenerated) return generated;
  hasRequiredGenerated = 1;
  Object.defineProperty(generated, "__esModule", {
    value: true
  });
  generated.WHILE_TYPES = generated.USERWHITESPACABLE_TYPES = generated.UNARYLIKE_TYPES = generated.TYPESCRIPT_TYPES = generated.TSTYPE_TYPES = generated.TSTYPEELEMENT_TYPES = generated.TSENTITYNAME_TYPES = generated.TSBASETYPE_TYPES = generated.TERMINATORLESS_TYPES = generated.STATEMENT_TYPES = generated.STANDARDIZED_TYPES = generated.SCOPABLE_TYPES = generated.PUREISH_TYPES = generated.PROPERTY_TYPES = generated.PRIVATE_TYPES = generated.PATTERN_TYPES = generated.PATTERNLIKE_TYPES = generated.OBJECTMEMBER_TYPES = generated.MODULESPECIFIER_TYPES = generated.MODULEDECLARATION_TYPES = generated.MISCELLANEOUS_TYPES = generated.METHOD_TYPES = generated.LVAL_TYPES = generated.LOOP_TYPES = generated.LITERAL_TYPES = generated.JSX_TYPES = generated.IMPORTOREXPORTDECLARATION_TYPES = generated.IMMUTABLE_TYPES = generated.FUNCTION_TYPES = generated.FUNCTIONPARENT_TYPES = generated.FOR_TYPES = generated.FORXSTATEMENT_TYPES = generated.FLOW_TYPES = generated.FLOWTYPE_TYPES = generated.FLOWPREDICATE_TYPES = generated.FLOWDECLARATION_TYPES = generated.FLOWBASEANNOTATION_TYPES = generated.EXPRESSION_TYPES = generated.EXPRESSIONWRAPPER_TYPES = generated.EXPORTDECLARATION_TYPES = generated.ENUMMEMBER_TYPES = generated.ENUMBODY_TYPES = generated.DECLARATION_TYPES = generated.CONDITIONAL_TYPES = generated.COMPLETIONSTATEMENT_TYPES = generated.CLASS_TYPES = generated.BLOCK_TYPES = generated.BLOCKPARENT_TYPES = generated.BINARY_TYPES = generated.ACCESSOR_TYPES = void 0;
  var _index = requireDefinitions();
  generated.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS["Standardized"];
  generated.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS["Expression"];
  generated.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS["Binary"];
  generated.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Scopable"];
  generated.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["BlockParent"];
  generated.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS["Block"];
  generated.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["Statement"];
  generated.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS["Terminatorless"];
  generated.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["CompletionStatement"];
  generated.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Conditional"];
  generated.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS["Loop"];
  generated.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS["While"];
  generated.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
  generated.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS["For"];
  generated.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["ForXStatement"];
  generated.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS["Function"];
  generated.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["FunctionParent"];
  generated.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS["Pureish"];
  generated.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["Declaration"];
  generated.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["PatternLike"];
  generated.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS["LVal"];
  generated.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS["TSEntityName"];
  generated.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Literal"];
  generated.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Immutable"];
  generated.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
  generated.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS["Method"];
  generated.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["ObjectMember"];
  generated.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS["Property"];
  generated.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["UnaryLike"];
  generated.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS["Pattern"];
  generated.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS["Class"];
  const IMPORTOREXPORTDECLARATION_TYPES = generated.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];
  generated.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
  generated.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
  generated.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS["Accessor"];
  generated.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS["Private"];
  generated.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS["Flow"];
  generated.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowType"];
  generated.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
  generated.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
  generated.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowPredicate"];
  generated.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumBody"];
  generated.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumMember"];
  generated.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS["JSX"];
  generated.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS["Miscellaneous"];
  generated.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS["TypeScript"];
  generated.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["TSTypeElement"];
  generated.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSType"];
  generated.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSBaseType"];
  generated.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
  return generated;
}
var ensureBlock = {};
var toBlock = {};
var hasRequiredToBlock;
function requireToBlock() {
  if (hasRequiredToBlock) return toBlock;
  hasRequiredToBlock = 1;
  Object.defineProperty(toBlock, "__esModule", {
    value: true
  });
  toBlock.default = toBlock$1;
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  function toBlock$1(node2, parent) {
    if ((0, _index.isBlockStatement)(node2)) {
      return node2;
    }
    let blockNodes = [];
    if ((0, _index.isEmptyStatement)(node2)) {
      blockNodes = [];
    } else {
      if (!(0, _index.isStatement)(node2)) {
        if ((0, _index.isFunction)(parent)) {
          node2 = (0, _index2.returnStatement)(node2);
        } else {
          node2 = (0, _index2.expressionStatement)(node2);
        }
      }
      blockNodes = [node2];
    }
    return (0, _index2.blockStatement)(blockNodes);
  }
  return toBlock;
}
var hasRequiredEnsureBlock;
function requireEnsureBlock() {
  if (hasRequiredEnsureBlock) return ensureBlock;
  hasRequiredEnsureBlock = 1;
  Object.defineProperty(ensureBlock, "__esModule", {
    value: true
  });
  ensureBlock.default = ensureBlock$1;
  var _toBlock = requireToBlock();
  function ensureBlock$1(node2, key = "body") {
    const result = (0, _toBlock.default)(node2[key], node2);
    node2[key] = result;
    return result;
  }
  return ensureBlock;
}
var toBindingIdentifierName = {};
var toIdentifier = {};
var hasRequiredToIdentifier;
function requireToIdentifier() {
  if (hasRequiredToIdentifier) return toIdentifier;
  hasRequiredToIdentifier = 1;
  Object.defineProperty(toIdentifier, "__esModule", {
    value: true
  });
  toIdentifier.default = toIdentifier$1;
  var _isValidIdentifier = requireIsValidIdentifier();
  var _helperValidatorIdentifier = requireLib$d();
  function toIdentifier$1(input) {
    input = input + "";
    let name = "";
    for (const c of input) {
      name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
    }
    name = name.replace(/^[-0-9]+/, "");
    name = name.replace(/[-\s]+(.)?/g, function(match, c) {
      return c ? c.toUpperCase() : "";
    });
    if (!(0, _isValidIdentifier.default)(name)) {
      name = `_${name}`;
    }
    return name || "_";
  }
  return toIdentifier;
}
var hasRequiredToBindingIdentifierName;
function requireToBindingIdentifierName() {
  if (hasRequiredToBindingIdentifierName) return toBindingIdentifierName;
  hasRequiredToBindingIdentifierName = 1;
  Object.defineProperty(toBindingIdentifierName, "__esModule", {
    value: true
  });
  toBindingIdentifierName.default = toBindingIdentifierName$1;
  var _toIdentifier = requireToIdentifier();
  function toBindingIdentifierName$1(name) {
    name = (0, _toIdentifier.default)(name);
    if (name === "eval" || name === "arguments") name = "_" + name;
    return name;
  }
  return toBindingIdentifierName;
}
var toComputedKey = {};
var hasRequiredToComputedKey;
function requireToComputedKey() {
  if (hasRequiredToComputedKey) return toComputedKey;
  hasRequiredToComputedKey = 1;
  Object.defineProperty(toComputedKey, "__esModule", {
    value: true
  });
  toComputedKey.default = toComputedKey$1;
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  function toComputedKey$1(node2, key = node2.key || node2.property) {
    if (!node2.computed && (0, _index.isIdentifier)(key)) key = (0, _index2.stringLiteral)(key.name);
    return key;
  }
  return toComputedKey;
}
var toExpression = {};
var hasRequiredToExpression;
function requireToExpression() {
  if (hasRequiredToExpression) return toExpression;
  hasRequiredToExpression = 1;
  Object.defineProperty(toExpression, "__esModule", {
    value: true
  });
  toExpression.default = void 0;
  var _index = requireGenerated$3();
  toExpression.default = toExpression$1;
  function toExpression$1(node2) {
    if ((0, _index.isExpressionStatement)(node2)) {
      node2 = node2.expression;
    }
    if ((0, _index.isExpression)(node2)) {
      return node2;
    }
    if ((0, _index.isClass)(node2)) {
      node2.type = "ClassExpression";
      node2.abstract = false;
    } else if ((0, _index.isFunction)(node2)) {
      node2.type = "FunctionExpression";
    }
    if (!(0, _index.isExpression)(node2)) {
      throw new Error(`cannot turn ${node2.type} to an expression`);
    }
    return node2;
  }
  return toExpression;
}
var toKeyAlias = {};
var removePropertiesDeep = {};
var traverseFast = {};
var hasRequiredTraverseFast;
function requireTraverseFast() {
  if (hasRequiredTraverseFast) return traverseFast;
  hasRequiredTraverseFast = 1;
  Object.defineProperty(traverseFast, "__esModule", {
    value: true
  });
  traverseFast.default = traverseFast$1;
  var _index = requireDefinitions();
  const _skip = Symbol();
  const _stop = Symbol();
  function traverseFast$1(node2, enter, opts) {
    if (!node2) return false;
    const keys = _index.VISITOR_KEYS[node2.type];
    if (!keys) return false;
    opts = opts || {};
    const ret = enter(node2, opts);
    if (ret !== void 0) {
      switch (ret) {
        case _skip:
          return false;
        case _stop:
          return true;
      }
    }
    for (const key of keys) {
      const subNode = node2[key];
      if (!subNode) continue;
      if (Array.isArray(subNode)) {
        for (const node3 of subNode) {
          if (traverseFast$1(node3, enter, opts)) return true;
        }
      } else {
        if (traverseFast$1(subNode, enter, opts)) return true;
      }
    }
    return false;
  }
  traverseFast$1.skip = _skip;
  traverseFast$1.stop = _stop;
  return traverseFast;
}
var removeProperties = {};
var hasRequiredRemoveProperties;
function requireRemoveProperties() {
  if (hasRequiredRemoveProperties) return removeProperties;
  hasRequiredRemoveProperties = 1;
  Object.defineProperty(removeProperties, "__esModule", {
    value: true
  });
  removeProperties.default = removeProperties$1;
  var _index = requireConstants();
  const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];
  const CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
  function removeProperties$1(node2, opts = {}) {
    const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
    for (const key of map) {
      if (node2[key] != null) node2[key] = void 0;
    }
    for (const key of Object.keys(node2)) {
      if (key[0] === "_" && node2[key] != null) node2[key] = void 0;
    }
    const symbols = Object.getOwnPropertySymbols(node2);
    for (const sym of symbols) {
      node2[sym] = null;
    }
  }
  return removeProperties;
}
var hasRequiredRemovePropertiesDeep;
function requireRemovePropertiesDeep() {
  if (hasRequiredRemovePropertiesDeep) return removePropertiesDeep;
  hasRequiredRemovePropertiesDeep = 1;
  Object.defineProperty(removePropertiesDeep, "__esModule", {
    value: true
  });
  removePropertiesDeep.default = removePropertiesDeep$1;
  var _traverseFast = requireTraverseFast();
  var _removeProperties = requireRemoveProperties();
  function removePropertiesDeep$1(tree, opts) {
    (0, _traverseFast.default)(tree, _removeProperties.default, opts);
    return tree;
  }
  return removePropertiesDeep;
}
var hasRequiredToKeyAlias;
function requireToKeyAlias() {
  if (hasRequiredToKeyAlias) return toKeyAlias;
  hasRequiredToKeyAlias = 1;
  Object.defineProperty(toKeyAlias, "__esModule", {
    value: true
  });
  toKeyAlias.default = toKeyAlias$1;
  var _index = requireGenerated$3();
  var _cloneNode = requireCloneNode();
  var _removePropertiesDeep = requireRemovePropertiesDeep();
  function toKeyAlias$1(node2, key = node2.key) {
    let alias;
    if (node2.kind === "method") {
      return toKeyAlias$1.increment() + "";
    } else if ((0, _index.isIdentifier)(key)) {
      alias = key.name;
    } else if ((0, _index.isStringLiteral)(key)) {
      alias = JSON.stringify(key.value);
    } else {
      alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));
    }
    if (node2.computed) {
      alias = `[${alias}]`;
    }
    if (node2.static) {
      alias = `static:${alias}`;
    }
    return alias;
  }
  toKeyAlias$1.uid = 0;
  toKeyAlias$1.increment = function() {
    if (toKeyAlias$1.uid >= Number.MAX_SAFE_INTEGER) {
      return toKeyAlias$1.uid = 0;
    } else {
      return toKeyAlias$1.uid++;
    }
  };
  return toKeyAlias;
}
var toStatement = {};
var hasRequiredToStatement;
function requireToStatement() {
  if (hasRequiredToStatement) return toStatement;
  hasRequiredToStatement = 1;
  Object.defineProperty(toStatement, "__esModule", {
    value: true
  });
  toStatement.default = void 0;
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  toStatement.default = toStatement$1;
  function toStatement$1(node2, ignore) {
    if ((0, _index.isStatement)(node2)) {
      return node2;
    }
    let mustHaveId = false;
    let newType;
    if ((0, _index.isClass)(node2)) {
      mustHaveId = true;
      newType = "ClassDeclaration";
    } else if ((0, _index.isFunction)(node2)) {
      mustHaveId = true;
      newType = "FunctionDeclaration";
    } else if ((0, _index.isAssignmentExpression)(node2)) {
      return (0, _index2.expressionStatement)(node2);
    }
    if (mustHaveId && !node2.id) {
      newType = false;
    }
    if (!newType) {
      if (ignore) {
        return false;
      } else {
        throw new Error(`cannot turn ${node2.type} to a statement`);
      }
    }
    node2.type = newType;
    return node2;
  }
  return toStatement;
}
var valueToNode = {};
var hasRequiredValueToNode;
function requireValueToNode() {
  if (hasRequiredValueToNode) return valueToNode;
  hasRequiredValueToNode = 1;
  Object.defineProperty(valueToNode, "__esModule", {
    value: true
  });
  valueToNode.default = void 0;
  var _isValidIdentifier = requireIsValidIdentifier();
  var _index = requireGenerated$2();
  valueToNode.default = valueToNode$1;
  const objectToString = Function.call.bind(Object.prototype.toString);
  function isRegExp(value2) {
    return objectToString(value2) === "[object RegExp]";
  }
  function isPlainObject(value2) {
    if (typeof value2 !== "object" || value2 === null || Object.prototype.toString.call(value2) !== "[object Object]") {
      return false;
    }
    const proto = Object.getPrototypeOf(value2);
    return proto === null || Object.getPrototypeOf(proto) === null;
  }
  function valueToNode$1(value2) {
    if (value2 === void 0) {
      return (0, _index.identifier)("undefined");
    }
    if (value2 === true || value2 === false) {
      return (0, _index.booleanLiteral)(value2);
    }
    if (value2 === null) {
      return (0, _index.nullLiteral)();
    }
    if (typeof value2 === "string") {
      return (0, _index.stringLiteral)(value2);
    }
    if (typeof value2 === "number") {
      let result;
      if (Number.isFinite(value2)) {
        result = (0, _index.numericLiteral)(Math.abs(value2));
      } else {
        let numerator;
        if (Number.isNaN(value2)) {
          numerator = (0, _index.numericLiteral)(0);
        } else {
          numerator = (0, _index.numericLiteral)(1);
        }
        result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
      }
      if (value2 < 0 || Object.is(value2, -0)) {
        result = (0, _index.unaryExpression)("-", result);
      }
      return result;
    }
    if (typeof value2 === "bigint") {
      return (0, _index.bigIntLiteral)(value2.toString());
    }
    if (isRegExp(value2)) {
      const pattern = value2.source;
      const flags = /\/([a-z]*)$/.exec(value2.toString())[1];
      return (0, _index.regExpLiteral)(pattern, flags);
    }
    if (Array.isArray(value2)) {
      return (0, _index.arrayExpression)(value2.map(valueToNode$1));
    }
    if (isPlainObject(value2)) {
      const props = [];
      for (const key of Object.keys(value2)) {
        let nodeKey, computed = false;
        if ((0, _isValidIdentifier.default)(key)) {
          if (key === "__proto__") {
            computed = true;
            nodeKey = (0, _index.stringLiteral)(key);
          } else {
            nodeKey = (0, _index.identifier)(key);
          }
        } else {
          nodeKey = (0, _index.stringLiteral)(key);
        }
        props.push((0, _index.objectProperty)(nodeKey, valueToNode$1(value2[key]), computed));
      }
      return (0, _index.objectExpression)(props);
    }
    throw new Error("don't know how to turn this value into a node");
  }
  return valueToNode;
}
var appendToMemberExpression = {};
var hasRequiredAppendToMemberExpression;
function requireAppendToMemberExpression() {
  if (hasRequiredAppendToMemberExpression) return appendToMemberExpression;
  hasRequiredAppendToMemberExpression = 1;
  Object.defineProperty(appendToMemberExpression, "__esModule", {
    value: true
  });
  appendToMemberExpression.default = appendToMemberExpression$1;
  var _index = requireGenerated$2();
  function appendToMemberExpression$1(member, append, computed = false) {
    member.object = (0, _index.memberExpression)(member.object, member.property, member.computed);
    member.property = append;
    member.computed = !!computed;
    return member;
  }
  return appendToMemberExpression;
}
var inherits = {};
var hasRequiredInherits;
function requireInherits() {
  if (hasRequiredInherits) return inherits;
  hasRequiredInherits = 1;
  Object.defineProperty(inherits, "__esModule", {
    value: true
  });
  inherits.default = inherits$1;
  var _index = requireConstants();
  var _inheritsComments = requireInheritsComments();
  function inherits$1(child, parent) {
    if (!child || !parent) return child;
    for (const key of _index.INHERIT_KEYS.optional) {
      if (child[key] == null) {
        child[key] = parent[key];
      }
    }
    for (const key of Object.keys(parent)) {
      if (key[0] === "_" && key !== "__clone") {
        child[key] = parent[key];
      }
    }
    for (const key of _index.INHERIT_KEYS.force) {
      child[key] = parent[key];
    }
    (0, _inheritsComments.default)(child, parent);
    return child;
  }
  return inherits;
}
var prependToMemberExpression = {};
var hasRequiredPrependToMemberExpression;
function requirePrependToMemberExpression() {
  if (hasRequiredPrependToMemberExpression) return prependToMemberExpression;
  hasRequiredPrependToMemberExpression = 1;
  Object.defineProperty(prependToMemberExpression, "__esModule", {
    value: true
  });
  prependToMemberExpression.default = prependToMemberExpression$1;
  var _index = requireGenerated$2();
  var _index2 = requireLib$b();
  function prependToMemberExpression$1(member, prepend) {
    if ((0, _index2.isSuper)(member.object)) {
      throw new Error("Cannot prepend node to super property access (`super.foo`).");
    }
    member.object = (0, _index.memberExpression)(prepend, member.object);
    return member;
  }
  return prependToMemberExpression;
}
var getAssignmentIdentifiers = {};
var hasRequiredGetAssignmentIdentifiers;
function requireGetAssignmentIdentifiers() {
  if (hasRequiredGetAssignmentIdentifiers) return getAssignmentIdentifiers;
  hasRequiredGetAssignmentIdentifiers = 1;
  Object.defineProperty(getAssignmentIdentifiers, "__esModule", {
    value: true
  });
  getAssignmentIdentifiers.default = getAssignmentIdentifiers$1;
  function getAssignmentIdentifiers$1(node2) {
    const search = [].concat(node2);
    const ids = /* @__PURE__ */ Object.create(null);
    while (search.length) {
      const id = search.pop();
      if (!id) continue;
      switch (id.type) {
        case "ArrayPattern":
          search.push(...id.elements);
          break;
        case "AssignmentExpression":
        case "AssignmentPattern":
        case "ForInStatement":
        case "ForOfStatement":
          search.push(id.left);
          break;
        case "ObjectPattern":
          search.push(...id.properties);
          break;
        case "ObjectProperty":
          search.push(id.value);
          break;
        case "RestElement":
        case "UpdateExpression":
          search.push(id.argument);
          break;
        case "UnaryExpression":
          if (id.operator === "delete") {
            search.push(id.argument);
          }
          break;
        case "Identifier":
          ids[id.name] = id;
          break;
      }
    }
    return ids;
  }
  return getAssignmentIdentifiers;
}
var getBindingIdentifiers = {};
var hasRequiredGetBindingIdentifiers;
function requireGetBindingIdentifiers() {
  if (hasRequiredGetBindingIdentifiers) return getBindingIdentifiers;
  hasRequiredGetBindingIdentifiers = 1;
  Object.defineProperty(getBindingIdentifiers, "__esModule", {
    value: true
  });
  getBindingIdentifiers.default = getBindingIdentifiers$1;
  var _index = requireGenerated$3();
  function getBindingIdentifiers$1(node2, duplicates, outerOnly, newBindingsOnly) {
    const search = [].concat(node2);
    const ids = /* @__PURE__ */ Object.create(null);
    while (search.length) {
      const id = search.shift();
      if (!id) continue;
      if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) {
        continue;
      }
      if ((0, _index.isIdentifier)(id)) {
        if (duplicates) {
          const _ids = ids[id.name] = ids[id.name] || [];
          _ids.push(id);
        } else {
          ids[id.name] = id;
        }
        continue;
      }
      if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
        if ((0, _index.isDeclaration)(id.declaration)) {
          search.push(id.declaration);
        }
        continue;
      }
      if (outerOnly) {
        if ((0, _index.isFunctionDeclaration)(id)) {
          search.push(id.id);
          continue;
        }
        if ((0, _index.isFunctionExpression)(id)) {
          continue;
        }
      }
      const keys2 = getBindingIdentifiers$1.keys[id.type];
      if (keys2) {
        for (let i = 0; i < keys2.length; i++) {
          const key = keys2[i];
          const nodes = id[key];
          if (nodes) {
            if (Array.isArray(nodes)) {
              search.push(...nodes);
            } else {
              search.push(nodes);
            }
          }
        }
      }
    }
    return ids;
  }
  const keys = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    DeclareInterface: ["id"],
    DeclareTypeAlias: ["id"],
    DeclareOpaqueType: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],
    OpaqueType: ["id"],
    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],
    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],
    TSImportEqualsDeclaration: ["id"],
    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],
    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],
    ArrowFunctionExpression: ["params"],
    ObjectMethod: ["params"],
    ClassMethod: ["params"],
    ClassPrivateMethod: ["params"],
    ForInStatement: ["left"],
    ForOfStatement: ["left"],
    ClassDeclaration: ["id"],
    ClassExpression: ["id"],
    RestElement: ["argument"],
    UpdateExpression: ["argument"],
    ObjectProperty: ["value"],
    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],
    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };
  getBindingIdentifiers$1.keys = keys;
  return getBindingIdentifiers;
}
var getOuterBindingIdentifiers = {};
var hasRequiredGetOuterBindingIdentifiers;
function requireGetOuterBindingIdentifiers() {
  if (hasRequiredGetOuterBindingIdentifiers) return getOuterBindingIdentifiers;
  hasRequiredGetOuterBindingIdentifiers = 1;
  Object.defineProperty(getOuterBindingIdentifiers, "__esModule", {
    value: true
  });
  getOuterBindingIdentifiers.default = void 0;
  var _getBindingIdentifiers = requireGetBindingIdentifiers();
  getOuterBindingIdentifiers.default = getOuterBindingIdentifiers$1;
  function getOuterBindingIdentifiers$1(node2, duplicates) {
    return (0, _getBindingIdentifiers.default)(node2, duplicates, true);
  }
  return getOuterBindingIdentifiers;
}
var getFunctionName = {};
var hasRequiredGetFunctionName;
function requireGetFunctionName() {
  if (hasRequiredGetFunctionName) return getFunctionName;
  hasRequiredGetFunctionName = 1;
  Object.defineProperty(getFunctionName, "__esModule", {
    value: true
  });
  getFunctionName.default = getFunctionName$1;
  var _index = requireGenerated$3();
  function getNameFromLiteralId(id) {
    if ((0, _index.isNullLiteral)(id)) {
      return "null";
    }
    if ((0, _index.isRegExpLiteral)(id)) {
      return `/${id.pattern}/${id.flags}`;
    }
    if ((0, _index.isTemplateLiteral)(id)) {
      return id.quasis.map((quasi) => quasi.value.raw).join("");
    }
    if (id.value !== void 0) {
      return String(id.value);
    }
    return null;
  }
  function getObjectMemberKey(node2) {
    if (!node2.computed || (0, _index.isLiteral)(node2.key)) {
      return node2.key;
    }
  }
  function getFunctionName$1(node2, parent) {
    if ("id" in node2 && node2.id) {
      return {
        name: node2.id.name,
        originalNode: node2.id
      };
    }
    let prefix = "";
    let id;
    if ((0, _index.isObjectProperty)(parent, {
      value: node2
    })) {
      id = getObjectMemberKey(parent);
    } else if ((0, _index.isObjectMethod)(node2) || (0, _index.isClassMethod)(node2)) {
      id = getObjectMemberKey(node2);
      if (node2.kind === "get") prefix = "get ";
      else if (node2.kind === "set") prefix = "set ";
    } else if ((0, _index.isVariableDeclarator)(parent, {
      init: node2
    })) {
      id = parent.id;
    } else if ((0, _index.isAssignmentExpression)(parent, {
      operator: "=",
      right: node2
    })) {
      id = parent.left;
    }
    if (!id) return null;
    const name = (0, _index.isLiteral)(id) ? getNameFromLiteralId(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
    if (name == null) return null;
    return {
      name: prefix + name,
      originalNode: id
    };
  }
  return getFunctionName;
}
var traverse = {};
var hasRequiredTraverse;
function requireTraverse() {
  if (hasRequiredTraverse) return traverse;
  hasRequiredTraverse = 1;
  Object.defineProperty(traverse, "__esModule", {
    value: true
  });
  traverse.default = traverse$1;
  var _index = requireDefinitions();
  function traverse$1(node2, handlers, state) {
    if (typeof handlers === "function") {
      handlers = {
        enter: handlers
      };
    }
    const {
      enter,
      exit
    } = handlers;
    traverseSimpleImpl(node2, enter, exit, state, []);
  }
  function traverseSimpleImpl(node2, enter, exit, state, ancestors) {
    const keys = _index.VISITOR_KEYS[node2.type];
    if (!keys) return;
    if (enter) enter(node2, ancestors, state);
    for (const key of keys) {
      const subNode = node2[key];
      if (Array.isArray(subNode)) {
        for (let i = 0; i < subNode.length; i++) {
          const child = subNode[i];
          if (!child) continue;
          ancestors.push({
            node: node2,
            key,
            index: i
          });
          traverseSimpleImpl(child, enter, exit, state, ancestors);
          ancestors.pop();
        }
      } else if (subNode) {
        ancestors.push({
          node: node2,
          key
        });
        traverseSimpleImpl(subNode, enter, exit, state, ancestors);
        ancestors.pop();
      }
    }
    if (exit) exit(node2, ancestors, state);
  }
  return traverse;
}
var isBinding = {};
var hasRequiredIsBinding;
function requireIsBinding() {
  if (hasRequiredIsBinding) return isBinding;
  hasRequiredIsBinding = 1;
  Object.defineProperty(isBinding, "__esModule", {
    value: true
  });
  isBinding.default = isBinding$1;
  var _getBindingIdentifiers = requireGetBindingIdentifiers();
  function isBinding$1(node2, parent, grandparent) {
    if (grandparent && node2.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
      return false;
    }
    const keys = _getBindingIdentifiers.default.keys[parent.type];
    if (keys) {
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const val = parent[key];
        if (Array.isArray(val)) {
          if (val.includes(node2)) return true;
        } else {
          if (val === node2) return true;
        }
      }
    }
    return false;
  }
  return isBinding;
}
var isBlockScoped = {};
var isLet = {};
var hasRequiredIsLet;
function requireIsLet() {
  if (hasRequiredIsLet) return isLet;
  hasRequiredIsLet = 1;
  Object.defineProperty(isLet, "__esModule", {
    value: true
  });
  isLet.default = isLet$1;
  var _index = requireGenerated$3();
  {
    var BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
  }
  function isLet$1(node2) {
    {
      return (0, _index.isVariableDeclaration)(node2) && (node2.kind !== "var" || node2[BLOCK_SCOPED_SYMBOL]);
    }
  }
  return isLet;
}
var hasRequiredIsBlockScoped;
function requireIsBlockScoped() {
  if (hasRequiredIsBlockScoped) return isBlockScoped;
  hasRequiredIsBlockScoped = 1;
  Object.defineProperty(isBlockScoped, "__esModule", {
    value: true
  });
  isBlockScoped.default = isBlockScoped$1;
  var _index = requireGenerated$3();
  var _isLet = requireIsLet();
  function isBlockScoped$1(node2) {
    return (0, _index.isFunctionDeclaration)(node2) || (0, _index.isClassDeclaration)(node2) || (0, _isLet.default)(node2);
  }
  return isBlockScoped;
}
var isImmutable = {};
var hasRequiredIsImmutable;
function requireIsImmutable() {
  if (hasRequiredIsImmutable) return isImmutable;
  hasRequiredIsImmutable = 1;
  Object.defineProperty(isImmutable, "__esModule", {
    value: true
  });
  isImmutable.default = isImmutable$1;
  var _isType = requireIsType();
  var _index = requireGenerated$3();
  function isImmutable$1(node2) {
    if ((0, _isType.default)(node2.type, "Immutable")) return true;
    if ((0, _index.isIdentifier)(node2)) {
      if (node2.name === "undefined") {
        return true;
      } else {
        return false;
      }
    }
    return false;
  }
  return isImmutable;
}
var isNodesEquivalent = {};
var hasRequiredIsNodesEquivalent;
function requireIsNodesEquivalent() {
  if (hasRequiredIsNodesEquivalent) return isNodesEquivalent;
  hasRequiredIsNodesEquivalent = 1;
  Object.defineProperty(isNodesEquivalent, "__esModule", {
    value: true
  });
  isNodesEquivalent.default = isNodesEquivalent$1;
  var _index = requireDefinitions();
  function isNodesEquivalent$1(a, b) {
    if (typeof a !== "object" || typeof b !== "object" || a == null || b == null) {
      return a === b;
    }
    if (a.type !== b.type) {
      return false;
    }
    const fields = Object.keys(_index.NODE_FIELDS[a.type] || a.type);
    const visitorKeys = _index.VISITOR_KEYS[a.type];
    for (const field of fields) {
      const val_a = a[field];
      const val_b = b[field];
      if (typeof val_a !== typeof val_b) {
        return false;
      }
      if (val_a == null && val_b == null) {
        continue;
      } else if (val_a == null || val_b == null) {
        return false;
      }
      if (Array.isArray(val_a)) {
        if (!Array.isArray(val_b)) {
          return false;
        }
        if (val_a.length !== val_b.length) {
          return false;
        }
        for (let i = 0; i < val_a.length; i++) {
          if (!isNodesEquivalent$1(val_a[i], val_b[i])) {
            return false;
          }
        }
        continue;
      }
      if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
        for (const key of Object.keys(val_a)) {
          if (val_a[key] !== val_b[key]) {
            return false;
          }
        }
        continue;
      }
      if (!isNodesEquivalent$1(val_a, val_b)) {
        return false;
      }
    }
    return true;
  }
  return isNodesEquivalent;
}
var isReferenced = {};
var hasRequiredIsReferenced;
function requireIsReferenced() {
  if (hasRequiredIsReferenced) return isReferenced;
  hasRequiredIsReferenced = 1;
  Object.defineProperty(isReferenced, "__esModule", {
    value: true
  });
  isReferenced.default = isReferenced$1;
  function isReferenced$1(node2, parent, grandparent) {
    switch (parent.type) {
      case "MemberExpression":
      case "OptionalMemberExpression":
        if (parent.property === node2) {
          return !!parent.computed;
        }
        return parent.object === node2;
      case "JSXMemberExpression":
        return parent.object === node2;
      case "VariableDeclarator":
        return parent.init === node2;
      case "ArrowFunctionExpression":
        return parent.body === node2;
      case "PrivateName":
        return false;
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "ObjectMethod":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return false;
      case "ObjectProperty":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return !grandparent || grandparent.type !== "ObjectPattern";
      case "ClassProperty":
      case "ClassAccessorProperty":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return true;
      case "ClassPrivateProperty":
        return parent.key !== node2;
      case "ClassDeclaration":
      case "ClassExpression":
        return parent.superClass === node2;
      case "AssignmentExpression":
        return parent.right === node2;
      case "AssignmentPattern":
        return parent.right === node2;
      case "LabeledStatement":
        return false;
      case "CatchClause":
        return false;
      case "RestElement":
        return false;
      case "BreakStatement":
      case "ContinueStatement":
        return false;
      case "FunctionDeclaration":
      case "FunctionExpression":
        return false;
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return false;
      case "ExportSpecifier":
        if (grandparent != null && grandparent.source) {
          return false;
        }
        return parent.local === node2;
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return false;
      case "ImportAttribute":
        return false;
      case "JSXAttribute":
        return false;
      case "ObjectPattern":
      case "ArrayPattern":
        return false;
      case "MetaProperty":
        return false;
      case "ObjectTypeProperty":
        return parent.key !== node2;
      case "TSEnumMember":
        return parent.id !== node2;
      case "TSPropertySignature":
        if (parent.key === node2) {
          return !!parent.computed;
        }
        return true;
    }
    return true;
  }
  return isReferenced;
}
var isScope = {};
var hasRequiredIsScope;
function requireIsScope() {
  if (hasRequiredIsScope) return isScope;
  hasRequiredIsScope = 1;
  Object.defineProperty(isScope, "__esModule", {
    value: true
  });
  isScope.default = isScope$1;
  var _index = requireGenerated$3();
  function isScope$1(node2, parent) {
    if ((0, _index.isBlockStatement)(node2) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
      return false;
    }
    if ((0, _index.isPattern)(node2) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
      return true;
    }
    return (0, _index.isScopable)(node2);
  }
  return isScope;
}
var isSpecifierDefault = {};
var hasRequiredIsSpecifierDefault;
function requireIsSpecifierDefault() {
  if (hasRequiredIsSpecifierDefault) return isSpecifierDefault;
  hasRequiredIsSpecifierDefault = 1;
  Object.defineProperty(isSpecifierDefault, "__esModule", {
    value: true
  });
  isSpecifierDefault.default = isSpecifierDefault$1;
  var _index = requireGenerated$3();
  function isSpecifierDefault$1(specifier) {
    return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, {
      name: "default"
    });
  }
  return isSpecifierDefault;
}
var isValidES3Identifier = {};
var hasRequiredIsValidES3Identifier;
function requireIsValidES3Identifier() {
  if (hasRequiredIsValidES3Identifier) return isValidES3Identifier;
  hasRequiredIsValidES3Identifier = 1;
  Object.defineProperty(isValidES3Identifier, "__esModule", {
    value: true
  });
  isValidES3Identifier.default = isValidES3Identifier$1;
  var _isValidIdentifier = requireIsValidIdentifier();
  const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
  function isValidES3Identifier$1(name) {
    return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
  }
  return isValidES3Identifier;
}
var isVar = {};
var hasRequiredIsVar;
function requireIsVar() {
  if (hasRequiredIsVar) return isVar;
  hasRequiredIsVar = 1;
  Object.defineProperty(isVar, "__esModule", {
    value: true
  });
  isVar.default = isVar$1;
  var _index = requireGenerated$3();
  {
    var BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
  }
  function isVar$1(node2) {
    {
      return (0, _index.isVariableDeclaration)(node2, {
        kind: "var"
      }) && !node2[BLOCK_SCOPED_SYMBOL];
    }
  }
  return isVar;
}
var toSequenceExpression = {};
var gatherSequenceExpressions = {};
var hasRequiredGatherSequenceExpressions;
function requireGatherSequenceExpressions() {
  if (hasRequiredGatherSequenceExpressions) return gatherSequenceExpressions;
  hasRequiredGatherSequenceExpressions = 1;
  Object.defineProperty(gatherSequenceExpressions, "__esModule", {
    value: true
  });
  gatherSequenceExpressions.default = gatherSequenceExpressions$1;
  var _getBindingIdentifiers = requireGetBindingIdentifiers();
  var _index = requireGenerated$3();
  var _index2 = requireGenerated$2();
  var _productions = requireProductions();
  var _cloneNode = requireCloneNode();
  function gatherSequenceExpressions$1(nodes, declars) {
    const exprs = [];
    let ensureLastUndefined = true;
    for (const node2 of nodes) {
      if (!(0, _index.isEmptyStatement)(node2)) {
        ensureLastUndefined = false;
      }
      if ((0, _index.isExpression)(node2)) {
        exprs.push(node2);
      } else if ((0, _index.isExpressionStatement)(node2)) {
        exprs.push(node2.expression);
      } else if ((0, _index.isVariableDeclaration)(node2)) {
        if (node2.kind !== "var") return;
        for (const declar of node2.declarations) {
          const bindings = (0, _getBindingIdentifiers.default)(declar);
          for (const key of Object.keys(bindings)) {
            declars.push({
              kind: node2.kind,
              id: (0, _cloneNode.default)(bindings[key])
            });
          }
          if (declar.init) {
            exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
          }
        }
        ensureLastUndefined = true;
      } else if ((0, _index.isIfStatement)(node2)) {
        const consequent = node2.consequent ? gatherSequenceExpressions$1([node2.consequent], declars) : (0, _productions.buildUndefinedNode)();
        const alternate = node2.alternate ? gatherSequenceExpressions$1([node2.alternate], declars) : (0, _productions.buildUndefinedNode)();
        if (!consequent || !alternate) return;
        exprs.push((0, _index2.conditionalExpression)(node2.test, consequent, alternate));
      } else if ((0, _index.isBlockStatement)(node2)) {
        const body = gatherSequenceExpressions$1(node2.body, declars);
        if (!body) return;
        exprs.push(body);
      } else if ((0, _index.isEmptyStatement)(node2)) {
        if (nodes.indexOf(node2) === 0) {
          ensureLastUndefined = true;
        }
      } else {
        return;
      }
    }
    if (ensureLastUndefined) {
      exprs.push((0, _productions.buildUndefinedNode)());
    }
    if (exprs.length === 1) {
      return exprs[0];
    } else {
      return (0, _index2.sequenceExpression)(exprs);
    }
  }
  return gatherSequenceExpressions;
}
var hasRequiredToSequenceExpression;
function requireToSequenceExpression() {
  if (hasRequiredToSequenceExpression) return toSequenceExpression;
  hasRequiredToSequenceExpression = 1;
  Object.defineProperty(toSequenceExpression, "__esModule", {
    value: true
  });
  toSequenceExpression.default = toSequenceExpression$1;
  var _gatherSequenceExpressions = requireGatherSequenceExpressions();
  function toSequenceExpression$1(nodes, scope2) {
    if (!(nodes != null && nodes.length)) return;
    const declars = [];
    const result = (0, _gatherSequenceExpressions.default)(nodes, declars);
    if (!result) return;
    for (const declar of declars) {
      scope2.push(declar);
    }
    return result;
  }
  return toSequenceExpression;
}
var hasRequiredLib$b;
function requireLib$b() {
  if (hasRequiredLib$b) return lib$b;
  hasRequiredLib$b = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      react: true,
      assertNode: true,
      createTypeAnnotationBasedOnTypeof: true,
      createUnionTypeAnnotation: true,
      createFlowUnionType: true,
      createTSUnionType: true,
      cloneNode: true,
      clone: true,
      cloneDeep: true,
      cloneDeepWithoutLoc: true,
      cloneWithoutLoc: true,
      addComment: true,
      addComments: true,
      inheritInnerComments: true,
      inheritLeadingComments: true,
      inheritsComments: true,
      inheritTrailingComments: true,
      removeComments: true,
      ensureBlock: true,
      toBindingIdentifierName: true,
      toBlock: true,
      toComputedKey: true,
      toExpression: true,
      toIdentifier: true,
      toKeyAlias: true,
      toStatement: true,
      valueToNode: true,
      appendToMemberExpression: true,
      inherits: true,
      prependToMemberExpression: true,
      removeProperties: true,
      removePropertiesDeep: true,
      removeTypeDuplicates: true,
      getAssignmentIdentifiers: true,
      getBindingIdentifiers: true,
      getOuterBindingIdentifiers: true,
      getFunctionName: true,
      traverse: true,
      traverseFast: true,
      shallowEqual: true,
      is: true,
      isBinding: true,
      isBlockScoped: true,
      isImmutable: true,
      isLet: true,
      isNode: true,
      isNodesEquivalent: true,
      isPlaceholderType: true,
      isReferenced: true,
      isScope: true,
      isSpecifierDefault: true,
      isType: true,
      isValidES3Identifier: true,
      isValidIdentifier: true,
      isVar: true,
      matchesPattern: true,
      validate: true,
      buildMatchMemberExpression: true,
      __internal__deprecationWarning: true
    };
    Object.defineProperty(exports2, "__internal__deprecationWarning", {
      enumerable: true,
      get: function() {
        return _deprecationWarning.default;
      }
    });
    Object.defineProperty(exports2, "addComment", {
      enumerable: true,
      get: function() {
        return _addComment.default;
      }
    });
    Object.defineProperty(exports2, "addComments", {
      enumerable: true,
      get: function() {
        return _addComments.default;
      }
    });
    Object.defineProperty(exports2, "appendToMemberExpression", {
      enumerable: true,
      get: function() {
        return _appendToMemberExpression.default;
      }
    });
    Object.defineProperty(exports2, "assertNode", {
      enumerable: true,
      get: function() {
        return _assertNode.default;
      }
    });
    Object.defineProperty(exports2, "buildMatchMemberExpression", {
      enumerable: true,
      get: function() {
        return _buildMatchMemberExpression.default;
      }
    });
    Object.defineProperty(exports2, "clone", {
      enumerable: true,
      get: function() {
        return _clone.default;
      }
    });
    Object.defineProperty(exports2, "cloneDeep", {
      enumerable: true,
      get: function() {
        return _cloneDeep.default;
      }
    });
    Object.defineProperty(exports2, "cloneDeepWithoutLoc", {
      enumerable: true,
      get: function() {
        return _cloneDeepWithoutLoc.default;
      }
    });
    Object.defineProperty(exports2, "cloneNode", {
      enumerable: true,
      get: function() {
        return _cloneNode.default;
      }
    });
    Object.defineProperty(exports2, "cloneWithoutLoc", {
      enumerable: true,
      get: function() {
        return _cloneWithoutLoc.default;
      }
    });
    Object.defineProperty(exports2, "createFlowUnionType", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports2, "createTSUnionType", {
      enumerable: true,
      get: function() {
        return _createTSUnionType.default;
      }
    });
    Object.defineProperty(exports2, "createTypeAnnotationBasedOnTypeof", {
      enumerable: true,
      get: function() {
        return _createTypeAnnotationBasedOnTypeof.default;
      }
    });
    Object.defineProperty(exports2, "createUnionTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _createFlowUnionType.default;
      }
    });
    Object.defineProperty(exports2, "ensureBlock", {
      enumerable: true,
      get: function() {
        return _ensureBlock.default;
      }
    });
    Object.defineProperty(exports2, "getAssignmentIdentifiers", {
      enumerable: true,
      get: function() {
        return _getAssignmentIdentifiers.default;
      }
    });
    Object.defineProperty(exports2, "getBindingIdentifiers", {
      enumerable: true,
      get: function() {
        return _getBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports2, "getFunctionName", {
      enumerable: true,
      get: function() {
        return _getFunctionName.default;
      }
    });
    Object.defineProperty(exports2, "getOuterBindingIdentifiers", {
      enumerable: true,
      get: function() {
        return _getOuterBindingIdentifiers.default;
      }
    });
    Object.defineProperty(exports2, "inheritInnerComments", {
      enumerable: true,
      get: function() {
        return _inheritInnerComments.default;
      }
    });
    Object.defineProperty(exports2, "inheritLeadingComments", {
      enumerable: true,
      get: function() {
        return _inheritLeadingComments.default;
      }
    });
    Object.defineProperty(exports2, "inheritTrailingComments", {
      enumerable: true,
      get: function() {
        return _inheritTrailingComments.default;
      }
    });
    Object.defineProperty(exports2, "inherits", {
      enumerable: true,
      get: function() {
        return _inherits.default;
      }
    });
    Object.defineProperty(exports2, "inheritsComments", {
      enumerable: true,
      get: function() {
        return _inheritsComments.default;
      }
    });
    Object.defineProperty(exports2, "is", {
      enumerable: true,
      get: function() {
        return _is.default;
      }
    });
    Object.defineProperty(exports2, "isBinding", {
      enumerable: true,
      get: function() {
        return _isBinding.default;
      }
    });
    Object.defineProperty(exports2, "isBlockScoped", {
      enumerable: true,
      get: function() {
        return _isBlockScoped.default;
      }
    });
    Object.defineProperty(exports2, "isImmutable", {
      enumerable: true,
      get: function() {
        return _isImmutable.default;
      }
    });
    Object.defineProperty(exports2, "isLet", {
      enumerable: true,
      get: function() {
        return _isLet.default;
      }
    });
    Object.defineProperty(exports2, "isNode", {
      enumerable: true,
      get: function() {
        return _isNode.default;
      }
    });
    Object.defineProperty(exports2, "isNodesEquivalent", {
      enumerable: true,
      get: function() {
        return _isNodesEquivalent.default;
      }
    });
    Object.defineProperty(exports2, "isPlaceholderType", {
      enumerable: true,
      get: function() {
        return _isPlaceholderType.default;
      }
    });
    Object.defineProperty(exports2, "isReferenced", {
      enumerable: true,
      get: function() {
        return _isReferenced.default;
      }
    });
    Object.defineProperty(exports2, "isScope", {
      enumerable: true,
      get: function() {
        return _isScope.default;
      }
    });
    Object.defineProperty(exports2, "isSpecifierDefault", {
      enumerable: true,
      get: function() {
        return _isSpecifierDefault.default;
      }
    });
    Object.defineProperty(exports2, "isType", {
      enumerable: true,
      get: function() {
        return _isType.default;
      }
    });
    Object.defineProperty(exports2, "isValidES3Identifier", {
      enumerable: true,
      get: function() {
        return _isValidES3Identifier.default;
      }
    });
    Object.defineProperty(exports2, "isValidIdentifier", {
      enumerable: true,
      get: function() {
        return _isValidIdentifier.default;
      }
    });
    Object.defineProperty(exports2, "isVar", {
      enumerable: true,
      get: function() {
        return _isVar.default;
      }
    });
    Object.defineProperty(exports2, "matchesPattern", {
      enumerable: true,
      get: function() {
        return _matchesPattern.default;
      }
    });
    Object.defineProperty(exports2, "prependToMemberExpression", {
      enumerable: true,
      get: function() {
        return _prependToMemberExpression.default;
      }
    });
    exports2.react = void 0;
    Object.defineProperty(exports2, "removeComments", {
      enumerable: true,
      get: function() {
        return _removeComments.default;
      }
    });
    Object.defineProperty(exports2, "removeProperties", {
      enumerable: true,
      get: function() {
        return _removeProperties.default;
      }
    });
    Object.defineProperty(exports2, "removePropertiesDeep", {
      enumerable: true,
      get: function() {
        return _removePropertiesDeep.default;
      }
    });
    Object.defineProperty(exports2, "removeTypeDuplicates", {
      enumerable: true,
      get: function() {
        return _removeTypeDuplicates.default;
      }
    });
    Object.defineProperty(exports2, "shallowEqual", {
      enumerable: true,
      get: function() {
        return _shallowEqual.default;
      }
    });
    Object.defineProperty(exports2, "toBindingIdentifierName", {
      enumerable: true,
      get: function() {
        return _toBindingIdentifierName.default;
      }
    });
    Object.defineProperty(exports2, "toBlock", {
      enumerable: true,
      get: function() {
        return _toBlock.default;
      }
    });
    Object.defineProperty(exports2, "toComputedKey", {
      enumerable: true,
      get: function() {
        return _toComputedKey.default;
      }
    });
    Object.defineProperty(exports2, "toExpression", {
      enumerable: true,
      get: function() {
        return _toExpression.default;
      }
    });
    Object.defineProperty(exports2, "toIdentifier", {
      enumerable: true,
      get: function() {
        return _toIdentifier.default;
      }
    });
    Object.defineProperty(exports2, "toKeyAlias", {
      enumerable: true,
      get: function() {
        return _toKeyAlias.default;
      }
    });
    Object.defineProperty(exports2, "toStatement", {
      enumerable: true,
      get: function() {
        return _toStatement.default;
      }
    });
    Object.defineProperty(exports2, "traverse", {
      enumerable: true,
      get: function() {
        return _traverse.default;
      }
    });
    Object.defineProperty(exports2, "traverseFast", {
      enumerable: true,
      get: function() {
        return _traverseFast.default;
      }
    });
    Object.defineProperty(exports2, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports2, "valueToNode", {
      enumerable: true,
      get: function() {
        return _valueToNode.default;
      }
    });
    var _isReactComponent = requireIsReactComponent();
    var _isCompatTag = requireIsCompatTag();
    var _buildChildren = requireBuildChildren();
    var _assertNode = requireAssertNode();
    var _index = requireGenerated$1();
    Object.keys(_index).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index[key];
        }
      });
    });
    var _createTypeAnnotationBasedOnTypeof = requireCreateTypeAnnotationBasedOnTypeof();
    var _createFlowUnionType = requireCreateFlowUnionType();
    var _createTSUnionType = requireCreateTSUnionType();
    var _productions = requireProductions();
    Object.keys(_productions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _productions[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _productions[key];
        }
      });
    });
    var _index2 = requireGenerated$2();
    Object.keys(_index2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index2[key];
        }
      });
    });
    var _cloneNode = requireCloneNode();
    var _clone = requireClone();
    var _cloneDeep = requireCloneDeep$1();
    var _cloneDeepWithoutLoc = requireCloneDeepWithoutLoc();
    var _cloneWithoutLoc = requireCloneWithoutLoc();
    var _addComment = requireAddComment();
    var _addComments = requireAddComments();
    var _inheritInnerComments = requireInheritInnerComments();
    var _inheritLeadingComments = requireInheritLeadingComments();
    var _inheritsComments = requireInheritsComments();
    var _inheritTrailingComments = requireInheritTrailingComments();
    var _removeComments = requireRemoveComments();
    var _index3 = requireGenerated();
    Object.keys(_index3).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index3[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index3[key];
        }
      });
    });
    var _index4 = requireConstants();
    Object.keys(_index4).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index4[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index4[key];
        }
      });
    });
    var _ensureBlock = requireEnsureBlock();
    var _toBindingIdentifierName = requireToBindingIdentifierName();
    var _toBlock = requireToBlock();
    var _toComputedKey = requireToComputedKey();
    var _toExpression = requireToExpression();
    var _toIdentifier = requireToIdentifier();
    var _toKeyAlias = requireToKeyAlias();
    var _toStatement = requireToStatement();
    var _valueToNode = requireValueToNode();
    var _index5 = requireDefinitions();
    Object.keys(_index5).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index5[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index5[key];
        }
      });
    });
    var _appendToMemberExpression = requireAppendToMemberExpression();
    var _inherits = requireInherits();
    var _prependToMemberExpression = requirePrependToMemberExpression();
    var _removeProperties = requireRemoveProperties();
    var _removePropertiesDeep = requireRemovePropertiesDeep();
    var _removeTypeDuplicates = requireRemoveTypeDuplicates$1();
    var _getAssignmentIdentifiers = requireGetAssignmentIdentifiers();
    var _getBindingIdentifiers = requireGetBindingIdentifiers();
    var _getOuterBindingIdentifiers = requireGetOuterBindingIdentifiers();
    var _getFunctionName = requireGetFunctionName();
    var _traverse = requireTraverse();
    Object.keys(_traverse).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _traverse[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _traverse[key];
        }
      });
    });
    var _traverseFast = requireTraverseFast();
    var _shallowEqual = requireShallowEqual();
    var _is = requireIs();
    var _isBinding = requireIsBinding();
    var _isBlockScoped = requireIsBlockScoped();
    var _isImmutable = requireIsImmutable();
    var _isLet = requireIsLet();
    var _isNode = requireIsNode();
    var _isNodesEquivalent = requireIsNodesEquivalent();
    var _isPlaceholderType = requireIsPlaceholderType();
    var _isReferenced = requireIsReferenced();
    var _isScope = requireIsScope();
    var _isSpecifierDefault = requireIsSpecifierDefault();
    var _isType = requireIsType();
    var _isValidES3Identifier = requireIsValidES3Identifier();
    var _isValidIdentifier = requireIsValidIdentifier();
    var _isVar = requireIsVar();
    var _matchesPattern = requireMatchesPattern();
    var _validate = requireValidate();
    var _buildMatchMemberExpression = requireBuildMatchMemberExpression();
    var _index6 = requireGenerated$3();
    Object.keys(_index6).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index6[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index6[key];
        }
      });
    });
    var _deprecationWarning = requireDeprecationWarning();
    var _toSequenceExpression = requireToSequenceExpression();
    exports2.react = {
      isReactComponent: _isReactComponent.default,
      isCompatTag: _isCompatTag.default,
      buildChildren: _buildChildren.default
    };
    {
      exports2.toSequenceExpression = _toSequenceExpression.default;
    }
    if (process.env.BABEL_TYPES_8_BREAKING) {
      console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
    }
  })(lib$b);
  return lib$b;
}
var helpersGenerated = {};
var lib$8 = {};
var formatters = {};
var hasRequiredFormatters;
function requireFormatters() {
  if (hasRequiredFormatters) return formatters;
  hasRequiredFormatters = 1;
  Object.defineProperty(formatters, "__esModule", {
    value: true
  });
  formatters.statements = formatters.statement = formatters.smart = formatters.program = formatters.expression = void 0;
  var _t2 = requireLib$b();
  const {
    assertExpressionStatement
  } = _t2;
  function makeStatementFormatter(fn2) {
    return {
      code: (str) => `/* @babel/template */;
${str}`,
      validate: () => {
      },
      unwrap: (ast) => {
        return fn2(ast.program.body.slice(1));
      }
    };
  }
  formatters.smart = makeStatementFormatter((body) => {
    if (body.length > 1) {
      return body;
    } else {
      return body[0];
    }
  });
  formatters.statements = makeStatementFormatter((body) => body);
  formatters.statement = makeStatementFormatter((body) => {
    if (body.length === 0) {
      throw new Error("Found nothing to return.");
    }
    if (body.length > 1) {
      throw new Error("Found multiple statements but wanted one");
    }
    return body[0];
  });
  const expression = formatters.expression = {
    code: (str) => `(
${str}
)`,
    validate: (ast) => {
      if (ast.program.body.length > 1) {
        throw new Error("Found multiple statements but wanted one");
      }
      if (expression.unwrap(ast).start === 0) {
        throw new Error("Parse result included parens.");
      }
    },
    unwrap: ({
      program
    }) => {
      const [stmt] = program.body;
      assertExpressionStatement(stmt);
      return stmt.expression;
    }
  };
  formatters.program = {
    code: (str) => str,
    validate: () => {
    },
    unwrap: (ast) => ast.program
  };
  return formatters;
}
var builder = {};
var options$2 = {};
var hasRequiredOptions$2;
function requireOptions$2() {
  if (hasRequiredOptions$2) return options$2;
  hasRequiredOptions$2 = 1;
  Object.defineProperty(options$2, "__esModule", {
    value: true
  });
  options$2.merge = merge;
  options$2.normalizeReplacements = normalizeReplacements;
  options$2.validate = validate2;
  const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  function merge(a, b) {
    const {
      placeholderWhitelist = a.placeholderWhitelist,
      placeholderPattern = a.placeholderPattern,
      preserveComments = a.preserveComments,
      syntacticPlaceholders = a.syntacticPlaceholders
    } = b;
    return {
      parser: Object.assign({}, a.parser, b.parser),
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    };
  }
  function validate2(opts) {
    if (opts != null && typeof opts !== "object") {
      throw new Error("Unknown template options.");
    }
    const _ref = opts || {}, {
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    } = _ref, parser2 = _objectWithoutPropertiesLoose(_ref, _excluded);
    if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {
      throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
    }
    if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {
      throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
    }
    if (preserveComments != null && typeof preserveComments !== "boolean") {
      throw new Error("'.preserveComments' must be a boolean, null, or undefined");
    }
    if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") {
      throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
    }
    if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    }
    return {
      parser: parser2,
      placeholderWhitelist: placeholderWhitelist || void 0,
      placeholderPattern: placeholderPattern == null ? void 0 : placeholderPattern,
      preserveComments: preserveComments == null ? void 0 : preserveComments,
      syntacticPlaceholders: syntacticPlaceholders == null ? void 0 : syntacticPlaceholders
    };
  }
  function normalizeReplacements(replacements) {
    if (Array.isArray(replacements)) {
      return replacements.reduce((acc, replacement2, i) => {
        acc["$" + i] = replacement2;
        return acc;
      }, {});
    } else if (typeof replacements === "object" || replacements == null) {
      return replacements || void 0;
    }
    throw new Error("Template replacements must be an array, object, null, or undefined");
  }
  return options$2;
}
var string = {};
var parse$3 = {};
var lib$7 = {};
var hasRequiredLib$a;
function requireLib$a() {
  if (hasRequiredLib$a) return lib$7;
  hasRequiredLib$a = 1;
  Object.defineProperty(lib$7, "__esModule", {
    value: true
  });
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  class Position {
    constructor(line, col, index) {
      this.line = void 0;
      this.column = void 0;
      this.index = void 0;
      this.line = line;
      this.column = col;
      this.index = index;
    }
  }
  class SourceLocation {
    constructor(start, end) {
      this.start = void 0;
      this.end = void 0;
      this.filename = void 0;
      this.identifierName = void 0;
      this.start = start;
      this.end = end;
    }
  }
  function createPositionWithColumnOffset(position, columnOffset) {
    const {
      line,
      column,
      index
    } = position;
    return new Position(line, column + columnOffset, index + columnOffset);
  }
  const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
  var ModuleErrors = {
    ImportMetaOutsideModule: {
      message: `import.meta may appear only with 'sourceType: "module"'`,
      code
    },
    ImportOutsideModule: {
      message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
      code
    }
  };
  const NodeDescriptions = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    CatchClause: "catch clause",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ImportSpecifier: "import specifier",
    ImportDefaultSpecifier: "import default specifier",
    ImportNamespaceSpecifier: "import namespace specifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
      true: "prefix operation",
      false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
  };
  const toNodeDescription = (node2) => node2.type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[`${node2.prefix}`] : NodeDescriptions[node2.type];
  var StandardErrors = {
    AccessorIsGenerator: ({
      kind
    }) => `A ${kind}ter cannot be a generator.`,
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    BadGetterArity: "A 'get' accessor must not have any formal parameters.",
    BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: ({
      kind
    }) => `Missing initializer in ${kind} declaration.`,
    DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
    DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: ({
      exportName
    }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: ({
      localName,
      exportName
    }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: ({
      type
    }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
    ForInUsing: "For-in loop may not start with 'using' declaration.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: ({
      type
    }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.",
    ImportBindingIsString: ({
      importName
    }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`,
    ImportCallArity: `\`import()\` requires exactly one or two arguments.`,
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
    ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
    ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
    IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidCoverInitializedName: "Invalid shorthand property initializer.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: ({
      radix
    }) => `Expected number in radix ${radix}.`,
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: ({
      reservedWord
    }) => `Escape sequence in keyword ${reservedWord}.`,
    InvalidIdentifier: ({
      identifierName
    }) => `Invalid identifier ${identifierName}.`,
    InvalidLhs: ({
      ancestor
    }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsBinding: ({
      ancestor
    }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsOptionalChaining: ({
      ancestor
    }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: ({
      unexpected
    }) => `Unexpected character '${unexpected}'.`,
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: ({
      identifierName
    }) => `Private name #${identifierName} is not defined.`,
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: ({
      labelName
    }) => `Label '${labelName}' is already declared.`,
    LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingPlugin: ({
      missingPlugin
    }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
    MissingOneOfPlugins: ({
      missingPlugin
    }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: ({
      key
    }) => `Duplicate key "${key}" is not allowed in module attributes.`,
    ModuleExportNameHasLoneSurrogate: ({
      surrogateCharCode
    }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
    ModuleExportUndefined: ({
      localName
    }) => `Export '${localName}' is not defined.`,
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PrivateInExpectedIn: ({
      identifierName
    }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
    PrivateNameRedeclaration: ({
      identifierName
    }) => `Duplicate private name #${identifierName}.`,
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
    SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
    SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
    StaticPrototype: "Classes may not have static property named prototype.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: ({
      keyword: keyword2
    }) => `Unexpected keyword '${keyword2}'.`,
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Unexpected private name.",
    UnexpectedReservedWord: ({
      reservedWord
    }) => `Unexpected reserved word '${reservedWord}'.`,
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: ({
      expected,
      unexpected
    }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script` or in the bare case statement.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: ({
      target,
      onlyValidPropertyName
    }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    UsingDeclarationExport: "Using declaration cannot be exported.",
    UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
    VarRedeclaration: ({
      identifierName
    }) => `Identifier '${identifierName}' has already been declared.`,
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    YieldNotInGeneratorFunction: "'yield' is only allowed within generator functions.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
  };
  var StrictModeErrors = {
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: ({
      referenceName
    }) => `Assigning to '${referenceName}' in strict mode.`,
    StrictEvalArgumentsBinding: ({
      bindingName
    }) => `Binding '${bindingName}' in strict mode.`,
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode."
  };
  var ParseExpressionErrors = {
    ParseExpressionEmptyInput: "Unexpected parseExpression() input: The input is empty or contains only comments.",
    ParseExpressionExpectsEOF: ({
      unexpected
    }) => `Unexpected parseExpression() input: The input should contain exactly one expression, but the first expression is followed by the unexpected character \`${String.fromCodePoint(unexpected)}\`.`
  };
  const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
  var PipelineOperatorErrors = Object.assign({
    PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
    PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
    PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
    PipeTopicUnconfiguredToken: ({
      token
    }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
    PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
    PipeUnparenthesizedBody: ({
      type
    }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
      type
    })}; please wrap it in parentheses.`
  }, {
    PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
  });
  const _excluded = ["message"];
  function defineHidden(obj, key, value2) {
    Object.defineProperty(obj, key, {
      enumerable: false,
      configurable: true,
      value: value2
    });
  }
  function toParseErrorConstructor({
    toMessage,
    code: code2,
    reasonCode,
    syntaxPlugin
  }) {
    const hasMissingPlugin = reasonCode === "MissingPlugin" || reasonCode === "MissingOneOfPlugins";
    {
      const oldReasonCodes = {
        AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter",
        AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters",
        ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference",
        SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter",
        SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter",
        SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType"
      };
      if (oldReasonCodes[reasonCode]) {
        reasonCode = oldReasonCodes[reasonCode];
      }
    }
    return function constructor(loc, details) {
      const error2 = new SyntaxError();
      error2.code = code2;
      error2.reasonCode = reasonCode;
      error2.loc = loc;
      error2.pos = loc.index;
      error2.syntaxPlugin = syntaxPlugin;
      if (hasMissingPlugin) {
        error2.missingPlugin = details.missingPlugin;
      }
      defineHidden(error2, "clone", function clone2(overrides = {}) {
        var _overrides$loc;
        const {
          line,
          column,
          index
        } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
        return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
      });
      defineHidden(error2, "details", details);
      Object.defineProperty(error2, "message", {
        configurable: true,
        get() {
          const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
          this.message = message;
          return message;
        },
        set(value2) {
          Object.defineProperty(this, "message", {
            value: value2,
            writable: true
          });
        }
      });
      return error2;
    };
  }
  function ParseErrorEnum(argument, syntaxPlugin) {
    if (Array.isArray(argument)) {
      return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
    }
    const ParseErrorConstructors = {};
    for (const reasonCode of Object.keys(argument)) {
      const template = argument[reasonCode];
      const _ref = typeof template === "string" ? {
        message: () => template
      } : typeof template === "function" ? {
        message: template
      } : template, {
        message
      } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded);
      const toMessage = typeof message === "string" ? () => message : message;
      ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
        code: "BABEL_PARSER_SYNTAX_ERROR",
        reasonCode,
        toMessage
      }, syntaxPlugin ? {
        syntaxPlugin
      } : {}, rest));
    }
    return ParseErrorConstructors;
  }
  const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum(ParseExpressionErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
  function createDefaultOptions() {
    return {
      sourceType: "script",
      sourceFilename: void 0,
      startIndex: 0,
      startColumn: 0,
      startLine: 1,
      allowAwaitOutsideFunction: false,
      allowReturnOutsideFunction: false,
      allowNewTargetOutsideFunction: false,
      allowImportExportEverywhere: false,
      allowSuperOutsideMethod: false,
      allowUndeclaredExports: false,
      allowYieldOutsideFunction: false,
      plugins: [],
      strictMode: null,
      ranges: false,
      tokens: false,
      createImportExpressions: false,
      createParenthesizedExpressions: false,
      errorRecovery: false,
      attachComment: true,
      annexB: true
    };
  }
  function getOptions(opts) {
    const options2 = createDefaultOptions();
    if (opts == null) {
      return options2;
    }
    if (opts.annexB != null && opts.annexB !== false) {
      throw new Error("The `annexB` option can only be set to `false`.");
    }
    for (const key of Object.keys(options2)) {
      if (opts[key] != null) options2[key] = opts[key];
    }
    if (options2.startLine === 1) {
      if (opts.startIndex == null && options2.startColumn > 0) {
        options2.startIndex = options2.startColumn;
      } else if (opts.startColumn == null && options2.startIndex > 0) {
        options2.startColumn = options2.startIndex;
      }
    } else if (opts.startColumn == null || opts.startIndex == null) {
      if (opts.startIndex != null) {
        throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
      }
    }
    return options2;
  }
  const {
    defineProperty
  } = Object;
  const toUnenumerable = (object, key) => {
    if (object) {
      defineProperty(object, key, {
        enumerable: false,
        value: object[key]
      });
    }
  };
  function toESTreeLocation(node2) {
    toUnenumerable(node2.loc.start, "index");
    toUnenumerable(node2.loc.end, "index");
    return node2;
  }
  var estree2 = (superClass) => class ESTreeParserMixin extends superClass {
    parse() {
      const file2 = toESTreeLocation(super.parse());
      if (this.optionFlags & 256) {
        file2.tokens = file2.tokens.map(toESTreeLocation);
      }
      return file2;
    }
    parseRegExpLiteral({
      pattern,
      flags
    }) {
      let regex = null;
      try {
        regex = new RegExp(pattern, flags);
      } catch (_2) {
      }
      const node2 = this.estreeParseLiteral(regex);
      node2.regex = {
        pattern,
        flags
      };
      return node2;
    }
    parseBigIntLiteral(value2) {
      let bigInt;
      try {
        bigInt = BigInt(value2);
      } catch (_unused) {
        bigInt = null;
      }
      const node2 = this.estreeParseLiteral(bigInt);
      node2.bigint = String(node2.value || value2);
      return node2;
    }
    parseDecimalLiteral(value2) {
      const decimal = null;
      const node2 = this.estreeParseLiteral(decimal);
      node2.decimal = String(node2.value || value2);
      return node2;
    }
    estreeParseLiteral(value2) {
      return this.parseLiteral(value2, "Literal");
    }
    parseStringLiteral(value2) {
      return this.estreeParseLiteral(value2);
    }
    parseNumericLiteral(value2) {
      return this.estreeParseLiteral(value2);
    }
    parseNullLiteral() {
      return this.estreeParseLiteral(null);
    }
    parseBooleanLiteral(value2) {
      return this.estreeParseLiteral(value2);
    }
    estreeParseChainExpression(node2, endLoc) {
      const chain = this.startNodeAtNode(node2);
      chain.expression = node2;
      return this.finishNodeAt(chain, "ChainExpression", endLoc);
    }
    directiveToStmt(directive) {
      const expression = directive.value;
      delete directive.value;
      this.castNodeTo(expression, "Literal");
      expression.raw = expression.extra.raw;
      expression.value = expression.extra.expressionValue;
      const stmt = this.castNodeTo(directive, "ExpressionStatement");
      stmt.expression = expression;
      stmt.directive = expression.extra.rawValue;
      delete expression.extra;
      return stmt;
    }
    fillOptionalPropertiesForTSESLint(node2) {
    }
    cloneEstreeStringLiteral(node2) {
      const {
        start,
        end,
        loc,
        range,
        raw,
        value: value2
      } = node2;
      const cloned = Object.create(node2.constructor.prototype);
      cloned.type = "Literal";
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;
      cloned.raw = raw;
      cloned.value = value2;
      return cloned;
    }
    initFunction(node2, isAsync) {
      super.initFunction(node2, isAsync);
      node2.expression = false;
    }
    checkDeclaration(node2) {
      if (node2 != null && this.isObjectProperty(node2)) {
        this.checkDeclaration(node2.value);
      } else {
        super.checkDeclaration(node2);
      }
    }
    getObjectOrClassMethodParams(method) {
      return method.value.params;
    }
    isValidDirective(stmt) {
      var _stmt$expression$extr;
      return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
    }
    parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse) {
      super.parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse);
      const directiveStatements = node2.directives.map((d) => this.directiveToStmt(d));
      node2.body = directiveStatements.concat(node2.body);
      delete node2.directives;
    }
    parsePrivateName() {
      const node2 = super.parsePrivateName();
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return node2;
        }
      }
      return this.convertPrivateNameToPrivateIdentifier(node2);
    }
    convertPrivateNameToPrivateIdentifier(node2) {
      const name = super.getPrivateNameSV(node2);
      node2 = node2;
      delete node2.id;
      node2.name = name;
      return this.castNodeTo(node2, "PrivateIdentifier");
    }
    isPrivateName(node2) {
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return super.isPrivateName(node2);
        }
      }
      return node2.type === "PrivateIdentifier";
    }
    getPrivateNameSV(node2) {
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return super.getPrivateNameSV(node2);
        }
      }
      return node2.name;
    }
    parseLiteral(value2, type) {
      const node2 = super.parseLiteral(value2, type);
      node2.raw = node2.extra.raw;
      delete node2.extra;
      return node2;
    }
    parseFunctionBody(node2, allowExpression, isMethod = false) {
      super.parseFunctionBody(node2, allowExpression, isMethod);
      node2.expression = node2.body.type !== "BlockStatement";
    }
    parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
      let funcNode = this.startNode();
      funcNode.kind = node2.kind;
      funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
      delete funcNode.kind;
      const {
        typeParameters
      } = node2;
      if (typeParameters) {
        delete node2.typeParameters;
        funcNode.typeParameters = typeParameters;
        this.resetStartLocationFromNode(funcNode, typeParameters);
      }
      const valueNode = this.castNodeTo(funcNode, "FunctionExpression");
      node2.value = valueNode;
      if (type === "ClassPrivateMethod") {
        node2.computed = false;
      }
      if (type === "ObjectMethod") {
        if (node2.kind === "method") {
          node2.kind = "init";
        }
        node2.shorthand = false;
        return this.finishNode(node2, "Property");
      } else {
        return this.finishNode(node2, "MethodDefinition");
      }
    }
    nameIsConstructor(key) {
      if (key.type === "Literal") return key.value === "constructor";
      return super.nameIsConstructor(key);
    }
    parseClassProperty(...args) {
      const propertyNode = super.parseClassProperty(...args);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return propertyNode;
        }
      }
      {
        this.castNodeTo(propertyNode, "PropertyDefinition");
      }
      return propertyNode;
    }
    parseClassPrivateProperty(...args) {
      const propertyNode = super.parseClassPrivateProperty(...args);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return propertyNode;
        }
      }
      {
        this.castNodeTo(propertyNode, "PropertyDefinition");
      }
      propertyNode.computed = false;
      return propertyNode;
    }
    parseClassAccessorProperty(node2) {
      const accessorPropertyNode = super.parseClassAccessorProperty(node2);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return accessorPropertyNode;
        }
      }
      if (accessorPropertyNode.abstract && this.hasPlugin("typescript")) {
        delete accessorPropertyNode.abstract;
        this.castNodeTo(accessorPropertyNode, "TSAbstractAccessorProperty");
      } else {
        this.castNodeTo(accessorPropertyNode, "AccessorProperty");
      }
      return accessorPropertyNode;
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
      const node2 = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
      if (node2) {
        node2.kind = "init";
        this.castNodeTo(node2, "Property");
      }
      return node2;
    }
    finishObjectProperty(node2) {
      node2.kind = "init";
      return this.finishNode(node2, "Property");
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding2) {
      return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding2);
    }
    isAssignable(node2, isBinding2) {
      if (node2 != null && this.isObjectProperty(node2)) {
        return this.isAssignable(node2.value, isBinding2);
      }
      return super.isAssignable(node2, isBinding2);
    }
    toAssignable(node2, isLHS = false) {
      if (node2 != null && this.isObjectProperty(node2)) {
        const {
          key,
          value: value2
        } = node2;
        if (this.isPrivateName(key)) {
          this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
        }
        this.toAssignable(value2, isLHS);
      } else {
        super.toAssignable(node2, isLHS);
      }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
      if (prop.type === "Property" && (prop.kind === "get" || prop.kind === "set")) {
        this.raise(Errors.PatternHasAccessor, prop.key);
      } else if (prop.type === "Property" && prop.method) {
        this.raise(Errors.PatternHasMethod, prop.key);
      } else {
        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
      }
    }
    finishCallExpression(unfinished, optional) {
      const node2 = super.finishCallExpression(unfinished, optional);
      if (node2.callee.type === "Import") {
        var _ref, _ref2;
        this.castNodeTo(node2, "ImportExpression");
        node2.source = node2.arguments[0];
        node2.options = (_ref = node2.arguments[1]) != null ? _ref : null;
        node2.attributes = (_ref2 = node2.arguments[1]) != null ? _ref2 : null;
        delete node2.arguments;
        delete node2.callee;
      } else if (node2.type === "OptionalCallExpression") {
        this.castNodeTo(node2, "CallExpression");
      } else {
        node2.optional = false;
      }
      return node2;
    }
    toReferencedArguments(node2) {
      if (node2.type === "ImportExpression") {
        return;
      }
      super.toReferencedArguments(node2);
    }
    parseExport(unfinished, decorators) {
      const exportStartLoc = this.state.lastTokStartLoc;
      const node2 = super.parseExport(unfinished, decorators);
      switch (node2.type) {
        case "ExportAllDeclaration":
          node2.exported = null;
          break;
        case "ExportNamedDeclaration":
          if (node2.specifiers.length === 1 && node2.specifiers[0].type === "ExportNamespaceSpecifier") {
            this.castNodeTo(node2, "ExportAllDeclaration");
            node2.exported = node2.specifiers[0].exported;
            delete node2.specifiers;
          }
        case "ExportDefaultDeclaration":
          {
            var _declaration$decorato;
            const {
              declaration
            } = node2;
            if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node2.start) {
              this.resetStartLocation(node2, exportStartLoc);
            }
          }
          break;
      }
      return node2;
    }
    stopParseSubscript(base2, state) {
      const node2 = super.stopParseSubscript(base2, state);
      if (state.optionalChainMember) {
        return this.estreeParseChainExpression(node2, base2.loc.end);
      }
      return node2;
    }
    parseMember(base2, startLoc, state, computed, optional) {
      const node2 = super.parseMember(base2, startLoc, state, computed, optional);
      if (node2.type === "OptionalMemberExpression") {
        this.castNodeTo(node2, "MemberExpression");
      } else {
        node2.optional = false;
      }
      return node2;
    }
    isOptionalMemberExpression(node2) {
      if (node2.type === "ChainExpression") {
        return node2.expression.type === "MemberExpression";
      }
      return super.isOptionalMemberExpression(node2);
    }
    hasPropertyAsPrivateName(node2) {
      if (node2.type === "ChainExpression") {
        node2 = node2.expression;
      }
      return super.hasPropertyAsPrivateName(node2);
    }
    isObjectProperty(node2) {
      return node2.type === "Property" && node2.kind === "init" && !node2.method;
    }
    isObjectMethod(node2) {
      return node2.type === "Property" && (node2.method || node2.kind === "get" || node2.kind === "set");
    }
    castNodeTo(node2, type) {
      const result = super.castNodeTo(node2, type);
      this.fillOptionalPropertiesForTSESLint(result);
      return result;
    }
    cloneIdentifier(node2) {
      const cloned = super.cloneIdentifier(node2);
      this.fillOptionalPropertiesForTSESLint(cloned);
      return cloned;
    }
    cloneStringLiteral(node2) {
      if (node2.type === "Literal") {
        return this.cloneEstreeStringLiteral(node2);
      }
      return super.cloneStringLiteral(node2);
    }
    finishNodeAt(node2, type, endLoc) {
      return toESTreeLocation(super.finishNodeAt(node2, type, endLoc));
    }
    finishNode(node2, type) {
      const result = super.finishNode(node2, type);
      this.fillOptionalPropertiesForTSESLint(result);
      return result;
    }
    resetStartLocation(node2, startLoc) {
      super.resetStartLocation(node2, startLoc);
      toESTreeLocation(node2);
    }
    resetEndLocation(node2, endLoc = this.state.lastTokEndLoc) {
      super.resetEndLocation(node2, endLoc);
      toESTreeLocation(node2);
    }
  };
  class TokContext {
    constructor(token, preserveSpace) {
      this.token = void 0;
      this.preserveSpace = void 0;
      this.token = token;
      this.preserveSpace = !!preserveSpace;
    }
  }
  const types2 = {
    brace: new TokContext("{"),
    j_oTag: new TokContext("<tag"),
    j_cTag: new TokContext("</tag"),
    j_expr: new TokContext("<tag>...</tag>", true)
  };
  {
    types2.template = new TokContext("`", true);
  }
  const beforeExpr = true;
  const startsExpr = true;
  const isLoop = true;
  const isAssign = true;
  const prefix = true;
  const postfix = true;
  class ExportedTokenType {
    constructor(label, conf = {}) {
      this.label = void 0;
      this.keyword = void 0;
      this.beforeExpr = void 0;
      this.startsExpr = void 0;
      this.rightAssociative = void 0;
      this.isLoop = void 0;
      this.isAssign = void 0;
      this.prefix = void 0;
      this.postfix = void 0;
      this.binop = void 0;
      this.label = label;
      this.keyword = conf.keyword;
      this.beforeExpr = !!conf.beforeExpr;
      this.startsExpr = !!conf.startsExpr;
      this.rightAssociative = !!conf.rightAssociative;
      this.isLoop = !!conf.isLoop;
      this.isAssign = !!conf.isAssign;
      this.prefix = !!conf.prefix;
      this.postfix = !!conf.postfix;
      this.binop = conf.binop != null ? conf.binop : null;
      {
        this.updateContext = null;
      }
    }
  }
  const keywords$1 = /* @__PURE__ */ new Map();
  function createKeyword(name, options2 = {}) {
    options2.keyword = name;
    const token = createToken(name, options2);
    keywords$1.set(name, token);
    return token;
  }
  function createBinop(name, binop) {
    return createToken(name, {
      beforeExpr,
      binop
    });
  }
  let tokenTypeCounter = -1;
  const tokenTypes = [];
  const tokenLabels = [];
  const tokenBinops = [];
  const tokenBeforeExprs = [];
  const tokenStartsExprs = [];
  const tokenPrefixes = [];
  function createToken(name, options2 = {}) {
    var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
    ++tokenTypeCounter;
    tokenLabels.push(name);
    tokenBinops.push((_options$binop = options2.binop) != null ? _options$binop : -1);
    tokenBeforeExprs.push((_options$beforeExpr = options2.beforeExpr) != null ? _options$beforeExpr : false);
    tokenStartsExprs.push((_options$startsExpr = options2.startsExpr) != null ? _options$startsExpr : false);
    tokenPrefixes.push((_options$prefix = options2.prefix) != null ? _options$prefix : false);
    tokenTypes.push(new ExportedTokenType(name, options2));
    return tokenTypeCounter;
  }
  function createKeywordLike(name, options2 = {}) {
    var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
    ++tokenTypeCounter;
    keywords$1.set(name, tokenTypeCounter);
    tokenLabels.push(name);
    tokenBinops.push((_options$binop2 = options2.binop) != null ? _options$binop2 : -1);
    tokenBeforeExprs.push((_options$beforeExpr2 = options2.beforeExpr) != null ? _options$beforeExpr2 : false);
    tokenStartsExprs.push((_options$startsExpr2 = options2.startsExpr) != null ? _options$startsExpr2 : false);
    tokenPrefixes.push((_options$prefix2 = options2.prefix) != null ? _options$prefix2 : false);
    tokenTypes.push(new ExportedTokenType("name", options2));
    return tokenTypeCounter;
  }
  const tt2 = {
    bracketL: createToken("[", {
      beforeExpr,
      startsExpr
    }),
    bracketHashL: createToken("#[", {
      beforeExpr,
      startsExpr
    }),
    bracketBarL: createToken("[|", {
      beforeExpr,
      startsExpr
    }),
    bracketR: createToken("]"),
    bracketBarR: createToken("|]"),
    braceL: createToken("{", {
      beforeExpr,
      startsExpr
    }),
    braceBarL: createToken("{|", {
      beforeExpr,
      startsExpr
    }),
    braceHashL: createToken("#{", {
      beforeExpr,
      startsExpr
    }),
    braceR: createToken("}"),
    braceBarR: createToken("|}"),
    parenL: createToken("(", {
      beforeExpr,
      startsExpr
    }),
    parenR: createToken(")"),
    comma: createToken(",", {
      beforeExpr
    }),
    semi: createToken(";", {
      beforeExpr
    }),
    colon: createToken(":", {
      beforeExpr
    }),
    doubleColon: createToken("::", {
      beforeExpr
    }),
    dot: createToken("."),
    question: createToken("?", {
      beforeExpr
    }),
    questionDot: createToken("?."),
    arrow: createToken("=>", {
      beforeExpr
    }),
    template: createToken("template"),
    ellipsis: createToken("...", {
      beforeExpr
    }),
    backQuote: createToken("`", {
      startsExpr
    }),
    dollarBraceL: createToken("${", {
      beforeExpr,
      startsExpr
    }),
    templateTail: createToken("...`", {
      startsExpr
    }),
    templateNonTail: createToken("...${", {
      beforeExpr,
      startsExpr
    }),
    at: createToken("@"),
    hash: createToken("#", {
      startsExpr
    }),
    interpreterDirective: createToken("#!..."),
    eq: createToken("=", {
      beforeExpr,
      isAssign
    }),
    assign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    slashAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    xorAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    moduloAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    incDec: createToken("++/--", {
      prefix,
      postfix,
      startsExpr
    }),
    bang: createToken("!", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    tilde: createToken("~", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    doubleCaret: createToken("^^", {
      startsExpr
    }),
    doubleAt: createToken("@@", {
      startsExpr
    }),
    pipeline: createBinop("|>", 0),
    nullishCoalescing: createBinop("??", 1),
    logicalOR: createBinop("||", 1),
    logicalAND: createBinop("&&", 2),
    bitwiseOR: createBinop("|", 3),
    bitwiseXOR: createBinop("^", 4),
    bitwiseAND: createBinop("&", 5),
    equality: createBinop("==/!=/===/!==", 6),
    lt: createBinop("</>/<=/>=", 7),
    gt: createBinop("</>/<=/>=", 7),
    relational: createBinop("</>/<=/>=", 7),
    bitShift: createBinop("<</>>/>>>", 8),
    bitShiftL: createBinop("<</>>/>>>", 8),
    bitShiftR: createBinop("<</>>/>>>", 8),
    plusMin: createToken("+/-", {
      beforeExpr,
      binop: 9,
      prefix,
      startsExpr
    }),
    modulo: createToken("%", {
      binop: 10,
      startsExpr
    }),
    star: createToken("*", {
      binop: 10
    }),
    slash: createBinop("/", 10),
    exponent: createToken("**", {
      beforeExpr,
      binop: 11,
      rightAssociative: true
    }),
    _in: createKeyword("in", {
      beforeExpr,
      binop: 7
    }),
    _instanceof: createKeyword("instanceof", {
      beforeExpr,
      binop: 7
    }),
    _break: createKeyword("break"),
    _case: createKeyword("case", {
      beforeExpr
    }),
    _catch: createKeyword("catch"),
    _continue: createKeyword("continue"),
    _debugger: createKeyword("debugger"),
    _default: createKeyword("default", {
      beforeExpr
    }),
    _else: createKeyword("else", {
      beforeExpr
    }),
    _finally: createKeyword("finally"),
    _function: createKeyword("function", {
      startsExpr
    }),
    _if: createKeyword("if"),
    _return: createKeyword("return", {
      beforeExpr
    }),
    _switch: createKeyword("switch"),
    _throw: createKeyword("throw", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _try: createKeyword("try"),
    _var: createKeyword("var"),
    _const: createKeyword("const"),
    _with: createKeyword("with"),
    _new: createKeyword("new", {
      beforeExpr,
      startsExpr
    }),
    _this: createKeyword("this", {
      startsExpr
    }),
    _super: createKeyword("super", {
      startsExpr
    }),
    _class: createKeyword("class", {
      startsExpr
    }),
    _extends: createKeyword("extends", {
      beforeExpr
    }),
    _export: createKeyword("export"),
    _import: createKeyword("import", {
      startsExpr
    }),
    _null: createKeyword("null", {
      startsExpr
    }),
    _true: createKeyword("true", {
      startsExpr
    }),
    _false: createKeyword("false", {
      startsExpr
    }),
    _typeof: createKeyword("typeof", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _void: createKeyword("void", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _delete: createKeyword("delete", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _do: createKeyword("do", {
      isLoop,
      beforeExpr
    }),
    _for: createKeyword("for", {
      isLoop
    }),
    _while: createKeyword("while", {
      isLoop
    }),
    _as: createKeywordLike("as", {
      startsExpr
    }),
    _assert: createKeywordLike("assert", {
      startsExpr
    }),
    _async: createKeywordLike("async", {
      startsExpr
    }),
    _await: createKeywordLike("await", {
      startsExpr
    }),
    _defer: createKeywordLike("defer", {
      startsExpr
    }),
    _from: createKeywordLike("from", {
      startsExpr
    }),
    _get: createKeywordLike("get", {
      startsExpr
    }),
    _let: createKeywordLike("let", {
      startsExpr
    }),
    _meta: createKeywordLike("meta", {
      startsExpr
    }),
    _of: createKeywordLike("of", {
      startsExpr
    }),
    _sent: createKeywordLike("sent", {
      startsExpr
    }),
    _set: createKeywordLike("set", {
      startsExpr
    }),
    _source: createKeywordLike("source", {
      startsExpr
    }),
    _static: createKeywordLike("static", {
      startsExpr
    }),
    _using: createKeywordLike("using", {
      startsExpr
    }),
    _yield: createKeywordLike("yield", {
      startsExpr
    }),
    _asserts: createKeywordLike("asserts", {
      startsExpr
    }),
    _checks: createKeywordLike("checks", {
      startsExpr
    }),
    _exports: createKeywordLike("exports", {
      startsExpr
    }),
    _global: createKeywordLike("global", {
      startsExpr
    }),
    _implements: createKeywordLike("implements", {
      startsExpr
    }),
    _intrinsic: createKeywordLike("intrinsic", {
      startsExpr
    }),
    _infer: createKeywordLike("infer", {
      startsExpr
    }),
    _is: createKeywordLike("is", {
      startsExpr
    }),
    _mixins: createKeywordLike("mixins", {
      startsExpr
    }),
    _proto: createKeywordLike("proto", {
      startsExpr
    }),
    _require: createKeywordLike("require", {
      startsExpr
    }),
    _satisfies: createKeywordLike("satisfies", {
      startsExpr
    }),
    _keyof: createKeywordLike("keyof", {
      startsExpr
    }),
    _readonly: createKeywordLike("readonly", {
      startsExpr
    }),
    _unique: createKeywordLike("unique", {
      startsExpr
    }),
    _abstract: createKeywordLike("abstract", {
      startsExpr
    }),
    _declare: createKeywordLike("declare", {
      startsExpr
    }),
    _enum: createKeywordLike("enum", {
      startsExpr
    }),
    _module: createKeywordLike("module", {
      startsExpr
    }),
    _namespace: createKeywordLike("namespace", {
      startsExpr
    }),
    _interface: createKeywordLike("interface", {
      startsExpr
    }),
    _type: createKeywordLike("type", {
      startsExpr
    }),
    _opaque: createKeywordLike("opaque", {
      startsExpr
    }),
    name: createToken("name", {
      startsExpr
    }),
    placeholder: createToken("%%", {
      startsExpr: true
    }),
    string: createToken("string", {
      startsExpr
    }),
    num: createToken("num", {
      startsExpr
    }),
    bigint: createToken("bigint", {
      startsExpr
    }),
    decimal: createToken("decimal", {
      startsExpr
    }),
    regexp: createToken("regexp", {
      startsExpr
    }),
    privateName: createToken("#name", {
      startsExpr
    }),
    eof: createToken("eof"),
    jsxName: createToken("jsxName"),
    jsxText: createToken("jsxText", {
      beforeExpr: true
    }),
    jsxTagStart: createToken("jsxTagStart", {
      startsExpr: true
    }),
    jsxTagEnd: createToken("jsxTagEnd")
  };
  function tokenIsIdentifier(token) {
    return token >= 93 && token <= 133;
  }
  function tokenKeywordOrIdentifierIsKeyword(token) {
    return token <= 92;
  }
  function tokenIsKeywordOrIdentifier(token) {
    return token >= 58 && token <= 133;
  }
  function tokenIsLiteralPropertyName(token) {
    return token >= 58 && token <= 137;
  }
  function tokenComesBeforeExpression(token) {
    return tokenBeforeExprs[token];
  }
  function tokenCanStartExpression(token) {
    return tokenStartsExprs[token];
  }
  function tokenIsAssignment(token) {
    return token >= 29 && token <= 33;
  }
  function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
    return token >= 129 && token <= 131;
  }
  function tokenIsLoop(token) {
    return token >= 90 && token <= 92;
  }
  function tokenIsKeyword(token) {
    return token >= 58 && token <= 92;
  }
  function tokenIsOperator(token) {
    return token >= 39 && token <= 59;
  }
  function tokenIsPostfix(token) {
    return token === 34;
  }
  function tokenIsPrefix(token) {
    return tokenPrefixes[token];
  }
  function tokenIsTSTypeOperator(token) {
    return token >= 121 && token <= 123;
  }
  function tokenIsTSDeclarationStart(token) {
    return token >= 124 && token <= 130;
  }
  function tokenLabelName(token) {
    return tokenLabels[token];
  }
  function tokenOperatorPrecedence(token) {
    return tokenBinops[token];
  }
  function tokenIsRightAssociative(token) {
    return token === 57;
  }
  function tokenIsTemplate(token) {
    return token >= 24 && token <= 25;
  }
  function getExportedToken(token) {
    return tokenTypes[token];
  }
  {
    tokenTypes[8].updateContext = (context2) => {
      context2.pop();
    };
    tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context2) => {
      context2.push(types2.brace);
    };
    tokenTypes[22].updateContext = (context2) => {
      if (context2[context2.length - 1] === types2.template) {
        context2.pop();
      } else {
        context2.push(types2.template);
      }
    };
    tokenTypes[143].updateContext = (context2) => {
      context2.push(types2.j_expr, types2.j_oTag);
    };
  }
  let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  let nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
  const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
  const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet(code2, set) {
    let pos = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos += set[i];
      if (pos > code2) return false;
      pos += set[i + 1];
      if (pos >= code2) return true;
    }
    return false;
  }
  function isIdentifierStart(code2) {
    if (code2 < 65) return code2 === 36;
    if (code2 <= 90) return true;
    if (code2 < 97) return code2 === 95;
    if (code2 <= 122) return true;
    if (code2 <= 65535) {
      return code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2));
    }
    return isInAstralSet(code2, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code2) {
    if (code2 < 48) return code2 === 36;
    if (code2 < 58) return true;
    if (code2 < 65) return false;
    if (code2 <= 90) return true;
    if (code2 < 97) return code2 === 95;
    if (code2 <= 122) return true;
    if (code2 <= 65535) {
      return code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2));
    }
    return isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes);
  }
  const reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords = new Set(reservedWords.keyword);
  const reservedWordsStrictSet = new Set(reservedWords.strict);
  const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
  function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
  }
  function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
  }
  function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
  }
  function isKeyword(word) {
    return keywords.has(word);
  }
  function isIteratorStart(current, next, next2) {
    return current === 64 && next === 64 && isIdentifierStart(next2);
  }
  const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
  function canBeReservedWord(word) {
    return reservedWordLikeSet.has(word);
  }
  class Scope {
    constructor(flags) {
      this.flags = 0;
      this.names = /* @__PURE__ */ new Map();
      this.firstLexicalName = "";
      this.flags = flags;
    }
  }
  class ScopeHandler {
    constructor(parser2, inModule) {
      this.parser = void 0;
      this.scopeStack = [];
      this.inModule = void 0;
      this.undefinedExports = /* @__PURE__ */ new Map();
      this.parser = parser2;
      this.inModule = inModule;
    }
    get inTopLevel() {
      return (this.currentScope().flags & 1) > 0;
    }
    get inFunction() {
      return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
      return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
      return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
      return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
      const flags = this.currentThisScopeFlags();
      return (flags & 64) > 0 && (flags & 2) === 0;
    }
    get inStaticBlock() {
      for (let i = this.scopeStack.length - 1; ; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & 128) {
          return true;
        }
        if (flags & (643 | 64)) {
          return false;
        }
      }
    }
    get inNonArrowFunction() {
      return (this.currentThisScopeFlags() & 2) > 0;
    }
    get inBareCaseStatement() {
      return (this.currentScope().flags & 256) > 0;
    }
    get treatFunctionsAsVar() {
      return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(flags) {
      return new Scope(flags);
    }
    enter(flags) {
      this.scopeStack.push(this.createScope(flags));
    }
    exit() {
      const scope2 = this.scopeStack.pop();
      return scope2.flags;
    }
    treatFunctionsAsVarInScope(scope2) {
      return !!(scope2.flags & (2 | 128) || !this.parser.inModule && scope2.flags & 1);
    }
    declareName(name, bindingType, loc) {
      let scope2 = this.currentScope();
      if (bindingType & 8 || bindingType & 16) {
        this.checkRedeclarationInScope(scope2, name, bindingType, loc);
        let type = scope2.names.get(name) || 0;
        if (bindingType & 16) {
          type = type | 4;
        } else {
          if (!scope2.firstLexicalName) {
            scope2.firstLexicalName = name;
          }
          type = type | 2;
        }
        scope2.names.set(name, type);
        if (bindingType & 8) {
          this.maybeExportDefined(scope2, name);
        }
      } else if (bindingType & 4) {
        for (let i = this.scopeStack.length - 1; i >= 0; --i) {
          scope2 = this.scopeStack[i];
          this.checkRedeclarationInScope(scope2, name, bindingType, loc);
          scope2.names.set(name, (scope2.names.get(name) || 0) | 1);
          this.maybeExportDefined(scope2, name);
          if (scope2.flags & 643) break;
        }
      }
      if (this.parser.inModule && scope2.flags & 1) {
        this.undefinedExports.delete(name);
      }
    }
    maybeExportDefined(scope2, name) {
      if (this.parser.inModule && scope2.flags & 1) {
        this.undefinedExports.delete(name);
      }
    }
    checkRedeclarationInScope(scope2, name, bindingType, loc) {
      if (this.isRedeclaredInScope(scope2, name, bindingType)) {
        this.parser.raise(Errors.VarRedeclaration, loc, {
          identifierName: name
        });
      }
    }
    isRedeclaredInScope(scope2, name, bindingType) {
      if (!(bindingType & 1)) return false;
      if (bindingType & 8) {
        return scope2.names.has(name);
      }
      const type = scope2.names.get(name);
      if (bindingType & 16) {
        return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope2) && (type & 1) > 0;
      }
      return (type & 2) > 0 && !(scope2.flags & 8 && scope2.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope2) && (type & 4) > 0;
    }
    checkLocalExport(id) {
      const {
        name
      } = id;
      const topLevelScope = this.scopeStack[0];
      if (!topLevelScope.names.has(name)) {
        this.undefinedExports.set(name, id.loc.start);
      }
    }
    currentScope() {
      return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
      for (let i = this.scopeStack.length - 1; ; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & 643) {
          return flags;
        }
      }
    }
    currentThisScopeFlags() {
      for (let i = this.scopeStack.length - 1; ; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & (643 | 64) && !(flags & 4)) {
          return flags;
        }
      }
    }
  }
  class FlowScope extends Scope {
    constructor(...args) {
      super(...args);
      this.declareFunctions = /* @__PURE__ */ new Set();
    }
  }
  class FlowScopeHandler extends ScopeHandler {
    createScope(flags) {
      return new FlowScope(flags);
    }
    declareName(name, bindingType, loc) {
      const scope2 = this.currentScope();
      if (bindingType & 2048) {
        this.checkRedeclarationInScope(scope2, name, bindingType, loc);
        this.maybeExportDefined(scope2, name);
        scope2.declareFunctions.add(name);
        return;
      }
      super.declareName(name, bindingType, loc);
    }
    isRedeclaredInScope(scope2, name, bindingType) {
      if (super.isRedeclaredInScope(scope2, name, bindingType)) return true;
      if (bindingType & 2048 && !scope2.declareFunctions.has(name)) {
        const type = scope2.names.get(name);
        return (type & 4) > 0 || (type & 2) > 0;
      }
      return false;
    }
    checkLocalExport(id) {
      if (!this.scopeStack[0].declareFunctions.has(id.name)) {
        super.checkLocalExport(id);
      }
    }
  }
  const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
  const FlowErrors = ParseErrorEnum`flow`({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
    AssignReservedType: ({
      reservedType
    }) => `Cannot overwrite reserved type ${reservedType}.`,
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: ({
      memberName,
      enumName
    }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
    EnumDuplicateMemberName: ({
      memberName,
      enumName
    }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
    EnumInconsistentMemberValues: ({
      enumName
    }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
    EnumInvalidExplicitType: ({
      invalidEnumType,
      enumName
    }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidExplicitTypeUnknownSupplied: ({
      enumName
    }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerPrimaryType: ({
      enumName,
      memberName,
      explicitType
    }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
    EnumInvalidMemberInitializerSymbolType: ({
      enumName,
      memberName
    }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerUnknownType: ({
      enumName,
      memberName
    }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
    EnumInvalidMemberName: ({
      enumName,
      memberName,
      suggestion
    }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
    EnumNumberMemberNotInitialized: ({
      enumName,
      memberName
    }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
    EnumStringMemberInconsistentlyInitialized: ({
      enumName
    }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    PatternIsOptional: Object.assign({
      message: "A binding pattern parameter cannot be optional in an implementation signature."
    }, {
      reasonCode: "OptionalBindingPattern"
    }),
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: ({
      reservedType
    }) => `Unexpected reserved type ${reservedType}.`,
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: ({
      unsupportedExportKind,
      suggestion
    }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
  });
  function isEsModuleType(bodyElement) {
    return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
  }
  function hasTypeImportKind(node2) {
    return node2.importKind === "type" || node2.importKind === "typeof";
  }
  const exportSuggestions = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
  };
  function partition(list, test) {
    const list1 = [];
    const list2 = [];
    for (let i = 0; i < list.length; i++) {
      (test(list[i], i, list) ? list1 : list2).push(list[i]);
    }
    return [list1, list2];
  }
  const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
  var flow2 = (superClass) => class FlowParserMixin extends superClass {
    constructor(...args) {
      super(...args);
      this.flowPragma = void 0;
    }
    getScopeHandler() {
      return FlowScopeHandler;
    }
    shouldParseTypes() {
      return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
    }
    finishToken(type, val) {
      if (type !== 134 && type !== 13 && type !== 28) {
        if (this.flowPragma === void 0) {
          this.flowPragma = null;
        }
      }
      super.finishToken(type, val);
    }
    addComment(comment) {
      if (this.flowPragma === void 0) {
        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
        if (!matches) ;
        else if (matches[1] === "flow") {
          this.flowPragma = "flow";
        } else if (matches[1] === "noflow") {
          this.flowPragma = "noflow";
        } else {
          throw new Error("Unexpected flow pragma");
        }
      }
      super.addComment(comment);
    }
    flowParseTypeInitialiser(tok) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      this.expect(tok || 14);
      const type = this.flowParseType();
      this.state.inType = oldInType;
      return type;
    }
    flowParsePredicate() {
      const node2 = this.startNode();
      const moduloLoc = this.state.startLoc;
      this.next();
      this.expectContextual(110);
      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {
        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);
      }
      if (this.eat(10)) {
        node2.value = super.parseExpression();
        this.expect(11);
        return this.finishNode(node2, "DeclaredPredicate");
      } else {
        return this.finishNode(node2, "InferredPredicate");
      }
    }
    flowParseTypeAndPredicateInitialiser() {
      const oldInType = this.state.inType;
      this.state.inType = true;
      this.expect(14);
      let type = null;
      let predicate = null;
      if (this.match(54)) {
        this.state.inType = oldInType;
        predicate = this.flowParsePredicate();
      } else {
        type = this.flowParseType();
        this.state.inType = oldInType;
        if (this.match(54)) {
          predicate = this.flowParsePredicate();
        }
      }
      return [type, predicate];
    }
    flowParseDeclareClass(node2) {
      this.next();
      this.flowParseInterfaceish(node2, true);
      return this.finishNode(node2, "DeclareClass");
    }
    flowParseDeclareFunction(node2) {
      this.next();
      const id = node2.id = this.parseIdentifier();
      const typeNode = this.startNode();
      const typeContainer = this.startNode();
      if (this.match(47)) {
        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        typeNode.typeParameters = null;
      }
      this.expect(10);
      const tmp = this.flowParseFunctionTypeParams();
      typeNode.params = tmp.params;
      typeNode.rest = tmp.rest;
      typeNode.this = tmp._this;
      this.expect(11);
      [typeNode.returnType, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
      typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
      id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
      this.resetEndLocation(id);
      this.semicolon();
      this.scope.declareName(node2.id.name, 2048, node2.id.loc.start);
      return this.finishNode(node2, "DeclareFunction");
    }
    flowParseDeclare(node2, insideModule) {
      if (this.match(80)) {
        return this.flowParseDeclareClass(node2);
      } else if (this.match(68)) {
        return this.flowParseDeclareFunction(node2);
      } else if (this.match(74)) {
        return this.flowParseDeclareVariable(node2);
      } else if (this.eatContextual(127)) {
        if (this.match(16)) {
          return this.flowParseDeclareModuleExports(node2);
        } else {
          if (insideModule) {
            this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);
          }
          return this.flowParseDeclareModule(node2);
        }
      } else if (this.isContextual(130)) {
        return this.flowParseDeclareTypeAlias(node2);
      } else if (this.isContextual(131)) {
        return this.flowParseDeclareOpaqueType(node2);
      } else if (this.isContextual(129)) {
        return this.flowParseDeclareInterface(node2);
      } else if (this.match(82)) {
        return this.flowParseDeclareExportDeclaration(node2, insideModule);
      } else {
        this.unexpected();
      }
    }
    flowParseDeclareVariable(node2) {
      this.next();
      node2.id = this.flowParseTypeAnnotatableIdentifier(true);
      this.scope.declareName(node2.id.name, 5, node2.id.loc.start);
      this.semicolon();
      return this.finishNode(node2, "DeclareVariable");
    }
    flowParseDeclareModule(node2) {
      this.scope.enter(0);
      if (this.match(134)) {
        node2.id = super.parseExprAtom();
      } else {
        node2.id = this.parseIdentifier();
      }
      const bodyNode = node2.body = this.startNode();
      const body = bodyNode.body = [];
      this.expect(5);
      while (!this.match(8)) {
        let bodyNode2 = this.startNode();
        if (this.match(83)) {
          this.next();
          if (!this.isContextual(130) && !this.match(87)) {
            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);
          }
          super.parseImport(bodyNode2);
        } else {
          this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
          bodyNode2 = this.flowParseDeclare(bodyNode2, true);
        }
        body.push(bodyNode2);
      }
      this.scope.exit();
      this.expect(8);
      this.finishNode(bodyNode, "BlockStatement");
      let kind = null;
      let hasModuleExport = false;
      body.forEach((bodyElement) => {
        if (isEsModuleType(bodyElement)) {
          if (kind === "CommonJS") {
            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
          }
          kind = "ES";
        } else if (bodyElement.type === "DeclareModuleExports") {
          if (hasModuleExport) {
            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);
          }
          if (kind === "ES") {
            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
          }
          kind = "CommonJS";
          hasModuleExport = true;
        }
      });
      node2.kind = kind || "CommonJS";
      return this.finishNode(node2, "DeclareModule");
    }
    flowParseDeclareExportDeclaration(node2, insideModule) {
      this.expect(82);
      if (this.eat(65)) {
        if (this.match(68) || this.match(80)) {
          node2.declaration = this.flowParseDeclare(this.startNode());
        } else {
          node2.declaration = this.flowParseType();
          this.semicolon();
        }
        node2.default = true;
        return this.finishNode(node2, "DeclareExportDeclaration");
      } else {
        if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
          const label = this.state.value;
          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
            unsupportedExportKind: label,
            suggestion: exportSuggestions[label]
          });
        }
        if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
          node2.declaration = this.flowParseDeclare(this.startNode());
          node2.default = false;
          return this.finishNode(node2, "DeclareExportDeclaration");
        } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
          node2 = this.parseExport(node2, null);
          if (node2.type === "ExportNamedDeclaration") {
            node2.default = false;
            delete node2.exportKind;
            return this.castNodeTo(node2, "DeclareExportDeclaration");
          } else {
            return this.castNodeTo(node2, "DeclareExportAllDeclaration");
          }
        }
      }
      this.unexpected();
    }
    flowParseDeclareModuleExports(node2) {
      this.next();
      this.expectContextual(111);
      node2.typeAnnotation = this.flowParseTypeAnnotation();
      this.semicolon();
      return this.finishNode(node2, "DeclareModuleExports");
    }
    flowParseDeclareTypeAlias(node2) {
      this.next();
      const finished = this.flowParseTypeAlias(node2);
      this.castNodeTo(finished, "DeclareTypeAlias");
      return finished;
    }
    flowParseDeclareOpaqueType(node2) {
      this.next();
      const finished = this.flowParseOpaqueType(node2, true);
      this.castNodeTo(finished, "DeclareOpaqueType");
      return finished;
    }
    flowParseDeclareInterface(node2) {
      this.next();
      this.flowParseInterfaceish(node2, false);
      return this.finishNode(node2, "DeclareInterface");
    }
    flowParseInterfaceish(node2, isClass) {
      node2.id = this.flowParseRestrictedIdentifier(!isClass, true);
      this.scope.declareName(node2.id.name, isClass ? 17 : 8201, node2.id.loc.start);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node2.typeParameters = null;
      }
      node2.extends = [];
      if (this.eat(81)) {
        do {
          node2.extends.push(this.flowParseInterfaceExtends());
        } while (!isClass && this.eat(12));
      }
      if (isClass) {
        node2.implements = [];
        node2.mixins = [];
        if (this.eatContextual(117)) {
          do {
            node2.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        if (this.eatContextual(113)) {
          do {
            node2.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
      }
      node2.body = this.flowParseObjectType({
        allowStatic: isClass,
        allowExact: false,
        allowSpread: false,
        allowProto: isClass,
        allowInexact: false
      });
    }
    flowParseInterfaceExtends() {
      const node2 = this.startNode();
      node2.id = this.flowParseQualifiedTypeIdentifier();
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterInstantiation();
      } else {
        node2.typeParameters = null;
      }
      return this.finishNode(node2, "InterfaceExtends");
    }
    flowParseInterface(node2) {
      this.flowParseInterfaceish(node2, false);
      return this.finishNode(node2, "InterfaceDeclaration");
    }
    checkNotUnderscore(word) {
      if (word === "_") {
        this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
      }
    }
    checkReservedType(word, startLoc, declaration) {
      if (!reservedTypes.has(word)) return;
      this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {
        reservedType: word
      });
    }
    flowParseRestrictedIdentifier(liberal, declaration) {
      this.checkReservedType(this.state.value, this.state.startLoc, declaration);
      return this.parseIdentifier(liberal);
    }
    flowParseTypeAlias(node2) {
      node2.id = this.flowParseRestrictedIdentifier(false, true);
      this.scope.declareName(node2.id.name, 8201, node2.id.loc.start);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node2.typeParameters = null;
      }
      node2.right = this.flowParseTypeInitialiser(29);
      this.semicolon();
      return this.finishNode(node2, "TypeAlias");
    }
    flowParseOpaqueType(node2, declare) {
      this.expectContextual(130);
      node2.id = this.flowParseRestrictedIdentifier(true, true);
      this.scope.declareName(node2.id.name, 8201, node2.id.loc.start);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node2.typeParameters = null;
      }
      node2.supertype = null;
      if (this.match(14)) {
        node2.supertype = this.flowParseTypeInitialiser(14);
      }
      node2.impltype = null;
      if (!declare) {
        node2.impltype = this.flowParseTypeInitialiser(29);
      }
      this.semicolon();
      return this.finishNode(node2, "OpaqueType");
    }
    flowParseTypeParameter(requireDefault = false) {
      const nodeStartLoc = this.state.startLoc;
      const node2 = this.startNode();
      const variance = this.flowParseVariance();
      const ident = this.flowParseTypeAnnotatableIdentifier();
      node2.name = ident.name;
      node2.variance = variance;
      node2.bound = ident.typeAnnotation;
      if (this.match(29)) {
        this.eat(29);
        node2.default = this.flowParseType();
      } else {
        if (requireDefault) {
          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);
        }
      }
      return this.finishNode(node2, "TypeParameter");
    }
    flowParseTypeParameterDeclaration() {
      const oldInType = this.state.inType;
      const node2 = this.startNode();
      node2.params = [];
      this.state.inType = true;
      if (this.match(47) || this.match(143)) {
        this.next();
      } else {
        this.unexpected();
      }
      let defaultRequired = false;
      do {
        const typeParameter = this.flowParseTypeParameter(defaultRequired);
        node2.params.push(typeParameter);
        if (typeParameter.default) {
          defaultRequired = true;
        }
        if (!this.match(48)) {
          this.expect(12);
        }
      } while (!this.match(48));
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node2, "TypeParameterDeclaration");
    }
    flowInTopLevelContext(cb) {
      if (this.curContext() !== types2.brace) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];
        try {
          return cb();
        } finally {
          this.state.context = oldContext;
        }
      } else {
        return cb();
      }
    }
    flowParseTypeParameterInstantiationInExpression() {
      if (this.reScan_lt() !== 47) return;
      return this.flowParseTypeParameterInstantiation();
    }
    flowParseTypeParameterInstantiation() {
      const node2 = this.startNode();
      const oldInType = this.state.inType;
      this.state.inType = true;
      node2.params = [];
      this.flowInTopLevelContext(() => {
        this.expect(47);
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = false;
        while (!this.match(48)) {
          node2.params.push(this.flowParseType());
          if (!this.match(48)) {
            this.expect(12);
          }
        }
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
      });
      this.state.inType = oldInType;
      if (!this.state.inType && this.curContext() === types2.brace) {
        this.reScan_lt_gt();
      }
      this.expect(48);
      return this.finishNode(node2, "TypeParameterInstantiation");
    }
    flowParseTypeParameterInstantiationCallOrNew() {
      if (this.reScan_lt() !== 47) return;
      const node2 = this.startNode();
      const oldInType = this.state.inType;
      node2.params = [];
      this.state.inType = true;
      this.expect(47);
      while (!this.match(48)) {
        node2.params.push(this.flowParseTypeOrImplicitInstantiation());
        if (!this.match(48)) {
          this.expect(12);
        }
      }
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node2, "TypeParameterInstantiation");
    }
    flowParseInterfaceType() {
      const node2 = this.startNode();
      this.expectContextual(129);
      node2.extends = [];
      if (this.eat(81)) {
        do {
          node2.extends.push(this.flowParseInterfaceExtends());
        } while (this.eat(12));
      }
      node2.body = this.flowParseObjectType({
        allowStatic: false,
        allowExact: false,
        allowSpread: false,
        allowProto: false,
        allowInexact: false
      });
      return this.finishNode(node2, "InterfaceTypeAnnotation");
    }
    flowParseObjectPropertyKey() {
      return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);
    }
    flowParseObjectTypeIndexer(node2, isStatic, variance) {
      node2.static = isStatic;
      if (this.lookahead().type === 14) {
        node2.id = this.flowParseObjectPropertyKey();
        node2.key = this.flowParseTypeInitialiser();
      } else {
        node2.id = null;
        node2.key = this.flowParseType();
      }
      this.expect(3);
      node2.value = this.flowParseTypeInitialiser();
      node2.variance = variance;
      return this.finishNode(node2, "ObjectTypeIndexer");
    }
    flowParseObjectTypeInternalSlot(node2, isStatic) {
      node2.static = isStatic;
      node2.id = this.flowParseObjectPropertyKey();
      this.expect(3);
      this.expect(3);
      if (this.match(47) || this.match(10)) {
        node2.method = true;
        node2.optional = false;
        node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.loc.start));
      } else {
        node2.method = false;
        if (this.eat(17)) {
          node2.optional = true;
        }
        node2.value = this.flowParseTypeInitialiser();
      }
      return this.finishNode(node2, "ObjectTypeInternalSlot");
    }
    flowParseObjectTypeMethodish(node2) {
      node2.params = [];
      node2.rest = null;
      node2.typeParameters = null;
      node2.this = null;
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      this.expect(10);
      if (this.match(78)) {
        node2.this = this.flowParseFunctionTypeParam(true);
        node2.this.name = null;
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      while (!this.match(11) && !this.match(21)) {
        node2.params.push(this.flowParseFunctionTypeParam(false));
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      if (this.eat(21)) {
        node2.rest = this.flowParseFunctionTypeParam(false);
      }
      this.expect(11);
      node2.returnType = this.flowParseTypeInitialiser();
      return this.finishNode(node2, "FunctionTypeAnnotation");
    }
    flowParseObjectTypeCallProperty(node2, isStatic) {
      const valueNode = this.startNode();
      node2.static = isStatic;
      node2.value = this.flowParseObjectTypeMethodish(valueNode);
      return this.finishNode(node2, "ObjectTypeCallProperty");
    }
    flowParseObjectType({
      allowStatic,
      allowExact,
      allowSpread,
      allowProto,
      allowInexact
    }) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      const nodeStart = this.startNode();
      nodeStart.callProperties = [];
      nodeStart.properties = [];
      nodeStart.indexers = [];
      nodeStart.internalSlots = [];
      let endDelim;
      let exact;
      let inexact = false;
      if (allowExact && this.match(6)) {
        this.expect(6);
        endDelim = 9;
        exact = true;
      } else {
        this.expect(5);
        endDelim = 8;
        exact = false;
      }
      nodeStart.exact = exact;
      while (!this.match(endDelim)) {
        let isStatic = false;
        let protoStartLoc = null;
        let inexactStartLoc = null;
        const node2 = this.startNode();
        if (allowProto && this.isContextual(118)) {
          const lookahead = this.lookahead();
          if (lookahead.type !== 14 && lookahead.type !== 17) {
            this.next();
            protoStartLoc = this.state.startLoc;
            allowStatic = false;
          }
        }
        if (allowStatic && this.isContextual(106)) {
          const lookahead = this.lookahead();
          if (lookahead.type !== 14 && lookahead.type !== 17) {
            this.next();
            isStatic = true;
          }
        }
        const variance = this.flowParseVariance();
        if (this.eat(0)) {
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (this.eat(0)) {
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node2, isStatic));
          } else {
            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node2, isStatic, variance));
          }
        } else if (this.match(10) || this.match(47)) {
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node2, isStatic));
        } else {
          let kind = "init";
          if (this.isContextual(99) || this.isContextual(104)) {
            const lookahead = this.lookahead();
            if (tokenIsLiteralPropertyName(lookahead.type)) {
              kind = this.state.value;
              this.next();
            }
          }
          const propOrInexact = this.flowParseObjectTypeProperty(node2, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
          if (propOrInexact === null) {
            inexact = true;
            inexactStartLoc = this.state.lastTokStartLoc;
          } else {
            nodeStart.properties.push(propOrInexact);
          }
        }
        this.flowObjectTypeSemicolon();
        if (inexactStartLoc && !this.match(8) && !this.match(9)) {
          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
        }
      }
      this.expect(endDelim);
      if (allowSpread) {
        nodeStart.inexact = inexact;
      }
      const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
      this.state.inType = oldInType;
      return out;
    }
    flowParseObjectTypeProperty(node2, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
      if (this.eat(21)) {
        const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
        if (isInexactToken) {
          if (!allowSpread) {
            this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);
          } else if (!allowInexact) {
            this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);
          }
          if (variance) {
            this.raise(FlowErrors.InexactVariance, variance);
          }
          return null;
        }
        if (!allowSpread) {
          this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);
        }
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }
        if (variance) {
          this.raise(FlowErrors.SpreadVariance, variance);
        }
        node2.argument = this.flowParseType();
        return this.finishNode(node2, "ObjectTypeSpreadProperty");
      } else {
        node2.key = this.flowParseObjectPropertyKey();
        node2.static = isStatic;
        node2.proto = protoStartLoc != null;
        node2.kind = kind;
        let optional = false;
        if (this.match(47) || this.match(10)) {
          node2.method = true;
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          node2.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node2.loc.start));
          if (kind === "get" || kind === "set") {
            this.flowCheckGetterSetterParams(node2);
          }
          if (!allowSpread && node2.key.name === "constructor" && node2.value.this) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, node2.value.this);
          }
        } else {
          if (kind !== "init") this.unexpected();
          node2.method = false;
          if (this.eat(17)) {
            optional = true;
          }
          node2.value = this.flowParseTypeInitialiser();
          node2.variance = variance;
        }
        node2.optional = optional;
        return this.finishNode(node2, "ObjectTypeProperty");
      }
    }
    flowCheckGetterSetterParams(property) {
      const paramCount = property.kind === "get" ? 0 : 1;
      const length = property.value.params.length + (property.value.rest ? 1 : 0);
      if (property.value.this) {
        this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);
      }
      if (length !== paramCount) {
        this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);
      }
      if (property.kind === "set" && property.value.rest) {
        this.raise(Errors.BadSetterRestParameter, property);
      }
    }
    flowObjectTypeSemicolon() {
      if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
        this.unexpected();
      }
    }
    flowParseQualifiedTypeIdentifier(startLoc, id) {
      startLoc != null ? startLoc : startLoc = this.state.startLoc;
      let node2 = id || this.flowParseRestrictedIdentifier(true);
      while (this.eat(16)) {
        const node22 = this.startNodeAt(startLoc);
        node22.qualification = node2;
        node22.id = this.flowParseRestrictedIdentifier(true);
        node2 = this.finishNode(node22, "QualifiedTypeIdentifier");
      }
      return node2;
    }
    flowParseGenericType(startLoc, id) {
      const node2 = this.startNodeAt(startLoc);
      node2.typeParameters = null;
      node2.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterInstantiation();
      }
      return this.finishNode(node2, "GenericTypeAnnotation");
    }
    flowParseTypeofType() {
      const node2 = this.startNode();
      this.expect(87);
      node2.argument = this.flowParsePrimaryType();
      return this.finishNode(node2, "TypeofTypeAnnotation");
    }
    flowParseTupleType() {
      const node2 = this.startNode();
      node2.types = [];
      this.expect(0);
      while (this.state.pos < this.length && !this.match(3)) {
        node2.types.push(this.flowParseType());
        if (this.match(3)) break;
        this.expect(12);
      }
      this.expect(3);
      return this.finishNode(node2, "TupleTypeAnnotation");
    }
    flowParseFunctionTypeParam(first) {
      let name = null;
      let optional = false;
      let typeAnnotation = null;
      const node2 = this.startNode();
      const lh = this.lookahead();
      const isThis = this.state.type === 78;
      if (lh.type === 14 || lh.type === 17) {
        if (isThis && !first) {
          this.raise(FlowErrors.ThisParamMustBeFirst, node2);
        }
        name = this.parseIdentifier(isThis);
        if (this.eat(17)) {
          optional = true;
          if (isThis) {
            this.raise(FlowErrors.ThisParamMayNotBeOptional, node2);
          }
        }
        typeAnnotation = this.flowParseTypeInitialiser();
      } else {
        typeAnnotation = this.flowParseType();
      }
      node2.name = name;
      node2.optional = optional;
      node2.typeAnnotation = typeAnnotation;
      return this.finishNode(node2, "FunctionTypeParam");
    }
    reinterpretTypeAsFunctionTypeParam(type) {
      const node2 = this.startNodeAt(type.loc.start);
      node2.name = null;
      node2.optional = false;
      node2.typeAnnotation = type;
      return this.finishNode(node2, "FunctionTypeParam");
    }
    flowParseFunctionTypeParams(params = []) {
      let rest = null;
      let _this = null;
      if (this.match(78)) {
        _this = this.flowParseFunctionTypeParam(true);
        _this.name = null;
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      while (!this.match(11) && !this.match(21)) {
        params.push(this.flowParseFunctionTypeParam(false));
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      if (this.eat(21)) {
        rest = this.flowParseFunctionTypeParam(false);
      }
      return {
        params,
        rest,
        _this
      };
    }
    flowIdentToTypeAnnotation(startLoc, node2, id) {
      switch (id.name) {
        case "any":
          return this.finishNode(node2, "AnyTypeAnnotation");
        case "bool":
        case "boolean":
          return this.finishNode(node2, "BooleanTypeAnnotation");
        case "mixed":
          return this.finishNode(node2, "MixedTypeAnnotation");
        case "empty":
          return this.finishNode(node2, "EmptyTypeAnnotation");
        case "number":
          return this.finishNode(node2, "NumberTypeAnnotation");
        case "string":
          return this.finishNode(node2, "StringTypeAnnotation");
        case "symbol":
          return this.finishNode(node2, "SymbolTypeAnnotation");
        default:
          this.checkNotUnderscore(id.name);
          return this.flowParseGenericType(startLoc, id);
      }
    }
    flowParsePrimaryType() {
      const startLoc = this.state.startLoc;
      const node2 = this.startNode();
      let tmp;
      let type;
      let isGroupedType = false;
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      switch (this.state.type) {
        case 5:
          return this.flowParseObjectType({
            allowStatic: false,
            allowExact: false,
            allowSpread: true,
            allowProto: false,
            allowInexact: true
          });
        case 6:
          return this.flowParseObjectType({
            allowStatic: false,
            allowExact: true,
            allowSpread: true,
            allowProto: false,
            allowInexact: false
          });
        case 0:
          this.state.noAnonFunctionType = false;
          type = this.flowParseTupleType();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          return type;
        case 47: {
          const node3 = this.startNode();
          node3.typeParameters = this.flowParseTypeParameterDeclaration();
          this.expect(10);
          tmp = this.flowParseFunctionTypeParams();
          node3.params = tmp.params;
          node3.rest = tmp.rest;
          node3.this = tmp._this;
          this.expect(11);
          this.expect(19);
          node3.returnType = this.flowParseType();
          return this.finishNode(node3, "FunctionTypeAnnotation");
        }
        case 10: {
          const node3 = this.startNode();
          this.next();
          if (!this.match(11) && !this.match(21)) {
            if (tokenIsIdentifier(this.state.type) || this.match(78)) {
              const token = this.lookahead().type;
              isGroupedType = token !== 17 && token !== 14;
            } else {
              isGroupedType = true;
            }
          }
          if (isGroupedType) {
            this.state.noAnonFunctionType = false;
            type = this.flowParseType();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
              this.expect(11);
              return type;
            } else {
              this.eat(12);
            }
          }
          if (type) {
            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
          } else {
            tmp = this.flowParseFunctionTypeParams();
          }
          node3.params = tmp.params;
          node3.rest = tmp.rest;
          node3.this = tmp._this;
          this.expect(11);
          this.expect(19);
          node3.returnType = this.flowParseType();
          node3.typeParameters = null;
          return this.finishNode(node3, "FunctionTypeAnnotation");
        }
        case 134:
          return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
        case 85:
        case 86:
          node2.value = this.match(85);
          this.next();
          return this.finishNode(node2, "BooleanLiteralTypeAnnotation");
        case 53:
          if (this.state.value === "-") {
            this.next();
            if (this.match(135)) {
              return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node2);
            }
            if (this.match(136)) {
              return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node2);
            }
            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
          }
          this.unexpected();
          return;
        case 135:
          return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
        case 136:
          return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
        case 88:
          this.next();
          return this.finishNode(node2, "VoidTypeAnnotation");
        case 84:
          this.next();
          return this.finishNode(node2, "NullLiteralTypeAnnotation");
        case 78:
          this.next();
          return this.finishNode(node2, "ThisTypeAnnotation");
        case 55:
          this.next();
          return this.finishNode(node2, "ExistsTypeAnnotation");
        case 87:
          return this.flowParseTypeofType();
        default:
          if (tokenIsKeyword(this.state.type)) {
            const label = tokenLabelName(this.state.type);
            this.next();
            return super.createIdentifier(node2, label);
          } else if (tokenIsIdentifier(this.state.type)) {
            if (this.isContextual(129)) {
              return this.flowParseInterfaceType();
            }
            return this.flowIdentToTypeAnnotation(startLoc, node2, this.parseIdentifier());
          }
      }
      this.unexpected();
    }
    flowParsePostfixType() {
      const startLoc = this.state.startLoc;
      let type = this.flowParsePrimaryType();
      let seenOptionalIndexedAccess = false;
      while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
        const node2 = this.startNodeAt(startLoc);
        const optional = this.eat(18);
        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
        this.expect(0);
        if (!optional && this.match(3)) {
          node2.elementType = type;
          this.next();
          type = this.finishNode(node2, "ArrayTypeAnnotation");
        } else {
          node2.objectType = type;
          node2.indexType = this.flowParseType();
          this.expect(3);
          if (seenOptionalIndexedAccess) {
            node2.optional = optional;
            type = this.finishNode(node2, "OptionalIndexedAccessType");
          } else {
            type = this.finishNode(node2, "IndexedAccessType");
          }
        }
      }
      return type;
    }
    flowParsePrefixType() {
      const node2 = this.startNode();
      if (this.eat(17)) {
        node2.typeAnnotation = this.flowParsePrefixType();
        return this.finishNode(node2, "NullableTypeAnnotation");
      } else {
        return this.flowParsePostfixType();
      }
    }
    flowParseAnonFunctionWithoutParens() {
      const param = this.flowParsePrefixType();
      if (!this.state.noAnonFunctionType && this.eat(19)) {
        const node2 = this.startNodeAt(param.loc.start);
        node2.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
        node2.rest = null;
        node2.this = null;
        node2.returnType = this.flowParseType();
        node2.typeParameters = null;
        return this.finishNode(node2, "FunctionTypeAnnotation");
      }
      return param;
    }
    flowParseIntersectionType() {
      const node2 = this.startNode();
      this.eat(45);
      const type = this.flowParseAnonFunctionWithoutParens();
      node2.types = [type];
      while (this.eat(45)) {
        node2.types.push(this.flowParseAnonFunctionWithoutParens());
      }
      return node2.types.length === 1 ? type : this.finishNode(node2, "IntersectionTypeAnnotation");
    }
    flowParseUnionType() {
      const node2 = this.startNode();
      this.eat(43);
      const type = this.flowParseIntersectionType();
      node2.types = [type];
      while (this.eat(43)) {
        node2.types.push(this.flowParseIntersectionType());
      }
      return node2.types.length === 1 ? type : this.finishNode(node2, "UnionTypeAnnotation");
    }
    flowParseType() {
      const oldInType = this.state.inType;
      this.state.inType = true;
      const type = this.flowParseUnionType();
      this.state.inType = oldInType;
      return type;
    }
    flowParseTypeOrImplicitInstantiation() {
      if (this.state.type === 132 && this.state.value === "_") {
        const startLoc = this.state.startLoc;
        const node2 = this.parseIdentifier();
        return this.flowParseGenericType(startLoc, node2);
      } else {
        return this.flowParseType();
      }
    }
    flowParseTypeAnnotation() {
      const node2 = this.startNode();
      node2.typeAnnotation = this.flowParseTypeInitialiser();
      return this.finishNode(node2, "TypeAnnotation");
    }
    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
      if (this.match(14)) {
        ident.typeAnnotation = this.flowParseTypeAnnotation();
        this.resetEndLocation(ident);
      }
      return ident;
    }
    typeCastToParameter(node2) {
      node2.expression.typeAnnotation = node2.typeAnnotation;
      this.resetEndLocation(node2.expression, node2.typeAnnotation.loc.end);
      return node2.expression;
    }
    flowParseVariance() {
      let variance = null;
      if (this.match(53)) {
        variance = this.startNode();
        if (this.state.value === "+") {
          variance.kind = "plus";
        } else {
          variance.kind = "minus";
        }
        this.next();
        return this.finishNode(variance, "Variance");
      }
      return variance;
    }
    parseFunctionBody(node2, allowExpressionBody, isMethod = false) {
      if (allowExpressionBody) {
        this.forwardNoArrowParamsConversionAt(node2, () => super.parseFunctionBody(node2, true, isMethod));
        return;
      }
      super.parseFunctionBody(node2, false, isMethod);
    }
    parseFunctionBodyAndFinish(node2, type, isMethod = false) {
      if (this.match(14)) {
        const typeNode = this.startNode();
        [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
        node2.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
      }
      return super.parseFunctionBodyAndFinish(node2, type, isMethod);
    }
    parseStatementLike(flags) {
      if (this.state.strict && this.isContextual(129)) {
        const lookahead = this.lookahead();
        if (tokenIsKeywordOrIdentifier(lookahead.type)) {
          const node2 = this.startNode();
          this.next();
          return this.flowParseInterface(node2);
        }
      } else if (this.isContextual(126)) {
        const node2 = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(node2);
      }
      const stmt = super.parseStatementLike(flags);
      if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
        this.flowPragma = null;
      }
      return stmt;
    }
    parseExpressionStatement(node2, expr, decorators) {
      if (expr.type === "Identifier") {
        if (expr.name === "declare") {
          if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
            return this.flowParseDeclare(node2);
          }
        } else if (tokenIsIdentifier(this.state.type)) {
          if (expr.name === "interface") {
            return this.flowParseInterface(node2);
          } else if (expr.name === "type") {
            return this.flowParseTypeAlias(node2);
          } else if (expr.name === "opaque") {
            return this.flowParseOpaqueType(node2, false);
          }
        }
      }
      return super.parseExpressionStatement(node2, expr, decorators);
    }
    shouldParseExportDeclaration() {
      const {
        type
      } = this.state;
      if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {
        return !this.state.containsEsc;
      }
      return super.shouldParseExportDeclaration();
    }
    isExportDefaultSpecifier() {
      const {
        type
      } = this.state;
      if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {
        return this.state.containsEsc;
      }
      return super.isExportDefaultSpecifier();
    }
    parseExportDefaultExpression() {
      if (this.isContextual(126)) {
        const node2 = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(node2);
      }
      return super.parseExportDefaultExpression();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (!this.match(17)) return expr;
      if (this.state.maybeInArrowParameters) {
        const nextCh = this.lookaheadCharCode();
        if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
          this.setOptionalParametersError(refExpressionErrors);
          return expr;
        }
      }
      this.expect(17);
      const state = this.state.clone();
      const originalNoArrowAt = this.state.noArrowAt;
      const node2 = this.startNodeAt(startLoc);
      let {
        consequent,
        failed
      } = this.tryParseConditionalConsequent();
      let [valid, invalid] = this.getArrowLikeExpressions(consequent);
      if (failed || invalid.length > 0) {
        const noArrowAt = [...originalNoArrowAt];
        if (invalid.length > 0) {
          this.state = state;
          this.state.noArrowAt = noArrowAt;
          for (let i = 0; i < invalid.length; i++) {
            noArrowAt.push(invalid[i].start);
          }
          ({
            consequent,
            failed
          } = this.tryParseConditionalConsequent());
          [valid, invalid] = this.getArrowLikeExpressions(consequent);
        }
        if (failed && valid.length > 1) {
          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);
        }
        if (failed && valid.length === 1) {
          this.state = state;
          noArrowAt.push(valid[0].start);
          this.state.noArrowAt = noArrowAt;
          ({
            consequent,
            failed
          } = this.tryParseConditionalConsequent());
        }
      }
      this.getArrowLikeExpressions(consequent, true);
      this.state.noArrowAt = originalNoArrowAt;
      this.expect(14);
      node2.test = expr;
      node2.consequent = consequent;
      node2.alternate = this.forwardNoArrowParamsConversionAt(node2, () => this.parseMaybeAssign(void 0, void 0));
      return this.finishNode(node2, "ConditionalExpression");
    }
    tryParseConditionalConsequent() {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      const consequent = this.parseMaybeAssignAllowIn();
      const failed = !this.match(14);
      this.state.noArrowParamsConversionAt.pop();
      return {
        consequent,
        failed
      };
    }
    getArrowLikeExpressions(node2, disallowInvalid) {
      const stack = [node2];
      const arrows = [];
      while (stack.length !== 0) {
        const node3 = stack.pop();
        if (node3.type === "ArrowFunctionExpression" && node3.body.type !== "BlockStatement") {
          if (node3.typeParameters || !node3.returnType) {
            this.finishArrowValidation(node3);
          } else {
            arrows.push(node3);
          }
          stack.push(node3.body);
        } else if (node3.type === "ConditionalExpression") {
          stack.push(node3.consequent);
          stack.push(node3.alternate);
        }
      }
      if (disallowInvalid) {
        arrows.forEach((node3) => this.finishArrowValidation(node3));
        return [arrows, []];
      }
      return partition(arrows, (node3) => node3.params.every((param) => this.isAssignable(param, true)));
    }
    finishArrowValidation(node2) {
      var _node$extra;
      this.toAssignableList(node2.params, (_node$extra = node2.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
      this.scope.enter(2 | 4);
      super.checkParams(node2, false, true);
      this.scope.exit();
    }
    forwardNoArrowParamsConversionAt(node2, parse3) {
      let result;
      if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node2.start))) {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        result = parse3();
        this.state.noArrowParamsConversionAt.pop();
      } else {
        result = parse3();
      }
      return result;
    }
    parseParenItem(node2, startLoc) {
      const newNode = super.parseParenItem(node2, startLoc);
      if (this.eat(17)) {
        newNode.optional = true;
        this.resetEndLocation(node2);
      }
      if (this.match(14)) {
        const typeCastNode = this.startNodeAt(startLoc);
        typeCastNode.expression = newNode;
        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
        return this.finishNode(typeCastNode, "TypeCastExpression");
      }
      return newNode;
    }
    assertModuleNodeAllowed(node2) {
      if (node2.type === "ImportDeclaration" && (node2.importKind === "type" || node2.importKind === "typeof") || node2.type === "ExportNamedDeclaration" && node2.exportKind === "type" || node2.type === "ExportAllDeclaration" && node2.exportKind === "type") {
        return;
      }
      super.assertModuleNodeAllowed(node2);
    }
    parseExportDeclaration(node2) {
      if (this.isContextual(130)) {
        node2.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        if (this.match(5)) {
          node2.specifiers = this.parseExportSpecifiers(true);
          super.parseExportFrom(node2);
          return null;
        } else {
          return this.flowParseTypeAlias(declarationNode);
        }
      } else if (this.isContextual(131)) {
        node2.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseOpaqueType(declarationNode, false);
      } else if (this.isContextual(129)) {
        node2.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseInterface(declarationNode);
      } else if (this.isContextual(126)) {
        node2.exportKind = "value";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(declarationNode);
      } else {
        return super.parseExportDeclaration(node2);
      }
    }
    eatExportStar(node2) {
      if (super.eatExportStar(node2)) return true;
      if (this.isContextual(130) && this.lookahead().type === 55) {
        node2.exportKind = "type";
        this.next();
        this.next();
        return true;
      }
      return false;
    }
    maybeParseExportNamespaceSpecifier(node2) {
      const {
        startLoc
      } = this.state;
      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node2);
      if (hasNamespace && node2.exportKind === "type") {
        this.unexpected(startLoc);
      }
      return hasNamespace;
    }
    parseClassId(node2, isStatement, optionalId) {
      super.parseClassId(node2, isStatement, optionalId);
      if (this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      }
    }
    parseClassMember(classBody, member, state) {
      const {
        startLoc
      } = this.state;
      if (this.isContextual(125)) {
        if (super.parseClassMemberFromModifier(classBody, member)) {
          return;
        }
        member.declare = true;
      }
      super.parseClassMember(classBody, member, state);
      if (member.declare) {
        if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
          this.raise(FlowErrors.DeclareClassElement, startLoc);
        } else if (member.value) {
          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);
        }
      }
    }
    isIterator(word) {
      return word === "iterator" || word === "asyncIterator";
    }
    readIterator() {
      const word = super.readWord1();
      const fullWord = "@@" + word;
      if (!this.isIterator(word) || !this.state.inType) {
        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {
          identifierName: fullWord
        });
      }
      this.finishToken(132, fullWord);
    }
    getTokenFromCode(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 123 && next === 124) {
        this.finishOp(6, 2);
      } else if (this.state.inType && (code2 === 62 || code2 === 60)) {
        this.finishOp(code2 === 62 ? 48 : 47, 1);
      } else if (this.state.inType && code2 === 63) {
        if (next === 46) {
          this.finishOp(18, 2);
        } else {
          this.finishOp(17, 1);
        }
      } else if (isIteratorStart(code2, next, this.input.charCodeAt(this.state.pos + 2))) {
        this.state.pos += 2;
        this.readIterator();
      } else {
        super.getTokenFromCode(code2);
      }
    }
    isAssignable(node2, isBinding2) {
      if (node2.type === "TypeCastExpression") {
        return this.isAssignable(node2.expression, isBinding2);
      } else {
        return super.isAssignable(node2, isBinding2);
      }
    }
    toAssignable(node2, isLHS = false) {
      if (!isLHS && node2.type === "AssignmentExpression" && node2.left.type === "TypeCastExpression") {
        node2.left = this.typeCastToParameter(node2.left);
      }
      super.toAssignable(node2, isLHS);
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      for (let i = 0; i < exprList.length; i++) {
        const expr = exprList[i];
        if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
          exprList[i] = this.typeCastToParameter(expr);
        }
      }
      super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    toReferencedList(exprList, isParenthesizedExpr) {
      for (let i = 0; i < exprList.length; i++) {
        var _expr$extra;
        const expr = exprList[i];
        if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
        }
      }
      return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      const node2 = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
      if (canBePattern && !this.state.maybeInArrowParameters) {
        this.toReferencedList(node2.elements);
      }
      return node2;
    }
    isValidLVal(type, isParenthesized, binding2) {
      return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding2);
    }
    parseClassProperty(node2) {
      if (this.match(14)) {
        node2.typeAnnotation = this.flowParseTypeAnnotation();
      }
      return super.parseClassProperty(node2);
    }
    parseClassPrivateProperty(node2) {
      if (this.match(14)) {
        node2.typeAnnotation = this.flowParseTypeAnnotation();
      }
      return super.parseClassPrivateProperty(node2);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(14) || super.isClassProperty();
    }
    isNonstaticConstructor(method) {
      return !this.match(14) && super.isNonstaticConstructor(method);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      if (method.variance) {
        this.unexpected(method.variance.loc.start);
      }
      delete method.variance;
      if (this.match(47)) {
        method.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      if (method.params && isConstructor) {
        const params = method.params;
        if (params.length > 0 && this.isThisParam(params[0])) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, method);
        }
      } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
        const params = method.value.params;
        if (params.length > 0 && this.isThisParam(params[0])) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, method);
        }
      }
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      if (method.variance) {
        this.unexpected(method.variance.loc.start);
      }
      delete method.variance;
      if (this.match(47)) {
        method.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    parseClassSuper(node2) {
      super.parseClassSuper(node2);
      if (node2.superClass && (this.match(47) || this.match(51))) {
        {
          node2.superTypeParameters = this.flowParseTypeParameterInstantiationInExpression();
        }
      }
      if (this.isContextual(113)) {
        this.next();
        const implemented = node2.implements = [];
        do {
          const node3 = this.startNode();
          node3.id = this.flowParseRestrictedIdentifier(true);
          if (this.match(47)) {
            node3.typeParameters = this.flowParseTypeParameterInstantiation();
          } else {
            node3.typeParameters = null;
          }
          implemented.push(this.finishNode(node3, "ClassImplements"));
        } while (this.eat(12));
      }
    }
    checkGetterSetterParams(method) {
      super.checkGetterSetterParams(method);
      const params = this.getObjectOrClassMethodParams(method);
      if (params.length > 0) {
        const param = params[0];
        if (this.isThisParam(param) && method.kind === "get") {
          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);
        } else if (this.isThisParam(param)) {
          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
        }
      }
    }
    parsePropertyNamePrefixOperator(node2) {
      node2.variance = this.flowParseVariance();
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      if (prop.variance) {
        this.unexpected(prop.variance.loc.start);
      }
      delete prop.variance;
      let typeParameters;
      if (this.match(47) && !isAccessor) {
        typeParameters = this.flowParseTypeParameterDeclaration();
        if (!this.match(10)) this.unexpected();
      }
      const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
      if (typeParameters) {
        (result.value || result).typeParameters = typeParameters;
      }
      return result;
    }
    parseFunctionParamType(param) {
      if (this.eat(17)) {
        if (param.type !== "Identifier") {
          this.raise(FlowErrors.PatternIsOptional, param);
        }
        if (this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);
        }
        param.optional = true;
      }
      if (this.match(14)) {
        param.typeAnnotation = this.flowParseTypeAnnotation();
      } else if (this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamAnnotationRequired, param);
      }
      if (this.match(29) && this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamNoDefault, param);
      }
      this.resetEndLocation(param);
      return param;
    }
    parseMaybeDefault(startLoc, left) {
      const node2 = super.parseMaybeDefault(startLoc, left);
      if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
        this.raise(FlowErrors.TypeBeforeInitializer, node2.typeAnnotation);
      }
      return node2;
    }
    checkImportReflection(node2) {
      super.checkImportReflection(node2);
      if (node2.module && node2.importKind !== "value") {
        this.raise(FlowErrors.ImportReflectionHasImportType, node2.specifiers[0].loc.start);
      }
    }
    parseImportSpecifierLocal(node2, specifier, type) {
      specifier.local = hasTypeImportKind(node2) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
      node2.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    isPotentialImportPhase(isExport) {
      if (super.isPotentialImportPhase(isExport)) return true;
      if (this.isContextual(130)) {
        if (!isExport) return true;
        const ch = this.lookaheadCharCode();
        return ch === 123 || ch === 42;
      }
      return !isExport && this.isContextual(87);
    }
    applyImportPhase(node2, isExport, phase, loc) {
      super.applyImportPhase(node2, isExport, phase, loc);
      if (isExport) {
        if (!phase && this.match(65)) {
          return;
        }
        node2.exportKind = phase === "type" ? phase : "value";
      } else {
        if (phase === "type" && this.match(55)) this.unexpected();
        node2.importKind = phase === "type" || phase === "typeof" ? phase : "value";
      }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      const firstIdent = specifier.imported;
      let specifierTypeKind = null;
      if (firstIdent.type === "Identifier") {
        if (firstIdent.name === "type") {
          specifierTypeKind = "type";
        } else if (firstIdent.name === "typeof") {
          specifierTypeKind = "typeof";
        }
      }
      let isBinding2 = false;
      if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
        const as_ident = this.parseIdentifier(true);
        if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
          specifier.imported = as_ident;
          specifier.importKind = specifierTypeKind;
          specifier.local = this.cloneIdentifier(as_ident);
        } else {
          specifier.imported = firstIdent;
          specifier.importKind = null;
          specifier.local = this.parseIdentifier();
        }
      } else {
        if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
          specifier.imported = this.parseIdentifier(true);
          specifier.importKind = specifierTypeKind;
        } else {
          if (importedIsString) {
            throw this.raise(Errors.ImportBindingIsString, specifier, {
              importName: firstIdent.value
            });
          }
          specifier.imported = firstIdent;
          specifier.importKind = null;
        }
        if (this.eatContextual(93)) {
          specifier.local = this.parseIdentifier();
        } else {
          isBinding2 = true;
          specifier.local = this.cloneIdentifier(specifier.imported);
        }
      }
      const specifierIsTypeImport = hasTypeImportKind(specifier);
      if (isInTypeOnlyImport && specifierIsTypeImport) {
        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);
      }
      if (isInTypeOnlyImport || specifierIsTypeImport) {
        this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
      }
      if (isBinding2 && !isInTypeOnlyImport && !specifierIsTypeImport) {
        this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
      }
      return this.finishImportSpecifier(specifier, "ImportSpecifier");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 78:
          return this.parseIdentifier(true);
        default:
          return super.parseBindingAtom();
      }
    }
    parseFunctionParams(node2, isConstructor) {
      const kind = node2.kind;
      if (kind !== "get" && kind !== "set" && this.match(47)) {
        node2.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.parseFunctionParams(node2, isConstructor);
    }
    parseVarId(decl, kind) {
      super.parseVarId(decl, kind);
      if (this.match(14)) {
        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
        this.resetEndLocation(decl.id);
      }
    }
    parseAsyncArrowFromCallExpression(node2, call) {
      if (this.match(14)) {
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = true;
        node2.returnType = this.flowParseTypeAnnotation();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
      }
      return super.parseAsyncArrowFromCallExpression(node2, call);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      var _jsx;
      let state = null;
      let jsx3;
      if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
        state = this.state.clone();
        jsx3 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
        if (!jsx3.error) return jsx3.node;
        const {
          context: context2
        } = this.state;
        const currentContext = context2[context2.length - 1];
        if (currentContext === types2.j_oTag || currentContext === types2.j_expr) {
          context2.pop();
        }
      }
      if ((_jsx = jsx3) != null && _jsx.error || this.match(47)) {
        var _jsx2, _jsx3;
        state = state || this.state.clone();
        let typeParameters;
        const arrow = this.tryParse((abort) => {
          var _arrowExpression$extr;
          typeParameters = this.flowParseTypeParameterDeclaration();
          const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            this.resetStartLocationFromNode(result, typeParameters);
            return result;
          });
          if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized) abort();
          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
          if (expr.type !== "ArrowFunctionExpression") abort();
          expr.typeParameters = typeParameters;
          this.resetStartLocationFromNode(expr, typeParameters);
          return arrowExpression2;
        }, state);
        let arrowExpression = null;
        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
          if (!arrow.error && !arrow.aborted) {
            if (arrow.node.async) {
              this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);
            }
            return arrow.node;
          }
          arrowExpression = arrow.node;
        }
        if ((_jsx2 = jsx3) != null && _jsx2.node) {
          this.state = jsx3.failState;
          return jsx3.node;
        }
        if (arrowExpression) {
          this.state = arrow.failState;
          return arrowExpression;
        }
        if ((_jsx3 = jsx3) != null && _jsx3.thrown) throw jsx3.error;
        if (arrow.thrown) throw arrow.error;
        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
      }
      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
    }
    parseArrow(node2) {
      if (this.match(14)) {
        const result = this.tryParse(() => {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node2.predicate] = this.flowParseTypeAndPredicateInitialiser();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          if (this.canInsertSemicolon()) this.unexpected();
          if (!this.match(19)) this.unexpected();
          return typeNode;
        });
        if (result.thrown) return null;
        if (result.error) this.state = result.failState;
        node2.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
      }
      return super.parseArrow(node2);
    }
    shouldParseArrow(params) {
      return this.match(14) || super.shouldParseArrow(params);
    }
    setArrowFunctionParameters(node2, params) {
      if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node2.start))) {
        node2.params = params;
      } else {
        super.setArrowFunctionParameters(node2, params);
      }
    }
    checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged = true) {
      if (isArrowFunction && this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node2.start))) {
        return;
      }
      for (let i = 0; i < node2.params.length; i++) {
        if (this.isThisParam(node2.params[i]) && i > 0) {
          this.raise(FlowErrors.ThisParamMustBeFirst, node2.params[i]);
        }
      }
      super.checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged);
    }
    parseParenAndDistinguishExpression(canBeArrow) {
      return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
    }
    parseSubscripts(base2, startLoc, noCalls) {
      if (base2.type === "Identifier" && base2.name === "async" && this.state.noArrowAt.includes(startLoc.index)) {
        this.next();
        const node2 = this.startNodeAt(startLoc);
        node2.callee = base2;
        node2.arguments = super.parseCallExpressionArguments(11);
        base2 = this.finishNode(node2, "CallExpression");
      } else if (base2.type === "Identifier" && base2.name === "async" && this.match(47)) {
        const state = this.state.clone();
        const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
        if (!arrow.error && !arrow.aborted) return arrow.node;
        const result = this.tryParse(() => super.parseSubscripts(base2, startLoc, noCalls), state);
        if (result.node && !result.error) return result.node;
        if (arrow.node) {
          this.state = arrow.failState;
          return arrow.node;
        }
        if (result.node) {
          this.state = result.failState;
          return result.node;
        }
        throw arrow.error || result.error;
      }
      return super.parseSubscripts(base2, startLoc, noCalls);
    }
    parseSubscript(base2, startLoc, noCalls, subscriptState) {
      if (this.match(18) && this.isLookaheadToken_lt()) {
        subscriptState.optionalChainMember = true;
        if (noCalls) {
          subscriptState.stop = true;
          return base2;
        }
        this.next();
        const node2 = this.startNodeAt(startLoc);
        node2.callee = base2;
        node2.typeArguments = this.flowParseTypeParameterInstantiationInExpression();
        this.expect(10);
        node2.arguments = this.parseCallExpressionArguments(11);
        node2.optional = true;
        return this.finishCallExpression(node2, true);
      } else if (!noCalls && this.shouldParseTypes() && (this.match(47) || this.match(51))) {
        const node2 = this.startNodeAt(startLoc);
        node2.callee = base2;
        const result = this.tryParse(() => {
          node2.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
          this.expect(10);
          node2.arguments = super.parseCallExpressionArguments(11);
          if (subscriptState.optionalChainMember) {
            node2.optional = false;
          }
          return this.finishCallExpression(node2, subscriptState.optionalChainMember);
        });
        if (result.node) {
          if (result.error) this.state = result.failState;
          return result.node;
        }
      }
      return super.parseSubscript(base2, startLoc, noCalls, subscriptState);
    }
    parseNewCallee(node2) {
      super.parseNewCallee(node2);
      let targs = null;
      if (this.shouldParseTypes() && this.match(47)) {
        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
      }
      node2.typeArguments = targs;
    }
    parseAsyncArrowWithTypeParameters(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      this.parseFunctionParams(node2, false);
      if (!this.parseArrow(node2)) return;
      return super.parseArrowExpression(node2, void 0, true);
    }
    readToken_mult_modulo(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 42 && next === 47 && this.state.hasFlowComment) {
        this.state.hasFlowComment = false;
        this.state.pos += 2;
        this.nextToken();
        return;
      }
      super.readToken_mult_modulo(code2);
    }
    readToken_pipe_amp(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 124 && next === 125) {
        this.finishOp(9, 2);
        return;
      }
      super.readToken_pipe_amp(code2);
    }
    parseTopLevel(file2, program) {
      const fileNode = super.parseTopLevel(file2, program);
      if (this.state.hasFlowComment) {
        this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());
      }
      return fileNode;
    }
    skipBlockComment() {
      if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
        if (this.state.hasFlowComment) {
          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
        }
        this.hasFlowCommentCompletion();
        const commentSkip = this.skipFlowComment();
        if (commentSkip) {
          this.state.pos += commentSkip;
          this.state.hasFlowComment = true;
        }
        return;
      }
      return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
    }
    skipFlowComment() {
      const {
        pos
      } = this.state;
      let shiftToFirstNonWhiteSpace = 2;
      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
        shiftToFirstNonWhiteSpace++;
      }
      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
      if (ch2 === 58 && ch3 === 58) {
        return shiftToFirstNonWhiteSpace + 2;
      }
      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
        return shiftToFirstNonWhiteSpace + 12;
      }
      if (ch2 === 58 && ch3 !== 58) {
        return shiftToFirstNonWhiteSpace;
      }
      return false;
    }
    hasFlowCommentCompletion() {
      const end = this.input.indexOf("*/", this.state.pos);
      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
      }
    }
    flowEnumErrorBooleanMemberNotInitialized(loc, {
      enumName,
      memberName
    }) {
      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
        memberName,
        enumName
      });
    }
    flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
      return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);
    }
    flowEnumErrorNumberMemberNotInitialized(loc, details) {
      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
    }
    flowEnumErrorStringMemberInconsistentlyInitialized(node2, details) {
      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node2, details);
    }
    flowEnumMemberInit() {
      const startLoc = this.state.startLoc;
      const endOfInit = () => this.match(12) || this.match(8);
      switch (this.state.type) {
        case 135: {
          const literal2 = this.parseNumericLiteral(this.state.value);
          if (endOfInit()) {
            return {
              type: "number",
              loc: literal2.loc.start,
              value: literal2
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
        case 134: {
          const literal2 = this.parseStringLiteral(this.state.value);
          if (endOfInit()) {
            return {
              type: "string",
              loc: literal2.loc.start,
              value: literal2
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
        case 85:
        case 86: {
          const literal2 = this.parseBooleanLiteral(this.match(85));
          if (endOfInit()) {
            return {
              type: "boolean",
              loc: literal2.loc.start,
              value: literal2
            };
          }
          return {
            type: "invalid",
            loc: startLoc
          };
        }
        default:
          return {
            type: "invalid",
            loc: startLoc
          };
      }
    }
    flowEnumMemberRaw() {
      const loc = this.state.startLoc;
      const id = this.parseIdentifier(true);
      const init = this.eat(29) ? this.flowEnumMemberInit() : {
        type: "none",
        loc
      };
      return {
        id,
        init
      };
    }
    flowEnumCheckExplicitTypeMismatch(loc, context2, expectedType) {
      const {
        explicitType
      } = context2;
      if (explicitType === null) {
        return;
      }
      if (explicitType !== expectedType) {
        this.flowEnumErrorInvalidMemberInitializer(loc, context2);
      }
    }
    flowEnumMembers({
      enumName,
      explicitType
    }) {
      const seenNames = /* @__PURE__ */ new Set();
      const members = {
        booleanMembers: [],
        numberMembers: [],
        stringMembers: [],
        defaultedMembers: []
      };
      let hasUnknownMembers = false;
      while (!this.match(8)) {
        if (this.eat(21)) {
          hasUnknownMembers = true;
          break;
        }
        const memberNode = this.startNode();
        const {
          id,
          init
        } = this.flowEnumMemberRaw();
        const memberName = id.name;
        if (memberName === "") {
          continue;
        }
        if (/^[a-z]/.test(memberName)) {
          this.raise(FlowErrors.EnumInvalidMemberName, id, {
            memberName,
            suggestion: memberName[0].toUpperCase() + memberName.slice(1),
            enumName
          });
        }
        if (seenNames.has(memberName)) {
          this.raise(FlowErrors.EnumDuplicateMemberName, id, {
            memberName,
            enumName
          });
        }
        seenNames.add(memberName);
        const context2 = {
          enumName,
          explicitType,
          memberName
        };
        memberNode.id = id;
        switch (init.type) {
          case "boolean": {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context2, "boolean");
            memberNode.init = init.value;
            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
            break;
          }
          case "number": {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context2, "number");
            memberNode.init = init.value;
            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
            break;
          }
          case "string": {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context2, "string");
            memberNode.init = init.value;
            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
            break;
          }
          case "invalid": {
            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context2);
          }
          case "none": {
            switch (explicitType) {
              case "boolean":
                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context2);
                break;
              case "number":
                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context2);
                break;
              default:
                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
            }
          }
        }
        if (!this.match(8)) {
          this.expect(12);
        }
      }
      return {
        members,
        hasUnknownMembers
      };
    }
    flowEnumStringMembers(initializedMembers, defaultedMembers, {
      enumName
    }) {
      if (initializedMembers.length === 0) {
        return defaultedMembers;
      } else if (defaultedMembers.length === 0) {
        return initializedMembers;
      } else if (defaultedMembers.length > initializedMembers.length) {
        for (const member of initializedMembers) {
          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
            enumName
          });
        }
        return defaultedMembers;
      } else {
        for (const member of defaultedMembers) {
          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
            enumName
          });
        }
        return initializedMembers;
      }
    }
    flowEnumParseExplicitType({
      enumName
    }) {
      if (!this.eatContextual(102)) return null;
      if (!tokenIsIdentifier(this.state.type)) {
        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
          enumName
        });
      }
      const {
        value: value2
      } = this.state;
      this.next();
      if (value2 !== "boolean" && value2 !== "number" && value2 !== "string" && value2 !== "symbol") {
        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
          enumName,
          invalidEnumType: value2
        });
      }
      return value2;
    }
    flowEnumBody(node2, id) {
      const enumName = id.name;
      const nameLoc = id.loc.start;
      const explicitType = this.flowEnumParseExplicitType({
        enumName
      });
      this.expect(5);
      const {
        members,
        hasUnknownMembers
      } = this.flowEnumMembers({
        enumName,
        explicitType
      });
      node2.hasUnknownMembers = hasUnknownMembers;
      switch (explicitType) {
        case "boolean":
          node2.explicitType = true;
          node2.members = members.booleanMembers;
          this.expect(8);
          return this.finishNode(node2, "EnumBooleanBody");
        case "number":
          node2.explicitType = true;
          node2.members = members.numberMembers;
          this.expect(8);
          return this.finishNode(node2, "EnumNumberBody");
        case "string":
          node2.explicitType = true;
          node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
            enumName
          });
          this.expect(8);
          return this.finishNode(node2, "EnumStringBody");
        case "symbol":
          node2.members = members.defaultedMembers;
          this.expect(8);
          return this.finishNode(node2, "EnumSymbolBody");
        default: {
          const empty = () => {
            node2.members = [];
            this.expect(8);
            return this.finishNode(node2, "EnumStringBody");
          };
          node2.explicitType = false;
          const boolsLen = members.booleanMembers.length;
          const numsLen = members.numberMembers.length;
          const strsLen = members.stringMembers.length;
          const defaultedLen = members.defaultedMembers.length;
          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
            return empty();
          } else if (!boolsLen && !numsLen) {
            node2.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node2, "EnumStringBody");
          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }
            node2.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumBooleanBody");
          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }
            node2.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node2, "EnumNumberBody");
          } else {
            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {
              enumName
            });
            return empty();
          }
        }
      }
    }
    flowParseEnumDeclaration(node2) {
      const id = this.parseIdentifier();
      node2.id = id;
      node2.body = this.flowEnumBody(this.startNode(), id);
      return this.finishNode(node2, "EnumDeclaration");
    }
    jsxParseOpeningElementAfterName(node2) {
      if (this.shouldParseTypes()) {
        if (this.match(47) || this.match(51)) {
          node2.typeArguments = this.flowParseTypeParameterInstantiationInExpression();
        }
      }
      return super.jsxParseOpeningElementAfterName(node2);
    }
    isLookaheadToken_lt() {
      const next = this.nextTokenStart();
      if (this.input.charCodeAt(next) === 60) {
        const afterNext = this.input.charCodeAt(next + 1);
        return afterNext !== 60 && afterNext !== 61;
      }
      return false;
    }
    reScan_lt_gt() {
      const {
        type
      } = this.state;
      if (type === 47) {
        this.state.pos -= 1;
        this.readToken_lt();
      } else if (type === 48) {
        this.state.pos -= 1;
        this.readToken_gt();
      }
    }
    reScan_lt() {
      const {
        type
      } = this.state;
      if (type === 51) {
        this.state.pos -= 2;
        this.finishOp(47, 1);
        return 47;
      }
      return type;
    }
    maybeUnwrapTypeCastExpression(node2) {
      return node2.type === "TypeCastExpression" ? node2.expression : node2;
    }
  };
  const entities = {
    __proto__: null,
    quot: '"',
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: " ",
    iexcl: "¡",
    cent: "¢",
    pound: "£",
    curren: "¤",
    yen: "¥",
    brvbar: "¦",
    sect: "§",
    uml: "¨",
    copy: "©",
    ordf: "ª",
    laquo: "«",
    not: "¬",
    shy: "­",
    reg: "®",
    macr: "¯",
    deg: "°",
    plusmn: "±",
    sup2: "²",
    sup3: "³",
    acute: "´",
    micro: "µ",
    para: "¶",
    middot: "·",
    cedil: "¸",
    sup1: "¹",
    ordm: "º",
    raquo: "»",
    frac14: "¼",
    frac12: "½",
    frac34: "¾",
    iquest: "¿",
    Agrave: "À",
    Aacute: "Á",
    Acirc: "Â",
    Atilde: "Ã",
    Auml: "Ä",
    Aring: "Å",
    AElig: "Æ",
    Ccedil: "Ç",
    Egrave: "È",
    Eacute: "É",
    Ecirc: "Ê",
    Euml: "Ë",
    Igrave: "Ì",
    Iacute: "Í",
    Icirc: "Î",
    Iuml: "Ï",
    ETH: "Ð",
    Ntilde: "Ñ",
    Ograve: "Ò",
    Oacute: "Ó",
    Ocirc: "Ô",
    Otilde: "Õ",
    Ouml: "Ö",
    times: "×",
    Oslash: "Ø",
    Ugrave: "Ù",
    Uacute: "Ú",
    Ucirc: "Û",
    Uuml: "Ü",
    Yacute: "Ý",
    THORN: "Þ",
    szlig: "ß",
    agrave: "à",
    aacute: "á",
    acirc: "â",
    atilde: "ã",
    auml: "ä",
    aring: "å",
    aelig: "æ",
    ccedil: "ç",
    egrave: "è",
    eacute: "é",
    ecirc: "ê",
    euml: "ë",
    igrave: "ì",
    iacute: "í",
    icirc: "î",
    iuml: "ï",
    eth: "ð",
    ntilde: "ñ",
    ograve: "ò",
    oacute: "ó",
    ocirc: "ô",
    otilde: "õ",
    ouml: "ö",
    divide: "÷",
    oslash: "ø",
    ugrave: "ù",
    uacute: "ú",
    ucirc: "û",
    uuml: "ü",
    yacute: "ý",
    thorn: "þ",
    yuml: "ÿ",
    OElig: "Œ",
    oelig: "œ",
    Scaron: "Š",
    scaron: "š",
    Yuml: "Ÿ",
    fnof: "ƒ",
    circ: "ˆ",
    tilde: "˜",
    Alpha: "Α",
    Beta: "Β",
    Gamma: "Γ",
    Delta: "Δ",
    Epsilon: "Ε",
    Zeta: "Ζ",
    Eta: "Η",
    Theta: "Θ",
    Iota: "Ι",
    Kappa: "Κ",
    Lambda: "Λ",
    Mu: "Μ",
    Nu: "Ν",
    Xi: "Ξ",
    Omicron: "Ο",
    Pi: "Π",
    Rho: "Ρ",
    Sigma: "Σ",
    Tau: "Τ",
    Upsilon: "Υ",
    Phi: "Φ",
    Chi: "Χ",
    Psi: "Ψ",
    Omega: "Ω",
    alpha: "α",
    beta: "β",
    gamma: "γ",
    delta: "δ",
    epsilon: "ε",
    zeta: "ζ",
    eta: "η",
    theta: "θ",
    iota: "ι",
    kappa: "κ",
    lambda: "λ",
    mu: "μ",
    nu: "ν",
    xi: "ξ",
    omicron: "ο",
    pi: "π",
    rho: "ρ",
    sigmaf: "ς",
    sigma: "σ",
    tau: "τ",
    upsilon: "υ",
    phi: "φ",
    chi: "χ",
    psi: "ψ",
    omega: "ω",
    thetasym: "ϑ",
    upsih: "ϒ",
    piv: "ϖ",
    ensp: " ",
    emsp: " ",
    thinsp: " ",
    zwnj: "‌",
    zwj: "‍",
    lrm: "‎",
    rlm: "‏",
    ndash: "–",
    mdash: "—",
    lsquo: "‘",
    rsquo: "’",
    sbquo: "‚",
    ldquo: "“",
    rdquo: "”",
    bdquo: "„",
    dagger: "†",
    Dagger: "‡",
    bull: "•",
    hellip: "…",
    permil: "‰",
    prime: "′",
    Prime: "″",
    lsaquo: "‹",
    rsaquo: "›",
    oline: "‾",
    frasl: "⁄",
    euro: "€",
    image: "ℑ",
    weierp: "℘",
    real: "ℜ",
    trade: "™",
    alefsym: "ℵ",
    larr: "←",
    uarr: "↑",
    rarr: "→",
    darr: "↓",
    harr: "↔",
    crarr: "↵",
    lArr: "⇐",
    uArr: "⇑",
    rArr: "⇒",
    dArr: "⇓",
    hArr: "⇔",
    forall: "∀",
    part: "∂",
    exist: "∃",
    empty: "∅",
    nabla: "∇",
    isin: "∈",
    notin: "∉",
    ni: "∋",
    prod: "∏",
    sum: "∑",
    minus: "−",
    lowast: "∗",
    radic: "√",
    prop: "∝",
    infin: "∞",
    ang: "∠",
    and: "∧",
    or: "∨",
    cap: "∩",
    cup: "∪",
    int: "∫",
    there4: "∴",
    sim: "∼",
    cong: "≅",
    asymp: "≈",
    ne: "≠",
    equiv: "≡",
    le: "≤",
    ge: "≥",
    sub: "⊂",
    sup: "⊃",
    nsub: "⊄",
    sube: "⊆",
    supe: "⊇",
    oplus: "⊕",
    otimes: "⊗",
    perp: "⊥",
    sdot: "⋅",
    lceil: "⌈",
    rceil: "⌉",
    lfloor: "⌊",
    rfloor: "⌋",
    lang: "〈",
    rang: "〉",
    loz: "◊",
    spades: "♠",
    clubs: "♣",
    hearts: "♥",
    diams: "♦"
  };
  const lineBreak = /\r\n|[\r\n\u2028\u2029]/;
  const lineBreakG = new RegExp(lineBreak.source, "g");
  function isNewLine(code2) {
    switch (code2) {
      case 10:
      case 13:
      case 8232:
      case 8233:
        return true;
      default:
        return false;
    }
  }
  function hasNewLine(input, start, end) {
    for (let i = start; i < end; i++) {
      if (isNewLine(input.charCodeAt(i))) {
        return true;
      }
    }
    return false;
  }
  const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
  const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
  function isWhitespace(code2) {
    switch (code2) {
      case 9:
      case 11:
      case 12:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
        return true;
      default:
        return false;
    }
  }
  const JsxErrors = ParseErrorEnum`jsx`({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: ({
      openingTagName
    }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnexpectedToken: ({
      unexpected,
      HTMLEntity
    }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
  });
  function isFragment(object) {
    return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
  }
  function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") {
      return object.name;
    }
    if (object.type === "JSXNamespacedName") {
      return object.namespace.name + ":" + object.name.name;
    }
    if (object.type === "JSXMemberExpression") {
      return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
    throw new Error("Node had unexpected type: " + object.type);
  }
  var jsx2 = (superClass) => class JSXParserMixin extends superClass {
    jsxReadToken() {
      let out = "";
      let chunkStart = this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length) {
          throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
        }
        const ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 60:
          case 123:
            if (this.state.pos === this.state.start) {
              if (ch === 60 && this.state.canStartJSXElement) {
                ++this.state.pos;
                this.finishToken(143);
              } else {
                super.getTokenFromCode(ch);
              }
              return;
            }
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(142, out);
            return;
          case 38:
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
            break;
          case 62:
          case 125:
          default:
            if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadNewLine(true);
              chunkStart = this.state.pos;
            } else {
              ++this.state.pos;
            }
        }
      }
    }
    jsxReadNewLine(normalizeCRLF) {
      const ch = this.input.charCodeAt(this.state.pos);
      let out;
      ++this.state.pos;
      if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
        ++this.state.pos;
        out = normalizeCRLF ? "\n" : "\r\n";
      } else {
        out = String.fromCharCode(ch);
      }
      ++this.state.curLine;
      this.state.lineStart = this.state.pos;
      return out;
    }
    jsxReadString(quote) {
      let out = "";
      let chunkStart = ++this.state.pos;
      for (; ; ) {
        if (this.state.pos >= this.length) {
          throw this.raise(Errors.UnterminatedString, this.state.startLoc);
        }
        const ch = this.input.charCodeAt(this.state.pos);
        if (ch === quote) break;
        if (ch === 38) {
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
        } else if (isNewLine(ch)) {
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadNewLine(false);
          chunkStart = this.state.pos;
        } else {
          ++this.state.pos;
        }
      }
      out += this.input.slice(chunkStart, this.state.pos++);
      this.finishToken(134, out);
    }
    jsxReadEntity() {
      const startPos = ++this.state.pos;
      if (this.codePointAtPos(this.state.pos) === 35) {
        ++this.state.pos;
        let radix = 10;
        if (this.codePointAtPos(this.state.pos) === 120) {
          radix = 16;
          ++this.state.pos;
        }
        const codePoint = this.readInt(radix, void 0, false, "bail");
        if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
          ++this.state.pos;
          return String.fromCodePoint(codePoint);
        }
      } else {
        let count = 0;
        let semi = false;
        while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59)) {
          ++this.state.pos;
        }
        if (semi) {
          const desc = this.input.slice(startPos, this.state.pos);
          const entity = entities[desc];
          ++this.state.pos;
          if (entity) {
            return entity;
          }
        }
      }
      this.state.pos = startPos;
      return "&";
    }
    jsxReadWord() {
      let ch;
      const start = this.state.pos;
      do {
        ch = this.input.charCodeAt(++this.state.pos);
      } while (isIdentifierChar(ch) || ch === 45);
      this.finishToken(141, this.input.slice(start, this.state.pos));
    }
    jsxParseIdentifier() {
      const node2 = this.startNode();
      if (this.match(141)) {
        node2.name = this.state.value;
      } else if (tokenIsKeyword(this.state.type)) {
        node2.name = tokenLabelName(this.state.type);
      } else {
        this.unexpected();
      }
      this.next();
      return this.finishNode(node2, "JSXIdentifier");
    }
    jsxParseNamespacedName() {
      const startLoc = this.state.startLoc;
      const name = this.jsxParseIdentifier();
      if (!this.eat(14)) return name;
      const node2 = this.startNodeAt(startLoc);
      node2.namespace = name;
      node2.name = this.jsxParseIdentifier();
      return this.finishNode(node2, "JSXNamespacedName");
    }
    jsxParseElementName() {
      const startLoc = this.state.startLoc;
      let node2 = this.jsxParseNamespacedName();
      if (node2.type === "JSXNamespacedName") {
        return node2;
      }
      while (this.eat(16)) {
        const newNode = this.startNodeAt(startLoc);
        newNode.object = node2;
        newNode.property = this.jsxParseIdentifier();
        node2 = this.finishNode(newNode, "JSXMemberExpression");
      }
      return node2;
    }
    jsxParseAttributeValue() {
      let node2;
      switch (this.state.type) {
        case 5:
          node2 = this.startNode();
          this.setContext(types2.brace);
          this.next();
          node2 = this.jsxParseExpressionContainer(node2, types2.j_oTag);
          if (node2.expression.type === "JSXEmptyExpression") {
            this.raise(JsxErrors.AttributeIsEmpty, node2);
          }
          return node2;
        case 143:
        case 134:
          return this.parseExprAtom();
        default:
          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
      }
    }
    jsxParseEmptyExpression() {
      const node2 = this.startNodeAt(this.state.lastTokEndLoc);
      return this.finishNodeAt(node2, "JSXEmptyExpression", this.state.startLoc);
    }
    jsxParseSpreadChild(node2) {
      this.next();
      node2.expression = this.parseExpression();
      this.setContext(types2.j_expr);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node2, "JSXSpreadChild");
    }
    jsxParseExpressionContainer(node2, previousContext) {
      if (this.match(8)) {
        node2.expression = this.jsxParseEmptyExpression();
      } else {
        const expression = this.parseExpression();
        node2.expression = expression;
      }
      this.setContext(previousContext);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node2, "JSXExpressionContainer");
    }
    jsxParseAttribute() {
      const node2 = this.startNode();
      if (this.match(5)) {
        this.setContext(types2.brace);
        this.next();
        this.expect(21);
        node2.argument = this.parseMaybeAssignAllowIn();
        this.setContext(types2.j_oTag);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node2, "JSXSpreadAttribute");
      }
      node2.name = this.jsxParseNamespacedName();
      node2.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
      return this.finishNode(node2, "JSXAttribute");
    }
    jsxParseOpeningElementAt(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      if (this.eat(144)) {
        return this.finishNode(node2, "JSXOpeningFragment");
      }
      node2.name = this.jsxParseElementName();
      return this.jsxParseOpeningElementAfterName(node2);
    }
    jsxParseOpeningElementAfterName(node2) {
      const attributes = [];
      while (!this.match(56) && !this.match(144)) {
        attributes.push(this.jsxParseAttribute());
      }
      node2.attributes = attributes;
      node2.selfClosing = this.eat(56);
      this.expect(144);
      return this.finishNode(node2, "JSXOpeningElement");
    }
    jsxParseClosingElementAt(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      if (this.eat(144)) {
        return this.finishNode(node2, "JSXClosingFragment");
      }
      node2.name = this.jsxParseElementName();
      this.expect(144);
      return this.finishNode(node2, "JSXClosingElement");
    }
    jsxParseElementAt(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      const children = [];
      const openingElement = this.jsxParseOpeningElementAt(startLoc);
      let closingElement = null;
      if (!openingElement.selfClosing) {
        contents: for (; ; ) {
          switch (this.state.type) {
            case 143:
              startLoc = this.state.startLoc;
              this.next();
              if (this.eat(56)) {
                closingElement = this.jsxParseClosingElementAt(startLoc);
                break contents;
              }
              children.push(this.jsxParseElementAt(startLoc));
              break;
            case 142:
              children.push(this.parseLiteral(this.state.value, "JSXText"));
              break;
            case 5: {
              const node3 = this.startNode();
              this.setContext(types2.brace);
              this.next();
              if (this.match(21)) {
                children.push(this.jsxParseSpreadChild(node3));
              } else {
                children.push(this.jsxParseExpressionContainer(node3, types2.j_expr));
              }
              break;
            }
            default:
              this.unexpected();
          }
        }
        if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);
        } else if (!isFragment(openingElement) && isFragment(closingElement)) {
          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
            openingTagName: getQualifiedJSXName(openingElement.name)
          });
        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
          if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
              openingTagName: getQualifiedJSXName(openingElement.name)
            });
          }
        }
      }
      if (isFragment(openingElement)) {
        node2.openingFragment = openingElement;
        node2.closingFragment = closingElement;
      } else {
        node2.openingElement = openingElement;
        node2.closingElement = closingElement;
      }
      node2.children = children;
      if (this.match(47)) {
        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
      }
      return isFragment(openingElement) ? this.finishNode(node2, "JSXFragment") : this.finishNode(node2, "JSXElement");
    }
    jsxParseElement() {
      const startLoc = this.state.startLoc;
      this.next();
      return this.jsxParseElementAt(startLoc);
    }
    setContext(newContext) {
      const {
        context: context2
      } = this.state;
      context2[context2.length - 1] = newContext;
    }
    parseExprAtom(refExpressionErrors) {
      if (this.match(143)) {
        return this.jsxParseElement();
      } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
        this.replaceToken(143);
        return this.jsxParseElement();
      } else {
        return super.parseExprAtom(refExpressionErrors);
      }
    }
    skipSpace() {
      const curContext = this.curContext();
      if (!curContext.preserveSpace) super.skipSpace();
    }
    getTokenFromCode(code2) {
      const context2 = this.curContext();
      if (context2 === types2.j_expr) {
        this.jsxReadToken();
        return;
      }
      if (context2 === types2.j_oTag || context2 === types2.j_cTag) {
        if (isIdentifierStart(code2)) {
          this.jsxReadWord();
          return;
        }
        if (code2 === 62) {
          ++this.state.pos;
          this.finishToken(144);
          return;
        }
        if ((code2 === 34 || code2 === 39) && context2 === types2.j_oTag) {
          this.jsxReadString(code2);
          return;
        }
      }
      if (code2 === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
        ++this.state.pos;
        this.finishToken(143);
        return;
      }
      super.getTokenFromCode(code2);
    }
    updateContext(prevType) {
      const {
        context: context2,
        type
      } = this.state;
      if (type === 56 && prevType === 143) {
        context2.splice(-2, 2, types2.j_cTag);
        this.state.canStartJSXElement = false;
      } else if (type === 143) {
        context2.push(types2.j_oTag);
      } else if (type === 144) {
        const out = context2[context2.length - 1];
        if (out === types2.j_oTag && prevType === 56 || out === types2.j_cTag) {
          context2.pop();
          this.state.canStartJSXElement = context2[context2.length - 1] === types2.j_expr;
        } else {
          this.setContext(types2.j_expr);
          this.state.canStartJSXElement = true;
        }
      } else {
        this.state.canStartJSXElement = tokenComesBeforeExpression(type);
      }
    }
  };
  class TypeScriptScope extends Scope {
    constructor(...args) {
      super(...args);
      this.tsNames = /* @__PURE__ */ new Map();
    }
  }
  class TypeScriptScopeHandler extends ScopeHandler {
    constructor(...args) {
      super(...args);
      this.importsStack = [];
    }
    createScope(flags) {
      this.importsStack.push(/* @__PURE__ */ new Set());
      return new TypeScriptScope(flags);
    }
    enter(flags) {
      if (flags === 512) {
        this.importsStack.push(/* @__PURE__ */ new Set());
      }
      super.enter(flags);
    }
    exit() {
      const flags = super.exit();
      if (flags === 512) {
        this.importsStack.pop();
      }
      return flags;
    }
    hasImport(name, allowShadow) {
      const len = this.importsStack.length;
      if (this.importsStack[len - 1].has(name)) {
        return true;
      }
      if (!allowShadow && len > 1) {
        for (let i = 0; i < len - 1; i++) {
          if (this.importsStack[i].has(name)) return true;
        }
      }
      return false;
    }
    declareName(name, bindingType, loc) {
      if (bindingType & 4096) {
        if (this.hasImport(name, true)) {
          this.parser.raise(Errors.VarRedeclaration, loc, {
            identifierName: name
          });
        }
        this.importsStack[this.importsStack.length - 1].add(name);
        return;
      }
      const scope2 = this.currentScope();
      let type = scope2.tsNames.get(name) || 0;
      if (bindingType & 1024) {
        this.maybeExportDefined(scope2, name);
        scope2.tsNames.set(name, type | 16);
        return;
      }
      super.declareName(name, bindingType, loc);
      if (bindingType & 2) {
        if (!(bindingType & 1)) {
          this.checkRedeclarationInScope(scope2, name, bindingType, loc);
          this.maybeExportDefined(scope2, name);
        }
        type = type | 1;
      }
      if (bindingType & 256) {
        type = type | 2;
      }
      if (bindingType & 512) {
        type = type | 4;
      }
      if (bindingType & 128) {
        type = type | 8;
      }
      if (type) scope2.tsNames.set(name, type);
    }
    isRedeclaredInScope(scope2, name, bindingType) {
      const type = scope2.tsNames.get(name);
      if ((type & 2) > 0) {
        if (bindingType & 256) {
          const isConst = !!(bindingType & 512);
          const wasConst = (type & 4) > 0;
          return isConst !== wasConst;
        }
        return true;
      }
      if (bindingType & 128 && (type & 8) > 0) {
        if (scope2.names.get(name) & 2) {
          return !!(bindingType & 1);
        } else {
          return false;
        }
      }
      if (bindingType & 2 && (type & 1) > 0) {
        return true;
      }
      return super.isRedeclaredInScope(scope2, name, bindingType);
    }
    checkLocalExport(id) {
      const {
        name
      } = id;
      if (this.hasImport(name)) return;
      const len = this.scopeStack.length;
      for (let i = len - 1; i >= 0; i--) {
        const scope2 = this.scopeStack[i];
        const type = scope2.tsNames.get(name);
        if ((type & 1) > 0 || (type & 16) > 0) {
          return;
        }
      }
      super.checkLocalExport(id);
    }
  }
  class ProductionParameterHandler {
    constructor() {
      this.stacks = [];
    }
    enter(flags) {
      this.stacks.push(flags);
    }
    exit() {
      this.stacks.pop();
    }
    currentFlags() {
      return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
      return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
      return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
      return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
      return (this.currentFlags() & 8) > 0;
    }
  }
  function functionFlags(isAsync, isGenerator) {
    return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
  }
  class BaseParser {
    constructor() {
      this.sawUnambiguousESM = false;
      this.ambiguousScriptDifferentAst = false;
    }
    sourceToOffsetPos(sourcePos) {
      return sourcePos + this.startIndex;
    }
    offsetToSourcePos(offsetPos) {
      return offsetPos - this.startIndex;
    }
    hasPlugin(pluginConfig) {
      if (typeof pluginConfig === "string") {
        return this.plugins.has(pluginConfig);
      } else {
        const [pluginName, pluginOptions] = pluginConfig;
        if (!this.hasPlugin(pluginName)) {
          return false;
        }
        const actualOptions = this.plugins.get(pluginName);
        for (const key of Object.keys(pluginOptions)) {
          if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
            return false;
          }
        }
        return true;
      }
    }
    getPluginOption(plugin2, name) {
      var _this$plugins$get;
      return (_this$plugins$get = this.plugins.get(plugin2)) == null ? void 0 : _this$plugins$get[name];
    }
  }
  function setTrailingComments(node2, comments2) {
    if (node2.trailingComments === void 0) {
      node2.trailingComments = comments2;
    } else {
      node2.trailingComments.unshift(...comments2);
    }
  }
  function setLeadingComments(node2, comments2) {
    if (node2.leadingComments === void 0) {
      node2.leadingComments = comments2;
    } else {
      node2.leadingComments.unshift(...comments2);
    }
  }
  function setInnerComments(node2, comments2) {
    if (node2.innerComments === void 0) {
      node2.innerComments = comments2;
    } else {
      node2.innerComments.unshift(...comments2);
    }
  }
  function adjustInnerComments(node2, elements, commentWS) {
    let lastElement = null;
    let i = elements.length;
    while (lastElement === null && i > 0) {
      lastElement = elements[--i];
    }
    if (lastElement === null || lastElement.start > commentWS.start) {
      setInnerComments(node2, commentWS.comments);
    } else {
      setTrailingComments(lastElement, commentWS.comments);
    }
  }
  class CommentsParser extends BaseParser {
    addComment(comment) {
      if (this.filename) comment.loc.filename = this.filename;
      const {
        commentsLen
      } = this.state;
      if (this.comments.length !== commentsLen) {
        this.comments.length = commentsLen;
      }
      this.comments.push(comment);
      this.state.commentsLen++;
    }
    processComment(node2) {
      const {
        commentStack
      } = this.state;
      const commentStackLength = commentStack.length;
      if (commentStackLength === 0) return;
      let i = commentStackLength - 1;
      const lastCommentWS = commentStack[i];
      if (lastCommentWS.start === node2.end) {
        lastCommentWS.leadingNode = node2;
        i--;
      }
      const {
        start: nodeStart
      } = node2;
      for (; i >= 0; i--) {
        const commentWS = commentStack[i];
        const commentEnd = commentWS.end;
        if (commentEnd > nodeStart) {
          commentWS.containingNode = node2;
          this.finalizeComment(commentWS);
          commentStack.splice(i, 1);
        } else {
          if (commentEnd === nodeStart) {
            commentWS.trailingNode = node2;
          }
          break;
        }
      }
    }
    finalizeComment(commentWS) {
      var _node$options;
      const {
        comments: comments2
      } = commentWS;
      if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
        if (commentWS.leadingNode !== null) {
          setTrailingComments(commentWS.leadingNode, comments2);
        }
        if (commentWS.trailingNode !== null) {
          setLeadingComments(commentWS.trailingNode, comments2);
        }
      } else {
        const {
          containingNode: node2,
          start: commentStart
        } = commentWS;
        if (this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) === 44) {
          switch (node2.type) {
            case "ObjectExpression":
            case "ObjectPattern":
            case "RecordExpression":
              adjustInnerComments(node2, node2.properties, commentWS);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
              adjustInnerComments(node2, node2.arguments, commentWS);
              break;
            case "ImportExpression":
              adjustInnerComments(node2, [node2.source, (_node$options = node2.options) != null ? _node$options : null], commentWS);
              break;
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ArrowFunctionExpression":
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              adjustInnerComments(node2, node2.params, commentWS);
              break;
            case "ArrayExpression":
            case "ArrayPattern":
            case "TupleExpression":
              adjustInnerComments(node2, node2.elements, commentWS);
              break;
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              adjustInnerComments(node2, node2.specifiers, commentWS);
              break;
            case "TSEnumDeclaration":
              {
                adjustInnerComments(node2, node2.members, commentWS);
              }
              break;
            case "TSEnumBody":
              adjustInnerComments(node2, node2.members, commentWS);
              break;
            default: {
              setInnerComments(node2, comments2);
            }
          }
        } else {
          setInnerComments(node2, comments2);
        }
      }
    }
    finalizeRemainingComments() {
      const {
        commentStack
      } = this.state;
      for (let i = commentStack.length - 1; i >= 0; i--) {
        this.finalizeComment(commentStack[i]);
      }
      this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(node2) {
      const {
        commentStack
      } = this.state;
      const {
        length
      } = commentStack;
      if (length === 0) return;
      const commentWS = commentStack[length - 1];
      if (commentWS.leadingNode === node2) {
        commentWS.leadingNode = null;
      }
    }
    takeSurroundingComments(node2, start, end) {
      const {
        commentStack
      } = this.state;
      const commentStackLength = commentStack.length;
      if (commentStackLength === 0) return;
      let i = commentStackLength - 1;
      for (; i >= 0; i--) {
        const commentWS = commentStack[i];
        const commentEnd = commentWS.end;
        const commentStart = commentWS.start;
        if (commentStart === end) {
          commentWS.leadingNode = node2;
        } else if (commentEnd === start) {
          commentWS.trailingNode = node2;
        } else if (commentEnd < start) {
          break;
        }
      }
    }
  }
  class State {
    constructor() {
      this.flags = 1024;
      this.startIndex = void 0;
      this.curLine = void 0;
      this.lineStart = void 0;
      this.startLoc = void 0;
      this.endLoc = void 0;
      this.errors = [];
      this.potentialArrowAt = -1;
      this.noArrowAt = [];
      this.noArrowParamsConversionAt = [];
      this.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      };
      this.labels = [];
      this.commentsLen = 0;
      this.commentStack = [];
      this.pos = 0;
      this.type = 140;
      this.value = null;
      this.start = 0;
      this.end = 0;
      this.lastTokEndLoc = null;
      this.lastTokStartLoc = null;
      this.context = [types2.brace];
      this.firstInvalidTemplateEscapePos = null;
      this.strictErrors = /* @__PURE__ */ new Map();
      this.tokensLength = 0;
    }
    get strict() {
      return (this.flags & 1) > 0;
    }
    set strict(v) {
      if (v) this.flags |= 1;
      else this.flags &= -2;
    }
    init({
      strictMode,
      sourceType,
      startIndex,
      startLine,
      startColumn
    }) {
      this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
      this.startIndex = startIndex;
      this.curLine = startLine;
      this.lineStart = -startColumn;
      this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);
    }
    get maybeInArrowParameters() {
      return (this.flags & 2) > 0;
    }
    set maybeInArrowParameters(v) {
      if (v) this.flags |= 2;
      else this.flags &= -3;
    }
    get inType() {
      return (this.flags & 4) > 0;
    }
    set inType(v) {
      if (v) this.flags |= 4;
      else this.flags &= -5;
    }
    get noAnonFunctionType() {
      return (this.flags & 8) > 0;
    }
    set noAnonFunctionType(v) {
      if (v) this.flags |= 8;
      else this.flags &= -9;
    }
    get hasFlowComment() {
      return (this.flags & 16) > 0;
    }
    set hasFlowComment(v) {
      if (v) this.flags |= 16;
      else this.flags &= -17;
    }
    get isAmbientContext() {
      return (this.flags & 32) > 0;
    }
    set isAmbientContext(v) {
      if (v) this.flags |= 32;
      else this.flags &= -33;
    }
    get inAbstractClass() {
      return (this.flags & 64) > 0;
    }
    set inAbstractClass(v) {
      if (v) this.flags |= 64;
      else this.flags &= -65;
    }
    get inDisallowConditionalTypesContext() {
      return (this.flags & 128) > 0;
    }
    set inDisallowConditionalTypesContext(v) {
      if (v) this.flags |= 128;
      else this.flags &= -129;
    }
    get soloAwait() {
      return (this.flags & 256) > 0;
    }
    set soloAwait(v) {
      if (v) this.flags |= 256;
      else this.flags &= -257;
    }
    get inFSharpPipelineDirectBody() {
      return (this.flags & 512) > 0;
    }
    set inFSharpPipelineDirectBody(v) {
      if (v) this.flags |= 512;
      else this.flags &= -513;
    }
    get canStartJSXElement() {
      return (this.flags & 1024) > 0;
    }
    set canStartJSXElement(v) {
      if (v) this.flags |= 1024;
      else this.flags &= -1025;
    }
    get containsEsc() {
      return (this.flags & 2048) > 0;
    }
    set containsEsc(v) {
      if (v) this.flags |= 2048;
      else this.flags &= -2049;
    }
    get hasTopLevelAwait() {
      return (this.flags & 4096) > 0;
    }
    set hasTopLevelAwait(v) {
      if (v) this.flags |= 4096;
      else this.flags &= -4097;
    }
    curPosition() {
      return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
    }
    clone() {
      const state = new State();
      state.flags = this.flags;
      state.startIndex = this.startIndex;
      state.curLine = this.curLine;
      state.lineStart = this.lineStart;
      state.startLoc = this.startLoc;
      state.endLoc = this.endLoc;
      state.errors = this.errors.slice();
      state.potentialArrowAt = this.potentialArrowAt;
      state.noArrowAt = this.noArrowAt.slice();
      state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();
      state.topicContext = this.topicContext;
      state.labels = this.labels.slice();
      state.commentsLen = this.commentsLen;
      state.commentStack = this.commentStack.slice();
      state.pos = this.pos;
      state.type = this.type;
      state.value = this.value;
      state.start = this.start;
      state.end = this.end;
      state.lastTokEndLoc = this.lastTokEndLoc;
      state.lastTokStartLoc = this.lastTokStartLoc;
      state.context = this.context.slice();
      state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;
      state.strictErrors = this.strictErrors;
      state.tokensLength = this.tokensLength;
      return state;
    }
  }
  var _isDigit = function isDigit(code2) {
    return code2 >= 48 && code2 <= 57;
  };
  const forbiddenNumericSeparatorSiblings = {
    decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
  };
  const isAllowedNumericSeparatorSibling = {
    bin: (ch) => ch === 48 || ch === 49,
    oct: (ch) => ch >= 48 && ch <= 55,
    dec: (ch) => ch >= 48 && ch <= 57,
    hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
  };
  function readStringContents(type, input, pos, lineStart, curLine, errors) {
    const initialPos = pos;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos;
    const {
      length
    } = input;
    for (; ; ) {
      if (pos >= length) {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
        out += input.slice(chunkStart, pos);
        break;
      }
      const ch = input.charCodeAt(pos);
      if (isStringEnd(type, ch, input, pos)) {
        out += input.slice(chunkStart, pos);
        break;
      }
      if (ch === 92) {
        out += input.slice(chunkStart, pos);
        const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
        if (res.ch === null && !firstInvalidLoc) {
          firstInvalidLoc = {
            pos,
            lineStart,
            curLine
          };
        } else {
          out += res.ch;
        }
        ({
          pos,
          lineStart,
          curLine
        } = res);
        chunkStart = pos;
      } else if (ch === 8232 || ch === 8233) {
        ++pos;
        ++curLine;
        lineStart = pos;
      } else if (ch === 10 || ch === 13) {
        if (type === "template") {
          out += input.slice(chunkStart, pos) + "\n";
          ++pos;
          if (ch === 13 && input.charCodeAt(pos) === 10) {
            ++pos;
          }
          ++curLine;
          chunkStart = lineStart = pos;
        } else {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
        }
      } else {
        ++pos;
      }
    }
    return {
      pos,
      str: out,
      firstInvalidLoc,
      lineStart,
      curLine,
      containsInvalid: !!firstInvalidLoc
    };
  }
  function isStringEnd(type, ch, input, pos) {
    if (type === "template") {
      return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
  }
  function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos++;
    const res = (ch2) => ({
      pos,
      ch: ch2,
      lineStart,
      curLine
    });
    const ch = input.charCodeAt(pos++);
    switch (ch) {
      case 110:
        return res("\n");
      case 114:
        return res("\r");
      case 120: {
        let code2;
        ({
          code: code2,
          pos
        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
        return res(code2 === null ? null : String.fromCharCode(code2));
      }
      case 117: {
        let code2;
        ({
          code: code2,
          pos
        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
        return res(code2 === null ? null : String.fromCodePoint(code2));
      }
      case 116:
        return res("	");
      case 98:
        return res("\b");
      case 118:
        return res("\v");
      case 102:
        return res("\f");
      case 13:
        if (input.charCodeAt(pos) === 10) {
          ++pos;
        }
      case 10:
        lineStart = pos;
        ++curLine;
      case 8232:
      case 8233:
        return res("");
      case 56:
      case 57:
        if (inTemplate) {
          return res(null);
        } else {
          errors.strictNumericEscape(pos - 1, lineStart, curLine);
        }
      default:
        if (ch >= 48 && ch <= 55) {
          const startPos = pos - 1;
          const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          pos += octalStr.length - 1;
          const next = input.charCodeAt(pos);
          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(startPos, lineStart, curLine);
            }
          }
          return res(String.fromCharCode(octal));
        }
        return res(String.fromCharCode(ch));
    }
  }
  function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos;
    let n;
    ({
      n,
      pos
    } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
      if (throwOnInvalid) {
        errors.invalidEscapeSequence(initialPos, lineStart, curLine);
      } else {
        pos = initialPos - 1;
      }
    }
    return {
      code: n,
      pos
    };
  }
  function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code2 = input.charCodeAt(pos);
      let val;
      if (code2 === 95 && allowNumSeparator !== "bail") {
        const prev = input.charCodeAt(pos - 1);
        const next = input.charCodeAt(pos + 1);
        if (!allowNumSeparator) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.unexpectedNumericSeparator(pos, lineStart, curLine);
        }
        ++pos;
        continue;
      }
      if (code2 >= 97) {
        val = code2 - 97 + 10;
      } else if (code2 >= 65) {
        val = code2 - 65 + 10;
      } else if (_isDigit(code2)) {
        val = code2 - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        if (val <= 9 && bailOnError) {
          return {
            n: null,
            pos
          };
        } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
          val = 0;
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }
      ++pos;
      total = total * radix + val;
    }
    if (pos === start || len != null && pos - start !== len || invalid) {
      return {
        n: null,
        pos
      };
    }
    return {
      n: total,
      pos
    };
  }
  function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input.charCodeAt(pos);
    let code2;
    if (ch === 123) {
      ++pos;
      ({
        code: code2,
        pos
      } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
      ++pos;
      if (code2 !== null && code2 > 1114111) {
        if (throwOnInvalid) {
          errors.invalidCodePoint(pos, lineStart, curLine);
        } else {
          return {
            code: null,
            pos
          };
        }
      }
    } else {
      ({
        code: code2,
        pos
      } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
      code: code2,
      pos
    };
  }
  function buildPosition(pos, lineStart, curLine) {
    return new Position(curLine, pos - lineStart, pos);
  }
  const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
  class Token {
    constructor(state) {
      const startIndex = state.startIndex || 0;
      this.type = state.type;
      this.value = state.value;
      this.start = startIndex + state.start;
      this.end = startIndex + state.end;
      this.loc = new SourceLocation(state.startLoc, state.endLoc);
    }
  }
  class Tokenizer extends CommentsParser {
    constructor(options2, input) {
      super();
      this.isLookahead = void 0;
      this.tokens = [];
      this.errorHandlers_readInt = {
        invalidDigit: (pos, lineStart, curLine, radix) => {
          if (!(this.optionFlags & 2048)) return false;
          this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {
            radix
          });
          return true;
        },
        numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
        unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
      };
      this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
        invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
        invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
      });
      this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: (pos, lineStart, curLine) => {
          this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
        },
        unterminated: (pos, lineStart, curLine) => {
          throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
        }
      });
      this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
        unterminated: (pos, lineStart, curLine) => {
          throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
        }
      });
      this.state = new State();
      this.state.init(options2);
      this.input = input;
      this.length = input.length;
      this.comments = [];
      this.isLookahead = false;
    }
    pushToken(token) {
      this.tokens.length = this.state.tokensLength;
      this.tokens.push(token);
      ++this.state.tokensLength;
    }
    next() {
      this.checkKeywordEscapes();
      if (this.optionFlags & 256) {
        this.pushToken(new Token(this.state));
      }
      this.state.lastTokEndLoc = this.state.endLoc;
      this.state.lastTokStartLoc = this.state.startLoc;
      this.nextToken();
    }
    eat(type) {
      if (this.match(type)) {
        this.next();
        return true;
      } else {
        return false;
      }
    }
    match(type) {
      return this.state.type === type;
    }
    createLookaheadState(state) {
      return {
        pos: state.pos,
        value: null,
        type: state.type,
        start: state.start,
        end: state.end,
        context: [this.curContext()],
        inType: state.inType,
        startLoc: state.startLoc,
        lastTokEndLoc: state.lastTokEndLoc,
        curLine: state.curLine,
        lineStart: state.lineStart,
        curPosition: state.curPosition
      };
    }
    lookahead() {
      const old = this.state;
      this.state = this.createLookaheadState(old);
      this.isLookahead = true;
      this.nextToken();
      this.isLookahead = false;
      const curr = this.state;
      this.state = old;
      return curr;
    }
    nextTokenStart() {
      return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(pos) {
      skipWhiteSpace.lastIndex = pos;
      return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
    }
    lookaheadCharCode() {
      return this.lookaheadCharCodeSince(this.state.pos);
    }
    lookaheadCharCodeSince(pos) {
      return this.input.charCodeAt(this.nextTokenStartSince(pos));
    }
    nextTokenInLineStart() {
      return this.nextTokenInLineStartSince(this.state.pos);
    }
    nextTokenInLineStartSince(pos) {
      skipWhiteSpaceInLine.lastIndex = pos;
      return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
    }
    lookaheadInLineCharCode() {
      return this.input.charCodeAt(this.nextTokenInLineStart());
    }
    codePointAtPos(pos) {
      let cp = this.input.charCodeAt(pos);
      if ((cp & 64512) === 55296 && ++pos < this.input.length) {
        const trail = this.input.charCodeAt(pos);
        if ((trail & 64512) === 56320) {
          cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
      }
      return cp;
    }
    setStrict(strict) {
      this.state.strict = strict;
      if (strict) {
        this.state.strictErrors.forEach(([toParseError, at2]) => this.raise(toParseError, at2));
        this.state.strictErrors.clear();
      }
    }
    curContext() {
      return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
      this.skipSpace();
      this.state.start = this.state.pos;
      if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
      if (this.state.pos >= this.length) {
        this.finishToken(140);
        return;
      }
      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment(commentEnd) {
      let startLoc;
      if (!this.isLookahead) startLoc = this.state.curPosition();
      const start = this.state.pos;
      const end = this.input.indexOf(commentEnd, start + 2);
      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
      }
      this.state.pos = end + commentEnd.length;
      lineBreakG.lastIndex = start + 2;
      while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
        ++this.state.curLine;
        this.state.lineStart = lineBreakG.lastIndex;
      }
      if (this.isLookahead) return;
      const comment = {
        type: "CommentBlock",
        value: this.input.slice(start + 2, end),
        start: this.sourceToOffsetPos(start),
        end: this.sourceToOffsetPos(end + commentEnd.length),
        loc: new SourceLocation(startLoc, this.state.curPosition())
      };
      if (this.optionFlags & 256) this.pushToken(comment);
      return comment;
    }
    skipLineComment(startSkip) {
      const start = this.state.pos;
      let startLoc;
      if (!this.isLookahead) startLoc = this.state.curPosition();
      let ch = this.input.charCodeAt(this.state.pos += startSkip);
      if (this.state.pos < this.length) {
        while (!isNewLine(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }
      }
      if (this.isLookahead) return;
      const end = this.state.pos;
      const value2 = this.input.slice(start + startSkip, end);
      const comment = {
        type: "CommentLine",
        value: value2,
        start: this.sourceToOffsetPos(start),
        end: this.sourceToOffsetPos(end),
        loc: new SourceLocation(startLoc, this.state.curPosition())
      };
      if (this.optionFlags & 256) this.pushToken(comment);
      return comment;
    }
    skipSpace() {
      const spaceStart = this.state.pos;
      const comments2 = this.optionFlags & 4096 ? [] : null;
      loop: while (this.state.pos < this.length) {
        const ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 32:
          case 160:
          case 9:
            ++this.state.pos;
            break;
          case 13:
            if (this.input.charCodeAt(this.state.pos + 1) === 10) {
              ++this.state.pos;
            }
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos;
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            break;
          case 47:
            switch (this.input.charCodeAt(this.state.pos + 1)) {
              case 42: {
                const comment = this.skipBlockComment("*/");
                if (comment !== void 0) {
                  this.addComment(comment);
                  comments2 == null || comments2.push(comment);
                }
                break;
              }
              case 47: {
                const comment = this.skipLineComment(2);
                if (comment !== void 0) {
                  this.addComment(comment);
                  comments2 == null || comments2.push(comment);
                }
                break;
              }
              default:
                break loop;
            }
            break;
          default:
            if (isWhitespace(ch)) {
              ++this.state.pos;
            } else if (ch === 45 && !this.inModule && this.optionFlags & 8192) {
              const pos = this.state.pos;
              if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                const comment = this.skipLineComment(3);
                if (comment !== void 0) {
                  this.addComment(comment);
                  comments2 == null || comments2.push(comment);
                }
              } else {
                break loop;
              }
            } else if (ch === 60 && !this.inModule && this.optionFlags & 8192) {
              const pos = this.state.pos;
              if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                const comment = this.skipLineComment(4);
                if (comment !== void 0) {
                  this.addComment(comment);
                  comments2 == null || comments2.push(comment);
                }
              } else {
                break loop;
              }
            } else {
              break loop;
            }
        }
      }
      if ((comments2 == null ? void 0 : comments2.length) > 0) {
        const end = this.state.pos;
        const commentWhitespace = {
          start: this.sourceToOffsetPos(spaceStart),
          end: this.sourceToOffsetPos(end),
          comments: comments2,
          leadingNode: null,
          trailingNode: null,
          containingNode: null
        };
        this.state.commentStack.push(commentWhitespace);
      }
    }
    finishToken(type, val) {
      this.state.end = this.state.pos;
      this.state.endLoc = this.state.curPosition();
      const prevType = this.state.type;
      this.state.type = type;
      this.state.value = val;
      if (!this.isLookahead) {
        this.updateContext(prevType);
      }
    }
    replaceToken(type) {
      this.state.type = type;
      this.updateContext();
    }
    readToken_numberSign() {
      if (this.state.pos === 0 && this.readToken_interpreter()) {
        return;
      }
      const nextPos = this.state.pos + 1;
      const next = this.codePointAtPos(nextPos);
      if (next >= 48 && next <= 57) {
        throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
      }
      if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
        this.expectPlugin("recordAndTuple");
        if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
          throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
        }
        this.state.pos += 2;
        if (next === 123) {
          this.finishToken(7);
        } else {
          this.finishToken(1);
        }
      } else if (isIdentifierStart(next)) {
        ++this.state.pos;
        this.finishToken(139, this.readWord1(next));
      } else if (next === 92) {
        ++this.state.pos;
        this.finishToken(139, this.readWord1());
      } else {
        this.finishOp(27, 1);
      }
    }
    readToken_dot() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next >= 48 && next <= 57) {
        this.readNumber(true);
        return;
      }
      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
        this.state.pos += 3;
        this.finishToken(21);
      } else {
        ++this.state.pos;
        this.finishToken(16);
      }
    }
    readToken_slash() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61) {
        this.finishOp(31, 2);
      } else {
        this.finishOp(56, 1);
      }
    }
    readToken_interpreter() {
      if (this.state.pos !== 0 || this.length < 2) return false;
      let ch = this.input.charCodeAt(this.state.pos + 1);
      if (ch !== 33) return false;
      const start = this.state.pos;
      this.state.pos += 1;
      while (!isNewLine(ch) && ++this.state.pos < this.length) {
        ch = this.input.charCodeAt(this.state.pos);
      }
      const value2 = this.input.slice(start + 2, this.state.pos);
      this.finishToken(28, value2);
      return true;
    }
    readToken_mult_modulo(code2) {
      let type = code2 === 42 ? 55 : 54;
      let width = 1;
      let next = this.input.charCodeAt(this.state.pos + 1);
      if (code2 === 42 && next === 42) {
        width++;
        next = this.input.charCodeAt(this.state.pos + 2);
        type = 57;
      }
      if (next === 61 && !this.state.inType) {
        width++;
        type = code2 === 37 ? 33 : 30;
      }
      this.finishOp(type, width);
    }
    readToken_pipe_amp(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === code2) {
        if (this.input.charCodeAt(this.state.pos + 2) === 61) {
          this.finishOp(30, 3);
        } else {
          this.finishOp(code2 === 124 ? 41 : 42, 2);
        }
        return;
      }
      if (code2 === 124) {
        if (next === 62) {
          this.finishOp(39, 2);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && next === 125) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          }
          this.state.pos += 2;
          this.finishToken(9);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && next === 93) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          }
          this.state.pos += 2;
          this.finishToken(4);
          return;
        }
      }
      if (next === 61) {
        this.finishOp(30, 2);
        return;
      }
      this.finishOp(code2 === 124 ? 43 : 45, 1);
    }
    readToken_caret() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61 && !this.state.inType) {
        this.finishOp(32, 2);
      } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "^^"
      }])) {
        this.finishOp(37, 2);
        const lookaheadCh = this.input.codePointAt(this.state.pos);
        if (lookaheadCh === 94) {
          this.unexpected();
        }
      } else {
        this.finishOp(44, 1);
      }
    }
    readToken_atSign() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 64 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "@@"
      }])) {
        this.finishOp(38, 2);
      } else {
        this.finishOp(26, 1);
      }
    }
    readToken_plus_min(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === code2) {
        this.finishOp(34, 2);
        return;
      }
      if (next === 61) {
        this.finishOp(30, 2);
      } else {
        this.finishOp(53, 1);
      }
    }
    readToken_lt() {
      const {
        pos
      } = this.state;
      const next = this.input.charCodeAt(pos + 1);
      if (next === 60) {
        if (this.input.charCodeAt(pos + 2) === 61) {
          this.finishOp(30, 3);
          return;
        }
        this.finishOp(51, 2);
        return;
      }
      if (next === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(47, 1);
    }
    readToken_gt() {
      const {
        pos
      } = this.state;
      const next = this.input.charCodeAt(pos + 1);
      if (next === 62) {
        const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(pos + size) === 61) {
          this.finishOp(30, size + 1);
          return;
        }
        this.finishOp(52, size);
        return;
      }
      if (next === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(48, 1);
    }
    readToken_eq_excl(code2) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61) {
        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        return;
      }
      if (code2 === 61 && next === 62) {
        this.state.pos += 2;
        this.finishToken(19);
        return;
      }
      this.finishOp(code2 === 61 ? 29 : 35, 1);
    }
    readToken_question() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      const next2 = this.input.charCodeAt(this.state.pos + 2);
      if (next === 63) {
        if (next2 === 61) {
          this.finishOp(30, 3);
        } else {
          this.finishOp(40, 2);
        }
      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
        this.state.pos += 2;
        this.finishToken(18);
      } else {
        ++this.state.pos;
        this.finishToken(17);
      }
    }
    getTokenFromCode(code2) {
      switch (code2) {
        case 46:
          this.readToken_dot();
          return;
        case 40:
          ++this.state.pos;
          this.finishToken(10);
          return;
        case 41:
          ++this.state.pos;
          this.finishToken(11);
          return;
        case 59:
          ++this.state.pos;
          this.finishToken(13);
          return;
        case 44:
          ++this.state.pos;
          this.finishToken(12);
          return;
        case 91:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            this.finishToken(2);
          } else {
            ++this.state.pos;
            this.finishToken(0);
          }
          return;
        case 93:
          ++this.state.pos;
          this.finishToken(3);
          return;
        case 123:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            this.finishToken(6);
          } else {
            ++this.state.pos;
            this.finishToken(5);
          }
          return;
        case 125:
          ++this.state.pos;
          this.finishToken(8);
          return;
        case 58:
          if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
            this.finishOp(15, 2);
          } else {
            ++this.state.pos;
            this.finishToken(14);
          }
          return;
        case 63:
          this.readToken_question();
          return;
        case 96:
          this.readTemplateToken();
          return;
        case 48: {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 120 || next === 88) {
            this.readRadixNumber(16);
            return;
          }
          if (next === 111 || next === 79) {
            this.readRadixNumber(8);
            return;
          }
          if (next === 98 || next === 66) {
            this.readRadixNumber(2);
            return;
          }
        }
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          this.readNumber(false);
          return;
        case 34:
        case 39:
          this.readString(code2);
          return;
        case 47:
          this.readToken_slash();
          return;
        case 37:
        case 42:
          this.readToken_mult_modulo(code2);
          return;
        case 124:
        case 38:
          this.readToken_pipe_amp(code2);
          return;
        case 94:
          this.readToken_caret();
          return;
        case 43:
        case 45:
          this.readToken_plus_min(code2);
          return;
        case 60:
          this.readToken_lt();
          return;
        case 62:
          this.readToken_gt();
          return;
        case 61:
        case 33:
          this.readToken_eq_excl(code2);
          return;
        case 126:
          this.finishOp(36, 1);
          return;
        case 64:
          this.readToken_atSign();
          return;
        case 35:
          this.readToken_numberSign();
          return;
        case 92:
          this.readWord();
          return;
        default:
          if (isIdentifierStart(code2)) {
            this.readWord(code2);
            return;
          }
      }
      throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {
        unexpected: String.fromCodePoint(code2)
      });
    }
    finishOp(type, size) {
      const str = this.input.slice(this.state.pos, this.state.pos + size);
      this.state.pos += size;
      this.finishToken(type, str);
    }
    readRegexp() {
      const startLoc = this.state.startLoc;
      const start = this.state.start + 1;
      let escaped, inClass;
      let {
        pos
      } = this.state;
      for (; ; ++pos) {
        if (pos >= this.length) {
          throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
        }
        const ch = this.input.charCodeAt(pos);
        if (isNewLine(ch)) {
          throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
        }
        if (escaped) {
          escaped = false;
        } else {
          if (ch === 91) {
            inClass = true;
          } else if (ch === 93 && inClass) {
            inClass = false;
          } else if (ch === 47 && !inClass) {
            break;
          }
          escaped = ch === 92;
        }
      }
      const content = this.input.slice(start, pos);
      ++pos;
      let mods = "";
      const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
      while (pos < this.length) {
        const cp = this.codePointAtPos(pos);
        const char = String.fromCharCode(cp);
        if (VALID_REGEX_FLAGS.has(cp)) {
          if (cp === 118) {
            if (mods.includes("u")) {
              this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
            }
          } else if (cp === 117) {
            if (mods.includes("v")) {
              this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
            }
          }
          if (mods.includes(char)) {
            this.raise(Errors.DuplicateRegExpFlags, nextPos());
          }
        } else if (isIdentifierChar(cp) || cp === 92) {
          this.raise(Errors.MalformedRegExpFlags, nextPos());
        } else {
          break;
        }
        ++pos;
        mods += char;
      }
      this.state.pos = pos;
      this.finishToken(138, {
        pattern: content,
        flags: mods
      });
    }
    readInt(radix, len, forceLen = false, allowNumSeparator = true) {
      const {
        n,
        pos
      } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
      this.state.pos = pos;
      return n;
    }
    readRadixNumber(radix) {
      const start = this.state.pos;
      const startLoc = this.state.curPosition();
      let isBigInt = false;
      this.state.pos += 2;
      const val = this.readInt(radix);
      if (val == null) {
        this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {
          radix
        });
      }
      const next = this.input.charCodeAt(this.state.pos);
      if (next === 110) {
        ++this.state.pos;
        isBigInt = true;
      } else if (next === 109) {
        throw this.raise(Errors.InvalidDecimal, startLoc);
      }
      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
        throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
      }
      if (isBigInt) {
        const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
        this.finishToken(136, str);
        return;
      }
      this.finishToken(135, val);
    }
    readNumber(startsWithDot) {
      const start = this.state.pos;
      const startLoc = this.state.curPosition();
      let isFloat = false;
      let isBigInt = false;
      let hasExponent = false;
      let isOctal = false;
      if (!startsWithDot && this.readInt(10) === null) {
        this.raise(Errors.InvalidNumber, this.state.curPosition());
      }
      const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
      if (hasLeadingZero) {
        const integer = this.input.slice(start, this.state.pos);
        this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);
        if (!this.state.strict) {
          const underscorePos = integer.indexOf("_");
          if (underscorePos > 0) {
            this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
          }
        }
        isOctal = hasLeadingZero && !/[89]/.test(integer);
      }
      let next = this.input.charCodeAt(this.state.pos);
      if (next === 46 && !isOctal) {
        ++this.state.pos;
        this.readInt(10);
        isFloat = true;
        next = this.input.charCodeAt(this.state.pos);
      }
      if ((next === 69 || next === 101) && !isOctal) {
        next = this.input.charCodeAt(++this.state.pos);
        if (next === 43 || next === 45) {
          ++this.state.pos;
        }
        if (this.readInt(10) === null) {
          this.raise(Errors.InvalidOrMissingExponent, startLoc);
        }
        isFloat = true;
        hasExponent = true;
        next = this.input.charCodeAt(this.state.pos);
      }
      if (next === 110) {
        if (isFloat || hasLeadingZero) {
          this.raise(Errors.InvalidBigIntLiteral, startLoc);
        }
        ++this.state.pos;
        isBigInt = true;
      }
      if (next === 109) {
        this.expectPlugin("decimal", this.state.curPosition());
        if (hasExponent || hasLeadingZero) {
          this.raise(Errors.InvalidDecimal, startLoc);
        }
        ++this.state.pos;
        var isDecimal = true;
      }
      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
        throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
      }
      const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
      if (isBigInt) {
        this.finishToken(136, str);
        return;
      }
      if (isDecimal) {
        this.finishToken(137, str);
        return;
      }
      const val = isOctal ? parseInt(str, 8) : parseFloat(str);
      this.finishToken(135, val);
    }
    readCodePoint(throwOnInvalid) {
      const {
        code: code2,
        pos
      } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
      this.state.pos = pos;
      return code2;
    }
    readString(quote) {
      const {
        str,
        pos,
        curLine,
        lineStart
      } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
      this.state.pos = pos + 1;
      this.state.lineStart = lineStart;
      this.state.curLine = curLine;
      this.finishToken(134, str);
    }
    readTemplateContinuation() {
      if (!this.match(8)) {
        this.unexpected(null, 8);
      }
      this.state.pos--;
      this.readTemplateToken();
    }
    readTemplateToken() {
      const opening = this.input[this.state.pos];
      const {
        str,
        firstInvalidLoc,
        pos,
        curLine,
        lineStart
      } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
      this.state.pos = pos + 1;
      this.state.lineStart = lineStart;
      this.state.curLine = curLine;
      if (firstInvalidLoc) {
        this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos));
      }
      if (this.input.codePointAt(pos) === 96) {
        this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
      } else {
        this.state.pos++;
        this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
      }
    }
    recordStrictModeErrors(toParseError, at2) {
      const index = at2.index;
      if (this.state.strict && !this.state.strictErrors.has(index)) {
        this.raise(toParseError, at2);
      } else {
        this.state.strictErrors.set(index, [toParseError, at2]);
      }
    }
    readWord1(firstCode) {
      this.state.containsEsc = false;
      let word = "";
      const start = this.state.pos;
      let chunkStart = this.state.pos;
      if (firstCode !== void 0) {
        this.state.pos += firstCode <= 65535 ? 1 : 2;
      }
      while (this.state.pos < this.length) {
        const ch = this.codePointAtPos(this.state.pos);
        if (isIdentifierChar(ch)) {
          this.state.pos += ch <= 65535 ? 1 : 2;
        } else if (ch === 92) {
          this.state.containsEsc = true;
          word += this.input.slice(chunkStart, this.state.pos);
          const escStart = this.state.curPosition();
          const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
          if (this.input.charCodeAt(++this.state.pos) !== 117) {
            this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());
            chunkStart = this.state.pos - 1;
            continue;
          }
          ++this.state.pos;
          const esc = this.readCodePoint(true);
          if (esc !== null) {
            if (!identifierCheck(esc)) {
              this.raise(Errors.EscapedCharNotAnIdentifier, escStart);
            }
            word += String.fromCodePoint(esc);
          }
          chunkStart = this.state.pos;
        } else {
          break;
        }
      }
      return word + this.input.slice(chunkStart, this.state.pos);
    }
    readWord(firstCode) {
      const word = this.readWord1(firstCode);
      const type = keywords$1.get(word);
      if (type !== void 0) {
        this.finishToken(type, tokenLabelName(type));
      } else {
        this.finishToken(132, word);
      }
    }
    checkKeywordEscapes() {
      const {
        type
      } = this.state;
      if (tokenIsKeyword(type) && this.state.containsEsc) {
        this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {
          reservedWord: tokenLabelName(type)
        });
      }
    }
    raise(toParseError, at2, details = {}) {
      const loc = at2 instanceof Position ? at2 : at2.loc.start;
      const error2 = toParseError(loc, details);
      if (!(this.optionFlags & 2048)) throw error2;
      if (!this.isLookahead) this.state.errors.push(error2);
      return error2;
    }
    raiseOverwrite(toParseError, at2, details = {}) {
      const loc = at2 instanceof Position ? at2 : at2.loc.start;
      const pos = loc.index;
      const errors = this.state.errors;
      for (let i = errors.length - 1; i >= 0; i--) {
        const error2 = errors[i];
        if (error2.loc.index === pos) {
          return errors[i] = toParseError(loc, details);
        }
        if (error2.loc.index < pos) break;
      }
      return this.raise(toParseError, at2, details);
    }
    updateContext(prevType) {
    }
    unexpected(loc, type) {
      throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {
        expected: type ? tokenLabelName(type) : null
      });
    }
    expectPlugin(pluginName, loc) {
      if (this.hasPlugin(pluginName)) {
        return true;
      }
      throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {
        missingPlugin: [pluginName]
      });
    }
    expectOnePlugin(pluginNames) {
      if (!pluginNames.some((name) => this.hasPlugin(name))) {
        throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {
          missingPlugin: pluginNames
        });
      }
    }
    errorBuilder(error2) {
      return (pos, lineStart, curLine) => {
        this.raise(error2, buildPosition(pos, lineStart, curLine));
      };
    }
  }
  class ClassScope {
    constructor() {
      this.privateNames = /* @__PURE__ */ new Set();
      this.loneAccessors = /* @__PURE__ */ new Map();
      this.undefinedPrivateNames = /* @__PURE__ */ new Map();
    }
  }
  class ClassScopeHandler {
    constructor(parser2) {
      this.parser = void 0;
      this.stack = [];
      this.undefinedPrivateNames = /* @__PURE__ */ new Map();
      this.parser = parser2;
    }
    current() {
      return this.stack[this.stack.length - 1];
    }
    enter() {
      this.stack.push(new ClassScope());
    }
    exit() {
      const oldClassScope = this.stack.pop();
      const current = this.current();
      for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
        if (current) {
          if (!current.undefinedPrivateNames.has(name)) {
            current.undefinedPrivateNames.set(name, loc);
          }
        } else {
          this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
            identifierName: name
          });
        }
      }
    }
    declarePrivateName(name, elementType, loc) {
      const {
        privateNames,
        loneAccessors,
        undefinedPrivateNames
      } = this.current();
      let redefined = privateNames.has(name);
      if (elementType & 3) {
        const accessor = redefined && loneAccessors.get(name);
        if (accessor) {
          const oldStatic = accessor & 4;
          const newStatic = elementType & 4;
          const oldKind = accessor & 3;
          const newKind = elementType & 3;
          redefined = oldKind === newKind || oldStatic !== newStatic;
          if (!redefined) loneAccessors.delete(name);
        } else if (!redefined) {
          loneAccessors.set(name, elementType);
        }
      }
      if (redefined) {
        this.parser.raise(Errors.PrivateNameRedeclaration, loc, {
          identifierName: name
        });
      }
      privateNames.add(name);
      undefinedPrivateNames.delete(name);
    }
    usePrivateName(name, loc) {
      let classScope;
      for (classScope of this.stack) {
        if (classScope.privateNames.has(name)) return;
      }
      if (classScope) {
        classScope.undefinedPrivateNames.set(name, loc);
      } else {
        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
          identifierName: name
        });
      }
    }
  }
  class ExpressionScope {
    constructor(type = 0) {
      this.type = type;
    }
    canBeArrowParameterDeclaration() {
      return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
      return this.type === 3;
    }
  }
  class ArrowHeadParsingScope extends ExpressionScope {
    constructor(type) {
      super(type);
      this.declarationErrors = /* @__PURE__ */ new Map();
    }
    recordDeclarationError(ParsingErrorClass, at2) {
      const index = at2.index;
      this.declarationErrors.set(index, [ParsingErrorClass, at2]);
    }
    clearDeclarationError(index) {
      this.declarationErrors.delete(index);
    }
    iterateErrors(iterator2) {
      this.declarationErrors.forEach(iterator2);
    }
  }
  class ExpressionScopeHandler {
    constructor(parser2) {
      this.parser = void 0;
      this.stack = [new ExpressionScope()];
      this.parser = parser2;
    }
    enter(scope2) {
      this.stack.push(scope2);
    }
    exit() {
      this.stack.pop();
    }
    recordParameterInitializerError(toParseError, node2) {
      const origin = node2.loc.start;
      const {
        stack
      } = this;
      let i = stack.length - 1;
      let scope2 = stack[i];
      while (!scope2.isCertainlyParameterDeclaration()) {
        if (scope2.canBeArrowParameterDeclaration()) {
          scope2.recordDeclarationError(toParseError, origin);
        } else {
          return;
        }
        scope2 = stack[--i];
      }
      this.parser.raise(toParseError, origin);
    }
    recordArrowParameterBindingError(error2, node2) {
      const {
        stack
      } = this;
      const scope2 = stack[stack.length - 1];
      const origin = node2.loc.start;
      if (scope2.isCertainlyParameterDeclaration()) {
        this.parser.raise(error2, origin);
      } else if (scope2.canBeArrowParameterDeclaration()) {
        scope2.recordDeclarationError(error2, origin);
      } else {
        return;
      }
    }
    recordAsyncArrowParametersError(at2) {
      const {
        stack
      } = this;
      let i = stack.length - 1;
      let scope2 = stack[i];
      while (scope2.canBeArrowParameterDeclaration()) {
        if (scope2.type === 2) {
          scope2.recordDeclarationError(Errors.AwaitBindingIdentifier, at2);
        }
        scope2 = stack[--i];
      }
    }
    validateAsPattern() {
      const {
        stack
      } = this;
      const currentScope = stack[stack.length - 1];
      if (!currentScope.canBeArrowParameterDeclaration()) return;
      currentScope.iterateErrors(([toParseError, loc]) => {
        this.parser.raise(toParseError, loc);
        let i = stack.length - 2;
        let scope2 = stack[i];
        while (scope2.canBeArrowParameterDeclaration()) {
          scope2.clearDeclarationError(loc.index);
          scope2 = stack[--i];
        }
      });
    }
  }
  function newParameterDeclarationScope() {
    return new ExpressionScope(3);
  }
  function newArrowHeadScope() {
    return new ArrowHeadParsingScope(1);
  }
  function newAsyncArrowScope() {
    return new ArrowHeadParsingScope(2);
  }
  function newExpressionScope() {
    return new ExpressionScope();
  }
  class UtilParser extends Tokenizer {
    addExtra(node2, key, value2, enumerable = true) {
      if (!node2) return;
      let {
        extra
      } = node2;
      if (extra == null) {
        extra = {};
        node2.extra = extra;
      }
      if (enumerable) {
        extra[key] = value2;
      } else {
        Object.defineProperty(extra, key, {
          enumerable,
          value: value2
        });
      }
    }
    isContextual(token) {
      return this.state.type === token && !this.state.containsEsc;
    }
    isUnparsedContextual(nameStart, name) {
      const nameEnd = nameStart + name.length;
      if (this.input.slice(nameStart, nameEnd) === name) {
        const nextCh = this.input.charCodeAt(nameEnd);
        return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
      }
      return false;
    }
    isLookaheadContextual(name) {
      const next = this.nextTokenStart();
      return this.isUnparsedContextual(next, name);
    }
    eatContextual(token) {
      if (this.isContextual(token)) {
        this.next();
        return true;
      }
      return false;
    }
    expectContextual(token, toParseError) {
      if (!this.eatContextual(token)) {
        if (toParseError != null) {
          throw this.raise(toParseError, this.state.startLoc);
        }
        this.unexpected(null, token);
      }
    }
    canInsertSemicolon() {
      return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
      return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
    }
    hasFollowingLineBreak() {
      return hasNewLine(this.input, this.state.end, this.nextTokenStart());
    }
    isLineTerminator() {
      return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(allowAsi = true) {
      if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
      this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
    }
    expect(type, loc) {
      if (!this.eat(type)) {
        this.unexpected(loc, type);
      }
    }
    tryParse(fn2, oldState = this.state.clone()) {
      const abortSignal = {
        node: null
      };
      try {
        const node2 = fn2((node3 = null) => {
          abortSignal.node = node3;
          throw abortSignal;
        });
        if (this.state.errors.length > oldState.errors.length) {
          const failState = this.state;
          this.state = oldState;
          this.state.tokensLength = failState.tokensLength;
          return {
            node: node2,
            error: failState.errors[oldState.errors.length],
            thrown: false,
            aborted: false,
            failState
          };
        }
        return {
          node: node2,
          error: null,
          thrown: false,
          aborted: false,
          failState: null
        };
      } catch (error2) {
        const failState = this.state;
        this.state = oldState;
        if (error2 instanceof SyntaxError) {
          return {
            node: null,
            error: error2,
            thrown: true,
            aborted: false,
            failState
          };
        }
        if (error2 === abortSignal) {
          return {
            node: abortSignal.node,
            error: null,
            thrown: false,
            aborted: true,
            failState
          };
        }
        throw error2;
      }
    }
    checkExpressionErrors(refExpressionErrors, andThrow) {
      if (!refExpressionErrors) return false;
      const {
        shorthandAssignLoc,
        doubleProtoLoc,
        privateKeyLoc,
        optionalParametersLoc
      } = refExpressionErrors;
      const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
      if (!andThrow) {
        return hasErrors;
      }
      if (shorthandAssignLoc != null) {
        this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
      }
      if (doubleProtoLoc != null) {
        this.raise(Errors.DuplicateProto, doubleProtoLoc);
      }
      if (privateKeyLoc != null) {
        this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
      }
      if (optionalParametersLoc != null) {
        this.unexpected(optionalParametersLoc);
      }
    }
    isLiteralPropertyName() {
      return tokenIsLiteralPropertyName(this.state.type);
    }
    isPrivateName(node2) {
      return node2.type === "PrivateName";
    }
    getPrivateNameSV(node2) {
      return node2.id.name;
    }
    hasPropertyAsPrivateName(node2) {
      return (node2.type === "MemberExpression" || node2.type === "OptionalMemberExpression") && this.isPrivateName(node2.property);
    }
    isObjectProperty(node2) {
      return node2.type === "ObjectProperty";
    }
    isObjectMethod(node2) {
      return node2.type === "ObjectMethod";
    }
    initializeScopes(inModule = this.options.sourceType === "module") {
      const oldLabels = this.state.labels;
      this.state.labels = [];
      const oldExportedIdentifiers = this.exportedIdentifiers;
      this.exportedIdentifiers = /* @__PURE__ */ new Set();
      const oldInModule = this.inModule;
      this.inModule = inModule;
      const oldScope = this.scope;
      const ScopeHandler2 = this.getScopeHandler();
      this.scope = new ScopeHandler2(this, inModule);
      const oldProdParam = this.prodParam;
      this.prodParam = new ProductionParameterHandler();
      const oldClassScope = this.classScope;
      this.classScope = new ClassScopeHandler(this);
      const oldExpressionScope = this.expressionScope;
      this.expressionScope = new ExpressionScopeHandler(this);
      return () => {
        this.state.labels = oldLabels;
        this.exportedIdentifiers = oldExportedIdentifiers;
        this.inModule = oldInModule;
        this.scope = oldScope;
        this.prodParam = oldProdParam;
        this.classScope = oldClassScope;
        this.expressionScope = oldExpressionScope;
      };
    }
    enterInitialScopes() {
      let paramFlags = 0;
      if (this.inModule) {
        paramFlags |= 2;
      }
      if (this.optionFlags & 32) {
        paramFlags |= 1;
      }
      this.scope.enter(1);
      this.prodParam.enter(paramFlags);
    }
    checkDestructuringPrivate(refExpressionErrors) {
      const {
        privateKeyLoc
      } = refExpressionErrors;
      if (privateKeyLoc !== null) {
        this.expectPlugin("destructuringPrivate", privateKeyLoc);
      }
    }
  }
  class ExpressionErrors {
    constructor() {
      this.shorthandAssignLoc = null;
      this.doubleProtoLoc = null;
      this.privateKeyLoc = null;
      this.optionalParametersLoc = null;
    }
  }
  class Node {
    constructor(parser2, pos, loc) {
      this.type = "";
      this.start = pos;
      this.end = 0;
      this.loc = new SourceLocation(loc);
      if ((parser2 == null ? void 0 : parser2.optionFlags) & 128) this.range = [pos, 0];
      if (parser2 != null && parser2.filename) this.loc.filename = parser2.filename;
    }
  }
  const NodePrototype = Node.prototype;
  {
    NodePrototype.__clone = function() {
      const newNode = new Node(void 0, this.start, this.loc.start);
      const keys = Object.keys(this);
      for (let i = 0, length = keys.length; i < length; i++) {
        const key = keys[i];
        if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
          newNode[key] = this[key];
        }
      }
      return newNode;
    };
  }
  class NodeUtils extends UtilParser {
    startNode() {
      const loc = this.state.startLoc;
      return new Node(this, loc.index, loc);
    }
    startNodeAt(loc) {
      return new Node(this, loc.index, loc);
    }
    startNodeAtNode(type) {
      return this.startNodeAt(type.loc.start);
    }
    finishNode(node2, type) {
      return this.finishNodeAt(node2, type, this.state.lastTokEndLoc);
    }
    finishNodeAt(node2, type, endLoc) {
      node2.type = type;
      node2.end = endLoc.index;
      node2.loc.end = endLoc;
      if (this.optionFlags & 128) node2.range[1] = endLoc.index;
      if (this.optionFlags & 4096) {
        this.processComment(node2);
      }
      return node2;
    }
    resetStartLocation(node2, startLoc) {
      node2.start = startLoc.index;
      node2.loc.start = startLoc;
      if (this.optionFlags & 128) node2.range[0] = startLoc.index;
    }
    resetEndLocation(node2, endLoc = this.state.lastTokEndLoc) {
      node2.end = endLoc.index;
      node2.loc.end = endLoc;
      if (this.optionFlags & 128) node2.range[1] = endLoc.index;
    }
    resetStartLocationFromNode(node2, locationNode) {
      this.resetStartLocation(node2, locationNode.loc.start);
    }
    castNodeTo(node2, type) {
      node2.type = type;
      return node2;
    }
    cloneIdentifier(node2) {
      const {
        type,
        start,
        end,
        loc,
        range,
        name
      } = node2;
      const cloned = Object.create(NodePrototype);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;
      cloned.name = name;
      if (node2.extra) cloned.extra = node2.extra;
      return cloned;
    }
    cloneStringLiteral(node2) {
      const {
        type,
        start,
        end,
        loc,
        range,
        extra
      } = node2;
      const cloned = Object.create(NodePrototype);
      cloned.type = type;
      cloned.start = start;
      cloned.end = end;
      cloned.loc = loc;
      cloned.range = range;
      cloned.extra = extra;
      cloned.value = node2.value;
      return cloned;
    }
  }
  const unwrapParenthesizedExpression = (node2) => {
    return node2.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node2.expression) : node2;
  };
  class LValParser extends NodeUtils {
    toAssignable(node2, isLHS = false) {
      var _node$extra, _node$extra3;
      let parenthesized = void 0;
      if (node2.type === "ParenthesizedExpression" || (_node$extra = node2.extra) != null && _node$extra.parenthesized) {
        parenthesized = unwrapParenthesizedExpression(node2);
        if (isLHS) {
          if (parenthesized.type === "Identifier") {
            this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node2);
          } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
            this.raise(Errors.InvalidParenthesizedAssignment, node2);
          }
        } else {
          this.raise(Errors.InvalidParenthesizedAssignment, node2);
        }
      }
      switch (node2.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break;
        case "ObjectExpression":
          this.castNodeTo(node2, "ObjectPattern");
          for (let i = 0, length = node2.properties.length, last = length - 1; i < length; i++) {
            var _node$extra2;
            const prop = node2.properties[i];
            const isLast = i === last;
            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
            if (isLast && prop.type === "RestElement" && (_node$extra2 = node2.extra) != null && _node$extra2.trailingCommaLoc) {
              this.raise(Errors.RestTrailingComma, node2.extra.trailingCommaLoc);
            }
          }
          break;
        case "ObjectProperty": {
          const {
            key,
            value: value2
          } = node2;
          if (this.isPrivateName(key)) {
            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
          }
          this.toAssignable(value2, isLHS);
          break;
        }
        case "SpreadElement": {
          throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
        }
        case "ArrayExpression":
          this.castNodeTo(node2, "ArrayPattern");
          this.toAssignableList(node2.elements, (_node$extra3 = node2.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
          break;
        case "AssignmentExpression":
          if (node2.operator !== "=") {
            this.raise(Errors.MissingEqInAssignment, node2.left.loc.end);
          }
          this.castNodeTo(node2, "AssignmentPattern");
          delete node2.operator;
          this.toAssignable(node2.left, isLHS);
          break;
        case "ParenthesizedExpression":
          this.toAssignable(parenthesized, isLHS);
          break;
      }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
      if (prop.type === "ObjectMethod") {
        this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
      } else if (prop.type === "SpreadElement") {
        this.castNodeTo(prop, "RestElement");
        const arg = prop.argument;
        this.checkToRestConversion(arg, false);
        this.toAssignable(arg, isLHS);
        if (!isLast) {
          this.raise(Errors.RestTrailingComma, prop);
        }
      } else {
        this.toAssignable(prop, isLHS);
      }
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      const end = exprList.length - 1;
      for (let i = 0; i <= end; i++) {
        const elt = exprList[i];
        if (!elt) continue;
        this.toAssignableListItem(exprList, i, isLHS);
        if (elt.type === "RestElement") {
          if (i < end) {
            this.raise(Errors.RestTrailingComma, elt);
          } else if (trailingCommaLoc) {
            this.raise(Errors.RestTrailingComma, trailingCommaLoc);
          }
        }
      }
    }
    toAssignableListItem(exprList, index, isLHS) {
      const node2 = exprList[index];
      if (node2.type === "SpreadElement") {
        this.castNodeTo(node2, "RestElement");
        const arg = node2.argument;
        this.checkToRestConversion(arg, true);
        this.toAssignable(arg, isLHS);
      } else {
        this.toAssignable(node2, isLHS);
      }
    }
    isAssignable(node2, isBinding2) {
      switch (node2.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          return true;
        case "ObjectExpression": {
          const last = node2.properties.length - 1;
          return node2.properties.every((prop, i) => {
            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
          });
        }
        case "ObjectProperty":
          return this.isAssignable(node2.value);
        case "SpreadElement":
          return this.isAssignable(node2.argument);
        case "ArrayExpression":
          return node2.elements.every((element) => element === null || this.isAssignable(element));
        case "AssignmentExpression":
          return node2.operator === "=";
        case "ParenthesizedExpression":
          return this.isAssignable(node2.expression);
        case "MemberExpression":
        case "OptionalMemberExpression":
          return !isBinding2;
        default:
          return false;
      }
    }
    toReferencedList(exprList, isParenthesizedExpr) {
      return exprList;
    }
    toReferencedListDeep(exprList, isParenthesizedExpr) {
      this.toReferencedList(exprList, isParenthesizedExpr);
      for (const expr of exprList) {
        if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
          this.toReferencedListDeep(expr.elements);
        }
      }
    }
    parseSpread(refExpressionErrors) {
      const node2 = this.startNode();
      this.next();
      node2.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0);
      return this.finishNode(node2, "SpreadElement");
    }
    parseRestBinding() {
      const node2 = this.startNode();
      this.next();
      node2.argument = this.parseBindingAtom();
      return this.finishNode(node2, "RestElement");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 0: {
          const node2 = this.startNode();
          this.next();
          node2.elements = this.parseBindingList(3, 93, 1);
          return this.finishNode(node2, "ArrayPattern");
        }
        case 5:
          return this.parseObjectLike(8, true);
      }
      return this.parseIdentifier();
    }
    parseBindingList(close, closeCharCode, flags) {
      const allowEmpty = flags & 1;
      const elts = [];
      let first = true;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
        }
        if (allowEmpty && this.match(12)) {
          elts.push(null);
        } else if (this.eat(close)) {
          break;
        } else if (this.match(21)) {
          let rest = this.parseRestBinding();
          if (this.hasPlugin("flow") || flags & 2) {
            rest = this.parseFunctionParamType(rest);
          }
          elts.push(rest);
          if (!this.checkCommaAfterRest(closeCharCode)) {
            this.expect(close);
            break;
          }
        } else {
          const decorators = [];
          if (flags & 2) {
            if (this.match(26) && this.hasPlugin("decorators")) {
              this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);
            }
            while (this.match(26)) {
              decorators.push(this.parseDecorator());
            }
          }
          elts.push(this.parseBindingElement(flags, decorators));
        }
      }
      return elts;
    }
    parseBindingRestProperty(prop) {
      this.next();
      prop.argument = this.parseIdentifier();
      this.checkCommaAfterRest(125);
      return this.finishNode(prop, "RestElement");
    }
    parseBindingProperty() {
      const {
        type,
        startLoc
      } = this.state;
      if (type === 21) {
        return this.parseBindingRestProperty(this.startNode());
      }
      const prop = this.startNode();
      if (type === 139) {
        this.expectPlugin("destructuringPrivate", startLoc);
        this.classScope.usePrivateName(this.state.value, startLoc);
        prop.key = this.parsePrivateName();
      } else {
        this.parsePropertyName(prop);
      }
      prop.method = false;
      return this.parseObjPropValue(prop, startLoc, false, false, true, false);
    }
    parseBindingElement(flags, decorators) {
      const left = this.parseMaybeDefault();
      if (this.hasPlugin("flow") || flags & 2) {
        this.parseFunctionParamType(left);
      }
      if (decorators.length) {
        left.decorators = decorators;
        this.resetStartLocationFromNode(left, decorators[0]);
      }
      const elt = this.parseMaybeDefault(left.loc.start, left);
      return elt;
    }
    parseFunctionParamType(param) {
      return param;
    }
    parseMaybeDefault(startLoc, left) {
      startLoc != null ? startLoc : startLoc = this.state.startLoc;
      left = left != null ? left : this.parseBindingAtom();
      if (!this.eat(29)) return left;
      const node2 = this.startNodeAt(startLoc);
      node2.left = left;
      node2.right = this.parseMaybeAssignAllowIn();
      return this.finishNode(node2, "AssignmentPattern");
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding2) {
      switch (type) {
        case "AssignmentPattern":
          return "left";
        case "RestElement":
          return "argument";
        case "ObjectProperty":
          return "value";
        case "ParenthesizedExpression":
          return "expression";
        case "ArrayPattern":
          return "elements";
        case "ObjectPattern":
          return "properties";
      }
      return false;
    }
    isOptionalMemberExpression(expression) {
      return expression.type === "OptionalMemberExpression";
    }
    checkLVal(expression, ancestor, binding2 = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {
      var _expression$extra;
      const type = expression.type;
      if (this.isObjectMethod(expression)) return;
      const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
      if (isOptionalMemberExpression || type === "MemberExpression") {
        if (isOptionalMemberExpression) {
          this.expectPlugin("optionalChainingAssign", expression.loc.start);
          if (ancestor.type !== "AssignmentExpression") {
            this.raise(Errors.InvalidLhsOptionalChaining, expression, {
              ancestor
            });
          }
        }
        if (binding2 !== 64) {
          this.raise(Errors.InvalidPropertyBindingPattern, expression);
        }
        return;
      }
      if (type === "Identifier") {
        this.checkIdentifier(expression, binding2, strictModeChanged);
        const {
          name
        } = expression;
        if (checkClashes) {
          if (checkClashes.has(name)) {
            this.raise(Errors.ParamDupe, expression);
          } else {
            checkClashes.add(name);
          }
        }
        return;
      }
      const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding2);
      if (validity === true) return;
      if (validity === false) {
        const ParseErrorClass = binding2 === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
        this.raise(ParseErrorClass, expression, {
          ancestor
        });
        return;
      }
      let key, isParenthesizedExpression;
      if (typeof validity === "string") {
        key = validity;
        isParenthesizedExpression = type === "ParenthesizedExpression";
      } else {
        [key, isParenthesizedExpression] = validity;
      }
      const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
        type
      } : ancestor;
      const val = expression[key];
      if (Array.isArray(val)) {
        for (const child of val) {
          if (child) {
            this.checkLVal(child, nextAncestor, binding2, checkClashes, strictModeChanged, isParenthesizedExpression);
          }
        }
      } else if (val) {
        this.checkLVal(val, nextAncestor, binding2, checkClashes, strictModeChanged, isParenthesizedExpression);
      }
    }
    checkIdentifier(at2, bindingType, strictModeChanged = false) {
      if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at2.name, this.inModule) : isStrictBindOnlyReservedWord(at2.name))) {
        if (bindingType === 64) {
          this.raise(Errors.StrictEvalArguments, at2, {
            referenceName: at2.name
          });
        } else {
          this.raise(Errors.StrictEvalArgumentsBinding, at2, {
            bindingName: at2.name
          });
        }
      }
      if (bindingType & 8192 && at2.name === "let") {
        this.raise(Errors.LetInLexicalBinding, at2);
      }
      if (!(bindingType & 64)) {
        this.declareNameFromIdentifier(at2, bindingType);
      }
    }
    declareNameFromIdentifier(identifier2, binding2) {
      this.scope.declareName(identifier2.name, binding2, identifier2.loc.start);
    }
    checkToRestConversion(node2, allowPattern) {
      switch (node2.type) {
        case "ParenthesizedExpression":
          this.checkToRestConversion(node2.expression, allowPattern);
          break;
        case "Identifier":
        case "MemberExpression":
          break;
        case "ArrayExpression":
        case "ObjectExpression":
          if (allowPattern) break;
        default:
          this.raise(Errors.InvalidRestAssignmentPattern, node2);
      }
    }
    checkCommaAfterRest(close) {
      if (!this.match(12)) {
        return false;
      }
      this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);
      return true;
    }
  }
  function nonNull(x2) {
    if (x2 == null) {
      throw new Error(`Unexpected ${x2} value.`);
    }
    return x2;
  }
  function assert2(x2) {
    if (!x2) {
      throw new Error("Assert fail");
    }
  }
  const TSErrors = ParseErrorEnum`typescript`({
    AbstractMethodHasImplementation: ({
      methodName
    }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
    AbstractPropertyHasInitializer: ({
      propertyName
    }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
    AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
    AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: ({
      kind
    }) => `'declare' is not allowed in ${kind}ters.`,
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: ({
      modifier
    }) => `Accessibility modifier already seen: '${modifier}'.`,
    DuplicateModifier: ({
      modifier
    }) => `Duplicate modifier: '${modifier}'.`,
    EmptyHeritageClauseType: ({
      token
    }) => `'${token}' list cannot be empty.`,
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
    IncompatibleModifiers: ({
      modifiers
    }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: ({
      modifier
    }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
    InvalidHeritageClauseType: ({
      token
    }) => `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,
    InvalidModifierOnAwaitUsingDeclaration: (modifier) => `'${modifier}' modifier cannot appear on an await using declaration.`,
    InvalidModifierOnTypeMember: ({
      modifier
    }) => `'${modifier}' modifier cannot appear on a type member.`,
    InvalidModifierOnTypeParameter: ({
      modifier
    }) => `'${modifier}' modifier cannot appear on a type parameter.`,
    InvalidModifierOnTypeParameterPositions: ({
      modifier
    }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
    InvalidModifierOnUsingDeclaration: (modifier) => `'${modifier}' modifier cannot appear on a using declaration.`,
    InvalidModifiersOrder: ({
      orderedModifiers
    }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
    InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifier: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: ({
      modifier
    }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
    ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    SingleTypeParameterWithoutTrailingComma: ({
      typeParameterName
    }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
    TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: ({
      type
    }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
  });
  function keywordTypeFromName(value2) {
    switch (value2) {
      case "any":
        return "TSAnyKeyword";
      case "boolean":
        return "TSBooleanKeyword";
      case "bigint":
        return "TSBigIntKeyword";
      case "never":
        return "TSNeverKeyword";
      case "number":
        return "TSNumberKeyword";
      case "object":
        return "TSObjectKeyword";
      case "string":
        return "TSStringKeyword";
      case "symbol":
        return "TSSymbolKeyword";
      case "undefined":
        return "TSUndefinedKeyword";
      case "unknown":
        return "TSUnknownKeyword";
      default:
        return void 0;
    }
  }
  function tsIsAccessModifier(modifier) {
    return modifier === "private" || modifier === "public" || modifier === "protected";
  }
  function tsIsVarianceAnnotations(modifier) {
    return modifier === "in" || modifier === "out";
  }
  var typescript2 = (superClass) => class TypeScriptParserMixin extends superClass {
    constructor(...args) {
      super(...args);
      this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out"],
        disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameter
      });
      this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["const"],
        disallowedModifiers: ["in", "out"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
      });
      this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out", "const"],
        disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameter
      });
    }
    getScopeHandler() {
      return TypeScriptScopeHandler;
    }
    tsIsIdentifier() {
      return tokenIsIdentifier(this.state.type);
    }
    tsTokenCanFollowModifier() {
      return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
    }
    tsNextTokenOnSameLineAndCanFollowModifier() {
      this.next();
      if (this.hasPrecedingLineBreak()) {
        return false;
      }
      return this.tsTokenCanFollowModifier();
    }
    tsNextTokenCanFollowModifier() {
      if (this.match(106)) {
        this.next();
        return this.tsTokenCanFollowModifier();
      }
      return this.tsNextTokenOnSameLineAndCanFollowModifier();
    }
    tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock, hasSeenStaticModifier) {
      if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
        return void 0;
      }
      const modifier = this.state.value;
      if (allowedModifiers.includes(modifier)) {
        if (hasSeenStaticModifier && this.match(106)) {
          return void 0;
        }
        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
          return void 0;
        }
        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
          return modifier;
        }
      }
      return void 0;
    }
    tsParseModifiers({
      allowedModifiers,
      disallowedModifiers,
      stopOnStartOfClassStaticBlock,
      errorTemplate = TSErrors.InvalidModifierOnTypeMember
    }, modified) {
      const enforceOrder = (loc, modifier, before, after) => {
        if (modifier === before && modified[after]) {
          this.raise(TSErrors.InvalidModifiersOrder, loc, {
            orderedModifiers: [before, after]
          });
        }
      };
      const incompatible = (loc, modifier, mod1, mod2) => {
        if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
          this.raise(TSErrors.IncompatibleModifiers, loc, {
            modifiers: [mod1, mod2]
          });
        }
      };
      for (; ; ) {
        const {
          startLoc
        } = this.state;
        const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock, modified.static);
        if (!modifier) break;
        if (tsIsAccessModifier(modifier)) {
          if (modified.accessibility) {
            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {
              modifier
            });
          } else {
            enforceOrder(startLoc, modifier, modifier, "override");
            enforceOrder(startLoc, modifier, modifier, "static");
            enforceOrder(startLoc, modifier, modifier, "readonly");
            modified.accessibility = modifier;
          }
        } else if (tsIsVarianceAnnotations(modifier)) {
          if (modified[modifier]) {
            this.raise(TSErrors.DuplicateModifier, startLoc, {
              modifier
            });
          }
          modified[modifier] = true;
          enforceOrder(startLoc, modifier, "in", "out");
        } else {
          if (hasOwnProperty.call(modified, modifier)) {
            this.raise(TSErrors.DuplicateModifier, startLoc, {
              modifier
            });
          } else {
            enforceOrder(startLoc, modifier, "static", "readonly");
            enforceOrder(startLoc, modifier, "static", "override");
            enforceOrder(startLoc, modifier, "override", "readonly");
            enforceOrder(startLoc, modifier, "abstract", "override");
            incompatible(startLoc, modifier, "declare", "override");
            incompatible(startLoc, modifier, "static", "abstract");
          }
          modified[modifier] = true;
        }
        if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
          this.raise(errorTemplate, startLoc, {
            modifier
          });
        }
      }
    }
    tsIsListTerminator(kind) {
      switch (kind) {
        case "EnumMembers":
        case "TypeMembers":
          return this.match(8);
        case "HeritageClauseElement":
          return this.match(5);
        case "TupleElementTypes":
          return this.match(3);
        case "TypeParametersOrArguments":
          return this.match(48);
      }
    }
    tsParseList(kind, parseElement) {
      const result = [];
      while (!this.tsIsListTerminator(kind)) {
        result.push(parseElement());
      }
      return result;
    }
    tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
      return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
    }
    tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
      const result = [];
      let trailingCommaPos = -1;
      for (; ; ) {
        if (this.tsIsListTerminator(kind)) {
          break;
        }
        trailingCommaPos = -1;
        const element = parseElement();
        if (element == null) {
          return void 0;
        }
        result.push(element);
        if (this.eat(12)) {
          trailingCommaPos = this.state.lastTokStartLoc.index;
          continue;
        }
        if (this.tsIsListTerminator(kind)) {
          break;
        }
        if (expectSuccess) {
          this.expect(12);
        }
        return void 0;
      }
      if (refTrailingCommaPos) {
        refTrailingCommaPos.value = trailingCommaPos;
      }
      return result;
    }
    tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
      if (!skipFirstToken) {
        if (bracket) {
          this.expect(0);
        } else {
          this.expect(47);
        }
      }
      const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
      if (bracket) {
        this.expect(3);
      } else {
        this.expect(48);
      }
      return result;
    }
    tsParseImportType() {
      const node2 = this.startNode();
      this.expect(83);
      this.expect(10);
      if (!this.match(134)) {
        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);
        {
          node2.argument = super.parseExprAtom();
        }
      } else {
        {
          node2.argument = this.parseStringLiteral(this.state.value);
        }
      }
      if (this.eat(12)) {
        node2.options = this.tsParseImportTypeOptions();
      } else {
        node2.options = null;
      }
      this.expect(11);
      if (this.eat(16)) {
        node2.qualifier = this.tsParseEntityName(1 | 2);
      }
      if (this.match(47)) {
        {
          node2.typeParameters = this.tsParseTypeArguments();
        }
      }
      return this.finishNode(node2, "TSImportType");
    }
    tsParseImportTypeOptions() {
      const node2 = this.startNode();
      this.expect(5);
      const withProperty = this.startNode();
      if (this.isContextual(76)) {
        withProperty.method = false;
        withProperty.key = this.parseIdentifier(true);
        withProperty.computed = false;
        withProperty.shorthand = false;
      } else {
        this.unexpected(null, 76);
      }
      this.expect(14);
      withProperty.value = this.tsParseImportTypeWithPropertyValue();
      node2.properties = [this.finishObjectProperty(withProperty)];
      this.expect(8);
      return this.finishNode(node2, "ObjectExpression");
    }
    tsParseImportTypeWithPropertyValue() {
      const node2 = this.startNode();
      const properties = [];
      this.expect(5);
      while (!this.match(8)) {
        const type = this.state.type;
        if (tokenIsIdentifier(type) || type === 134) {
          properties.push(super.parsePropertyDefinition(null));
        } else {
          this.unexpected();
        }
        this.eat(12);
      }
      node2.properties = properties;
      this.next();
      return this.finishNode(node2, "ObjectExpression");
    }
    tsParseEntityName(flags) {
      let entity;
      if (flags & 1 && this.match(78)) {
        if (flags & 2) {
          entity = this.parseIdentifier(true);
        } else {
          const node2 = this.startNode();
          this.next();
          entity = this.finishNode(node2, "ThisExpression");
        }
      } else {
        entity = this.parseIdentifier(!!(flags & 1));
      }
      while (this.eat(16)) {
        const node2 = this.startNodeAtNode(entity);
        node2.left = entity;
        node2.right = this.parseIdentifier(!!(flags & 1));
        entity = this.finishNode(node2, "TSQualifiedName");
      }
      return entity;
    }
    tsParseTypeReference() {
      const node2 = this.startNode();
      node2.typeName = this.tsParseEntityName(1);
      if (!this.hasPrecedingLineBreak() && this.match(47)) {
        {
          node2.typeParameters = this.tsParseTypeArguments();
        }
      }
      return this.finishNode(node2, "TSTypeReference");
    }
    tsParseThisTypePredicate(lhs) {
      this.next();
      const node2 = this.startNodeAtNode(lhs);
      node2.parameterName = lhs;
      node2.typeAnnotation = this.tsParseTypeAnnotation(false);
      node2.asserts = false;
      return this.finishNode(node2, "TSTypePredicate");
    }
    tsParseThisTypeNode() {
      const node2 = this.startNode();
      this.next();
      return this.finishNode(node2, "TSThisType");
    }
    tsParseTypeQuery() {
      const node2 = this.startNode();
      this.expect(87);
      if (this.match(83)) {
        node2.exprName = this.tsParseImportType();
      } else {
        {
          node2.exprName = this.tsParseEntityName(1 | 2);
        }
      }
      if (!this.hasPrecedingLineBreak() && this.match(47)) {
        {
          node2.typeParameters = this.tsParseTypeArguments();
        }
      }
      return this.finishNode(node2, "TSTypeQuery");
    }
    tsParseTypeParameter(parseModifiers) {
      const node2 = this.startNode();
      parseModifiers(node2);
      node2.name = this.tsParseTypeParameterName();
      node2.constraint = this.tsEatThenParseType(81);
      node2.default = this.tsEatThenParseType(29);
      return this.finishNode(node2, "TSTypeParameter");
    }
    tsTryParseTypeParameters(parseModifiers) {
      if (this.match(47)) {
        return this.tsParseTypeParameters(parseModifiers);
      }
    }
    tsParseTypeParameters(parseModifiers) {
      const node2 = this.startNode();
      if (this.match(47) || this.match(143)) {
        this.next();
      } else {
        this.unexpected();
      }
      const refTrailingCommaPos = {
        value: -1
      };
      node2.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
      if (node2.params.length === 0) {
        this.raise(TSErrors.EmptyTypeParameters, node2);
      }
      if (refTrailingCommaPos.value !== -1) {
        this.addExtra(node2, "trailingComma", refTrailingCommaPos.value);
      }
      return this.finishNode(node2, "TSTypeParameterDeclaration");
    }
    tsFillSignature(returnToken, signature) {
      const returnTokenRequired = returnToken === 19;
      const paramsKey = "parameters";
      const returnTypeKey = "typeAnnotation";
      signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      this.expect(10);
      signature[paramsKey] = this.tsParseBindingListForSignature();
      if (returnTokenRequired) {
        signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
      } else if (this.match(returnToken)) {
        signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
      }
    }
    tsParseBindingListForSignature() {
      const list = super.parseBindingList(11, 41, 2);
      for (const pattern of list) {
        const {
          type
        } = pattern;
        if (type === "AssignmentPattern" || type === "TSParameterProperty") {
          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {
            type
          });
        }
      }
      return list;
    }
    tsParseTypeMemberSemicolon() {
      if (!this.eat(12) && !this.isLineTerminator()) {
        this.expect(13);
      }
    }
    tsParseSignatureMember(kind, node2) {
      this.tsFillSignature(14, node2);
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(node2, kind);
    }
    tsIsUnambiguouslyIndexSignature() {
      this.next();
      if (tokenIsIdentifier(this.state.type)) {
        this.next();
        return this.match(14);
      }
      return false;
    }
    tsTryParseIndexSignature(node2) {
      if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
        return;
      }
      this.expect(0);
      const id = this.parseIdentifier();
      id.typeAnnotation = this.tsParseTypeAnnotation();
      this.resetEndLocation(id);
      this.expect(3);
      node2.parameters = [id];
      const type = this.tsTryParseTypeAnnotation();
      if (type) node2.typeAnnotation = type;
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(node2, "TSIndexSignature");
    }
    tsParsePropertyOrMethodSignature(node2, readonly) {
      if (this.eat(17)) node2.optional = true;
      if (this.match(10) || this.match(47)) {
        if (readonly) {
          this.raise(TSErrors.ReadonlyForMethodSignature, node2);
        }
        const method = node2;
        if (method.kind && this.match(47)) {
          this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition());
        }
        this.tsFillSignature(14, method);
        this.tsParseTypeMemberSemicolon();
        const paramsKey = "parameters";
        const returnTypeKey = "typeAnnotation";
        if (method.kind === "get") {
          if (method[paramsKey].length > 0) {
            this.raise(Errors.BadGetterArity, this.state.curPosition());
            if (this.isThisParam(method[paramsKey][0])) {
              this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());
            }
          }
        } else if (method.kind === "set") {
          if (method[paramsKey].length !== 1) {
            this.raise(Errors.BadSetterArity, this.state.curPosition());
          } else {
            const firstParameter = method[paramsKey][0];
            if (this.isThisParam(firstParameter)) {
              this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());
            }
            if (firstParameter.type === "Identifier" && firstParameter.optional) {
              this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition());
            }
            if (firstParameter.type === "RestElement") {
              this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());
            }
          }
          if (method[returnTypeKey]) {
            this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);
          }
        } else {
          method.kind = "method";
        }
        return this.finishNode(method, "TSMethodSignature");
      } else {
        const property = node2;
        if (readonly) property.readonly = true;
        const type = this.tsTryParseTypeAnnotation();
        if (type) property.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(property, "TSPropertySignature");
      }
    }
    tsParseTypeMember() {
      const node2 = this.startNode();
      if (this.match(10) || this.match(47)) {
        return this.tsParseSignatureMember("TSCallSignatureDeclaration", node2);
      }
      if (this.match(77)) {
        const id = this.startNode();
        this.next();
        if (this.match(10) || this.match(47)) {
          return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node2);
        } else {
          node2.key = this.createIdentifier(id, "new");
          return this.tsParsePropertyOrMethodSignature(node2, false);
        }
      }
      this.tsParseModifiers({
        allowedModifiers: ["readonly"],
        disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
      }, node2);
      const idx = this.tsTryParseIndexSignature(node2);
      if (idx) {
        return idx;
      }
      super.parsePropertyName(node2);
      if (!node2.computed && node2.key.type === "Identifier" && (node2.key.name === "get" || node2.key.name === "set") && this.tsTokenCanFollowModifier()) {
        node2.kind = node2.key.name;
        super.parsePropertyName(node2);
        if (!this.match(10) && !this.match(47)) {
          this.unexpected(null, 10);
        }
      }
      return this.tsParsePropertyOrMethodSignature(node2, !!node2.readonly);
    }
    tsParseTypeLiteral() {
      const node2 = this.startNode();
      node2.members = this.tsParseObjectTypeMembers();
      return this.finishNode(node2, "TSTypeLiteral");
    }
    tsParseObjectTypeMembers() {
      this.expect(5);
      const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
      this.expect(8);
      return members;
    }
    tsIsStartOfMappedType() {
      this.next();
      if (this.eat(53)) {
        return this.isContextual(122);
      }
      if (this.isContextual(122)) {
        this.next();
      }
      if (!this.match(0)) {
        return false;
      }
      this.next();
      if (!this.tsIsIdentifier()) {
        return false;
      }
      this.next();
      return this.match(58);
    }
    tsParseMappedType() {
      const node2 = this.startNode();
      this.expect(5);
      if (this.match(53)) {
        node2.readonly = this.state.value;
        this.next();
        this.expectContextual(122);
      } else if (this.eatContextual(122)) {
        node2.readonly = true;
      }
      this.expect(0);
      {
        const typeParameter = this.startNode();
        typeParameter.name = this.tsParseTypeParameterName();
        typeParameter.constraint = this.tsExpectThenParseType(58);
        node2.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
      }
      node2.nameType = this.eatContextual(93) ? this.tsParseType() : null;
      this.expect(3);
      if (this.match(53)) {
        node2.optional = this.state.value;
        this.next();
        this.expect(17);
      } else if (this.eat(17)) {
        node2.optional = true;
      }
      node2.typeAnnotation = this.tsTryParseType();
      this.semicolon();
      this.expect(8);
      return this.finishNode(node2, "TSMappedType");
    }
    tsParseTupleType() {
      const node2 = this.startNode();
      node2.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
      let seenOptionalElement = false;
      node2.elementTypes.forEach((elementNode) => {
        const {
          type
        } = elementNode;
        if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);
        }
        seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
      });
      return this.finishNode(node2, "TSTupleType");
    }
    tsParseTupleElementType() {
      const restStartLoc = this.state.startLoc;
      const rest = this.eat(21);
      const {
        startLoc
      } = this.state;
      let labeled;
      let label;
      let optional;
      let type;
      const isWord = tokenIsKeywordOrIdentifier(this.state.type);
      const chAfterWord = isWord ? this.lookaheadCharCode() : null;
      if (chAfterWord === 58) {
        labeled = true;
        optional = false;
        label = this.parseIdentifier(true);
        this.expect(14);
        type = this.tsParseType();
      } else if (chAfterWord === 63) {
        optional = true;
        const wordName = this.state.value;
        const typeOrLabel = this.tsParseNonArrayType();
        if (this.lookaheadCharCode() === 58) {
          labeled = true;
          label = this.createIdentifier(this.startNodeAt(startLoc), wordName);
          this.expect(17);
          this.expect(14);
          type = this.tsParseType();
        } else {
          labeled = false;
          type = typeOrLabel;
          this.expect(17);
        }
      } else {
        type = this.tsParseType();
        optional = this.eat(17);
        labeled = this.eat(14);
      }
      if (labeled) {
        let labeledNode;
        if (label) {
          labeledNode = this.startNodeAt(startLoc);
          labeledNode.optional = optional;
          labeledNode.label = label;
          labeledNode.elementType = type;
          if (this.eat(17)) {
            labeledNode.optional = true;
            this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);
          }
        } else {
          labeledNode = this.startNodeAt(startLoc);
          labeledNode.optional = optional;
          this.raise(TSErrors.InvalidTupleMemberLabel, type);
          labeledNode.label = type;
          labeledNode.elementType = this.tsParseType();
        }
        type = this.finishNode(labeledNode, "TSNamedTupleMember");
      } else if (optional) {
        const optionalTypeNode = this.startNodeAt(startLoc);
        optionalTypeNode.typeAnnotation = type;
        type = this.finishNode(optionalTypeNode, "TSOptionalType");
      }
      if (rest) {
        const restNode = this.startNodeAt(restStartLoc);
        restNode.typeAnnotation = type;
        type = this.finishNode(restNode, "TSRestType");
      }
      return type;
    }
    tsParseParenthesizedType() {
      const node2 = this.startNode();
      this.expect(10);
      node2.typeAnnotation = this.tsParseType();
      this.expect(11);
      return this.finishNode(node2, "TSParenthesizedType");
    }
    tsParseFunctionOrConstructorType(type, abstract) {
      const node2 = this.startNode();
      if (type === "TSConstructorType") {
        node2.abstract = !!abstract;
        if (abstract) this.next();
        this.next();
      }
      this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node2));
      return this.finishNode(node2, type);
    }
    tsParseLiteralTypeNode() {
      const node2 = this.startNode();
      switch (this.state.type) {
        case 135:
        case 136:
        case 134:
        case 85:
        case 86:
          node2.literal = super.parseExprAtom();
          break;
        default:
          this.unexpected();
      }
      return this.finishNode(node2, "TSLiteralType");
    }
    tsParseTemplateLiteralType() {
      {
        const node2 = this.startNode();
        node2.literal = super.parseTemplate(false);
        return this.finishNode(node2, "TSLiteralType");
      }
    }
    parseTemplateSubstitution() {
      if (this.state.inType) return this.tsParseType();
      return super.parseTemplateSubstitution();
    }
    tsParseThisTypeOrThisTypePredicate() {
      const thisKeyword = this.tsParseThisTypeNode();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
        return this.tsParseThisTypePredicate(thisKeyword);
      } else {
        return thisKeyword;
      }
    }
    tsParseNonArrayType() {
      switch (this.state.type) {
        case 134:
        case 135:
        case 136:
        case 85:
        case 86:
          return this.tsParseLiteralTypeNode();
        case 53:
          if (this.state.value === "-") {
            const node2 = this.startNode();
            const nextToken = this.lookahead();
            if (nextToken.type !== 135 && nextToken.type !== 136) {
              this.unexpected();
            }
            node2.literal = this.parseMaybeUnary();
            return this.finishNode(node2, "TSLiteralType");
          }
          break;
        case 78:
          return this.tsParseThisTypeOrThisTypePredicate();
        case 87:
          return this.tsParseTypeQuery();
        case 83:
          return this.tsParseImportType();
        case 5:
          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
        case 0:
          return this.tsParseTupleType();
        case 10:
          return this.tsParseParenthesizedType();
        case 25:
        case 24:
          return this.tsParseTemplateLiteralType();
        default: {
          const {
            type
          } = this.state;
          if (tokenIsIdentifier(type) || type === 88 || type === 84) {
            const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
            if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
              const node2 = this.startNode();
              this.next();
              return this.finishNode(node2, nodeType);
            }
            return this.tsParseTypeReference();
          }
        }
      }
      this.unexpected();
    }
    tsParseArrayTypeOrHigher() {
      const {
        startLoc
      } = this.state;
      let type = this.tsParseNonArrayType();
      while (!this.hasPrecedingLineBreak() && this.eat(0)) {
        if (this.match(3)) {
          const node2 = this.startNodeAt(startLoc);
          node2.elementType = type;
          this.expect(3);
          type = this.finishNode(node2, "TSArrayType");
        } else {
          const node2 = this.startNodeAt(startLoc);
          node2.objectType = type;
          node2.indexType = this.tsParseType();
          this.expect(3);
          type = this.finishNode(node2, "TSIndexedAccessType");
        }
      }
      return type;
    }
    tsParseTypeOperator() {
      const node2 = this.startNode();
      const operator = this.state.value;
      this.next();
      node2.operator = operator;
      node2.typeAnnotation = this.tsParseTypeOperatorOrHigher();
      if (operator === "readonly") {
        this.tsCheckTypeAnnotationForReadOnly(node2);
      }
      return this.finishNode(node2, "TSTypeOperator");
    }
    tsCheckTypeAnnotationForReadOnly(node2) {
      switch (node2.typeAnnotation.type) {
        case "TSTupleType":
        case "TSArrayType":
          return;
        default:
          this.raise(TSErrors.UnexpectedReadonly, node2);
      }
    }
    tsParseInferType() {
      const node2 = this.startNode();
      this.expectContextual(115);
      const typeParameter = this.startNode();
      typeParameter.name = this.tsParseTypeParameterName();
      typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
      node2.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
      return this.finishNode(node2, "TSInferType");
    }
    tsParseConstraintForInferType() {
      if (this.eat(81)) {
        const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
        if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
          return constraint;
        }
      }
    }
    tsParseTypeOperatorOrHigher() {
      const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
      return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
    }
    tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
      const node2 = this.startNode();
      const hasLeadingOperator = this.eat(operator);
      const types3 = [];
      do {
        types3.push(parseConstituentType());
      } while (this.eat(operator));
      if (types3.length === 1 && !hasLeadingOperator) {
        return types3[0];
      }
      node2.types = types3;
      return this.finishNode(node2, kind);
    }
    tsParseIntersectionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
    }
    tsParseUnionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
    }
    tsIsStartOfFunctionType() {
      if (this.match(47)) {
        return true;
      }
      return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
    }
    tsSkipParameterStart() {
      if (tokenIsIdentifier(this.state.type) || this.match(78)) {
        this.next();
        return true;
      }
      if (this.match(5)) {
        const {
          errors
        } = this.state;
        const previousErrorCount = errors.length;
        try {
          this.parseObjectLike(8, true);
          return errors.length === previousErrorCount;
        } catch (_unused) {
          return false;
        }
      }
      if (this.match(0)) {
        this.next();
        const {
          errors
        } = this.state;
        const previousErrorCount = errors.length;
        try {
          super.parseBindingList(3, 93, 1);
          return errors.length === previousErrorCount;
        } catch (_unused2) {
          return false;
        }
      }
      return false;
    }
    tsIsUnambiguouslyStartOfFunctionType() {
      this.next();
      if (this.match(11) || this.match(21)) {
        return true;
      }
      if (this.tsSkipParameterStart()) {
        if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
          return true;
        }
        if (this.match(11)) {
          this.next();
          if (this.match(19)) {
            return true;
          }
        }
      }
      return false;
    }
    tsParseTypeOrTypePredicateAnnotation(returnToken) {
      return this.tsInType(() => {
        const t = this.startNode();
        this.expect(returnToken);
        const node2 = this.startNode();
        const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
        if (asserts && this.match(78)) {
          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
          if (thisTypePredicate.type === "TSThisType") {
            node2.parameterName = thisTypePredicate;
            node2.asserts = true;
            node2.typeAnnotation = null;
            thisTypePredicate = this.finishNode(node2, "TSTypePredicate");
          } else {
            this.resetStartLocationFromNode(thisTypePredicate, node2);
            thisTypePredicate.asserts = true;
          }
          t.typeAnnotation = thisTypePredicate;
          return this.finishNode(t, "TSTypeAnnotation");
        }
        const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
        if (!typePredicateVariable) {
          if (!asserts) {
            return this.tsParseTypeAnnotation(false, t);
          }
          node2.parameterName = this.parseIdentifier();
          node2.asserts = asserts;
          node2.typeAnnotation = null;
          t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
          return this.finishNode(t, "TSTypeAnnotation");
        }
        const type = this.tsParseTypeAnnotation(false);
        node2.parameterName = typePredicateVariable;
        node2.typeAnnotation = type;
        node2.asserts = asserts;
        t.typeAnnotation = this.finishNode(node2, "TSTypePredicate");
        return this.finishNode(t, "TSTypeAnnotation");
      });
    }
    tsTryParseTypeOrTypePredicateAnnotation() {
      if (this.match(14)) {
        return this.tsParseTypeOrTypePredicateAnnotation(14);
      }
    }
    tsTryParseTypeAnnotation() {
      if (this.match(14)) {
        return this.tsParseTypeAnnotation();
      }
    }
    tsTryParseType() {
      return this.tsEatThenParseType(14);
    }
    tsParseTypePredicatePrefix() {
      const id = this.parseIdentifier();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
        this.next();
        return id;
      }
    }
    tsParseTypePredicateAsserts() {
      if (this.state.type !== 109) {
        return false;
      }
      const containsEsc = this.state.containsEsc;
      this.next();
      if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
        return false;
      }
      if (containsEsc) {
        this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {
          reservedWord: "asserts"
        });
      }
      return true;
    }
    tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
      this.tsInType(() => {
        if (eatColon) this.expect(14);
        t.typeAnnotation = this.tsParseType();
      });
      return this.finishNode(t, "TSTypeAnnotation");
    }
    tsParseType() {
      assert2(this.state.inType);
      const type = this.tsParseNonConditionalType();
      if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
        return type;
      }
      const node2 = this.startNodeAtNode(type);
      node2.checkType = type;
      node2.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
      this.expect(17);
      node2.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
      this.expect(14);
      node2.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
      return this.finishNode(node2, "TSConditionalType");
    }
    isAbstractConstructorSignature() {
      return this.isContextual(124) && this.lookahead().type === 77;
    }
    tsParseNonConditionalType() {
      if (this.tsIsStartOfFunctionType()) {
        return this.tsParseFunctionOrConstructorType("TSFunctionType");
      }
      if (this.match(77)) {
        return this.tsParseFunctionOrConstructorType("TSConstructorType");
      } else if (this.isAbstractConstructorSignature()) {
        return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
      }
      return this.tsParseUnionTypeOrHigher();
    }
    tsParseTypeAssertion() {
      if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
      }
      const node2 = this.startNode();
      node2.typeAnnotation = this.tsInType(() => {
        this.next();
        return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
      });
      this.expect(48);
      node2.expression = this.parseMaybeUnary();
      return this.finishNode(node2, "TSTypeAssertion");
    }
    tsParseHeritageClause(token) {
      const originalStartLoc = this.state.startLoc;
      const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
        {
          const node2 = this.startNode();
          node2.expression = this.tsParseEntityName(1 | 2);
          if (this.match(47)) {
            node2.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node2, "TSExpressionWithTypeArguments");
        }
      });
      if (!delimitedList.length) {
        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {
          token
        });
      }
      return delimitedList;
    }
    tsParseInterfaceDeclaration(node2, properties = {}) {
      if (this.hasFollowingLineBreak()) return null;
      this.expectContextual(129);
      if (properties.declare) node2.declare = true;
      if (tokenIsIdentifier(this.state.type)) {
        node2.id = this.parseIdentifier();
        this.checkIdentifier(node2.id, 130);
      } else {
        node2.id = null;
        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);
      }
      node2.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      if (this.eat(81)) {
        node2.extends = this.tsParseHeritageClause("extends");
      }
      const body = this.startNode();
      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
      node2.body = this.finishNode(body, "TSInterfaceBody");
      return this.finishNode(node2, "TSInterfaceDeclaration");
    }
    tsParseTypeAliasDeclaration(node2) {
      node2.id = this.parseIdentifier();
      this.checkIdentifier(node2.id, 2);
      node2.typeAnnotation = this.tsInType(() => {
        node2.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
        this.expect(29);
        if (this.isContextual(114) && this.lookahead().type !== 16) {
          const node3 = this.startNode();
          this.next();
          return this.finishNode(node3, "TSIntrinsicKeyword");
        }
        return this.tsParseType();
      });
      this.semicolon();
      return this.finishNode(node2, "TSTypeAliasDeclaration");
    }
    tsInTopLevelContext(cb) {
      if (this.curContext() !== types2.brace) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];
        try {
          return cb();
        } finally {
          this.state.context = oldContext;
        }
      } else {
        return cb();
      }
    }
    tsInType(cb) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      try {
        return cb();
      } finally {
        this.state.inType = oldInType;
      }
    }
    tsInDisallowConditionalTypesContext(cb) {
      const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = true;
      try {
        return cb();
      } finally {
        this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    tsInAllowConditionalTypesContext(cb) {
      const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = false;
      try {
        return cb();
      } finally {
        this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    tsEatThenParseType(token) {
      if (this.match(token)) {
        return this.tsNextThenParseType();
      }
    }
    tsExpectThenParseType(token) {
      return this.tsInType(() => {
        this.expect(token);
        return this.tsParseType();
      });
    }
    tsNextThenParseType() {
      return this.tsInType(() => {
        this.next();
        return this.tsParseType();
      });
    }
    tsParseEnumMember() {
      const node2 = this.startNode();
      node2.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
      if (this.eat(29)) {
        node2.initializer = super.parseMaybeAssignAllowIn();
      }
      return this.finishNode(node2, "TSEnumMember");
    }
    tsParseEnumDeclaration(node2, properties = {}) {
      if (properties.const) node2.const = true;
      if (properties.declare) node2.declare = true;
      this.expectContextual(126);
      node2.id = this.parseIdentifier();
      this.checkIdentifier(node2.id, node2.const ? 8971 : 8459);
      {
        this.expect(5);
        node2.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
        this.expect(8);
      }
      return this.finishNode(node2, "TSEnumDeclaration");
    }
    tsParseEnumBody() {
      const node2 = this.startNode();
      this.expect(5);
      node2.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
      this.expect(8);
      return this.finishNode(node2, "TSEnumBody");
    }
    tsParseModuleBlock() {
      const node2 = this.startNode();
      this.scope.enter(0);
      this.expect(5);
      super.parseBlockOrModuleBlockBody(node2.body = [], void 0, true, 8);
      this.scope.exit();
      return this.finishNode(node2, "TSModuleBlock");
    }
    tsParseModuleOrNamespaceDeclaration(node2, nested = false) {
      node2.id = this.parseIdentifier();
      if (!nested) {
        this.checkIdentifier(node2.id, 1024);
      }
      if (this.eat(16)) {
        const inner = this.startNode();
        this.tsParseModuleOrNamespaceDeclaration(inner, true);
        node2.body = inner;
      } else {
        this.scope.enter(512);
        this.prodParam.enter(0);
        node2.body = this.tsParseModuleBlock();
        this.prodParam.exit();
        this.scope.exit();
      }
      return this.finishNode(node2, "TSModuleDeclaration");
    }
    tsParseAmbientExternalModuleDeclaration(node2) {
      if (this.isContextual(112)) {
        node2.kind = "global";
        {
          node2.global = true;
        }
        node2.id = this.parseIdentifier();
      } else if (this.match(134)) {
        node2.kind = "module";
        node2.id = super.parseStringLiteral(this.state.value);
      } else {
        this.unexpected();
      }
      if (this.match(5)) {
        this.scope.enter(512);
        this.prodParam.enter(0);
        node2.body = this.tsParseModuleBlock();
        this.prodParam.exit();
        this.scope.exit();
      } else {
        this.semicolon();
      }
      return this.finishNode(node2, "TSModuleDeclaration");
    }
    tsParseImportEqualsDeclaration(node2, maybeDefaultIdentifier, isExport) {
      {
        node2.isExport = isExport || false;
      }
      node2.id = maybeDefaultIdentifier || this.parseIdentifier();
      this.checkIdentifier(node2.id, 4096);
      this.expect(29);
      const moduleReference = this.tsParseModuleReference();
      if (node2.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);
      }
      node2.moduleReference = moduleReference;
      this.semicolon();
      return this.finishNode(node2, "TSImportEqualsDeclaration");
    }
    tsIsExternalModuleReference() {
      return this.isContextual(119) && this.lookaheadCharCode() === 40;
    }
    tsParseModuleReference() {
      return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(0);
    }
    tsParseExternalModuleReference() {
      const node2 = this.startNode();
      this.expectContextual(119);
      this.expect(10);
      if (!this.match(134)) {
        this.unexpected();
      }
      node2.expression = super.parseExprAtom();
      this.expect(11);
      this.sawUnambiguousESM = true;
      return this.finishNode(node2, "TSExternalModuleReference");
    }
    tsLookAhead(f) {
      const state = this.state.clone();
      const res = f();
      this.state = state;
      return res;
    }
    tsTryParseAndCatch(f) {
      const result = this.tryParse((abort) => f() || abort());
      if (result.aborted || !result.node) return;
      if (result.error) this.state = result.failState;
      return result.node;
    }
    tsTryParse(f) {
      const state = this.state.clone();
      const result = f();
      if (result !== void 0 && result !== false) {
        return result;
      }
      this.state = state;
    }
    tsTryParseDeclare(node2) {
      if (this.isLineTerminator()) {
        return;
      }
      const startType = this.state.type;
      return this.tsInAmbientContext(() => {
        switch (startType) {
          case 68:
            node2.declare = true;
            return super.parseFunctionStatement(node2, false, false);
          case 80:
            node2.declare = true;
            return this.parseClass(node2, true, false);
          case 126:
            return this.tsParseEnumDeclaration(node2, {
              declare: true
            });
          case 112:
            return this.tsParseAmbientExternalModuleDeclaration(node2);
          case 100:
            if (this.state.containsEsc) {
              return;
            }
          case 75:
          case 74:
            if (!this.match(75) || !this.isLookaheadContextual("enum")) {
              node2.declare = true;
              return this.parseVarStatement(node2, this.state.value, true);
            }
            this.expect(75);
            return this.tsParseEnumDeclaration(node2, {
              const: true,
              declare: true
            });
          case 107:
            if (this.hasPlugin("explicitResourceManagement") && this.isUsing()) {
              this.raise(TSErrors.InvalidModifierOnUsingDeclaration, this.state.startLoc, "declare");
              node2.declare = true;
              return this.parseVarStatement(node2, "using", true);
            }
            break;
          case 96:
            if (this.hasPlugin("explicitResourceManagement") && this.isAwaitUsing()) {
              this.raise(TSErrors.InvalidModifierOnAwaitUsingDeclaration, this.state.startLoc, "declare");
              node2.declare = true;
              this.next();
              return this.parseVarStatement(node2, "await using", true);
            }
            break;
          case 129: {
            const result = this.tsParseInterfaceDeclaration(node2, {
              declare: true
            });
            if (result) return result;
          }
          default:
            if (tokenIsIdentifier(startType)) {
              return this.tsParseDeclaration(node2, this.state.value, true, null);
            }
        }
      });
    }
    tsTryParseExportDeclaration() {
      return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
    }
    tsParseExpressionStatement(node2, expr, decorators) {
      switch (expr.name) {
        case "declare": {
          const declaration = this.tsTryParseDeclare(node2);
          if (declaration) {
            declaration.declare = true;
          }
          return declaration;
        }
        case "global":
          if (this.match(5)) {
            this.scope.enter(512);
            this.prodParam.enter(0);
            const mod = node2;
            mod.kind = "global";
            {
              node2.global = true;
            }
            mod.id = expr;
            mod.body = this.tsParseModuleBlock();
            this.scope.exit();
            this.prodParam.exit();
            return this.finishNode(mod, "TSModuleDeclaration");
          }
          break;
        default:
          return this.tsParseDeclaration(node2, expr.name, false, decorators);
      }
    }
    tsParseDeclaration(node2, value2, next, decorators) {
      switch (value2) {
        case "abstract":
          if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
            return this.tsParseAbstractDeclaration(node2, decorators);
          }
          break;
        case "module":
          if (this.tsCheckLineTerminator(next)) {
            if (this.match(134)) {
              return this.tsParseAmbientExternalModuleDeclaration(node2);
            } else if (tokenIsIdentifier(this.state.type)) {
              node2.kind = "module";
              return this.tsParseModuleOrNamespaceDeclaration(node2);
            }
          }
          break;
        case "namespace":
          if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
            node2.kind = "namespace";
            return this.tsParseModuleOrNamespaceDeclaration(node2);
          }
          break;
        case "type":
          if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
            return this.tsParseTypeAliasDeclaration(node2);
          }
          break;
      }
    }
    tsCheckLineTerminator(next) {
      if (next) {
        if (this.hasFollowingLineBreak()) return false;
        this.next();
        return true;
      }
      return !this.isLineTerminator();
    }
    tsTryParseGenericAsyncArrowFunction(startLoc) {
      if (!this.match(47)) return;
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = true;
      const res = this.tsTryParseAndCatch(() => {
        const node2 = this.startNodeAt(startLoc);
        node2.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
        super.parseFunctionParams(node2);
        node2.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
        this.expect(19);
        return node2;
      });
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      if (!res) return;
      return super.parseArrowExpression(res, null, true);
    }
    tsParseTypeArgumentsInExpression() {
      if (this.reScan_lt() !== 47) return;
      return this.tsParseTypeArguments();
    }
    tsParseTypeArguments() {
      const node2 = this.startNode();
      node2.params = this.tsInType(() => this.tsInTopLevelContext(() => {
        this.expect(47);
        return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
      }));
      if (node2.params.length === 0) {
        this.raise(TSErrors.EmptyTypeArguments, node2);
      } else if (!this.state.inType && this.curContext() === types2.brace) {
        this.reScan_lt_gt();
      }
      this.expect(48);
      return this.finishNode(node2, "TSTypeParameterInstantiation");
    }
    tsIsDeclarationStart() {
      return tokenIsTSDeclarationStart(this.state.type);
    }
    isExportDefaultSpecifier() {
      if (this.tsIsDeclarationStart()) return false;
      return super.isExportDefaultSpecifier();
    }
    parseBindingElement(flags, decorators) {
      const startLoc = decorators.length ? decorators[0].loc.start : this.state.startLoc;
      const modified = {};
      this.tsParseModifiers({
        allowedModifiers: ["public", "private", "protected", "override", "readonly"]
      }, modified);
      const accessibility = modified.accessibility;
      const override = modified.override;
      const readonly = modified.readonly;
      if (!(flags & 4) && (accessibility || readonly || override)) {
        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
      }
      const left = this.parseMaybeDefault();
      if (flags & 2) {
        this.parseFunctionParamType(left);
      }
      const elt = this.parseMaybeDefault(left.loc.start, left);
      if (accessibility || readonly || override) {
        const pp = this.startNodeAt(startLoc);
        if (decorators.length) {
          pp.decorators = decorators;
        }
        if (accessibility) pp.accessibility = accessibility;
        if (readonly) pp.readonly = readonly;
        if (override) pp.override = override;
        if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);
        }
        pp.parameter = elt;
        return this.finishNode(pp, "TSParameterProperty");
      }
      if (decorators.length) {
        left.decorators = decorators;
      }
      return elt;
    }
    isSimpleParameter(node2) {
      return node2.type === "TSParameterProperty" && super.isSimpleParameter(node2.parameter) || super.isSimpleParameter(node2);
    }
    tsDisallowOptionalPattern(node2) {
      for (const param of node2.params) {
        if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
          this.raise(TSErrors.PatternIsOptional, param);
        }
      }
    }
    setArrowFunctionParameters(node2, params, trailingCommaLoc) {
      super.setArrowFunctionParameters(node2, params, trailingCommaLoc);
      this.tsDisallowOptionalPattern(node2);
    }
    parseFunctionBodyAndFinish(node2, type, isMethod = false) {
      if (this.match(14)) {
        node2.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
      }
      const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
      if (bodilessType && !this.match(5) && this.isLineTerminator()) {
        return this.finishNode(node2, bodilessType);
      }
      if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
        this.raise(TSErrors.DeclareFunctionHasImplementation, node2);
        if (node2.declare) {
          return super.parseFunctionBodyAndFinish(node2, bodilessType, isMethod);
        }
      }
      this.tsDisallowOptionalPattern(node2);
      return super.parseFunctionBodyAndFinish(node2, type, isMethod);
    }
    registerFunctionStatementId(node2) {
      if (!node2.body && node2.id) {
        this.checkIdentifier(node2.id, 1024);
      } else {
        super.registerFunctionStatementId(node2);
      }
    }
    tsCheckForInvalidTypeCasts(items) {
      items.forEach((node2) => {
        if ((node2 == null ? void 0 : node2.type) === "TSTypeCastExpression") {
          this.raise(TSErrors.UnexpectedTypeAnnotation, node2.typeAnnotation);
        }
      });
    }
    toReferencedList(exprList, isInParens) {
      this.tsCheckForInvalidTypeCasts(exprList);
      return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      const node2 = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
      if (node2.type === "ArrayExpression") {
        this.tsCheckForInvalidTypeCasts(node2.elements);
      }
      return node2;
    }
    parseSubscript(base2, startLoc, noCalls, state) {
      if (!this.hasPrecedingLineBreak() && this.match(35)) {
        this.state.canStartJSXElement = false;
        this.next();
        const nonNullExpression = this.startNodeAt(startLoc);
        nonNullExpression.expression = base2;
        return this.finishNode(nonNullExpression, "TSNonNullExpression");
      }
      let isOptionalCall = false;
      if (this.match(18) && this.lookaheadCharCode() === 60) {
        if (noCalls) {
          state.stop = true;
          return base2;
        }
        state.optionalChainMember = isOptionalCall = true;
        this.next();
      }
      if (this.match(47) || this.match(51)) {
        let missingParenErrorLoc;
        const result = this.tsTryParseAndCatch(() => {
          if (!noCalls && this.atPossibleAsyncArrow(base2)) {
            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
            if (asyncArrowFn) {
              return asyncArrowFn;
            }
          }
          const typeArguments = this.tsParseTypeArgumentsInExpression();
          if (!typeArguments) return;
          if (isOptionalCall && !this.match(10)) {
            missingParenErrorLoc = this.state.curPosition();
            return;
          }
          if (tokenIsTemplate(this.state.type)) {
            const result2 = super.parseTaggedTemplateExpression(base2, startLoc, state);
            {
              result2.typeParameters = typeArguments;
            }
            return result2;
          }
          if (!noCalls && this.eat(10)) {
            const node3 = this.startNodeAt(startLoc);
            node3.callee = base2;
            node3.arguments = this.parseCallExpressionArguments(11);
            this.tsCheckForInvalidTypeCasts(node3.arguments);
            {
              node3.typeParameters = typeArguments;
            }
            if (state.optionalChainMember) {
              node3.optional = isOptionalCall;
            }
            return this.finishCallExpression(node3, state.optionalChainMember);
          }
          const tokenType = this.state.type;
          if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
            return;
          }
          const node2 = this.startNodeAt(startLoc);
          node2.expression = base2;
          {
            node2.typeParameters = typeArguments;
          }
          return this.finishNode(node2, "TSInstantiationExpression");
        });
        if (missingParenErrorLoc) {
          this.unexpected(missingParenErrorLoc, 10);
        }
        if (result) {
          if (result.type === "TSInstantiationExpression") {
            if (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) {
              this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);
            }
            if (!this.match(16) && !this.match(18)) {
              result.expression = super.stopParseSubscript(base2, state);
            }
          }
          return result;
        }
      }
      return super.parseSubscript(base2, startLoc, noCalls, state);
    }
    parseNewCallee(node2) {
      var _callee$extra;
      super.parseNewCallee(node2);
      const {
        callee
      } = node2;
      if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
        {
          node2.typeParameters = callee.typeParameters;
        }
        node2.callee = callee.expression;
      }
    }
    parseExprOp(left, leftStartLoc, minPrec) {
      let isSatisfies;
      if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
        const node2 = this.startNodeAt(leftStartLoc);
        node2.expression = left;
        node2.typeAnnotation = this.tsInType(() => {
          this.next();
          if (this.match(75)) {
            if (isSatisfies) {
              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {
                keyword: "const"
              });
            }
            return this.tsParseTypeReference();
          }
          return this.tsParseType();
        });
        this.finishNode(node2, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
        this.reScan_lt_gt();
        return this.parseExprOp(node2, leftStartLoc, minPrec);
      }
      return super.parseExprOp(left, leftStartLoc, minPrec);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding2) {
      if (!this.state.isAmbientContext) {
        super.checkReservedWord(word, startLoc, checkKeywords, isBinding2);
      }
    }
    checkImportReflection(node2) {
      super.checkImportReflection(node2);
      if (node2.module && node2.importKind !== "value") {
        this.raise(TSErrors.ImportReflectionHasImportType, node2.specifiers[0].loc.start);
      }
    }
    checkDuplicateExports() {
    }
    isPotentialImportPhase(isExport) {
      if (super.isPotentialImportPhase(isExport)) return true;
      if (this.isContextual(130)) {
        const ch = this.lookaheadCharCode();
        return isExport ? ch === 123 || ch === 42 : ch !== 61;
      }
      return !isExport && this.isContextual(87);
    }
    applyImportPhase(node2, isExport, phase, loc) {
      super.applyImportPhase(node2, isExport, phase, loc);
      if (isExport) {
        node2.exportKind = phase === "type" ? "type" : "value";
      } else {
        node2.importKind = phase === "type" || phase === "typeof" ? phase : "value";
      }
    }
    parseImport(node2) {
      if (this.match(134)) {
        node2.importKind = "value";
        return super.parseImport(node2);
      }
      let importNode;
      if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
        node2.importKind = "value";
        return this.tsParseImportEqualsDeclaration(node2);
      } else if (this.isContextual(130)) {
        const maybeDefaultIdentifier = this.parseMaybeImportPhase(node2, false);
        if (this.lookaheadCharCode() === 61) {
          return this.tsParseImportEqualsDeclaration(node2, maybeDefaultIdentifier);
        } else {
          importNode = super.parseImportSpecifiersAndAfter(node2, maybeDefaultIdentifier);
        }
      } else {
        importNode = super.parseImport(node2);
      }
      if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);
      }
      return importNode;
    }
    parseExport(node2, decorators) {
      if (this.match(83)) {
        const nodeImportEquals = node2;
        this.next();
        let maybeDefaultIdentifier = null;
        if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
          maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false);
        } else {
          nodeImportEquals.importKind = "value";
        }
        const declaration = this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
        {
          return declaration;
        }
      } else if (this.eat(29)) {
        const assign = node2;
        assign.expression = super.parseExpression();
        this.semicolon();
        this.sawUnambiguousESM = true;
        return this.finishNode(assign, "TSExportAssignment");
      } else if (this.eatContextual(93)) {
        const decl = node2;
        this.expectContextual(128);
        decl.id = this.parseIdentifier();
        this.semicolon();
        return this.finishNode(decl, "TSNamespaceExportDeclaration");
      } else {
        return super.parseExport(node2, decorators);
      }
    }
    isAbstractClass() {
      return this.isContextual(124) && this.lookahead().type === 80;
    }
    parseExportDefaultExpression() {
      if (this.isAbstractClass()) {
        const cls = this.startNode();
        this.next();
        cls.abstract = true;
        return this.parseClass(cls, true, true);
      }
      if (this.match(129)) {
        const result = this.tsParseInterfaceDeclaration(this.startNode());
        if (result) return result;
      }
      return super.parseExportDefaultExpression();
    }
    parseVarStatement(node2, kind, allowMissingInitializer = false) {
      const {
        isAmbientContext
      } = this.state;
      const declaration = super.parseVarStatement(node2, kind, allowMissingInitializer || isAmbientContext);
      if (!isAmbientContext) return declaration;
      for (const {
        id,
        init
      } of declaration.declarations) {
        if (!init) continue;
        if (kind === "var" || kind === "let" || !!id.typeAnnotation) {
          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);
        } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
          this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);
        }
      }
      return declaration;
    }
    parseStatementContent(flags, decorators) {
      if (this.match(75) && this.isLookaheadContextual("enum")) {
        const node2 = this.startNode();
        this.expect(75);
        return this.tsParseEnumDeclaration(node2, {
          const: true
        });
      }
      if (this.isContextual(126)) {
        return this.tsParseEnumDeclaration(this.startNode());
      }
      if (this.isContextual(129)) {
        const result = this.tsParseInterfaceDeclaration(this.startNode());
        if (result) return result;
      }
      return super.parseStatementContent(flags, decorators);
    }
    parseAccessModifier() {
      return this.tsParseModifier(["public", "protected", "private"]);
    }
    tsHasSomeModifiers(member, modifiers) {
      return modifiers.some((modifier) => {
        if (tsIsAccessModifier(modifier)) {
          return member.accessibility === modifier;
        }
        return !!member[modifier];
      });
    }
    tsIsStartOfStaticBlocks() {
      return this.isContextual(106) && this.lookaheadCharCode() === 123;
    }
    parseClassMember(classBody, member, state) {
      const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
      this.tsParseModifiers({
        allowedModifiers: modifiers,
        disallowedModifiers: ["in", "out"],
        stopOnStartOfClassStaticBlock: true,
        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
      }, member);
      const callParseClassMemberWithIsStatic = () => {
        if (this.tsIsStartOfStaticBlocks()) {
          this.next();
          this.next();
          if (this.tsHasSomeModifiers(member, modifiers)) {
            this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());
          }
          super.parseClassStaticBlock(classBody, member);
        } else {
          this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
        }
      };
      if (member.declare) {
        this.tsInAmbientContext(callParseClassMemberWithIsStatic);
      } else {
        callParseClassMemberWithIsStatic();
      }
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
      const idx = this.tsTryParseIndexSignature(member);
      if (idx) {
        classBody.body.push(idx);
        if (member.abstract) {
          this.raise(TSErrors.IndexSignatureHasAbstract, member);
        }
        if (member.accessibility) {
          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {
            modifier: member.accessibility
          });
        }
        if (member.declare) {
          this.raise(TSErrors.IndexSignatureHasDeclare, member);
        }
        if (member.override) {
          this.raise(TSErrors.IndexSignatureHasOverride, member);
        }
        return;
      }
      if (!this.state.inAbstractClass && member.abstract) {
        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);
      }
      if (member.override) {
        if (!state.hadSuperClass) {
          this.raise(TSErrors.OverrideNotInSubClass, member);
        }
      }
      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parsePostMemberNameModifiers(methodOrProp) {
      const optional = this.eat(17);
      if (optional) methodOrProp.optional = true;
      if (methodOrProp.readonly && this.match(10)) {
        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);
      }
      if (methodOrProp.declare && this.match(10)) {
        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
      }
    }
    parseExpressionStatement(node2, expr, decorators) {
      const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node2, expr, decorators) : void 0;
      return decl || super.parseExpressionStatement(node2, expr, decorators);
    }
    shouldParseExportDeclaration() {
      if (this.tsIsDeclarationStart()) return true;
      return super.shouldParseExportDeclaration();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (!this.match(17)) return expr;
      if (this.state.maybeInArrowParameters) {
        const nextCh = this.lookaheadCharCode();
        if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
          this.setOptionalParametersError(refExpressionErrors);
          return expr;
        }
      }
      return super.parseConditional(expr, startLoc, refExpressionErrors);
    }
    parseParenItem(node2, startLoc) {
      const newNode = super.parseParenItem(node2, startLoc);
      if (this.eat(17)) {
        newNode.optional = true;
        this.resetEndLocation(node2);
      }
      if (this.match(14)) {
        const typeCastNode = this.startNodeAt(startLoc);
        typeCastNode.expression = node2;
        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
        return this.finishNode(typeCastNode, "TSTypeCastExpression");
      }
      return node2;
    }
    parseExportDeclaration(node2) {
      if (!this.state.isAmbientContext && this.isContextual(125)) {
        return this.tsInAmbientContext(() => this.parseExportDeclaration(node2));
      }
      const startLoc = this.state.startLoc;
      const isDeclare = this.eatContextual(125);
      if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
      }
      const isIdentifier = tokenIsIdentifier(this.state.type);
      const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node2);
      if (!declaration) return null;
      if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
        node2.exportKind = "type";
      }
      if (isDeclare && declaration.type !== "TSImportEqualsDeclaration") {
        this.resetStartLocation(declaration, startLoc);
        declaration.declare = true;
      }
      return declaration;
    }
    parseClassId(node2, isStatement, optionalId, bindingType) {
      if ((!isStatement || optionalId) && this.isContextual(113)) {
        return;
      }
      super.parseClassId(node2, isStatement, optionalId, node2.declare ? 1024 : 8331);
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      if (typeParameters) node2.typeParameters = typeParameters;
    }
    parseClassPropertyAnnotation(node2) {
      if (!node2.optional) {
        if (this.eat(35)) {
          node2.definite = true;
        } else if (this.eat(17)) {
          node2.optional = true;
        }
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) node2.typeAnnotation = type;
    }
    parseClassProperty(node2) {
      this.parseClassPropertyAnnotation(node2);
      if (this.state.isAmbientContext && !(node2.readonly && !node2.typeAnnotation) && this.match(29)) {
        this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);
      }
      if (node2.abstract && this.match(29)) {
        const {
          key
        } = node2;
        this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {
          propertyName: key.type === "Identifier" && !node2.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`
        });
      }
      return super.parseClassProperty(node2);
    }
    parseClassPrivateProperty(node2) {
      if (node2.abstract) {
        this.raise(TSErrors.PrivateElementHasAbstract, node2);
      }
      if (node2.accessibility) {
        this.raise(TSErrors.PrivateElementHasAccessibility, node2, {
          modifier: node2.accessibility
        });
      }
      this.parseClassPropertyAnnotation(node2);
      return super.parseClassPrivateProperty(node2);
    }
    parseClassAccessorProperty(node2) {
      this.parseClassPropertyAnnotation(node2);
      if (node2.optional) {
        this.raise(TSErrors.AccessorCannotBeOptional, node2);
      }
      return super.parseClassAccessorProperty(node2);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters && isConstructor) {
        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
      }
      const {
        declare = false,
        kind
      } = method;
      if (declare && (kind === "get" || kind === "set")) {
        this.raise(TSErrors.DeclareAccessor, method, {
          kind
        });
      }
      if (typeParameters) method.typeParameters = typeParameters;
      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) method.typeParameters = typeParameters;
      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    declareClassPrivateMethodInScope(node2, kind) {
      if (node2.type === "TSDeclareMethod") return;
      if (node2.type === "MethodDefinition" && node2.value.body == null) {
        return;
      }
      super.declareClassPrivateMethodInScope(node2, kind);
    }
    parseClassSuper(node2) {
      super.parseClassSuper(node2);
      if (node2.superClass && (this.match(47) || this.match(51))) {
        {
          node2.superTypeParameters = this.tsParseTypeArgumentsInExpression();
        }
      }
      if (this.eatContextual(113)) {
        node2.implements = this.tsParseHeritageClause("implements");
      }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) prop.typeParameters = typeParameters;
      return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
    }
    parseFunctionParams(node2, isConstructor) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) node2.typeParameters = typeParameters;
      super.parseFunctionParams(node2, isConstructor);
    }
    parseVarId(decl, kind) {
      super.parseVarId(decl, kind);
      if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
        decl.definite = true;
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) {
        decl.id.typeAnnotation = type;
        this.resetEndLocation(decl.id);
      }
    }
    parseAsyncArrowFromCallExpression(node2, call) {
      if (this.match(14)) {
        node2.returnType = this.tsParseTypeAnnotation();
      }
      return super.parseAsyncArrowFromCallExpression(node2, call);
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
      let state;
      let jsx3;
      let typeCast;
      if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
        state = this.state.clone();
        jsx3 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
        if (!jsx3.error) return jsx3.node;
        const {
          context: context2
        } = this.state;
        const currentContext = context2[context2.length - 1];
        if (currentContext === types2.j_oTag || currentContext === types2.j_expr) {
          context2.pop();
        }
      }
      if (!((_jsx = jsx3) != null && _jsx.error) && !this.match(47)) {
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }
      if (!state || state === this.state) state = this.state.clone();
      let typeParameters;
      const arrow = this.tryParse((abort) => {
        var _expr$extra, _typeParameters;
        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
        const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
          abort();
        }
        if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
          this.resetStartLocationFromNode(expr, typeParameters);
        }
        expr.typeParameters = typeParameters;
        return expr;
      }, state);
      if (!arrow.error && !arrow.aborted) {
        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
        return arrow.node;
      }
      if (!jsx3) {
        assert2(!this.hasPlugin("jsx"));
        typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
        if (!typeCast.error) return typeCast.node;
      }
      if ((_jsx2 = jsx3) != null && _jsx2.node) {
        this.state = jsx3.failState;
        return jsx3.node;
      }
      if (arrow.node) {
        this.state = arrow.failState;
        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
        return arrow.node;
      }
      if ((_typeCast = typeCast) != null && _typeCast.node) {
        this.state = typeCast.failState;
        return typeCast.node;
      }
      throw ((_jsx3 = jsx3) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
    }
    reportReservedArrowTypeParam(node2) {
      var _node$extra2;
      if (node2.params.length === 1 && !node2.params[0].constraint && !((_node$extra2 = node2.extra) != null && _node$extra2.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
        this.raise(TSErrors.ReservedArrowTypeParam, node2);
      }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
      if (!this.hasPlugin("jsx") && this.match(47)) {
        return this.tsParseTypeAssertion();
      }
      return super.parseMaybeUnary(refExpressionErrors, sawUnary);
    }
    parseArrow(node2) {
      if (this.match(14)) {
        const result = this.tryParse((abort) => {
          const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
          if (this.canInsertSemicolon() || !this.match(19)) abort();
          return returnType;
        });
        if (result.aborted) return;
        if (!result.thrown) {
          if (result.error) this.state = result.failState;
          node2.returnType = result.node;
        }
      }
      return super.parseArrow(node2);
    }
    parseFunctionParamType(param) {
      if (this.eat(17)) {
        param.optional = true;
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) param.typeAnnotation = type;
      this.resetEndLocation(param);
      return param;
    }
    isAssignable(node2, isBinding2) {
      switch (node2.type) {
        case "TSTypeCastExpression":
          return this.isAssignable(node2.expression, isBinding2);
        case "TSParameterProperty":
          return true;
        default:
          return super.isAssignable(node2, isBinding2);
      }
    }
    toAssignable(node2, isLHS = false) {
      switch (node2.type) {
        case "ParenthesizedExpression":
          this.toAssignableParenthesizedExpression(node2, isLHS);
          break;
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
          if (isLHS) {
            this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node2);
          } else {
            this.raise(TSErrors.UnexpectedTypeCastInParameter, node2);
          }
          this.toAssignable(node2.expression, isLHS);
          break;
        case "AssignmentExpression":
          if (!isLHS && node2.left.type === "TSTypeCastExpression") {
            node2.left = this.typeCastToParameter(node2.left);
          }
        default:
          super.toAssignable(node2, isLHS);
      }
    }
    toAssignableParenthesizedExpression(node2, isLHS) {
      switch (node2.expression.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
        case "ParenthesizedExpression":
          this.toAssignable(node2.expression, isLHS);
          break;
        default:
          super.toAssignable(node2, isLHS);
      }
    }
    checkToRestConversion(node2, allowPattern) {
      switch (node2.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          this.checkToRestConversion(node2.expression, false);
          break;
        default:
          super.checkToRestConversion(node2, allowPattern);
      }
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding2) {
      switch (type) {
        case "TSTypeCastExpression":
          return true;
        case "TSParameterProperty":
          return "parameter";
        case "TSNonNullExpression":
          return "expression";
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
          return (binding2 !== 64 || !isUnparenthesizedInAssign) && ["expression", true];
        default:
          return super.isValidLVal(type, isUnparenthesizedInAssign, binding2);
      }
    }
    parseBindingAtom() {
      if (this.state.type === 78) {
        return this.parseIdentifier(true);
      }
      return super.parseBindingAtom();
    }
    parseMaybeDecoratorArguments(expr, startLoc) {
      if (this.match(47) || this.match(51)) {
        const typeArguments = this.tsParseTypeArgumentsInExpression();
        if (this.match(10)) {
          const call = super.parseMaybeDecoratorArguments(expr, startLoc);
          {
            call.typeParameters = typeArguments;
          }
          return call;
        }
        this.unexpected(null, 10);
      }
      return super.parseMaybeDecoratorArguments(expr, startLoc);
    }
    checkCommaAfterRest(close) {
      if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
        this.next();
        return false;
      }
      return super.checkCommaAfterRest(close);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(35) || this.match(14) || super.isClassProperty();
    }
    parseMaybeDefault(startLoc, left) {
      const node2 = super.parseMaybeDefault(startLoc, left);
      if (node2.type === "AssignmentPattern" && node2.typeAnnotation && node2.right.start < node2.typeAnnotation.start) {
        this.raise(TSErrors.TypeAnnotationAfterAssign, node2.typeAnnotation);
      }
      return node2;
    }
    getTokenFromCode(code2) {
      if (this.state.inType) {
        if (code2 === 62) {
          this.finishOp(48, 1);
          return;
        }
        if (code2 === 60) {
          this.finishOp(47, 1);
          return;
        }
      }
      super.getTokenFromCode(code2);
    }
    reScan_lt_gt() {
      const {
        type
      } = this.state;
      if (type === 47) {
        this.state.pos -= 1;
        this.readToken_lt();
      } else if (type === 48) {
        this.state.pos -= 1;
        this.readToken_gt();
      }
    }
    reScan_lt() {
      const {
        type
      } = this.state;
      if (type === 51) {
        this.state.pos -= 2;
        this.finishOp(47, 1);
        return 47;
      }
      return type;
    }
    toAssignableListItem(exprList, index, isLHS) {
      const node2 = exprList[index];
      if (node2.type === "TSTypeCastExpression") {
        exprList[index] = this.typeCastToParameter(node2);
      }
      super.toAssignableListItem(exprList, index, isLHS);
    }
    typeCastToParameter(node2) {
      node2.expression.typeAnnotation = node2.typeAnnotation;
      this.resetEndLocation(node2.expression, node2.typeAnnotation.loc.end);
      return node2.expression;
    }
    shouldParseArrow(params) {
      if (this.match(14)) {
        return params.every((expr) => this.isAssignable(expr, true));
      }
      return super.shouldParseArrow(params);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    canHaveLeadingDecorator() {
      return super.canHaveLeadingDecorator() || this.isAbstractClass();
    }
    jsxParseOpeningElementAfterName(node2) {
      if (this.match(47) || this.match(51)) {
        const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
        if (typeArguments) {
          {
            node2.typeParameters = typeArguments;
          }
        }
      }
      return super.jsxParseOpeningElementAfterName(node2);
    }
    getGetterSetterExpectedParamCount(method) {
      const baseCount = super.getGetterSetterExpectedParamCount(method);
      const params = this.getObjectOrClassMethodParams(method);
      const firstParam = params[0];
      const hasContextParam = firstParam && this.isThisParam(firstParam);
      return hasContextParam ? baseCount + 1 : baseCount;
    }
    parseCatchClauseParam() {
      const param = super.parseCatchClauseParam();
      const type = this.tsTryParseTypeAnnotation();
      if (type) {
        param.typeAnnotation = type;
        this.resetEndLocation(param);
      }
      return param;
    }
    tsInAmbientContext(cb) {
      const {
        isAmbientContext: oldIsAmbientContext,
        strict: oldStrict
      } = this.state;
      this.state.isAmbientContext = true;
      this.state.strict = false;
      try {
        return cb();
      } finally {
        this.state.isAmbientContext = oldIsAmbientContext;
        this.state.strict = oldStrict;
      }
    }
    parseClass(node2, isStatement, optionalId) {
      const oldInAbstractClass = this.state.inAbstractClass;
      this.state.inAbstractClass = !!node2.abstract;
      try {
        return super.parseClass(node2, isStatement, optionalId);
      } finally {
        this.state.inAbstractClass = oldInAbstractClass;
      }
    }
    tsParseAbstractDeclaration(node2, decorators) {
      if (this.match(80)) {
        node2.abstract = true;
        return this.maybeTakeDecorators(decorators, this.parseClass(node2, true, false));
      } else if (this.isContextual(129)) {
        if (!this.hasFollowingLineBreak()) {
          node2.abstract = true;
          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifier, node2);
          return this.tsParseInterfaceDeclaration(node2);
        }
      } else {
        this.unexpected(null, 80);
      }
    }
    parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
      const method = super.parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
      if (method.abstract || method.type === "TSAbstractMethodDefinition") {
        const hasEstreePlugin = this.hasPlugin("estree");
        const methodFn = hasEstreePlugin ? method.value : method;
        if (methodFn.body) {
          const {
            key
          } = method;
          this.raise(TSErrors.AbstractMethodHasImplementation, method, {
            methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`
          });
        }
      }
      return method;
    }
    tsParseTypeParameterName() {
      const typeName = this.parseIdentifier();
      return typeName.name;
    }
    shouldParseAsAmbientContext() {
      return !!this.getPluginOption("typescript", "dts");
    }
    parse() {
      if (this.shouldParseAsAmbientContext()) {
        this.state.isAmbientContext = true;
      }
      return super.parse();
    }
    getExpression() {
      if (this.shouldParseAsAmbientContext()) {
        this.state.isAmbientContext = true;
      }
      return super.getExpression();
    }
    parseExportSpecifier(node2, isString, isInTypeExport, isMaybeTypeOnly) {
      if (!isString && isMaybeTypeOnly) {
        this.parseTypeOnlyImportExportSpecifier(node2, false, isInTypeExport);
        return this.finishNode(node2, "ExportSpecifier");
      }
      node2.exportKind = "value";
      return super.parseExportSpecifier(node2, isString, isInTypeExport, isMaybeTypeOnly);
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      if (!importedIsString && isMaybeTypeOnly) {
        this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      specifier.importKind = "value";
      return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
    }
    parseTypeOnlyImportExportSpecifier(node2, isImport, isInTypeOnlyImportExport) {
      const leftOfAsKey = isImport ? "imported" : "local";
      const rightOfAsKey = isImport ? "local" : "exported";
      let leftOfAs = node2[leftOfAsKey];
      let rightOfAs;
      let hasTypeSpecifier = false;
      let canParseAsKeyword = true;
      const loc = leftOfAs.loc.start;
      if (this.isContextual(93)) {
        const firstAs = this.parseIdentifier();
        if (this.isContextual(93)) {
          const secondAs = this.parseIdentifier();
          if (tokenIsKeywordOrIdentifier(this.state.type)) {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
            rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
            canParseAsKeyword = false;
          } else {
            rightOfAs = secondAs;
            canParseAsKeyword = false;
          }
        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
          canParseAsKeyword = false;
          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        } else {
          hasTypeSpecifier = true;
          leftOfAs = firstAs;
        }
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        hasTypeSpecifier = true;
        if (isImport) {
          leftOfAs = this.parseIdentifier(true);
          if (!this.isContextual(93)) {
            this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
          }
        } else {
          leftOfAs = this.parseModuleExportName();
        }
      }
      if (hasTypeSpecifier && isInTypeOnlyImportExport) {
        this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);
      }
      node2[leftOfAsKey] = leftOfAs;
      node2[rightOfAsKey] = rightOfAs;
      const kindKey = isImport ? "importKind" : "exportKind";
      node2[kindKey] = hasTypeSpecifier ? "type" : "value";
      if (canParseAsKeyword && this.eatContextual(93)) {
        node2[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
      }
      if (!node2[rightOfAsKey]) {
        node2[rightOfAsKey] = this.cloneIdentifier(node2[leftOfAsKey]);
      }
      if (isImport) {
        this.checkIdentifier(node2[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
      }
    }
    fillOptionalPropertiesForTSESLint(node2) {
      var _node$directive, _node$decorators, _node$optional, _node$typeAnnotation, _node$accessibility, _node$decorators2, _node$override, _node$readonly, _node$static, _node$declare, _node$returnType, _node$typeParameters, _node$optional2, _node$optional3, _node$accessibility2, _node$readonly2, _node$static2, _node$declare2, _node$definite, _node$readonly3, _node$typeAnnotation2, _node$accessibility3, _node$decorators3, _node$override2, _node$optional4, _node$id, _node$abstract, _node$declare3, _node$decorators4, _node$implements, _node$superTypeArgume, _node$typeParameters2, _node$declare4, _node$definite2, _node$const, _node$declare5, _node$computed, _node$qualifier, _node$options, _node$declare6, _node$extends, _node$declare7, _node$global, _node$const2, _node$in, _node$out;
      switch (node2.type) {
        case "ExpressionStatement":
          (_node$directive = node2.directive) != null ? _node$directive : node2.directive = void 0;
          return;
        case "RestElement":
          node2.value = void 0;
        case "Identifier":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "ObjectPattern":
          (_node$decorators = node2.decorators) != null ? _node$decorators : node2.decorators = [];
          (_node$optional = node2.optional) != null ? _node$optional : node2.optional = false;
          (_node$typeAnnotation = node2.typeAnnotation) != null ? _node$typeAnnotation : node2.typeAnnotation = void 0;
          return;
        case "TSParameterProperty":
          (_node$accessibility = node2.accessibility) != null ? _node$accessibility : node2.accessibility = void 0;
          (_node$decorators2 = node2.decorators) != null ? _node$decorators2 : node2.decorators = [];
          (_node$override = node2.override) != null ? _node$override : node2.override = false;
          (_node$readonly = node2.readonly) != null ? _node$readonly : node2.readonly = false;
          (_node$static = node2.static) != null ? _node$static : node2.static = false;
          return;
        case "TSEmptyBodyFunctionExpression":
          node2.body = null;
        case "TSDeclareFunction":
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ClassMethod":
        case "ClassPrivateMethod":
          (_node$declare = node2.declare) != null ? _node$declare : node2.declare = false;
          (_node$returnType = node2.returnType) != null ? _node$returnType : node2.returnType = void 0;
          (_node$typeParameters = node2.typeParameters) != null ? _node$typeParameters : node2.typeParameters = void 0;
          return;
        case "Property":
          (_node$optional2 = node2.optional) != null ? _node$optional2 : node2.optional = false;
          return;
        case "TSMethodSignature":
        case "TSPropertySignature":
          (_node$optional3 = node2.optional) != null ? _node$optional3 : node2.optional = false;
        case "TSIndexSignature":
          (_node$accessibility2 = node2.accessibility) != null ? _node$accessibility2 : node2.accessibility = void 0;
          (_node$readonly2 = node2.readonly) != null ? _node$readonly2 : node2.readonly = false;
          (_node$static2 = node2.static) != null ? _node$static2 : node2.static = false;
          return;
        case "TSAbstractPropertyDefinition":
        case "PropertyDefinition":
        case "TSAbstractAccessorProperty":
        case "AccessorProperty":
          (_node$declare2 = node2.declare) != null ? _node$declare2 : node2.declare = false;
          (_node$definite = node2.definite) != null ? _node$definite : node2.definite = false;
          (_node$readonly3 = node2.readonly) != null ? _node$readonly3 : node2.readonly = false;
          (_node$typeAnnotation2 = node2.typeAnnotation) != null ? _node$typeAnnotation2 : node2.typeAnnotation = void 0;
        case "TSAbstractMethodDefinition":
        case "MethodDefinition":
          (_node$accessibility3 = node2.accessibility) != null ? _node$accessibility3 : node2.accessibility = void 0;
          (_node$decorators3 = node2.decorators) != null ? _node$decorators3 : node2.decorators = [];
          (_node$override2 = node2.override) != null ? _node$override2 : node2.override = false;
          (_node$optional4 = node2.optional) != null ? _node$optional4 : node2.optional = false;
          return;
        case "ClassExpression":
          (_node$id = node2.id) != null ? _node$id : node2.id = null;
        case "ClassDeclaration":
          (_node$abstract = node2.abstract) != null ? _node$abstract : node2.abstract = false;
          (_node$declare3 = node2.declare) != null ? _node$declare3 : node2.declare = false;
          (_node$decorators4 = node2.decorators) != null ? _node$decorators4 : node2.decorators = [];
          (_node$implements = node2.implements) != null ? _node$implements : node2.implements = [];
          (_node$superTypeArgume = node2.superTypeArguments) != null ? _node$superTypeArgume : node2.superTypeArguments = void 0;
          (_node$typeParameters2 = node2.typeParameters) != null ? _node$typeParameters2 : node2.typeParameters = void 0;
          return;
        case "TSTypeAliasDeclaration":
        case "VariableDeclaration":
          (_node$declare4 = node2.declare) != null ? _node$declare4 : node2.declare = false;
          return;
        case "VariableDeclarator":
          (_node$definite2 = node2.definite) != null ? _node$definite2 : node2.definite = false;
          return;
        case "TSEnumDeclaration":
          (_node$const = node2.const) != null ? _node$const : node2.const = false;
          (_node$declare5 = node2.declare) != null ? _node$declare5 : node2.declare = false;
          return;
        case "TSEnumMember":
          (_node$computed = node2.computed) != null ? _node$computed : node2.computed = false;
          return;
        case "TSImportType":
          (_node$qualifier = node2.qualifier) != null ? _node$qualifier : node2.qualifier = null;
          (_node$options = node2.options) != null ? _node$options : node2.options = null;
          return;
        case "TSInterfaceDeclaration":
          (_node$declare6 = node2.declare) != null ? _node$declare6 : node2.declare = false;
          (_node$extends = node2.extends) != null ? _node$extends : node2.extends = [];
          return;
        case "TSModuleDeclaration":
          (_node$declare7 = node2.declare) != null ? _node$declare7 : node2.declare = false;
          (_node$global = node2.global) != null ? _node$global : node2.global = node2.kind === "global";
          return;
        case "TSTypeParameter":
          (_node$const2 = node2.const) != null ? _node$const2 : node2.const = false;
          (_node$in = node2.in) != null ? _node$in : node2.in = false;
          (_node$out = node2.out) != null ? _node$out : node2.out = false;
          return;
      }
    }
  };
  function isPossiblyLiteralEnum(expression) {
    if (expression.type !== "MemberExpression") return false;
    const {
      computed,
      property
    } = expression;
    if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
      return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
  }
  function isValidAmbientConstInitializer(expression, estree3) {
    var _expression$extra;
    const {
      type
    } = expression;
    if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
      return false;
    }
    if (estree3) {
      if (type === "Literal") {
        const {
          value: value2
        } = expression;
        if (typeof value2 === "string" || typeof value2 === "boolean") {
          return true;
        }
      }
    } else {
      if (type === "StringLiteral" || type === "BooleanLiteral") {
        return true;
      }
    }
    if (isNumber(expression, estree3) || isNegativeNumber(expression, estree3)) {
      return true;
    }
    if (type === "TemplateLiteral" && expression.expressions.length === 0) {
      return true;
    }
    if (isPossiblyLiteralEnum(expression)) {
      return true;
    }
    return false;
  }
  function isNumber(expression, estree3) {
    if (estree3) {
      return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
    }
    return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
  }
  function isNegativeNumber(expression, estree3) {
    if (expression.type === "UnaryExpression") {
      const {
        operator,
        argument
      } = expression;
      if (operator === "-" && isNumber(argument, estree3)) {
        return true;
      }
    }
    return false;
  }
  function isUncomputedMemberExpressionChain(expression) {
    if (expression.type === "Identifier") return true;
    if (expression.type !== "MemberExpression" || expression.computed) {
      return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
  }
  const PlaceholderErrors = ParseErrorEnum`placeholders`({
    ClassNameIsRequired: "A class name is required.",
    UnexpectedSpace: "Unexpected space in placeholder."
  });
  var placeholders2 = (superClass) => class PlaceholdersParserMixin extends superClass {
    parsePlaceholder(expectedNode) {
      if (this.match(133)) {
        const node2 = this.startNode();
        this.next();
        this.assertNoSpace();
        node2.name = super.parseIdentifier(true);
        this.assertNoSpace();
        this.expect(133);
        return this.finishPlaceholder(node2, expectedNode);
      }
    }
    finishPlaceholder(node2, expectedNode) {
      let placeholder = node2;
      if (!placeholder.expectedNode || !placeholder.type) {
        placeholder = this.finishNode(placeholder, "Placeholder");
      }
      placeholder.expectedNode = expectedNode;
      return placeholder;
    }
    getTokenFromCode(code2) {
      if (code2 === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
        this.finishOp(133, 2);
      } else {
        super.getTokenFromCode(code2);
      }
    }
    parseExprAtom(refExpressionErrors) {
      return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
    }
    parseIdentifier(liberal) {
      return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding2) {
      if (word !== void 0) {
        super.checkReservedWord(word, startLoc, checkKeywords, isBinding2);
      }
    }
    cloneIdentifier(node2) {
      const cloned = super.cloneIdentifier(node2);
      if (cloned.type === "Placeholder") {
        cloned.expectedNode = node2.expectedNode;
      }
      return cloned;
    }
    cloneStringLiteral(node2) {
      if (node2.type === "Placeholder") {
        return this.cloneIdentifier(node2);
      }
      return super.cloneStringLiteral(node2);
    }
    parseBindingAtom() {
      return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
    }
    isValidLVal(type, isParenthesized, binding2) {
      return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding2);
    }
    toAssignable(node2, isLHS) {
      if (node2 && node2.type === "Placeholder" && node2.expectedNode === "Expression") {
        node2.expectedNode = "Pattern";
      } else {
        super.toAssignable(node2, isLHS);
      }
    }
    chStartsBindingIdentifier(ch, pos) {
      if (super.chStartsBindingIdentifier(ch, pos)) {
        return true;
      }
      const nextToken = this.lookahead();
      if (nextToken.type === 133) {
        return true;
      }
      return false;
    }
    verifyBreakContinue(node2, isBreak) {
      if (node2.label && node2.label.type === "Placeholder") return;
      super.verifyBreakContinue(node2, isBreak);
    }
    parseExpressionStatement(node2, expr) {
      var _expr$extra;
      if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
        return super.parseExpressionStatement(node2, expr);
      }
      if (this.match(14)) {
        const stmt = node2;
        stmt.label = this.finishPlaceholder(expr, "Identifier");
        this.next();
        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
        return this.finishNode(stmt, "LabeledStatement");
      }
      this.semicolon();
      const stmtPlaceholder = node2;
      stmtPlaceholder.name = expr.name;
      return this.finishPlaceholder(stmtPlaceholder, "Statement");
    }
    parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
      return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
    }
    parseFunctionId(requireId) {
      return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
    }
    parseClass(node2, isStatement, optionalId) {
      const type = isStatement ? "ClassDeclaration" : "ClassExpression";
      this.next();
      const oldStrict = this.state.strict;
      const placeholder = this.parsePlaceholder("Identifier");
      if (placeholder) {
        if (this.match(81) || this.match(133) || this.match(5)) {
          node2.id = placeholder;
        } else if (optionalId || !isStatement) {
          node2.id = null;
          node2.body = this.finishPlaceholder(placeholder, "ClassBody");
          return this.finishNode(node2, type);
        } else {
          throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
        }
      } else {
        this.parseClassId(node2, isStatement, optionalId);
      }
      super.parseClassSuper(node2);
      node2.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node2.superClass, oldStrict);
      return this.finishNode(node2, type);
    }
    parseExport(node2, decorators) {
      const placeholder = this.parsePlaceholder("Identifier");
      if (!placeholder) return super.parseExport(node2, decorators);
      const node22 = node2;
      if (!this.isContextual(98) && !this.match(12)) {
        node22.specifiers = [];
        node22.source = null;
        node22.declaration = this.finishPlaceholder(placeholder, "Declaration");
        return this.finishNode(node22, "ExportNamedDeclaration");
      }
      this.expectPlugin("exportDefaultFrom");
      const specifier = this.startNode();
      specifier.exported = placeholder;
      node22.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
      return super.parseExport(node22, decorators);
    }
    isExportDefaultSpecifier() {
      if (this.match(65)) {
        const next = this.nextTokenStart();
        if (this.isUnparsedContextual(next, "from")) {
          if (this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) {
            return true;
          }
        }
      }
      return super.isExportDefaultSpecifier();
    }
    maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier) {
      var _specifiers;
      if ((_specifiers = node2.specifiers) != null && _specifiers.length) {
        return true;
      }
      return super.maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier);
    }
    checkExport(node2) {
      const {
        specifiers
      } = node2;
      if (specifiers != null && specifiers.length) {
        node2.specifiers = specifiers.filter((node3) => node3.exported.type === "Placeholder");
      }
      super.checkExport(node2);
      node2.specifiers = specifiers;
    }
    parseImport(node2) {
      const placeholder = this.parsePlaceholder("Identifier");
      if (!placeholder) return super.parseImport(node2);
      node2.specifiers = [];
      if (!this.isContextual(98) && !this.match(12)) {
        node2.source = this.finishPlaceholder(placeholder, "StringLiteral");
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      }
      const specifier = this.startNodeAtNode(placeholder);
      specifier.local = placeholder;
      node2.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
      if (this.eat(12)) {
        const hasStarImport = this.maybeParseStarImportSpecifier(node2);
        if (!hasStarImport) this.parseNamedImportSpecifiers(node2);
      }
      this.expectContextual(98);
      node2.source = this.parseImportSource();
      this.semicolon();
      return this.finishNode(node2, "ImportDeclaration");
    }
    parseImportSource() {
      return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
    }
    assertNoSpace() {
      if (this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index)) {
        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
      }
    }
  };
  var v8intrinsic = (superClass) => class V8IntrinsicMixin extends superClass {
    parseV8Intrinsic() {
      if (this.match(54)) {
        const v8IntrinsicStartLoc = this.state.startLoc;
        const node2 = this.startNode();
        this.next();
        if (tokenIsIdentifier(this.state.type)) {
          const name = this.parseIdentifierName();
          const identifier2 = this.createIdentifier(node2, name);
          this.castNodeTo(identifier2, "V8IntrinsicIdentifier");
          if (this.match(10)) {
            return identifier2;
          }
        }
        this.unexpected(v8IntrinsicStartLoc);
      }
    }
    parseExprAtom(refExpressionErrors) {
      return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
    }
  };
  const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
  const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
  function validatePlugins(pluginsMap) {
    if (pluginsMap.has("decorators")) {
      if (pluginsMap.has("decorators-legacy")) {
        throw new Error("Cannot use the decorators and decorators-legacy plugin together");
      }
      const decoratorsBeforeExport = pluginsMap.get("decorators").decoratorsBeforeExport;
      if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
        throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
      }
      const allowCallParenthesized = pluginsMap.get("decorators").allowCallParenthesized;
      if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
        throw new Error("'allowCallParenthesized' must be a boolean.");
      }
    }
    if (pluginsMap.has("flow") && pluginsMap.has("typescript")) {
      throw new Error("Cannot combine flow and typescript plugins.");
    }
    if (pluginsMap.has("placeholders") && pluginsMap.has("v8intrinsic")) {
      throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    }
    if (pluginsMap.has("pipelineOperator")) {
      var _pluginsMap$get2;
      const proposal = pluginsMap.get("pipelineOperator").proposal;
      if (!PIPELINE_PROPOSALS.includes(proposal)) {
        const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
        throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
      }
      if (proposal === "hack") {
        if (pluginsMap.has("placeholders")) {
          throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
        }
        if (pluginsMap.has("v8intrinsic")) {
          throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
        }
        const topicToken = pluginsMap.get("pipelineOperator").topicToken;
        if (!TOPIC_TOKENS.includes(topicToken)) {
          const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
          throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
        }
        {
          var _pluginsMap$get;
          if (topicToken === "#" && ((_pluginsMap$get = pluginsMap.get("recordAndTuple")) == null ? void 0 : _pluginsMap$get.syntaxType) === "hash") {
            throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\`.`);
          }
        }
      } else if (proposal === "smart" && ((_pluginsMap$get2 = pluginsMap.get("recordAndTuple")) == null ? void 0 : _pluginsMap$get2.syntaxType) === "hash") {
        throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\`.`);
      }
    }
    if (pluginsMap.has("moduleAttributes")) {
      {
        if (pluginsMap.has("deprecatedImportAssert") || pluginsMap.has("importAssertions")) {
          throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
        }
        const moduleAttributesVersionPluginOption = pluginsMap.get("moduleAttributes").version;
        if (moduleAttributesVersionPluginOption !== "may-2020") {
          throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
        }
      }
    }
    if (pluginsMap.has("importAssertions")) {
      if (pluginsMap.has("deprecatedImportAssert")) {
        throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
      }
    }
    if (!pluginsMap.has("deprecatedImportAssert") && pluginsMap.has("importAttributes") && pluginsMap.get("importAttributes").deprecatedAssertSyntax) {
      {
        pluginsMap.set("deprecatedImportAssert", {});
      }
    }
    if (pluginsMap.has("recordAndTuple")) {
      {
        const syntaxType = pluginsMap.get("recordAndTuple").syntaxType;
        if (syntaxType != null) {
          const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
          if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {
            throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
          }
        }
      }
    }
    if (pluginsMap.has("asyncDoExpressions") && !pluginsMap.has("doExpressions")) {
      const error2 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
      error2.missingPlugins = "doExpressions";
      throw error2;
    }
    if (pluginsMap.has("optionalChainingAssign") && pluginsMap.get("optionalChainingAssign").version !== "2023-07") {
      throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
    }
  }
  const mixinPlugins = {
    estree: estree2,
    jsx: jsx2,
    flow: flow2,
    typescript: typescript2,
    v8intrinsic,
    placeholders: placeholders2
  };
  const mixinPluginNames = Object.keys(mixinPlugins);
  class ExpressionParser extends LValParser {
    checkProto(prop, isRecord, sawProto, refExpressionErrors) {
      if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
        return sawProto;
      }
      const key = prop.key;
      const name = key.type === "Identifier" ? key.name : key.value;
      if (name === "__proto__") {
        if (isRecord) {
          this.raise(Errors.RecordNoProto, key);
          return true;
        }
        if (sawProto) {
          if (refExpressionErrors) {
            if (refExpressionErrors.doubleProtoLoc === null) {
              refExpressionErrors.doubleProtoLoc = key.loc.start;
            }
          } else {
            this.raise(Errors.DuplicateProto, key);
          }
        }
        return true;
      }
      return sawProto;
    }
    shouldExitDescending(expr, potentialArrowAt) {
      return expr.type === "ArrowFunctionExpression" && this.offsetToSourcePos(expr.start) === potentialArrowAt;
    }
    getExpression() {
      this.enterInitialScopes();
      this.nextToken();
      if (this.match(140)) {
        throw this.raise(Errors.ParseExpressionEmptyInput, this.state.startLoc);
      }
      const expr = this.parseExpression();
      if (!this.match(140)) {
        throw this.raise(Errors.ParseExpressionExpectsEOF, this.state.startLoc, {
          unexpected: this.input.codePointAt(this.state.start)
        });
      }
      this.finalizeRemainingComments();
      expr.comments = this.comments;
      expr.errors = this.state.errors;
      if (this.optionFlags & 256) {
        expr.tokens = this.tokens;
      }
      return expr;
    }
    parseExpression(disallowIn, refExpressionErrors) {
      if (disallowIn) {
        return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }
      return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
    }
    parseExpressionBase(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const expr = this.parseMaybeAssign(refExpressionErrors);
      if (this.match(12)) {
        const node2 = this.startNodeAt(startLoc);
        node2.expressions = [expr];
        while (this.eat(12)) {
          node2.expressions.push(this.parseMaybeAssign(refExpressionErrors));
        }
        this.toReferencedList(node2.expressions);
        return this.finishNode(node2, "SequenceExpression");
      }
      return expr;
    }
    parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
      return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
      return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    setOptionalParametersError(refExpressionErrors) {
      refExpressionErrors.optionalParametersLoc = this.state.startLoc;
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      const startLoc = this.state.startLoc;
      const isYield = this.isContextual(108);
      if (isYield) {
        if (this.prodParam.hasYield) {
          this.next();
          let left2 = this.parseYield(startLoc);
          if (afterLeftParse) {
            left2 = afterLeftParse.call(this, left2, startLoc);
          }
          return left2;
        }
      }
      let ownExpressionErrors;
      if (refExpressionErrors) {
        ownExpressionErrors = false;
      } else {
        refExpressionErrors = new ExpressionErrors();
        ownExpressionErrors = true;
      }
      const {
        type
      } = this.state;
      if (type === 10 || tokenIsIdentifier(type)) {
        this.state.potentialArrowAt = this.state.start;
      }
      let left = this.parseMaybeConditional(refExpressionErrors);
      if (afterLeftParse) {
        left = afterLeftParse.call(this, left, startLoc);
      }
      if (tokenIsAssignment(this.state.type)) {
        const node2 = this.startNodeAt(startLoc);
        const operator = this.state.value;
        node2.operator = operator;
        if (this.match(29)) {
          this.toAssignable(left, true);
          node2.left = left;
          const startIndex = startLoc.index;
          if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
            refExpressionErrors.doubleProtoLoc = null;
          }
          if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
            refExpressionErrors.shorthandAssignLoc = null;
          }
          if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
            this.checkDestructuringPrivate(refExpressionErrors);
            refExpressionErrors.privateKeyLoc = null;
          }
        } else {
          node2.left = left;
        }
        this.next();
        node2.right = this.parseMaybeAssign();
        this.checkLVal(left, this.finishNode(node2, "AssignmentExpression"));
        return node2;
      } else if (ownExpressionErrors) {
        this.checkExpressionErrors(refExpressionErrors, true);
      }
      if (isYield) {
        const {
          type: type2
        } = this.state;
        const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type2) : tokenCanStartExpression(type2) && !this.match(54);
        if (startsExpr2 && !this.isAmbiguousPrefixOrIdentifier()) {
          this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);
          return this.parseYield(startLoc);
        }
      }
      return left;
    }
    parseMaybeConditional(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseExprOps(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseConditional(expr, startLoc, refExpressionErrors);
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (this.eat(17)) {
        const node2 = this.startNodeAt(startLoc);
        node2.test = expr;
        node2.consequent = this.parseMaybeAssignAllowIn();
        this.expect(14);
        node2.alternate = this.parseMaybeAssign();
        return this.finishNode(node2, "ConditionalExpression");
      }
      return expr;
    }
    parseMaybeUnaryOrPrivate(refExpressionErrors) {
      return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
    }
    parseExprOps(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseExprOp(expr, startLoc, -1);
    }
    parseExprOp(left, leftStartLoc, minPrec) {
      if (this.isPrivateName(left)) {
        const value2 = this.getPrivateNameSV(left);
        if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
          this.raise(Errors.PrivateInExpectedIn, left, {
            identifierName: value2
          });
        }
        this.classScope.usePrivateName(value2, left.loc.start);
      }
      const op = this.state.type;
      if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
        let prec = tokenOperatorPrecedence(op);
        if (prec > minPrec) {
          if (op === 39) {
            this.expectPlugin("pipelineOperator");
            if (this.state.inFSharpPipelineDirectBody) {
              return left;
            }
            this.checkPipelineAtInfixOperator(left, leftStartLoc);
          }
          const node2 = this.startNodeAt(leftStartLoc);
          node2.left = left;
          node2.operator = this.state.value;
          const logical = op === 41 || op === 42;
          const coalesce = op === 40;
          if (coalesce) {
            prec = tokenOperatorPrecedence(42);
          }
          this.next();
          if (op === 39 && this.hasPlugin(["pipelineOperator", {
            proposal: "minimal"
          }])) {
            if (this.state.type === 96 && this.prodParam.hasAwait) {
              throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
            }
          }
          node2.right = this.parseExprOpRightExpr(op, prec);
          const finishedNode = this.finishNode(node2, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
          const nextOp = this.state.type;
          if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
            throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
          }
          return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
        }
      }
      return left;
    }
    parseExprOpRightExpr(op, prec) {
      const startLoc = this.state.startLoc;
      switch (op) {
        case 39:
          switch (this.getPluginOption("pipelineOperator", "proposal")) {
            case "hack":
              return this.withTopicBindingContext(() => {
                return this.parseHackPipeBody();
              });
            case "fsharp":
              return this.withSoloAwaitPermittingContext(() => {
                return this.parseFSharpPipelineBody(prec);
              });
          }
          if (this.getPluginOption("pipelineOperator", "proposal") === "smart") {
            return this.withTopicBindingContext(() => {
              if (this.prodParam.hasYield && this.isContextual(108)) {
                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
              }
              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
            });
          }
        default:
          return this.parseExprOpBaseRightExpr(op, prec);
      }
    }
    parseExprOpBaseRightExpr(op, prec) {
      const startLoc = this.state.startLoc;
      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
    }
    parseHackPipeBody() {
      var _body$extra;
      const {
        startLoc
      } = this.state;
      const body = this.parseMaybeAssign();
      const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
      if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
        this.raise(Errors.PipeUnparenthesizedBody, startLoc, {
          type: body.type
        });
      }
      if (!this.topicReferenceWasUsedInCurrentContext()) {
        this.raise(Errors.PipeTopicUnused, startLoc);
      }
      return body;
    }
    checkExponentialAfterUnary(node2) {
      if (this.match(57)) {
        this.raise(Errors.UnexpectedTokenUnaryExponentiation, node2.argument);
      }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
      const startLoc = this.state.startLoc;
      const isAwait = this.isContextual(96);
      if (isAwait && this.recordAwaitIfAllowed()) {
        this.next();
        const expr2 = this.parseAwait(startLoc);
        if (!sawUnary) this.checkExponentialAfterUnary(expr2);
        return expr2;
      }
      const update = this.match(34);
      const node2 = this.startNode();
      if (tokenIsPrefix(this.state.type)) {
        node2.operator = this.state.value;
        node2.prefix = true;
        if (this.match(72)) {
          this.expectPlugin("throwExpressions");
        }
        const isDelete = this.match(89);
        this.next();
        node2.argument = this.parseMaybeUnary(null, true);
        this.checkExpressionErrors(refExpressionErrors, true);
        if (this.state.strict && isDelete) {
          const arg = node2.argument;
          if (arg.type === "Identifier") {
            this.raise(Errors.StrictDelete, node2);
          } else if (this.hasPropertyAsPrivateName(arg)) {
            this.raise(Errors.DeletePrivateField, node2);
          }
        }
        if (!update) {
          if (!sawUnary) {
            this.checkExponentialAfterUnary(node2);
          }
          return this.finishNode(node2, "UnaryExpression");
        }
      }
      const expr = this.parseUpdate(node2, update, refExpressionErrors);
      if (isAwait) {
        const {
          type
        } = this.state;
        const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
        if (startsExpr2 && !this.isAmbiguousPrefixOrIdentifier()) {
          this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);
          return this.parseAwait(startLoc);
        }
      }
      return expr;
    }
    parseUpdate(node2, update, refExpressionErrors) {
      if (update) {
        const updateExpressionNode = node2;
        this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression"));
        return node2;
      }
      const startLoc = this.state.startLoc;
      let expr = this.parseExprSubscripts(refExpressionErrors);
      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
      while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
        const node3 = this.startNodeAt(startLoc);
        node3.operator = this.state.value;
        node3.prefix = false;
        node3.argument = expr;
        this.next();
        this.checkLVal(expr, expr = this.finishNode(node3, "UpdateExpression"));
      }
      return expr;
    }
    parseExprSubscripts(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseExprAtom(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseSubscripts(expr, startLoc);
    }
    parseSubscripts(base2, startLoc, noCalls) {
      const state = {
        optionalChainMember: false,
        maybeAsyncArrow: this.atPossibleAsyncArrow(base2),
        stop: false
      };
      do {
        base2 = this.parseSubscript(base2, startLoc, noCalls, state);
        state.maybeAsyncArrow = false;
      } while (!state.stop);
      return base2;
    }
    parseSubscript(base2, startLoc, noCalls, state) {
      const {
        type
      } = this.state;
      if (!noCalls && type === 15) {
        return this.parseBind(base2, startLoc, noCalls, state);
      } else if (tokenIsTemplate(type)) {
        return this.parseTaggedTemplateExpression(base2, startLoc, state);
      }
      let optional = false;
      if (type === 18) {
        if (noCalls) {
          this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);
          if (this.lookaheadCharCode() === 40) {
            return this.stopParseSubscript(base2, state);
          }
        }
        state.optionalChainMember = optional = true;
        this.next();
      }
      if (!noCalls && this.match(10)) {
        return this.parseCoverCallAndAsyncArrowHead(base2, startLoc, state, optional);
      } else {
        const computed = this.eat(0);
        if (computed || optional || this.eat(16)) {
          return this.parseMember(base2, startLoc, state, computed, optional);
        } else {
          return this.stopParseSubscript(base2, state);
        }
      }
    }
    stopParseSubscript(base2, state) {
      state.stop = true;
      return base2;
    }
    parseMember(base2, startLoc, state, computed, optional) {
      const node2 = this.startNodeAt(startLoc);
      node2.object = base2;
      node2.computed = computed;
      if (computed) {
        node2.property = this.parseExpression();
        this.expect(3);
      } else if (this.match(139)) {
        if (base2.type === "Super") {
          this.raise(Errors.SuperPrivateField, startLoc);
        }
        this.classScope.usePrivateName(this.state.value, this.state.startLoc);
        node2.property = this.parsePrivateName();
      } else {
        node2.property = this.parseIdentifier(true);
      }
      if (state.optionalChainMember) {
        node2.optional = optional;
        return this.finishNode(node2, "OptionalMemberExpression");
      } else {
        return this.finishNode(node2, "MemberExpression");
      }
    }
    parseBind(base2, startLoc, noCalls, state) {
      const node2 = this.startNodeAt(startLoc);
      node2.object = base2;
      this.next();
      node2.callee = this.parseNoCallExpr();
      state.stop = true;
      return this.parseSubscripts(this.finishNode(node2, "BindExpression"), startLoc, noCalls);
    }
    parseCoverCallAndAsyncArrowHead(base2, startLoc, state, optional) {
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      let refExpressionErrors = null;
      this.state.maybeInArrowParameters = true;
      this.next();
      const node2 = this.startNodeAt(startLoc);
      node2.callee = base2;
      const {
        maybeAsyncArrow,
        optionalChainMember
      } = state;
      if (maybeAsyncArrow) {
        this.expressionScope.enter(newAsyncArrowScope());
        refExpressionErrors = new ExpressionErrors();
      }
      if (optionalChainMember) {
        node2.optional = optional;
      }
      if (optional) {
        node2.arguments = this.parseCallExpressionArguments(11);
      } else {
        node2.arguments = this.parseCallExpressionArguments(11, base2.type !== "Super", node2, refExpressionErrors);
      }
      let finishedNode = this.finishCallExpression(node2, optionalChainMember);
      if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
        state.stop = true;
        this.checkDestructuringPrivate(refExpressionErrors);
        this.expressionScope.validateAsPattern();
        this.expressionScope.exit();
        finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
      } else {
        if (maybeAsyncArrow) {
          this.checkExpressionErrors(refExpressionErrors, true);
          this.expressionScope.exit();
        }
        this.toReferencedArguments(finishedNode);
      }
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return finishedNode;
    }
    toReferencedArguments(node2, isParenthesizedExpr) {
      this.toReferencedListDeep(node2.arguments, isParenthesizedExpr);
    }
    parseTaggedTemplateExpression(base2, startLoc, state) {
      const node2 = this.startNodeAt(startLoc);
      node2.tag = base2;
      node2.quasi = this.parseTemplate(true);
      if (state.optionalChainMember) {
        this.raise(Errors.OptionalChainingNoTemplate, startLoc);
      }
      return this.finishNode(node2, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(base2) {
      return base2.type === "Identifier" && base2.name === "async" && this.state.lastTokEndLoc.index === base2.end && !this.canInsertSemicolon() && base2.end - base2.start === 5 && this.offsetToSourcePos(base2.start) === this.state.potentialArrowAt;
    }
    finishCallExpression(node2, optional) {
      if (node2.callee.type === "Import") {
        if (node2.arguments.length === 0 || node2.arguments.length > 2) {
          this.raise(Errors.ImportCallArity, node2);
        } else {
          for (const arg of node2.arguments) {
            if (arg.type === "SpreadElement") {
              this.raise(Errors.ImportCallSpreadArgument, arg);
            }
          }
        }
      }
      return this.finishNode(node2, optional ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {
      const elts = [];
      let first = true;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            if (nodeForExtra) {
              this.addTrailingCommaExtraToNode(nodeForExtra);
            }
            this.next();
            break;
          }
        }
        elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
      }
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return elts;
    }
    shouldParseAsyncArrow() {
      return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(node2, call) {
      var _call$extra;
      this.resetPreviousNodeTrailingComments(call);
      this.expect(19);
      this.parseArrowExpression(node2, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
      if (call.innerComments) {
        setInnerComments(node2, call.innerComments);
      }
      if (call.callee.trailingComments) {
        setInnerComments(node2, call.callee.trailingComments);
      }
      return node2;
    }
    parseNoCallExpr() {
      const startLoc = this.state.startLoc;
      return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
    }
    parseExprAtom(refExpressionErrors) {
      let node2;
      let decorators = null;
      const {
        type
      } = this.state;
      switch (type) {
        case 79:
          return this.parseSuper();
        case 83:
          node2 = this.startNode();
          this.next();
          if (this.match(16)) {
            return this.parseImportMetaPropertyOrPhaseCall(node2);
          }
          if (this.match(10)) {
            if (this.optionFlags & 512) {
              return this.parseImportCall(node2);
            } else {
              return this.finishNode(node2, "Import");
            }
          } else {
            this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);
            return this.finishNode(node2, "Import");
          }
        case 78:
          node2 = this.startNode();
          this.next();
          return this.finishNode(node2, "ThisExpression");
        case 90: {
          return this.parseDo(this.startNode(), false);
        }
        case 56:
        case 31: {
          this.readRegexp();
          return this.parseRegExpLiteral(this.state.value);
        }
        case 135:
          return this.parseNumericLiteral(this.state.value);
        case 136:
          return this.parseBigIntLiteral(this.state.value);
        case 134:
          return this.parseStringLiteral(this.state.value);
        case 84:
          return this.parseNullLiteral();
        case 85:
          return this.parseBooleanLiteral(true);
        case 86:
          return this.parseBooleanLiteral(false);
        case 10: {
          const canBeArrow = this.state.potentialArrowAt === this.state.start;
          return this.parseParenAndDistinguishExpression(canBeArrow);
        }
        case 0: {
          return this.parseArrayLike(3, true, false, refExpressionErrors);
        }
        case 5: {
          return this.parseObjectLike(8, false, false, refExpressionErrors);
        }
        case 68:
          return this.parseFunctionOrFunctionSent();
        case 26:
          decorators = this.parseDecorators();
        case 80:
          return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
        case 77:
          return this.parseNewOrNewTarget();
        case 25:
        case 24:
          return this.parseTemplate(false);
        case 15: {
          node2 = this.startNode();
          this.next();
          node2.object = null;
          const callee = node2.callee = this.parseNoCallExpr();
          if (callee.type === "MemberExpression") {
            return this.finishNode(node2, "BindExpression");
          } else {
            throw this.raise(Errors.UnsupportedBind, callee);
          }
        }
        case 139: {
          this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {
            identifierName: this.state.value
          });
          return this.parsePrivateName();
        }
        case 33: {
          return this.parseTopicReferenceThenEqualsSign(54, "%");
        }
        case 32: {
          return this.parseTopicReferenceThenEqualsSign(44, "^");
        }
        case 37:
        case 38: {
          return this.parseTopicReference("hack");
        }
        case 44:
        case 54:
        case 27: {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
          if (pipeProposal) {
            return this.parseTopicReference(pipeProposal);
          }
          this.unexpected();
          break;
        }
        case 47: {
          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
            this.expectOnePlugin(["jsx", "flow", "typescript"]);
          } else {
            this.unexpected();
          }
          break;
        }
        default:
          {
            if (type === 137) {
              return this.parseDecimalLiteral(this.state.value);
            } else if (type === 2 || type === 1) {
              return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
            } else if (type === 6 || type === 7) {
              return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
            }
          }
          if (tokenIsIdentifier(type)) {
            if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
              return this.parseModuleExpression();
            }
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            const containsEsc = this.state.containsEsc;
            const id = this.parseIdentifier();
            if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
              const {
                type: type2
              } = this.state;
              if (type2 === 68) {
                this.resetPreviousNodeTrailingComments(id);
                this.next();
                return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
              } else if (tokenIsIdentifier(type2)) {
                if (this.lookaheadCharCode() === 61) {
                  return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                } else {
                  return id;
                }
              } else if (type2 === 90) {
                this.resetPreviousNodeTrailingComments(id);
                return this.parseDo(this.startNodeAtNode(id), true);
              }
            }
            if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
              this.next();
              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
            }
            return id;
          } else {
            this.unexpected();
          }
      }
    }
    parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
      const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
      if (pipeProposal) {
        this.state.type = topicTokenType;
        this.state.value = topicTokenValue;
        this.state.pos--;
        this.state.end--;
        this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
        return this.parseTopicReference(pipeProposal);
      } else {
        this.unexpected();
      }
    }
    parseTopicReference(pipeProposal) {
      const node2 = this.startNode();
      const startLoc = this.state.startLoc;
      const tokenType = this.state.type;
      this.next();
      return this.finishTopicReference(node2, startLoc, pipeProposal, tokenType);
    }
    finishTopicReference(node2, startLoc, pipeProposal, tokenType) {
      if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
        if (pipeProposal === "hack") {
          if (!this.topicReferenceIsAllowedInCurrentContext()) {
            this.raise(Errors.PipeTopicUnbound, startLoc);
          }
          this.registerTopicReference();
          return this.finishNode(node2, "TopicReference");
        } else {
          if (!this.topicReferenceIsAllowedInCurrentContext()) {
            this.raise(Errors.PrimaryTopicNotAllowed, startLoc);
          }
          this.registerTopicReference();
          return this.finishNode(node2, "PipelinePrimaryTopicReference");
        }
      } else {
        throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {
          token: tokenLabelName(tokenType)
        });
      }
    }
    testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
      switch (pipeProposal) {
        case "hack": {
          return this.hasPlugin(["pipelineOperator", {
            topicToken: tokenLabelName(tokenType)
          }]);
        }
        case "smart":
          return tokenType === 27;
        default:
          throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
      }
    }
    parseAsyncArrowUnaryFunction(node2) {
      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
      const params = [this.parseIdentifier()];
      this.prodParam.exit();
      if (this.hasPrecedingLineBreak()) {
        this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());
      }
      this.expect(19);
      return this.parseArrowExpression(node2, params, true);
    }
    parseDo(node2, isAsync) {
      this.expectPlugin("doExpressions");
      if (isAsync) {
        this.expectPlugin("asyncDoExpressions");
      }
      node2.async = isAsync;
      this.next();
      const oldLabels = this.state.labels;
      this.state.labels = [];
      if (isAsync) {
        this.prodParam.enter(2);
        node2.body = this.parseBlock();
        this.prodParam.exit();
      } else {
        node2.body = this.parseBlock();
      }
      this.state.labels = oldLabels;
      return this.finishNode(node2, "DoExpression");
    }
    parseSuper() {
      const node2 = this.startNode();
      this.next();
      if (this.match(10) && !this.scope.allowDirectSuper && !(this.optionFlags & 16)) {
        this.raise(Errors.SuperNotAllowed, node2);
      } else if (!this.scope.allowSuper && !(this.optionFlags & 16)) {
        this.raise(Errors.UnexpectedSuper, node2);
      }
      if (!this.match(10) && !this.match(0) && !this.match(16)) {
        this.raise(Errors.UnsupportedSuper, node2);
      }
      return this.finishNode(node2, "Super");
    }
    parsePrivateName() {
      const node2 = this.startNode();
      const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
      const name = this.state.value;
      this.next();
      node2.id = this.createIdentifier(id, name);
      return this.finishNode(node2, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
      const node2 = this.startNode();
      this.next();
      if (this.prodParam.hasYield && this.match(16)) {
        const meta = this.createIdentifier(this.startNodeAtNode(node2), "function");
        this.next();
        if (this.match(103)) {
          this.expectPlugin("functionSent");
        } else if (!this.hasPlugin("functionSent")) {
          this.unexpected();
        }
        return this.parseMetaProperty(node2, meta, "sent");
      }
      return this.parseFunction(node2);
    }
    parseMetaProperty(node2, meta, propertyName) {
      node2.meta = meta;
      const containsEsc = this.state.containsEsc;
      node2.property = this.parseIdentifier(true);
      if (node2.property.name !== propertyName || containsEsc) {
        this.raise(Errors.UnsupportedMetaProperty, node2.property, {
          target: meta.name,
          onlyValidPropertyName: propertyName
        });
      }
      return this.finishNode(node2, "MetaProperty");
    }
    parseImportMetaPropertyOrPhaseCall(node2) {
      this.next();
      if (this.isContextual(105) || this.isContextual(97)) {
        const isSource = this.isContextual(105);
        this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
        this.next();
        node2.phase = isSource ? "source" : "defer";
        return this.parseImportCall(node2);
      } else {
        const id = this.createIdentifierAt(this.startNodeAtNode(node2), "import", this.state.lastTokStartLoc);
        if (this.isContextual(101)) {
          if (!this.inModule) {
            this.raise(Errors.ImportMetaOutsideModule, id);
          }
          this.sawUnambiguousESM = true;
        }
        return this.parseMetaProperty(node2, id, "meta");
      }
    }
    parseLiteralAtNode(value2, type, node2) {
      this.addExtra(node2, "rawValue", value2);
      this.addExtra(node2, "raw", this.input.slice(this.offsetToSourcePos(node2.start), this.state.end));
      node2.value = value2;
      this.next();
      return this.finishNode(node2, type);
    }
    parseLiteral(value2, type) {
      const node2 = this.startNode();
      return this.parseLiteralAtNode(value2, type, node2);
    }
    parseStringLiteral(value2) {
      return this.parseLiteral(value2, "StringLiteral");
    }
    parseNumericLiteral(value2) {
      return this.parseLiteral(value2, "NumericLiteral");
    }
    parseBigIntLiteral(value2) {
      return this.parseLiteral(value2, "BigIntLiteral");
    }
    parseDecimalLiteral(value2) {
      return this.parseLiteral(value2, "DecimalLiteral");
    }
    parseRegExpLiteral(value2) {
      const node2 = this.startNode();
      this.addExtra(node2, "raw", this.input.slice(this.offsetToSourcePos(node2.start), this.state.end));
      node2.pattern = value2.pattern;
      node2.flags = value2.flags;
      this.next();
      return this.finishNode(node2, "RegExpLiteral");
    }
    parseBooleanLiteral(value2) {
      const node2 = this.startNode();
      node2.value = value2;
      this.next();
      return this.finishNode(node2, "BooleanLiteral");
    }
    parseNullLiteral() {
      const node2 = this.startNode();
      this.next();
      return this.finishNode(node2, "NullLiteral");
    }
    parseParenAndDistinguishExpression(canBeArrow) {
      const startLoc = this.state.startLoc;
      let val;
      this.next();
      this.expressionScope.enter(newArrowHeadScope());
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.maybeInArrowParameters = true;
      this.state.inFSharpPipelineDirectBody = false;
      const innerStartLoc = this.state.startLoc;
      const exprList = [];
      const refExpressionErrors = new ExpressionErrors();
      let first = true;
      let spreadStartLoc;
      let optionalCommaStartLoc;
      while (!this.match(11)) {
        if (first) {
          first = false;
        } else {
          this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
          if (this.match(11)) {
            optionalCommaStartLoc = this.state.startLoc;
            break;
          }
        }
        if (this.match(21)) {
          const spreadNodeStartLoc = this.state.startLoc;
          spreadStartLoc = this.state.startLoc;
          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
          if (!this.checkCommaAfterRest(41)) {
            break;
          }
        } else {
          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
        }
      }
      const innerEndLoc = this.state.lastTokEndLoc;
      this.expect(11);
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      let arrowNode = this.startNodeAt(startLoc);
      if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
        this.checkDestructuringPrivate(refExpressionErrors);
        this.expressionScope.validateAsPattern();
        this.expressionScope.exit();
        this.parseArrowExpression(arrowNode, exprList, false);
        return arrowNode;
      }
      this.expressionScope.exit();
      if (!exprList.length) {
        this.unexpected(this.state.lastTokStartLoc);
      }
      if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
      if (spreadStartLoc) this.unexpected(spreadStartLoc);
      this.checkExpressionErrors(refExpressionErrors, true);
      this.toReferencedListDeep(exprList, true);
      if (exprList.length > 1) {
        val = this.startNodeAt(innerStartLoc);
        val.expressions = exprList;
        this.finishNode(val, "SequenceExpression");
        this.resetEndLocation(val, innerEndLoc);
      } else {
        val = exprList[0];
      }
      return this.wrapParenthesis(startLoc, val);
    }
    wrapParenthesis(startLoc, expression) {
      if (!(this.optionFlags & 1024)) {
        this.addExtra(expression, "parenthesized", true);
        this.addExtra(expression, "parenStart", startLoc.index);
        this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
        return expression;
      }
      const parenExpression = this.startNodeAt(startLoc);
      parenExpression.expression = expression;
      return this.finishNode(parenExpression, "ParenthesizedExpression");
    }
    shouldParseArrow(params) {
      return !this.canInsertSemicolon();
    }
    parseArrow(node2) {
      if (this.eat(19)) {
        return node2;
      }
    }
    parseParenItem(node2, startLoc) {
      return node2;
    }
    parseNewOrNewTarget() {
      const node2 = this.startNode();
      this.next();
      if (this.match(16)) {
        const meta = this.createIdentifier(this.startNodeAtNode(node2), "new");
        this.next();
        const metaProp = this.parseMetaProperty(node2, meta, "target");
        if (!this.scope.inNonArrowFunction && !this.scope.inClass && !(this.optionFlags & 4)) {
          this.raise(Errors.UnexpectedNewTarget, metaProp);
        }
        return metaProp;
      }
      return this.parseNew(node2);
    }
    parseNew(node2) {
      this.parseNewCallee(node2);
      if (this.eat(10)) {
        const args = this.parseExprList(11);
        this.toReferencedList(args);
        node2.arguments = args;
      } else {
        node2.arguments = [];
      }
      return this.finishNode(node2, "NewExpression");
    }
    parseNewCallee(node2) {
      const isImport = this.match(83);
      const callee = this.parseNoCallExpr();
      node2.callee = callee;
      if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
        this.raise(Errors.ImportCallNotNewExpression, callee);
      }
    }
    parseTemplateElement(isTagged) {
      const {
        start,
        startLoc,
        end,
        value: value2
      } = this.state;
      const elemStart = start + 1;
      const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
      if (value2 === null) {
        if (!isTagged) {
          this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));
        }
      }
      const isTail = this.match(24);
      const endOffset = isTail ? -1 : -2;
      const elemEnd = end + endOffset;
      elem.value = {
        raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
        cooked: value2 === null ? null : value2.slice(1, endOffset)
      };
      elem.tail = isTail;
      this.next();
      const finishedNode = this.finishNode(elem, "TemplateElement");
      this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
      return finishedNode;
    }
    parseTemplate(isTagged) {
      const node2 = this.startNode();
      let curElt = this.parseTemplateElement(isTagged);
      const quasis = [curElt];
      const substitutions = [];
      while (!curElt.tail) {
        substitutions.push(this.parseTemplateSubstitution());
        this.readTemplateContinuation();
        quasis.push(curElt = this.parseTemplateElement(isTagged));
      }
      node2.expressions = substitutions;
      node2.quasis = quasis;
      return this.finishNode(node2, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
      return this.parseExpression();
    }
    parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
      if (isRecord) {
        this.expectPlugin("recordAndTuple");
      }
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      let sawProto = false;
      let first = true;
      const node2 = this.startNode();
      node2.properties = [];
      this.next();
      while (!this.match(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            this.addTrailingCommaExtraToNode(node2);
            break;
          }
        }
        let prop;
        if (isPattern) {
          prop = this.parseBindingProperty();
        } else {
          prop = this.parsePropertyDefinition(refExpressionErrors);
          sawProto = this.checkProto(prop, isRecord, sawProto, refExpressionErrors);
        }
        if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
          this.raise(Errors.InvalidRecordProperty, prop);
        }
        {
          if (prop.shorthand) {
            this.addExtra(prop, "shorthand", true);
          }
        }
        node2.properties.push(prop);
      }
      this.next();
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      let type = "ObjectExpression";
      if (isPattern) {
        type = "ObjectPattern";
      } else if (isRecord) {
        type = "RecordExpression";
      }
      return this.finishNode(node2, type);
    }
    addTrailingCommaExtraToNode(node2) {
      this.addExtra(node2, "trailingComma", this.state.lastTokStartLoc.index);
      this.addExtra(node2, "trailingCommaLoc", this.state.lastTokStartLoc, false);
    }
    maybeAsyncOrAccessorProp(prop) {
      return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(refExpressionErrors) {
      let decorators = [];
      if (this.match(26)) {
        if (this.hasPlugin("decorators")) {
          this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);
        }
        while (this.match(26)) {
          decorators.push(this.parseDecorator());
        }
      }
      const prop = this.startNode();
      let isAsync = false;
      let isAccessor = false;
      let startLoc;
      if (this.match(21)) {
        if (decorators.length) this.unexpected();
        return this.parseSpread();
      }
      if (decorators.length) {
        prop.decorators = decorators;
        decorators = [];
      }
      prop.method = false;
      if (refExpressionErrors) {
        startLoc = this.state.startLoc;
      }
      let isGenerator = this.eat(55);
      this.parsePropertyNamePrefixOperator(prop);
      const containsEsc = this.state.containsEsc;
      this.parsePropertyName(prop, refExpressionErrors);
      if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
        const {
          key
        } = prop;
        const keyName = key.name;
        if (keyName === "async" && !this.hasPrecedingLineBreak()) {
          isAsync = true;
          this.resetPreviousNodeTrailingComments(key);
          isGenerator = this.eat(55);
          this.parsePropertyName(prop);
        }
        if (keyName === "get" || keyName === "set") {
          isAccessor = true;
          this.resetPreviousNodeTrailingComments(key);
          prop.kind = keyName;
          if (this.match(55)) {
            isGenerator = true;
            this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {
              kind: keyName
            });
            this.next();
          }
          this.parsePropertyName(prop);
        }
      }
      return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
    }
    getGetterSetterExpectedParamCount(method) {
      return method.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(method) {
      return method.params;
    }
    checkGetterSetterParams(method) {
      var _params;
      const paramCount = this.getGetterSetterExpectedParamCount(method);
      const params = this.getObjectOrClassMethodParams(method);
      if (params.length !== paramCount) {
        this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);
      }
      if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
        this.raise(Errors.BadSetterRestParameter, method);
      }
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
      if (isAccessor) {
        const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
        this.checkGetterSetterParams(finishedProp);
        return finishedProp;
      }
      if (isAsync || isGenerator || this.match(10)) {
        if (isPattern) this.unexpected();
        prop.kind = "method";
        prop.method = true;
        return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
      }
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
      prop.shorthand = false;
      if (this.eat(14)) {
        prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
        return this.finishObjectProperty(prop);
      }
      if (!prop.computed && prop.key.type === "Identifier") {
        this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
        if (isPattern) {
          prop.value = this.parseMaybeDefault(startLoc, this.cloneIdentifier(prop.key));
        } else if (this.match(29)) {
          const shorthandAssignLoc = this.state.startLoc;
          if (refExpressionErrors != null) {
            if (refExpressionErrors.shorthandAssignLoc === null) {
              refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
            }
          } else {
            this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
          }
          prop.value = this.parseMaybeDefault(startLoc, this.cloneIdentifier(prop.key));
        } else {
          prop.value = this.cloneIdentifier(prop.key);
        }
        prop.shorthand = true;
        return this.finishObjectProperty(prop);
      }
    }
    finishObjectProperty(node2) {
      return this.finishNode(node2, "ObjectProperty");
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      const node2 = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
      if (!node2) this.unexpected();
      return node2;
    }
    parsePropertyName(prop, refExpressionErrors) {
      if (this.eat(0)) {
        prop.computed = true;
        prop.key = this.parseMaybeAssignAllowIn();
        this.expect(3);
      } else {
        const {
          type,
          value: value2
        } = this.state;
        let key;
        if (tokenIsKeywordOrIdentifier(type)) {
          key = this.parseIdentifier(true);
        } else {
          switch (type) {
            case 135:
              key = this.parseNumericLiteral(value2);
              break;
            case 134:
              key = this.parseStringLiteral(value2);
              break;
            case 136:
              key = this.parseBigIntLiteral(value2);
              break;
            case 139: {
              const privateKeyLoc = this.state.startLoc;
              if (refExpressionErrors != null) {
                if (refExpressionErrors.privateKeyLoc === null) {
                  refExpressionErrors.privateKeyLoc = privateKeyLoc;
                }
              } else {
                this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
              }
              key = this.parsePrivateName();
              break;
            }
            default:
              if (type === 137) {
                key = this.parseDecimalLiteral(value2);
                break;
              }
              this.unexpected();
          }
        }
        prop.key = key;
        if (type !== 139) {
          prop.computed = false;
        }
      }
    }
    initFunction(node2, isAsync) {
      node2.id = null;
      node2.generator = false;
      node2.async = isAsync;
    }
    parseMethod(node2, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
      this.initFunction(node2, isAsync);
      node2.generator = isGenerator;
      this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
      this.prodParam.enter(functionFlags(isAsync, node2.generator));
      this.parseFunctionParams(node2, isConstructor);
      const finishedNode = this.parseFunctionBodyAndFinish(node2, type, true);
      this.prodParam.exit();
      this.scope.exit();
      return finishedNode;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      if (isTuple) {
        this.expectPlugin("recordAndTuple");
      }
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      const node2 = this.startNode();
      this.next();
      node2.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node2);
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return this.finishNode(node2, isTuple ? "TupleExpression" : "ArrayExpression");
    }
    parseArrowExpression(node2, params, isAsync, trailingCommaLoc) {
      this.scope.enter(2 | 4);
      let flags = functionFlags(isAsync, false);
      if (!this.match(5) && this.prodParam.hasIn) {
        flags |= 8;
      }
      this.prodParam.enter(flags);
      this.initFunction(node2, isAsync);
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      if (params) {
        this.state.maybeInArrowParameters = true;
        this.setArrowFunctionParameters(node2, params, trailingCommaLoc);
      }
      this.state.maybeInArrowParameters = false;
      this.parseFunctionBody(node2, true);
      this.prodParam.exit();
      this.scope.exit();
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return this.finishNode(node2, "ArrowFunctionExpression");
    }
    setArrowFunctionParameters(node2, params, trailingCommaLoc) {
      this.toAssignableList(params, trailingCommaLoc, false);
      node2.params = params;
    }
    parseFunctionBodyAndFinish(node2, type, isMethod = false) {
      this.parseFunctionBody(node2, false, isMethod);
      return this.finishNode(node2, type);
    }
    parseFunctionBody(node2, allowExpression, isMethod = false) {
      const isExpression = allowExpression && !this.match(5);
      this.expressionScope.enter(newExpressionScope());
      if (isExpression) {
        node2.body = this.parseMaybeAssign();
        this.checkParams(node2, false, allowExpression, false);
      } else {
        const oldStrict = this.state.strict;
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(this.prodParam.currentFlags() | 4);
        node2.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
          const nonSimple = !this.isSimpleParamList(node2.params);
          if (hasStrictModeDirective && nonSimple) {
            this.raise(Errors.IllegalLanguageModeDirective, (node2.kind === "method" || node2.kind === "constructor") && !!node2.key ? node2.key.loc.end : node2);
          }
          const strictModeChanged = !oldStrict && this.state.strict;
          this.checkParams(node2, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
          if (this.state.strict && node2.id) {
            this.checkIdentifier(node2.id, 65, strictModeChanged);
          }
        });
        this.prodParam.exit();
        this.state.labels = oldLabels;
      }
      this.expressionScope.exit();
    }
    isSimpleParameter(node2) {
      return node2.type === "Identifier";
    }
    isSimpleParamList(params) {
      for (let i = 0, len = params.length; i < len; i++) {
        if (!this.isSimpleParameter(params[i])) return false;
      }
      return true;
    }
    checkParams(node2, allowDuplicates, isArrowFunction, strictModeChanged = true) {
      const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set();
      const formalParameters = {
        type: "FormalParameters"
      };
      for (const param of node2.params) {
        this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
      }
    }
    parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
      const elts = [];
      let first = true;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            if (nodeForExtra) {
              this.addTrailingCommaExtraToNode(nodeForExtra);
            }
            this.next();
            break;
          }
        }
        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
      }
      return elts;
    }
    parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
      let elt;
      if (this.match(12)) {
        if (!allowEmpty) {
          this.raise(Errors.UnexpectedToken, this.state.curPosition(), {
            unexpected: ","
          });
        }
        elt = null;
      } else if (this.match(21)) {
        const spreadNodeStartLoc = this.state.startLoc;
        elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
      } else if (this.match(17)) {
        this.expectPlugin("partialApplication");
        if (!allowPlaceholder) {
          this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
        }
        const node2 = this.startNode();
        this.next();
        elt = this.finishNode(node2, "ArgumentPlaceholder");
      } else {
        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
      }
      return elt;
    }
    parseIdentifier(liberal) {
      const node2 = this.startNode();
      const name = this.parseIdentifierName(liberal);
      return this.createIdentifier(node2, name);
    }
    createIdentifier(node2, name) {
      node2.name = name;
      node2.loc.identifierName = name;
      return this.finishNode(node2, "Identifier");
    }
    createIdentifierAt(node2, name, endLoc) {
      node2.name = name;
      node2.loc.identifierName = name;
      return this.finishNodeAt(node2, "Identifier", endLoc);
    }
    parseIdentifierName(liberal) {
      let name;
      const {
        startLoc,
        type
      } = this.state;
      if (tokenIsKeywordOrIdentifier(type)) {
        name = this.state.value;
      } else {
        this.unexpected();
      }
      const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);
      if (liberal) {
        if (tokenIsKeyword2) {
          this.replaceToken(132);
        }
      } else {
        this.checkReservedWord(name, startLoc, tokenIsKeyword2, false);
      }
      this.next();
      return name;
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding2) {
      if (word.length > 10) {
        return;
      }
      if (!canBeReservedWord(word)) {
        return;
      }
      if (checkKeywords && isKeyword(word)) {
        this.raise(Errors.UnexpectedKeyword, startLoc, {
          keyword: word
        });
        return;
      }
      const reservedTest = !this.state.strict ? isReservedWord : isBinding2 ? isStrictBindReservedWord : isStrictReservedWord;
      if (reservedTest(word, this.inModule)) {
        this.raise(Errors.UnexpectedReservedWord, startLoc, {
          reservedWord: word
        });
        return;
      } else if (word === "yield") {
        if (this.prodParam.hasYield) {
          this.raise(Errors.YieldBindingIdentifier, startLoc);
          return;
        }
      } else if (word === "await") {
        if (this.prodParam.hasAwait) {
          this.raise(Errors.AwaitBindingIdentifier, startLoc);
          return;
        }
        if (this.scope.inStaticBlock) {
          this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
          return;
        }
        this.expressionScope.recordAsyncArrowParametersError(startLoc);
      } else if (word === "arguments") {
        if (this.scope.inClassAndNotInNonArrowFunction) {
          this.raise(Errors.ArgumentsInClass, startLoc);
          return;
        }
      }
    }
    recordAwaitIfAllowed() {
      const isAwaitAllowed = this.prodParam.hasAwait || this.optionFlags & 1 && !this.scope.inFunction;
      if (isAwaitAllowed && !this.scope.inFunction) {
        this.state.hasTopLevelAwait = true;
      }
      return isAwaitAllowed;
    }
    parseAwait(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node2);
      if (this.eat(55)) {
        this.raise(Errors.ObsoleteAwaitStar, node2);
      }
      if (!this.scope.inFunction && !(this.optionFlags & 1)) {
        if (this.isAmbiguousPrefixOrIdentifier()) {
          this.ambiguousScriptDifferentAst = true;
        } else {
          this.sawUnambiguousESM = true;
        }
      }
      if (!this.state.soloAwait) {
        node2.argument = this.parseMaybeUnary(null, true);
      }
      return this.finishNode(node2, "AwaitExpression");
    }
    isAmbiguousPrefixOrIdentifier() {
      if (this.hasPrecedingLineBreak()) return true;
      const {
        type
      } = this.state;
      return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 138 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
    }
    parseYield(startLoc) {
      const node2 = this.startNodeAt(startLoc);
      this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node2);
      let delegating = false;
      let argument = null;
      if (!this.hasPrecedingLineBreak()) {
        delegating = this.eat(55);
        switch (this.state.type) {
          case 13:
          case 140:
          case 8:
          case 11:
          case 3:
          case 9:
          case 14:
          case 12:
            if (!delegating) break;
          default:
            argument = this.parseMaybeAssign();
        }
      }
      node2.delegate = delegating;
      node2.argument = argument;
      return this.finishNode(node2, "YieldExpression");
    }
    parseImportCall(node2) {
      this.next();
      node2.source = this.parseMaybeAssignAllowIn();
      node2.options = null;
      if (this.eat(12)) {
        if (!this.match(11)) {
          node2.options = this.parseMaybeAssignAllowIn();
          if (this.eat(12)) {
            this.addTrailingCommaExtraToNode(node2.options);
            if (!this.match(11)) {
              do {
                this.parseMaybeAssignAllowIn();
              } while (this.eat(12) && !this.match(11));
              this.raise(Errors.ImportCallArity, node2);
            }
          }
        } else {
          this.addTrailingCommaExtraToNode(node2.source);
        }
      }
      this.expect(11);
      return this.finishNode(node2, "ImportExpression");
    }
    checkPipelineAtInfixOperator(left, leftStartLoc) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        if (left.type === "SequenceExpression") {
          this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
        }
      }
    }
    parseSmartPipelineBodyInStyle(childExpr, startLoc) {
      if (this.isSimpleReference(childExpr)) {
        const bodyNode = this.startNodeAt(startLoc);
        bodyNode.callee = childExpr;
        return this.finishNode(bodyNode, "PipelineBareFunction");
      } else {
        const bodyNode = this.startNodeAt(startLoc);
        this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
        bodyNode.expression = childExpr;
        return this.finishNode(bodyNode, "PipelineTopicExpression");
      }
    }
    isSimpleReference(expression) {
      switch (expression.type) {
        case "MemberExpression":
          return !expression.computed && this.isSimpleReference(expression.object);
        case "Identifier":
          return true;
        default:
          return false;
      }
    }
    checkSmartPipeTopicBodyEarlyErrors(startLoc) {
      if (this.match(19)) {
        throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
      }
      if (!this.topicReferenceWasUsedInCurrentContext()) {
        this.raise(Errors.PipelineTopicUnused, startLoc);
      }
    }
    withTopicBindingContext(callback) {
      const outerContextTopicState = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 1,
        maxTopicIndex: null
      };
      try {
        return callback();
      } finally {
        this.state.topicContext = outerContextTopicState;
      }
    }
    withSmartMixTopicForbiddingContext(callback) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      } else {
        return callback();
      }
    }
    withSoloAwaitPermittingContext(callback) {
      const outerContextSoloAwaitState = this.state.soloAwait;
      this.state.soloAwait = true;
      try {
        return callback();
      } finally {
        this.state.soloAwait = outerContextSoloAwaitState;
      }
    }
    allowInAnd(callback) {
      const flags = this.prodParam.currentFlags();
      const prodParamToSet = 8 & ~flags;
      if (prodParamToSet) {
        this.prodParam.enter(flags | 8);
        try {
          return callback();
        } finally {
          this.prodParam.exit();
        }
      }
      return callback();
    }
    disallowInAnd(callback) {
      const flags = this.prodParam.currentFlags();
      const prodParamToClear = 8 & flags;
      if (prodParamToClear) {
        this.prodParam.enter(flags & -9);
        try {
          return callback();
        } finally {
          this.prodParam.exit();
        }
      }
      return callback();
    }
    registerTopicReference() {
      this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
      return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(prec) {
      const startLoc = this.state.startLoc;
      this.state.potentialArrowAt = this.state.start;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = true;
      const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return ret;
    }
    parseModuleExpression() {
      this.expectPlugin("moduleBlocks");
      const node2 = this.startNode();
      this.next();
      if (!this.match(5)) {
        this.unexpected(null, 5);
      }
      const program = this.startNodeAt(this.state.endLoc);
      this.next();
      const revertScopes = this.initializeScopes(true);
      this.enterInitialScopes();
      try {
        node2.body = this.parseProgram(program, 8, "module");
      } finally {
        revertScopes();
      }
      return this.finishNode(node2, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(prop) {
    }
  }
  const loopLabel = {
    kind: 1
  }, switchLabel = {
    kind: 2
  };
  const loneSurrogate = /[\uD800-\uDFFF]/u;
  const keywordRelationalOperator = /in(?:stanceof)?/y;
  function babel7CompatTokens(tokens, input, startIndex) {
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      const {
        type
      } = token;
      if (typeof type === "number") {
        {
          if (type === 139) {
            const {
              loc,
              start,
              value: value2,
              end
            } = token;
            const hashEndPos = start + 1;
            const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
            tokens.splice(i, 1, new Token({
              type: getExportedToken(27),
              value: "#",
              start,
              end: hashEndPos,
              startLoc: loc.start,
              endLoc: hashEndLoc
            }), new Token({
              type: getExportedToken(132),
              value: value2,
              start: hashEndPos,
              end,
              startLoc: hashEndLoc,
              endLoc: loc.end
            }));
            i++;
            continue;
          }
          if (tokenIsTemplate(type)) {
            const {
              loc,
              start,
              value: value2,
              end
            } = token;
            const backquoteEnd = start + 1;
            const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
            let startToken;
            if (input.charCodeAt(start - startIndex) === 96) {
              startToken = new Token({
                type: getExportedToken(22),
                value: "`",
                start,
                end: backquoteEnd,
                startLoc: loc.start,
                endLoc: backquoteEndLoc
              });
            } else {
              startToken = new Token({
                type: getExportedToken(8),
                value: "}",
                start,
                end: backquoteEnd,
                startLoc: loc.start,
                endLoc: backquoteEndLoc
              });
            }
            let templateValue, templateElementEnd, templateElementEndLoc, endToken;
            if (type === 24) {
              templateElementEnd = end - 1;
              templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
              templateValue = value2 === null ? null : value2.slice(1, -1);
              endToken = new Token({
                type: getExportedToken(22),
                value: "`",
                start: templateElementEnd,
                end,
                startLoc: templateElementEndLoc,
                endLoc: loc.end
              });
            } else {
              templateElementEnd = end - 2;
              templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
              templateValue = value2 === null ? null : value2.slice(1, -2);
              endToken = new Token({
                type: getExportedToken(23),
                value: "${",
                start: templateElementEnd,
                end,
                startLoc: templateElementEndLoc,
                endLoc: loc.end
              });
            }
            tokens.splice(i, 1, startToken, new Token({
              type: getExportedToken(20),
              value: templateValue,
              start: backquoteEnd,
              end: templateElementEnd,
              startLoc: backquoteEndLoc,
              endLoc: templateElementEndLoc
            }), endToken);
            i += 2;
            continue;
          }
        }
        token.type = getExportedToken(type);
      }
    }
    return tokens;
  }
  class StatementParser extends ExpressionParser {
    parseTopLevel(file2, program) {
      file2.program = this.parseProgram(program);
      file2.comments = this.comments;
      if (this.optionFlags & 256) {
        file2.tokens = babel7CompatTokens(this.tokens, this.input, this.startIndex);
      }
      return this.finishNode(file2, "File");
    }
    parseProgram(program, end = 140, sourceType = this.options.sourceType) {
      program.sourceType = sourceType;
      program.interpreter = this.parseInterpreterDirective();
      this.parseBlockBody(program, true, true, end);
      if (this.inModule) {
        if (!(this.optionFlags & 64) && this.scope.undefinedExports.size > 0) {
          for (const [localName, at2] of Array.from(this.scope.undefinedExports)) {
            this.raise(Errors.ModuleExportUndefined, at2, {
              localName
            });
          }
        }
        this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);
      }
      let finishedProgram;
      if (end === 140) {
        finishedProgram = this.finishNode(program, "Program");
      } else {
        finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
      }
      return finishedProgram;
    }
    stmtToDirective(stmt) {
      const directive = this.castNodeTo(stmt, "Directive");
      const directiveLiteral = this.castNodeTo(stmt.expression, "DirectiveLiteral");
      const expressionValue = directiveLiteral.value;
      const raw = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end));
      const val = directiveLiteral.value = raw.slice(1, -1);
      this.addExtra(directiveLiteral, "raw", raw);
      this.addExtra(directiveLiteral, "rawValue", val);
      this.addExtra(directiveLiteral, "expressionValue", expressionValue);
      directive.value = directiveLiteral;
      delete stmt.expression;
      return directive;
    }
    parseInterpreterDirective() {
      if (!this.match(28)) {
        return null;
      }
      const node2 = this.startNode();
      node2.value = this.state.value;
      this.next();
      return this.finishNode(node2, "InterpreterDirective");
    }
    isLet() {
      if (!this.isContextual(100)) {
        return false;
      }
      return this.hasFollowingBindingAtom();
    }
    isUsing() {
      if (!this.isContextual(107)) {
        return false;
      }
      const next = this.nextTokenInLineStart();
      const nextCh = this.codePointAtPos(next);
      return this.chStartsBindingIdentifier(nextCh, next);
    }
    isAwaitUsing() {
      if (!this.isContextual(96)) {
        return false;
      }
      let next = this.nextTokenInLineStart();
      if (this.isUnparsedContextual(next, "using")) {
        next = this.nextTokenInLineStartSince(next + 5);
        const nextCh = this.codePointAtPos(next);
        if (this.chStartsBindingIdentifier(nextCh, next)) {
          this.expectPlugin("explicitResourceManagement");
          return true;
        }
      }
      return false;
    }
    chStartsBindingIdentifier(ch, pos) {
      if (isIdentifierStart(ch)) {
        keywordRelationalOperator.lastIndex = pos;
        if (keywordRelationalOperator.test(this.input)) {
          const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
          if (!isIdentifierChar(endCh) && endCh !== 92) {
            return false;
          }
        }
        return true;
      } else if (ch === 92) {
        return true;
      } else {
        return false;
      }
    }
    chStartsBindingPattern(ch) {
      return ch === 91 || ch === 123;
    }
    hasFollowingBindingAtom() {
      const next = this.nextTokenStart();
      const nextCh = this.codePointAtPos(next);
      return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
    }
    hasInLineFollowingBindingIdentifierOrBrace() {
      const next = this.nextTokenInLineStart();
      const nextCh = this.codePointAtPos(next);
      return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);
    }
    allowsForUsing() {
      const {
        type,
        containsEsc,
        end
      } = this.lookahead();
      if (type === 102 && !containsEsc) {
        const nextCharAfterOf = this.lookaheadCharCodeSince(end);
        if (nextCharAfterOf !== 61 && nextCharAfterOf !== 58 && nextCharAfterOf !== 59) {
          return false;
        }
      }
      if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
        this.expectPlugin("explicitResourceManagement");
        return true;
      }
      return false;
    }
    allowsUsing() {
      return (this.scope.inModule || !this.scope.inTopLevel) && !this.scope.inBareCaseStatement;
    }
    parseModuleItem() {
      return this.parseStatementLike(1 | 2 | 4 | 8);
    }
    parseStatementListItem() {
      return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
    }
    parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
      let flags = 0;
      if (this.options.annexB && !this.state.strict) {
        flags |= 4;
        if (allowLabeledFunction) {
          flags |= 8;
        }
      }
      return this.parseStatementLike(flags);
    }
    parseStatement() {
      return this.parseStatementLike(0);
    }
    parseStatementLike(flags) {
      let decorators = null;
      if (this.match(26)) {
        decorators = this.parseDecorators(true);
      }
      return this.parseStatementContent(flags, decorators);
    }
    parseStatementContent(flags, decorators) {
      const startType = this.state.type;
      const node2 = this.startNode();
      const allowDeclaration = !!(flags & 2);
      const allowFunctionDeclaration = !!(flags & 4);
      const topLevel = flags & 1;
      switch (startType) {
        case 60:
          return this.parseBreakContinueStatement(node2, true);
        case 63:
          return this.parseBreakContinueStatement(node2, false);
        case 64:
          return this.parseDebuggerStatement(node2);
        case 90:
          return this.parseDoWhileStatement(node2);
        case 91:
          return this.parseForStatement(node2);
        case 68:
          if (this.lookaheadCharCode() === 46) break;
          if (!allowFunctionDeclaration) {
            this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);
          }
          return this.parseFunctionStatement(node2, false, !allowDeclaration && allowFunctionDeclaration);
        case 80:
          if (!allowDeclaration) this.unexpected();
          return this.parseClass(this.maybeTakeDecorators(decorators, node2), true);
        case 69:
          return this.parseIfStatement(node2);
        case 70:
          return this.parseReturnStatement(node2);
        case 71:
          return this.parseSwitchStatement(node2);
        case 72:
          return this.parseThrowStatement(node2);
        case 73:
          return this.parseTryStatement(node2);
        case 96:
          if (this.isAwaitUsing()) {
            if (!this.allowsUsing()) {
              this.raise(Errors.UnexpectedUsingDeclaration, node2);
            } else if (!allowDeclaration) {
              this.raise(Errors.UnexpectedLexicalDeclaration, node2);
            } else if (!this.recordAwaitIfAllowed()) {
              this.raise(Errors.AwaitUsingNotInAsyncContext, node2);
            }
            this.next();
            return this.parseVarStatement(node2, "await using");
          }
          break;
        case 107:
          if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) {
            break;
          }
          this.expectPlugin("explicitResourceManagement");
          if (!this.allowsUsing()) {
            this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);
          } else if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
          }
          return this.parseVarStatement(node2, "using");
        case 100: {
          if (this.state.containsEsc) {
            break;
          }
          const next = this.nextTokenStart();
          const nextCh = this.codePointAtPos(next);
          if (nextCh !== 91) {
            if (!allowDeclaration && this.hasFollowingLineBreak()) break;
            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
              break;
            }
          }
        }
        case 75: {
          if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
          }
        }
        case 74: {
          const kind = this.state.value;
          return this.parseVarStatement(node2, kind);
        }
        case 92:
          return this.parseWhileStatement(node2);
        case 76:
          return this.parseWithStatement(node2);
        case 5:
          return this.parseBlock();
        case 13:
          return this.parseEmptyStatement(node2);
        case 83: {
          const nextTokenCharCode = this.lookaheadCharCode();
          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
            break;
          }
        }
        case 82: {
          if (!(this.optionFlags & 8) && !topLevel) {
            this.raise(Errors.UnexpectedImportExport, this.state.startLoc);
          }
          this.next();
          let result;
          if (startType === 83) {
            result = this.parseImport(node2);
          } else {
            result = this.parseExport(node2, decorators);
          }
          this.assertModuleNodeAllowed(result);
          return result;
        }
        default: {
          if (this.isAsyncFunction()) {
            if (!allowDeclaration) {
              this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);
            }
            this.next();
            return this.parseFunctionStatement(node2, true, !allowDeclaration && allowFunctionDeclaration);
          }
        }
      }
      const maybeName = this.state.value;
      const expr = this.parseExpression();
      if (tokenIsIdentifier(startType) && expr.type === "Identifier" && this.eat(14)) {
        return this.parseLabeledStatement(node2, maybeName, expr, flags);
      } else {
        return this.parseExpressionStatement(node2, expr, decorators);
      }
    }
    assertModuleNodeAllowed(node2) {
      if (!(this.optionFlags & 8) && !this.inModule) {
        this.raise(Errors.ImportOutsideModule, node2);
      }
    }
    decoratorsEnabledBeforeExport() {
      if (this.hasPlugin("decorators-legacy")) return true;
      return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
    }
    maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
      if (maybeDecorators) {
        var _classNode$decorators;
        if ((_classNode$decorators = classNode.decorators) != null && _classNode$decorators.length) {
          if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
            this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);
          }
          classNode.decorators.unshift(...maybeDecorators);
        } else {
          classNode.decorators = maybeDecorators;
        }
        this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
        if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
      }
      return classNode;
    }
    canHaveLeadingDecorator() {
      return this.match(80);
    }
    parseDecorators(allowExport) {
      const decorators = [];
      do {
        decorators.push(this.parseDecorator());
      } while (this.match(26));
      if (this.match(82)) {
        if (!allowExport) {
          this.unexpected();
        }
        if (!this.decoratorsEnabledBeforeExport()) {
          this.raise(Errors.DecoratorExportClass, this.state.startLoc);
        }
      } else if (!this.canHaveLeadingDecorator()) {
        throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
      }
      return decorators;
    }
    parseDecorator() {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);
      const node2 = this.startNode();
      this.next();
      if (this.hasPlugin("decorators")) {
        const startLoc = this.state.startLoc;
        let expr;
        if (this.match(10)) {
          const startLoc2 = this.state.startLoc;
          this.next();
          expr = this.parseExpression();
          this.expect(11);
          expr = this.wrapParenthesis(startLoc2, expr);
          const paramsStartLoc = this.state.startLoc;
          node2.expression = this.parseMaybeDecoratorArguments(expr, startLoc2);
          if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node2.expression !== expr) {
            this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
          }
        } else {
          expr = this.parseIdentifier(false);
          while (this.eat(16)) {
            const node3 = this.startNodeAt(startLoc);
            node3.object = expr;
            if (this.match(139)) {
              this.classScope.usePrivateName(this.state.value, this.state.startLoc);
              node3.property = this.parsePrivateName();
            } else {
              node3.property = this.parseIdentifier(true);
            }
            node3.computed = false;
            expr = this.finishNode(node3, "MemberExpression");
          }
          node2.expression = this.parseMaybeDecoratorArguments(expr, startLoc);
        }
      } else {
        node2.expression = this.parseExprSubscripts();
      }
      return this.finishNode(node2, "Decorator");
    }
    parseMaybeDecoratorArguments(expr, startLoc) {
      if (this.eat(10)) {
        const node2 = this.startNodeAt(startLoc);
        node2.callee = expr;
        node2.arguments = this.parseCallExpressionArguments(11);
        this.toReferencedList(node2.arguments);
        return this.finishNode(node2, "CallExpression");
      }
      return expr;
    }
    parseBreakContinueStatement(node2, isBreak) {
      this.next();
      if (this.isLineTerminator()) {
        node2.label = null;
      } else {
        node2.label = this.parseIdentifier();
        this.semicolon();
      }
      this.verifyBreakContinue(node2, isBreak);
      return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(node2, isBreak) {
      let i;
      for (i = 0; i < this.state.labels.length; ++i) {
        const lab = this.state.labels[i];
        if (node2.label == null || lab.name === node2.label.name) {
          if (lab.kind != null && (isBreak || lab.kind === 1)) {
            break;
          }
          if (node2.label && isBreak) break;
        }
      }
      if (i === this.state.labels.length) {
        const type = isBreak ? "BreakStatement" : "ContinueStatement";
        this.raise(Errors.IllegalBreakContinue, node2, {
          type
        });
      }
    }
    parseDebuggerStatement(node2) {
      this.next();
      this.semicolon();
      return this.finishNode(node2, "DebuggerStatement");
    }
    parseHeaderExpression() {
      this.expect(10);
      const val = this.parseExpression();
      this.expect(11);
      return val;
    }
    parseDoWhileStatement(node2) {
      this.next();
      this.state.labels.push(loopLabel);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.state.labels.pop();
      this.expect(92);
      node2.test = this.parseHeaderExpression();
      this.eat(13);
      return this.finishNode(node2, "DoWhileStatement");
    }
    parseForStatement(node2) {
      this.next();
      this.state.labels.push(loopLabel);
      let awaitAt = null;
      if (this.isContextual(96) && this.recordAwaitIfAllowed()) {
        awaitAt = this.state.startLoc;
        this.next();
      }
      this.scope.enter(0);
      this.expect(10);
      if (this.match(13)) {
        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, null);
      }
      const startsWithLet = this.isContextual(100);
      {
        const startsWithAwaitUsing = this.isAwaitUsing();
        const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.allowsForUsing();
        const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
        if (this.match(74) || this.match(75) || isLetOrUsing) {
          const initNode = this.startNode();
          let kind;
          if (startsWithAwaitUsing) {
            kind = "await using";
            if (!this.recordAwaitIfAllowed()) {
              this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);
            }
            this.next();
          } else {
            kind = this.state.value;
          }
          this.next();
          this.parseVar(initNode, true, kind);
          const init2 = this.finishNode(initNode, "VariableDeclaration");
          const isForIn = this.match(58);
          if (isForIn && starsWithUsingDeclaration) {
            this.raise(Errors.ForInUsing, init2);
          }
          if ((isForIn || this.isContextual(102)) && init2.declarations.length === 1) {
            return this.parseForIn(node2, init2, awaitAt);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, init2);
        }
      }
      const startsWithAsync = this.isContextual(95);
      const refExpressionErrors = new ExpressionErrors();
      const init = this.parseExpression(true, refExpressionErrors);
      const isForOf = this.isContextual(102);
      if (isForOf) {
        if (startsWithLet) {
          this.raise(Errors.ForOfLet, init);
        }
        if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
          this.raise(Errors.ForOfAsync, init);
        }
      }
      if (isForOf || this.match(58)) {
        this.checkDestructuringPrivate(refExpressionErrors);
        this.toAssignable(init, true);
        const type = isForOf ? "ForOfStatement" : "ForInStatement";
        this.checkLVal(init, {
          type
        });
        return this.parseForIn(node2, init, awaitAt);
      } else {
        this.checkExpressionErrors(refExpressionErrors, true);
      }
      if (awaitAt !== null) {
        this.unexpected(awaitAt);
      }
      return this.parseFor(node2, init);
    }
    parseFunctionStatement(node2, isAsync, isHangingDeclaration) {
      this.next();
      return this.parseFunction(node2, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
    }
    parseIfStatement(node2) {
      this.next();
      node2.test = this.parseHeaderExpression();
      node2.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
      node2.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
      return this.finishNode(node2, "IfStatement");
    }
    parseReturnStatement(node2) {
      if (!this.prodParam.hasReturn && !(this.optionFlags & 2)) {
        this.raise(Errors.IllegalReturn, this.state.startLoc);
      }
      this.next();
      if (this.isLineTerminator()) {
        node2.argument = null;
      } else {
        node2.argument = this.parseExpression();
        this.semicolon();
      }
      return this.finishNode(node2, "ReturnStatement");
    }
    parseSwitchStatement(node2) {
      this.next();
      node2.discriminant = this.parseHeaderExpression();
      const cases = node2.cases = [];
      this.expect(5);
      this.state.labels.push(switchLabel);
      this.scope.enter(256);
      let cur;
      for (let sawDefault; !this.match(8); ) {
        if (this.match(61) || this.match(65)) {
          const isCase = this.match(61);
          if (cur) this.finishNode(cur, "SwitchCase");
          cases.push(cur = this.startNode());
          cur.consequent = [];
          this.next();
          if (isCase) {
            cur.test = this.parseExpression();
          } else {
            if (sawDefault) {
              this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);
            }
            sawDefault = true;
            cur.test = null;
          }
          this.expect(14);
        } else {
          if (cur) {
            cur.consequent.push(this.parseStatementListItem());
          } else {
            this.unexpected();
          }
        }
      }
      this.scope.exit();
      if (cur) this.finishNode(cur, "SwitchCase");
      this.next();
      this.state.labels.pop();
      return this.finishNode(node2, "SwitchStatement");
    }
    parseThrowStatement(node2) {
      this.next();
      if (this.hasPrecedingLineBreak()) {
        this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);
      }
      node2.argument = this.parseExpression();
      this.semicolon();
      return this.finishNode(node2, "ThrowStatement");
    }
    parseCatchClauseParam() {
      const param = this.parseBindingAtom();
      this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
      this.checkLVal(param, {
        type: "CatchClause"
      }, 9);
      return param;
    }
    parseTryStatement(node2) {
      this.next();
      node2.block = this.parseBlock();
      node2.handler = null;
      if (this.match(62)) {
        const clause = this.startNode();
        this.next();
        if (this.match(10)) {
          this.expect(10);
          clause.param = this.parseCatchClauseParam();
          this.expect(11);
        } else {
          clause.param = null;
          this.scope.enter(0);
        }
        clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
        this.scope.exit();
        node2.handler = this.finishNode(clause, "CatchClause");
      }
      node2.finalizer = this.eat(67) ? this.parseBlock() : null;
      if (!node2.handler && !node2.finalizer) {
        this.raise(Errors.NoCatchOrFinally, node2);
      }
      return this.finishNode(node2, "TryStatement");
    }
    parseVarStatement(node2, kind, allowMissingInitializer = false) {
      this.next();
      this.parseVar(node2, false, kind, allowMissingInitializer);
      this.semicolon();
      return this.finishNode(node2, "VariableDeclaration");
    }
    parseWhileStatement(node2) {
      this.next();
      node2.test = this.parseHeaderExpression();
      this.state.labels.push(loopLabel);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.state.labels.pop();
      return this.finishNode(node2, "WhileStatement");
    }
    parseWithStatement(node2) {
      if (this.state.strict) {
        this.raise(Errors.StrictWith, this.state.startLoc);
      }
      this.next();
      node2.object = this.parseHeaderExpression();
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      return this.finishNode(node2, "WithStatement");
    }
    parseEmptyStatement(node2) {
      this.next();
      return this.finishNode(node2, "EmptyStatement");
    }
    parseLabeledStatement(node2, maybeName, expr, flags) {
      for (const label of this.state.labels) {
        if (label.name === maybeName) {
          this.raise(Errors.LabelRedeclaration, expr, {
            labelName: maybeName
          });
        }
      }
      const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;
      for (let i = this.state.labels.length - 1; i >= 0; i--) {
        const label = this.state.labels[i];
        if (label.statementStart === node2.start) {
          label.statementStart = this.sourceToOffsetPos(this.state.start);
          label.kind = kind;
        } else {
          break;
        }
      }
      this.state.labels.push({
        name: maybeName,
        kind,
        statementStart: this.sourceToOffsetPos(this.state.start)
      });
      node2.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
      this.state.labels.pop();
      node2.label = expr;
      return this.finishNode(node2, "LabeledStatement");
    }
    parseExpressionStatement(node2, expr, decorators) {
      node2.expression = expr;
      this.semicolon();
      return this.finishNode(node2, "ExpressionStatement");
    }
    parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
      const node2 = this.startNode();
      if (allowDirectives) {
        this.state.strictErrors.clear();
      }
      this.expect(5);
      if (createNewLexicalScope) {
        this.scope.enter(0);
      }
      this.parseBlockBody(node2, allowDirectives, false, 8, afterBlockParse);
      if (createNewLexicalScope) {
        this.scope.exit();
      }
      return this.finishNode(node2, "BlockStatement");
    }
    isValidDirective(stmt) {
      return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
    }
    parseBlockBody(node2, allowDirectives, topLevel, end, afterBlockParse) {
      const body = node2.body = [];
      const directives = node2.directives = [];
      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
    }
    parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
      const oldStrict = this.state.strict;
      let hasStrictModeDirective = false;
      let parsedNonDirective = false;
      while (!this.match(end)) {
        const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
        if (directives && !parsedNonDirective) {
          if (this.isValidDirective(stmt)) {
            const directive = this.stmtToDirective(stmt);
            directives.push(directive);
            if (!hasStrictModeDirective && directive.value.value === "use strict") {
              hasStrictModeDirective = true;
              this.setStrict(true);
            }
            continue;
          }
          parsedNonDirective = true;
          this.state.strictErrors.clear();
        }
        body.push(stmt);
      }
      afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
      if (!oldStrict) {
        this.setStrict(false);
      }
      this.next();
    }
    parseFor(node2, init) {
      node2.init = init;
      this.semicolon(false);
      node2.test = this.match(13) ? null : this.parseExpression();
      this.semicolon(false);
      node2.update = this.match(11) ? null : this.parseExpression();
      this.expect(11);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.scope.exit();
      this.state.labels.pop();
      return this.finishNode(node2, "ForStatement");
    }
    parseForIn(node2, init, awaitAt) {
      const isForIn = this.match(58);
      this.next();
      if (isForIn) {
        if (awaitAt !== null) this.unexpected(awaitAt);
      } else {
        node2.await = awaitAt !== null;
      }
      if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
        this.raise(Errors.ForInOfLoopInitializer, init, {
          type: isForIn ? "ForInStatement" : "ForOfStatement"
        });
      }
      if (init.type === "AssignmentPattern") {
        this.raise(Errors.InvalidLhs, init, {
          ancestor: {
            type: "ForStatement"
          }
        });
      }
      node2.left = init;
      node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
      this.expect(11);
      node2.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.scope.exit();
      this.state.labels.pop();
      return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(node2, isFor, kind, allowMissingInitializer = false) {
      const declarations = node2.declarations = [];
      node2.kind = kind;
      for (; ; ) {
        const decl = this.startNode();
        this.parseVarId(decl, kind);
        decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
        if (decl.init === null && !allowMissingInitializer) {
          if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
            this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
              kind: "destructuring"
            });
          } else if ((kind === "const" || kind === "using" || kind === "await using") && !(this.match(58) || this.isContextual(102))) {
            this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
              kind
            });
          }
        }
        declarations.push(this.finishNode(decl, "VariableDeclarator"));
        if (!this.eat(12)) break;
      }
      return node2;
    }
    parseVarId(decl, kind) {
      const id = this.parseBindingAtom();
      if (kind === "using" || kind === "await using") {
        if (id.type === "ArrayPattern" || id.type === "ObjectPattern") {
          this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);
        }
      }
      this.checkLVal(id, {
        type: "VariableDeclarator"
      }, kind === "var" ? 5 : 8201);
      decl.id = id;
    }
    parseAsyncFunctionExpression(node2) {
      return this.parseFunction(node2, 8);
    }
    parseFunction(node2, flags = 0) {
      const hangingDeclaration = flags & 2;
      const isDeclaration = !!(flags & 1);
      const requireId = isDeclaration && !(flags & 4);
      const isAsync = !!(flags & 8);
      this.initFunction(node2, isAsync);
      if (this.match(55)) {
        if (hangingDeclaration) {
          this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);
        }
        this.next();
        node2.generator = true;
      }
      if (isDeclaration) {
        node2.id = this.parseFunctionId(requireId);
      }
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = false;
      this.scope.enter(2);
      this.prodParam.enter(functionFlags(isAsync, node2.generator));
      if (!isDeclaration) {
        node2.id = this.parseFunctionId();
      }
      this.parseFunctionParams(node2, false);
      this.withSmartMixTopicForbiddingContext(() => {
        this.parseFunctionBodyAndFinish(node2, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
      });
      this.prodParam.exit();
      this.scope.exit();
      if (isDeclaration && !hangingDeclaration) {
        this.registerFunctionStatementId(node2);
      }
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return node2;
    }
    parseFunctionId(requireId) {
      return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(node2, isConstructor) {
      this.expect(10);
      this.expressionScope.enter(newParameterDeclarationScope());
      node2.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
      this.expressionScope.exit();
    }
    registerFunctionStatementId(node2) {
      if (!node2.id) return;
      this.scope.declareName(node2.id.name, !this.options.annexB || this.state.strict || node2.generator || node2.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node2.id.loc.start);
    }
    parseClass(node2, isStatement, optionalId) {
      this.next();
      const oldStrict = this.state.strict;
      this.state.strict = true;
      this.parseClassId(node2, isStatement, optionalId);
      this.parseClassSuper(node2);
      node2.body = this.parseClassBody(!!node2.superClass, oldStrict);
      return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
      return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
      return this.match(10);
    }
    nameIsConstructor(key) {
      return key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor";
    }
    isNonstaticConstructor(method) {
      return !method.computed && !method.static && this.nameIsConstructor(method.key);
    }
    parseClassBody(hadSuperClass, oldStrict) {
      this.classScope.enter();
      const state = {
        hadConstructor: false,
        hadSuperClass
      };
      let decorators = [];
      const classBody = this.startNode();
      classBody.body = [];
      this.expect(5);
      this.withSmartMixTopicForbiddingContext(() => {
        while (!this.match(8)) {
          if (this.eat(13)) {
            if (decorators.length > 0) {
              throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
            }
            continue;
          }
          if (this.match(26)) {
            decorators.push(this.parseDecorator());
            continue;
          }
          const member = this.startNode();
          if (decorators.length) {
            member.decorators = decorators;
            this.resetStartLocationFromNode(member, decorators[0]);
            decorators = [];
          }
          this.parseClassMember(classBody, member, state);
          if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
            this.raise(Errors.DecoratorConstructor, member);
          }
        }
      });
      this.state.strict = oldStrict;
      this.next();
      if (decorators.length) {
        throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
      }
      this.classScope.exit();
      return this.finishNode(classBody, "ClassBody");
    }
    parseClassMemberFromModifier(classBody, member) {
      const key = this.parseIdentifier(true);
      if (this.isClassMethod()) {
        const method = member;
        method.kind = "method";
        method.computed = false;
        method.key = key;
        method.static = false;
        this.pushClassMethod(classBody, method, false, false, false, false);
        return true;
      } else if (this.isClassProperty()) {
        const prop = member;
        prop.computed = false;
        prop.key = key;
        prop.static = false;
        classBody.body.push(this.parseClassProperty(prop));
        return true;
      }
      this.resetPreviousNodeTrailingComments(key);
      return false;
    }
    parseClassMember(classBody, member, state) {
      const isStatic = this.isContextual(106);
      if (isStatic) {
        if (this.parseClassMemberFromModifier(classBody, member)) {
          return;
        }
        if (this.eat(5)) {
          this.parseClassStaticBlock(classBody, member);
          return;
        }
      }
      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
      const publicMethod = member;
      const privateMethod = member;
      const publicProp = member;
      const privateProp = member;
      const accessorProp = member;
      const method = publicMethod;
      const publicMember = publicMethod;
      member.static = isStatic;
      this.parsePropertyNamePrefixOperator(member);
      if (this.eat(55)) {
        method.kind = "method";
        const isPrivateName = this.match(139);
        this.parseClassElementName(method);
        this.parsePostMemberNameModifiers(method);
        if (isPrivateName) {
          this.pushClassPrivateMethod(classBody, privateMethod, true, false);
          return;
        }
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsGenerator, publicMethod.key);
        }
        this.pushClassMethod(classBody, publicMethod, true, false, false, false);
        return;
      }
      const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type);
      const key = this.parseClassElementName(member);
      const maybeContextualKw = isContextual ? key.name : null;
      const isPrivate = this.isPrivateName(key);
      const maybeQuestionTokenStartLoc = this.state.startLoc;
      this.parsePostMemberNameModifiers(publicMember);
      if (this.isClassMethod()) {
        method.kind = "method";
        if (isPrivate) {
          this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          return;
        }
        const isConstructor = this.isNonstaticConstructor(publicMethod);
        let allowsDirectSuper = false;
        if (isConstructor) {
          publicMethod.kind = "constructor";
          if (state.hadConstructor && !this.hasPlugin("typescript")) {
            this.raise(Errors.DuplicateConstructor, key);
          }
          if (isConstructor && this.hasPlugin("typescript") && member.override) {
            this.raise(Errors.OverrideOnConstructor, key);
          }
          state.hadConstructor = true;
          allowsDirectSuper = state.hadSuperClass;
        }
        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
      } else if (this.isClassProperty()) {
        if (isPrivate) {
          this.pushClassPrivateProperty(classBody, privateProp);
        } else {
          this.pushClassProperty(classBody, publicProp);
        }
      } else if (maybeContextualKw === "async" && !this.isLineTerminator()) {
        this.resetPreviousNodeTrailingComments(key);
        const isGenerator = this.eat(55);
        if (publicMember.optional) {
          this.unexpected(maybeQuestionTokenStartLoc);
        }
        method.kind = "method";
        const isPrivate2 = this.match(139);
        this.parseClassElementName(method);
        this.parsePostMemberNameModifiers(publicMember);
        if (isPrivate2) {
          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
        } else {
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsAsync, publicMethod.key);
          }
          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
        }
      } else if ((maybeContextualKw === "get" || maybeContextualKw === "set") && !(this.match(55) && this.isLineTerminator())) {
        this.resetPreviousNodeTrailingComments(key);
        method.kind = maybeContextualKw;
        const isPrivate2 = this.match(139);
        this.parseClassElementName(publicMethod);
        if (isPrivate2) {
          this.pushClassPrivateMethod(classBody, privateMethod, false, false);
        } else {
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsAccessor, publicMethod.key);
          }
          this.pushClassMethod(classBody, publicMethod, false, false, false, false);
        }
        this.checkGetterSetterParams(publicMethod);
      } else if (maybeContextualKw === "accessor" && !this.isLineTerminator()) {
        this.expectPlugin("decoratorAutoAccessors");
        this.resetPreviousNodeTrailingComments(key);
        const isPrivate2 = this.match(139);
        this.parseClassElementName(publicProp);
        this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
      } else if (this.isLineTerminator()) {
        if (isPrivate) {
          this.pushClassPrivateProperty(classBody, privateProp);
        } else {
          this.pushClassProperty(classBody, publicProp);
        }
      } else {
        this.unexpected();
      }
    }
    parseClassElementName(member) {
      const {
        type,
        value: value2
      } = this.state;
      if ((type === 132 || type === 134) && member.static && value2 === "prototype") {
        this.raise(Errors.StaticPrototype, this.state.startLoc);
      }
      if (type === 139) {
        if (value2 === "constructor") {
          this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
        }
        const key = this.parsePrivateName();
        member.key = key;
        return key;
      }
      this.parsePropertyName(member);
      return member.key;
    }
    parseClassStaticBlock(classBody, member) {
      var _member$decorators;
      this.scope.enter(64 | 128 | 16);
      const oldLabels = this.state.labels;
      this.state.labels = [];
      this.prodParam.enter(0);
      const body = member.body = [];
      this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
      this.prodParam.exit();
      this.scope.exit();
      this.state.labels = oldLabels;
      classBody.body.push(this.finishNode(member, "StaticBlock"));
      if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
        this.raise(Errors.DecoratorStaticBlock, member);
      }
    }
    pushClassProperty(classBody, prop) {
      if (!prop.computed && this.nameIsConstructor(prop.key)) {
        this.raise(Errors.ConstructorClassField, prop.key);
      }
      classBody.body.push(this.parseClassProperty(prop));
    }
    pushClassPrivateProperty(classBody, prop) {
      const node2 = this.parseClassPrivateProperty(prop);
      classBody.body.push(node2);
      this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), 0, node2.key.loc.start);
    }
    pushClassAccessorProperty(classBody, prop, isPrivate) {
      if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {
        this.raise(Errors.ConstructorClassField, prop.key);
      }
      const node2 = this.parseClassAccessorProperty(prop);
      classBody.body.push(node2);
      if (isPrivate) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), 0, node2.key.loc.start);
      }
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      const node2 = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
      classBody.body.push(node2);
      const kind = node2.kind === "get" ? node2.static ? 6 : 2 : node2.kind === "set" ? node2.static ? 5 : 1 : 0;
      this.declareClassPrivateMethodInScope(node2, kind);
    }
    declareClassPrivateMethodInScope(node2, kind) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(node2.key), kind, node2.key.loc.start);
    }
    parsePostMemberNameModifiers(methodOrProp) {
    }
    parseClassPrivateProperty(node2) {
      this.parseInitializer(node2);
      this.semicolon();
      return this.finishNode(node2, "ClassPrivateProperty");
    }
    parseClassProperty(node2) {
      this.parseInitializer(node2);
      this.semicolon();
      return this.finishNode(node2, "ClassProperty");
    }
    parseClassAccessorProperty(node2) {
      this.parseInitializer(node2);
      this.semicolon();
      return this.finishNode(node2, "ClassAccessorProperty");
    }
    parseInitializer(node2) {
      this.scope.enter(64 | 16);
      this.expressionScope.enter(newExpressionScope());
      this.prodParam.enter(0);
      node2.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
      this.expressionScope.exit();
      this.prodParam.exit();
      this.scope.exit();
    }
    parseClassId(node2, isStatement, optionalId, bindingType = 8331) {
      if (tokenIsIdentifier(this.state.type)) {
        node2.id = this.parseIdentifier();
        if (isStatement) {
          this.declareNameFromIdentifier(node2.id, bindingType);
        }
      } else {
        if (optionalId || !isStatement) {
          node2.id = null;
        } else {
          throw this.raise(Errors.MissingClassName, this.state.startLoc);
        }
      }
    }
    parseClassSuper(node2) {
      node2.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(node2, decorators) {
      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node2, true);
      const hasDefault = this.maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier);
      const parseAfterDefault = !hasDefault || this.eat(12);
      const hasStar = parseAfterDefault && this.eatExportStar(node2);
      const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node2);
      const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
      const isFromRequired = hasDefault || hasStar;
      if (hasStar && !hasNamespace) {
        if (hasDefault) this.unexpected();
        if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.parseExportFrom(node2, true);
        this.sawUnambiguousESM = true;
        return this.finishNode(node2, "ExportAllDeclaration");
      }
      const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node2);
      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
        this.unexpected(null, 5);
      }
      if (hasNamespace && parseAfterNamespace) {
        this.unexpected(null, 98);
      }
      let hasDeclaration;
      if (isFromRequired || hasSpecifiers) {
        hasDeclaration = false;
        if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.parseExportFrom(node2, isFromRequired);
      } else {
        hasDeclaration = this.maybeParseExportDeclaration(node2);
      }
      if (isFromRequired || hasSpecifiers || hasDeclaration) {
        var _node2$declaration;
        const node22 = node2;
        this.checkExport(node22, true, false, !!node22.source);
        if (((_node2$declaration = node22.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
          this.maybeTakeDecorators(decorators, node22.declaration, node22);
        } else if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.sawUnambiguousESM = true;
        return this.finishNode(node22, "ExportNamedDeclaration");
      }
      if (this.eat(65)) {
        const node22 = node2;
        const decl = this.parseExportDefaultExpression();
        node22.declaration = decl;
        if (decl.type === "ClassDeclaration") {
          this.maybeTakeDecorators(decorators, decl, node22);
        } else if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node2);
        }
        this.checkExport(node22, true, true);
        this.sawUnambiguousESM = true;
        return this.finishNode(node22, "ExportDefaultDeclaration");
      }
      this.unexpected(null, 5);
    }
    eatExportStar(node2) {
      return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(node2, maybeDefaultIdentifier) {
      if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
        this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
        const id = maybeDefaultIdentifier || this.parseIdentifier(true);
        const specifier = this.startNodeAtNode(id);
        specifier.exported = id;
        node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return true;
      }
      return false;
    }
    maybeParseExportNamespaceSpecifier(node2) {
      if (this.isContextual(93)) {
        var _ref, _ref$specifiers;
        (_ref$specifiers = (_ref = node2).specifiers) != null ? _ref$specifiers : _ref.specifiers = [];
        const specifier = this.startNodeAt(this.state.lastTokStartLoc);
        this.next();
        specifier.exported = this.parseModuleExportName();
        node2.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
        return true;
      }
      return false;
    }
    maybeParseExportNamedSpecifiers(node2) {
      if (this.match(5)) {
        const node22 = node2;
        if (!node22.specifiers) node22.specifiers = [];
        const isTypeExport = node22.exportKind === "type";
        node22.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
        node22.source = null;
        if (this.hasPlugin("importAssertions")) {
          node22.assertions = [];
        } else {
          node22.attributes = [];
        }
        node22.declaration = null;
        return true;
      }
      return false;
    }
    maybeParseExportDeclaration(node2) {
      if (this.shouldParseExportDeclaration()) {
        node2.specifiers = [];
        node2.source = null;
        if (this.hasPlugin("importAssertions")) {
          node2.assertions = [];
        } else {
          node2.attributes = [];
        }
        node2.declaration = this.parseExportDeclaration(node2);
        return true;
      }
      return false;
    }
    isAsyncFunction() {
      if (!this.isContextual(95)) return false;
      const next = this.nextTokenInLineStart();
      return this.isUnparsedContextual(next, "function");
    }
    parseExportDefaultExpression() {
      const expr = this.startNode();
      if (this.match(68)) {
        this.next();
        return this.parseFunction(expr, 1 | 4);
      } else if (this.isAsyncFunction()) {
        this.next();
        this.next();
        return this.parseFunction(expr, 1 | 4 | 8);
      }
      if (this.match(80)) {
        return this.parseClass(expr, true, true);
      }
      if (this.match(26)) {
        if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
        }
        return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
      }
      if (this.match(75) || this.match(74) || this.isLet() || this.hasPlugin("explicitResourceManagement") && (this.isUsing() || this.isAwaitUsing())) {
        throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
      }
      const res = this.parseMaybeAssignAllowIn();
      this.semicolon();
      return res;
    }
    parseExportDeclaration(node2) {
      if (this.match(80)) {
        const node3 = this.parseClass(this.startNode(), true, false);
        return node3;
      }
      return this.parseStatementListItem();
    }
    isExportDefaultSpecifier() {
      const {
        type
      } = this.state;
      if (tokenIsIdentifier(type)) {
        if (type === 95 && !this.state.containsEsc || type === 100) {
          return false;
        }
        if ((type === 130 || type === 129) && !this.state.containsEsc) {
          const {
            type: nextType
          } = this.lookahead();
          if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
            this.expectOnePlugin(["flow", "typescript"]);
            return false;
          }
        }
      } else if (!this.match(65)) {
        return false;
      }
      const next = this.nextTokenStart();
      const hasFrom = this.isUnparsedContextual(next, "from");
      if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
        return true;
      }
      if (this.match(65) && hasFrom) {
        const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
        return nextAfterFrom === 34 || nextAfterFrom === 39;
      }
      return false;
    }
    parseExportFrom(node2, expect) {
      if (this.eatContextual(98)) {
        node2.source = this.parseImportSource();
        this.checkExport(node2);
        this.maybeParseImportAttributes(node2);
        this.checkJSONModuleImport(node2);
      } else if (expect) {
        this.unexpected();
      }
      this.semicolon();
    }
    shouldParseExportDeclaration() {
      const {
        type
      } = this.state;
      if (type === 26) {
        this.expectOnePlugin(["decorators", "decorators-legacy"]);
        if (this.hasPlugin("decorators")) {
          if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
            this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
          }
          return true;
        }
      }
      if (this.hasPlugin("explicitResourceManagement")) {
        if (this.isUsing()) {
          this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
          return true;
        }
        if (this.isAwaitUsing()) {
          this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
          return true;
        }
      }
      return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(node2, checkNames, isDefault, isFrom) {
      if (checkNames) {
        var _node$specifiers;
        if (isDefault) {
          this.checkDuplicateExports(node2, "default");
          if (this.hasPlugin("exportDefaultFrom")) {
            var _declaration$extra;
            const declaration = node2.declaration;
            if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
              this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
            }
          }
        } else if ((_node$specifiers = node2.specifiers) != null && _node$specifiers.length) {
          for (const specifier of node2.specifiers) {
            const {
              exported
            } = specifier;
            const exportName = exported.type === "Identifier" ? exported.name : exported.value;
            this.checkDuplicateExports(specifier, exportName);
            if (!isFrom && specifier.local) {
              const {
                local
              } = specifier;
              if (local.type !== "Identifier") {
                this.raise(Errors.ExportBindingIsString, specifier, {
                  localName: local.value,
                  exportName
                });
              } else {
                this.checkReservedWord(local.name, local.loc.start, true, false);
                this.scope.checkLocalExport(local);
              }
            }
          }
        } else if (node2.declaration) {
          const decl = node2.declaration;
          if (decl.type === "FunctionDeclaration" || decl.type === "ClassDeclaration") {
            const {
              id
            } = decl;
            if (!id) throw new Error("Assertion failure");
            this.checkDuplicateExports(node2, id.name);
          } else if (decl.type === "VariableDeclaration") {
            for (const declaration of decl.declarations) {
              this.checkDeclaration(declaration.id);
            }
          }
        }
      }
    }
    checkDeclaration(node2) {
      if (node2.type === "Identifier") {
        this.checkDuplicateExports(node2, node2.name);
      } else if (node2.type === "ObjectPattern") {
        for (const prop of node2.properties) {
          this.checkDeclaration(prop);
        }
      } else if (node2.type === "ArrayPattern") {
        for (const elem of node2.elements) {
          if (elem) {
            this.checkDeclaration(elem);
          }
        }
      } else if (node2.type === "ObjectProperty") {
        this.checkDeclaration(node2.value);
      } else if (node2.type === "RestElement") {
        this.checkDeclaration(node2.argument);
      } else if (node2.type === "AssignmentPattern") {
        this.checkDeclaration(node2.left);
      }
    }
    checkDuplicateExports(node2, exportName) {
      if (this.exportedIdentifiers.has(exportName)) {
        if (exportName === "default") {
          this.raise(Errors.DuplicateDefaultExport, node2);
        } else {
          this.raise(Errors.DuplicateExport, node2, {
            exportName
          });
        }
      }
      this.exportedIdentifiers.add(exportName);
    }
    parseExportSpecifiers(isInTypeExport) {
      const nodes = [];
      let first = true;
      this.expect(5);
      while (!this.eat(8)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.eat(8)) break;
        }
        const isMaybeTypeOnly = this.isContextual(130);
        const isString = this.match(134);
        const node2 = this.startNode();
        node2.local = this.parseModuleExportName();
        nodes.push(this.parseExportSpecifier(node2, isString, isInTypeExport, isMaybeTypeOnly));
      }
      return nodes;
    }
    parseExportSpecifier(node2, isString, isInTypeExport, isMaybeTypeOnly) {
      if (this.eatContextual(93)) {
        node2.exported = this.parseModuleExportName();
      } else if (isString) {
        node2.exported = this.cloneStringLiteral(node2.local);
      } else if (!node2.exported) {
        node2.exported = this.cloneIdentifier(node2.local);
      }
      return this.finishNode(node2, "ExportSpecifier");
    }
    parseModuleExportName() {
      if (this.match(134)) {
        const result = this.parseStringLiteral(this.state.value);
        const surrogate = loneSurrogate.exec(result.value);
        if (surrogate) {
          this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {
            surrogateCharCode: surrogate[0].charCodeAt(0)
          });
        }
        return result;
      }
      return this.parseIdentifier(true);
    }
    isJSONModuleImport(node2) {
      if (node2.assertions != null) {
        return node2.assertions.some(({
          key,
          value: value2
        }) => {
          return value2.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
        });
      }
      return false;
    }
    checkImportReflection(node2) {
      const {
        specifiers
      } = node2;
      const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
      if (node2.phase === "source") {
        if (singleBindingType !== "ImportDefaultSpecifier") {
          this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
        }
      } else if (node2.phase === "defer") {
        if (singleBindingType !== "ImportNamespaceSpecifier") {
          this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
        }
      } else if (node2.module) {
        var _node$assertions;
        if (singleBindingType !== "ImportDefaultSpecifier") {
          this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);
        }
        if (((_node$assertions = node2.assertions) == null ? void 0 : _node$assertions.length) > 0) {
          this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
        }
      }
    }
    checkJSONModuleImport(node2) {
      if (this.isJSONModuleImport(node2) && node2.type !== "ExportAllDeclaration") {
        const {
          specifiers
        } = node2;
        if (specifiers != null) {
          const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
            let imported;
            if (specifier.type === "ExportSpecifier") {
              imported = specifier.local;
            } else if (specifier.type === "ImportSpecifier") {
              imported = specifier.imported;
            }
            if (imported !== void 0) {
              return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
            }
          });
          if (nonDefaultNamedSpecifier !== void 0) {
            this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
          }
        }
      }
    }
    isPotentialImportPhase(isExport) {
      if (isExport) return false;
      return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
    }
    applyImportPhase(node2, isExport, phase, loc) {
      if (isExport) {
        return;
      }
      if (phase === "module") {
        this.expectPlugin("importReflection", loc);
        node2.module = true;
      } else if (this.hasPlugin("importReflection")) {
        node2.module = false;
      }
      if (phase === "source") {
        this.expectPlugin("sourcePhaseImports", loc);
        node2.phase = "source";
      } else if (phase === "defer") {
        this.expectPlugin("deferredImportEvaluation", loc);
        node2.phase = "defer";
      } else if (this.hasPlugin("sourcePhaseImports")) {
        node2.phase = null;
      }
    }
    parseMaybeImportPhase(node2, isExport) {
      if (!this.isPotentialImportPhase(isExport)) {
        this.applyImportPhase(node2, isExport, null);
        return null;
      }
      const phaseIdentifier = this.startNode();
      const phaseIdentifierName = this.parseIdentifierName(true);
      const {
        type
      } = this.state;
      const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
      if (isImportPhase) {
        this.applyImportPhase(node2, isExport, phaseIdentifierName, phaseIdentifier.loc.start);
        return null;
      } else {
        this.applyImportPhase(node2, isExport, null);
        return this.createIdentifier(phaseIdentifier, phaseIdentifierName);
      }
    }
    isPrecedingIdImportPhase(phase) {
      const {
        type
      } = this.state;
      return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
    }
    parseImport(node2) {
      if (this.match(134)) {
        return this.parseImportSourceAndAttributes(node2);
      }
      return this.parseImportSpecifiersAndAfter(node2, this.parseMaybeImportPhase(node2, false));
    }
    parseImportSpecifiersAndAfter(node2, maybeDefaultIdentifier) {
      node2.specifiers = [];
      const hasDefault = this.maybeParseDefaultImportSpecifier(node2, maybeDefaultIdentifier);
      const parseNext = !hasDefault || this.eat(12);
      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node2);
      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node2);
      this.expectContextual(98);
      return this.parseImportSourceAndAttributes(node2);
    }
    parseImportSourceAndAttributes(node2) {
      var _node$specifiers2;
      (_node$specifiers2 = node2.specifiers) != null ? _node$specifiers2 : node2.specifiers = [];
      node2.source = this.parseImportSource();
      this.maybeParseImportAttributes(node2);
      this.checkImportReflection(node2);
      this.checkJSONModuleImport(node2);
      this.semicolon();
      this.sawUnambiguousESM = true;
      return this.finishNode(node2, "ImportDeclaration");
    }
    parseImportSource() {
      if (!this.match(134)) this.unexpected();
      return this.parseExprAtom();
    }
    parseImportSpecifierLocal(node2, specifier, type) {
      specifier.local = this.parseIdentifier();
      node2.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    finishImportSpecifier(specifier, type, bindingType = 8201) {
      this.checkLVal(specifier.local, {
        type
      }, bindingType);
      return this.finishNode(specifier, type);
    }
    parseImportAttributes() {
      this.expect(5);
      const attrs = [];
      const attrNames = /* @__PURE__ */ new Set();
      do {
        if (this.match(8)) {
          break;
        }
        const node2 = this.startNode();
        const keyName = this.state.value;
        if (attrNames.has(keyName)) {
          this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
            key: keyName
          });
        }
        attrNames.add(keyName);
        if (this.match(134)) {
          node2.key = this.parseStringLiteral(keyName);
        } else {
          node2.key = this.parseIdentifier(true);
        }
        this.expect(14);
        if (!this.match(134)) {
          throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
        }
        node2.value = this.parseStringLiteral(this.state.value);
        attrs.push(this.finishNode(node2, "ImportAttribute"));
      } while (this.eat(12));
      this.expect(8);
      return attrs;
    }
    parseModuleAttributes() {
      const attrs = [];
      const attributes = /* @__PURE__ */ new Set();
      do {
        const node2 = this.startNode();
        node2.key = this.parseIdentifier(true);
        if (node2.key.name !== "type") {
          this.raise(Errors.ModuleAttributeDifferentFromType, node2.key);
        }
        if (attributes.has(node2.key.name)) {
          this.raise(Errors.ModuleAttributesWithDuplicateKeys, node2.key, {
            key: node2.key.name
          });
        }
        attributes.add(node2.key.name);
        this.expect(14);
        if (!this.match(134)) {
          throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
        }
        node2.value = this.parseStringLiteral(this.state.value);
        attrs.push(this.finishNode(node2, "ImportAttribute"));
      } while (this.eat(12));
      return attrs;
    }
    maybeParseImportAttributes(node2) {
      let attributes;
      {
        var useWith = false;
      }
      if (this.match(76)) {
        if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
          return;
        }
        this.next();
        if (this.hasPlugin("moduleAttributes")) {
          attributes = this.parseModuleAttributes();
          this.addExtra(node2, "deprecatedWithLegacySyntax", true);
        } else {
          attributes = this.parseImportAttributes();
        }
        {
          useWith = true;
        }
      } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
        if (!this.hasPlugin("deprecatedImportAssert") && !this.hasPlugin("importAssertions")) {
          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);
        }
        if (!this.hasPlugin("importAssertions")) {
          this.addExtra(node2, "deprecatedAssertSyntax", true);
        }
        this.next();
        attributes = this.parseImportAttributes();
      } else {
        attributes = [];
      }
      if (!useWith && this.hasPlugin("importAssertions")) {
        node2.assertions = attributes;
      } else {
        node2.attributes = attributes;
      }
    }
    maybeParseDefaultImportSpecifier(node2, maybeDefaultIdentifier) {
      if (maybeDefaultIdentifier) {
        const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
        specifier.local = maybeDefaultIdentifier;
        node2.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
        return true;
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        this.parseImportSpecifierLocal(node2, this.startNode(), "ImportDefaultSpecifier");
        return true;
      }
      return false;
    }
    maybeParseStarImportSpecifier(node2) {
      if (this.match(55)) {
        const specifier = this.startNode();
        this.next();
        this.expectContextual(93);
        this.parseImportSpecifierLocal(node2, specifier, "ImportNamespaceSpecifier");
        return true;
      }
      return false;
    }
    parseNamedImportSpecifiers(node2) {
      let first = true;
      this.expect(5);
      while (!this.eat(8)) {
        if (first) {
          first = false;
        } else {
          if (this.eat(14)) {
            throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
          }
          this.expect(12);
          if (this.eat(8)) break;
        }
        const specifier = this.startNode();
        const importedIsString = this.match(134);
        const isMaybeTypeOnly = this.isContextual(130);
        specifier.imported = this.parseModuleExportName();
        const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node2.importKind === "type" || node2.importKind === "typeof", isMaybeTypeOnly, void 0);
        node2.specifiers.push(importSpecifier);
      }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      if (this.eatContextual(93)) {
        specifier.local = this.parseIdentifier();
      } else {
        const {
          imported
        } = specifier;
        if (importedIsString) {
          throw this.raise(Errors.ImportBindingIsString, specifier, {
            importName: imported.value
          });
        }
        this.checkReservedWord(imported.name, specifier.loc.start, true, true);
        if (!specifier.local) {
          specifier.local = this.cloneIdentifier(imported);
        }
      }
      return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
    }
    isThisParam(param) {
      return param.type === "Identifier" && param.name === "this";
    }
  }
  class Parser extends StatementParser {
    constructor(options2, input, pluginsMap) {
      options2 = getOptions(options2);
      super(options2, input);
      this.options = options2;
      this.initializeScopes();
      this.plugins = pluginsMap;
      this.filename = options2.sourceFilename;
      this.startIndex = options2.startIndex;
      let optionFlags = 0;
      if (options2.allowAwaitOutsideFunction) {
        optionFlags |= 1;
      }
      if (options2.allowReturnOutsideFunction) {
        optionFlags |= 2;
      }
      if (options2.allowImportExportEverywhere) {
        optionFlags |= 8;
      }
      if (options2.allowSuperOutsideMethod) {
        optionFlags |= 16;
      }
      if (options2.allowUndeclaredExports) {
        optionFlags |= 64;
      }
      if (options2.allowNewTargetOutsideFunction) {
        optionFlags |= 4;
      }
      if (options2.allowYieldOutsideFunction) {
        optionFlags |= 32;
      }
      if (options2.ranges) {
        optionFlags |= 128;
      }
      if (options2.tokens) {
        optionFlags |= 256;
      }
      if (options2.createImportExpressions) {
        optionFlags |= 512;
      }
      if (options2.createParenthesizedExpressions) {
        optionFlags |= 1024;
      }
      if (options2.errorRecovery) {
        optionFlags |= 2048;
      }
      if (options2.attachComment) {
        optionFlags |= 4096;
      }
      if (options2.annexB) {
        optionFlags |= 8192;
      }
      this.optionFlags = optionFlags;
    }
    getScopeHandler() {
      return ScopeHandler;
    }
    parse() {
      this.enterInitialScopes();
      const file2 = this.startNode();
      const program = this.startNode();
      this.nextToken();
      file2.errors = null;
      this.parseTopLevel(file2, program);
      file2.errors = this.state.errors;
      file2.comments.length = this.state.commentsLen;
      return file2;
    }
  }
  function parse2(input, options2) {
    var _options;
    if (((_options = options2) == null ? void 0 : _options.sourceType) === "unambiguous") {
      options2 = Object.assign({}, options2);
      try {
        options2.sourceType = "module";
        const parser2 = getParser(options2, input);
        const ast = parser2.parse();
        if (parser2.sawUnambiguousESM) {
          return ast;
        }
        if (parser2.ambiguousScriptDifferentAst) {
          try {
            options2.sourceType = "script";
            return getParser(options2, input).parse();
          } catch (_unused) {
          }
        } else {
          ast.program.sourceType = "script";
        }
        return ast;
      } catch (moduleError) {
        try {
          options2.sourceType = "script";
          return getParser(options2, input).parse();
        } catch (_unused2) {
        }
        throw moduleError;
      }
    } else {
      return getParser(options2, input).parse();
    }
  }
  function parseExpression(input, options2) {
    const parser2 = getParser(options2, input);
    if (parser2.options.strictMode) {
      parser2.state.strict = true;
    }
    return parser2.getExpression();
  }
  function generateExportedTokenTypes(internalTokenTypes) {
    const tokenTypes2 = {};
    for (const typeName of Object.keys(internalTokenTypes)) {
      tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
    }
    return tokenTypes2;
  }
  const tokTypes = generateExportedTokenTypes(tt2);
  function getParser(options2, input) {
    let cls = Parser;
    const pluginsMap = /* @__PURE__ */ new Map();
    if (options2 != null && options2.plugins) {
      for (const plugin2 of options2.plugins) {
        let name, opts;
        if (typeof plugin2 === "string") {
          name = plugin2;
        } else {
          [name, opts] = plugin2;
        }
        if (!pluginsMap.has(name)) {
          pluginsMap.set(name, opts || {});
        }
      }
      validatePlugins(pluginsMap);
      cls = getParserClass(pluginsMap);
    }
    return new cls(options2, input, pluginsMap);
  }
  const parserClassCache = /* @__PURE__ */ new Map();
  function getParserClass(pluginsMap) {
    const pluginList = [];
    for (const name of mixinPluginNames) {
      if (pluginsMap.has(name)) {
        pluginList.push(name);
      }
    }
    const key = pluginList.join("|");
    let cls = parserClassCache.get(key);
    if (!cls) {
      cls = Parser;
      for (const plugin2 of pluginList) {
        cls = mixinPlugins[plugin2](cls);
      }
      parserClassCache.set(key, cls);
    }
    return cls;
  }
  lib$7.parse = parse2;
  lib$7.parseExpression = parseExpression;
  lib$7.tokTypes = tokTypes;
  return lib$7;
}
var lib$6 = {};
var picocolors_browser = { exports: {} };
var hasRequiredPicocolors_browser;
function requirePicocolors_browser() {
  if (hasRequiredPicocolors_browser) return picocolors_browser.exports;
  hasRequiredPicocolors_browser = 1;
  var x2 = String;
  var create = function() {
    return { isColorSupported: false, reset: x2, bold: x2, dim: x2, italic: x2, underline: x2, inverse: x2, hidden: x2, strikethrough: x2, black: x2, red: x2, green: x2, yellow: x2, blue: x2, magenta: x2, cyan: x2, white: x2, gray: x2, bgBlack: x2, bgRed: x2, bgGreen: x2, bgYellow: x2, bgBlue: x2, bgMagenta: x2, bgCyan: x2, bgWhite: x2, blackBright: x2, redBright: x2, greenBright: x2, yellowBright: x2, blueBright: x2, magentaBright: x2, cyanBright: x2, whiteBright: x2, bgBlackBright: x2, bgRedBright: x2, bgGreenBright: x2, bgYellowBright: x2, bgBlueBright: x2, bgMagentaBright: x2, bgCyanBright: x2, bgWhiteBright: x2 };
  };
  picocolors_browser.exports = create();
  picocolors_browser.exports.createColors = create;
  return picocolors_browser.exports;
}
var jsTokens = {};
var hasRequiredJsTokens;
function requireJsTokens() {
  if (hasRequiredJsTokens) return jsTokens;
  hasRequiredJsTokens = 1;
  Object.defineProperty(jsTokens, "__esModule", {
    value: true
  });
  jsTokens.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  jsTokens.matchToToken = function(match) {
    var token = { type: "invalid", value: match[0], closed: void 0 };
    if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);
    else if (match[5]) token.type = "comment";
    else if (match[6]) token.type = "comment", token.closed = !!match[7];
    else if (match[8]) token.type = "regex";
    else if (match[9]) token.type = "number";
    else if (match[10]) token.type = "name";
    else if (match[11]) token.type = "punctuator";
    else if (match[12]) token.type = "whitespace";
    return token;
  };
  return jsTokens;
}
var hasRequiredLib$9;
function requireLib$9() {
  if (hasRequiredLib$9) return lib$6;
  hasRequiredLib$9 = 1;
  Object.defineProperty(lib$6, "__esModule", { value: true });
  var picocolors = /* @__PURE__ */ requirePicocolors_browser();
  var jsTokens2 = requireJsTokens();
  var helperValidatorIdentifier = requireLib$d();
  function isColorSupported() {
    return typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? false : picocolors.isColorSupported;
  }
  const compose = (f, g) => (v) => f(g(v));
  function buildDefs(colors) {
    return {
      keyword: colors.cyan,
      capitalized: colors.yellow,
      jsxIdentifier: colors.yellow,
      punctuator: colors.yellow,
      number: colors.magenta,
      string: colors.green,
      regex: colors.magenta,
      comment: colors.gray,
      invalid: compose(compose(colors.white, colors.bgRed), colors.bold),
      gutter: colors.gray,
      marker: compose(colors.red, colors.bold),
      message: compose(colors.red, colors.bold),
      reset: colors.reset
    };
  }
  const defsOn = buildDefs(picocolors.createColors(true));
  const defsOff = buildDefs(picocolors.createColors(false));
  function getDefs(enabled) {
    return enabled ? defsOn : defsOff;
  }
  const sometimesKeywords = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
  const NEWLINE$1 = /\r\n|[\n\r\u2028\u2029]/;
  const BRACKET = /^[()[\]{}]$/;
  let tokenize;
  {
    const JSX_TAG = /^[a-z][\w-]*$/i;
    const getTokenType = function(token, offset, text) {
      if (token.type === "name") {
        if (helperValidatorIdentifier.isKeyword(token.value) || helperValidatorIdentifier.isStrictReservedWord(token.value, true) || sometimesKeywords.has(token.value)) {
          return "keyword";
        }
        if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) === "</")) {
          return "jsxIdentifier";
        }
        if (token.value[0] !== token.value[0].toLowerCase()) {
          return "capitalized";
        }
      }
      if (token.type === "punctuator" && BRACKET.test(token.value)) {
        return "bracket";
      }
      if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
        return "punctuator";
      }
      return token.type;
    };
    tokenize = function* (text) {
      let match;
      while (match = jsTokens2.default.exec(text)) {
        const token = jsTokens2.matchToToken(match);
        yield {
          type: getTokenType(token, match.index, text),
          value: token.value
        };
      }
    };
  }
  function highlight(text) {
    if (text === "") return "";
    const defs = getDefs(true);
    let highlighted = "";
    for (const {
      type,
      value: value2
    } of tokenize(text)) {
      if (type in defs) {
        highlighted += value2.split(NEWLINE$1).map((str) => defs[type](str)).join("\n");
      } else {
        highlighted += value2;
      }
    }
    return highlighted;
  }
  let deprecationWarningShown = false;
  const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  function getMarkerLines(loc, source, opts) {
    const startLoc = Object.assign({
      column: 0,
      line: -1
    }, loc.start);
    const endLoc = Object.assign({}, startLoc, loc.end);
    const {
      linesAbove = 2,
      linesBelow = 3
    } = opts || {};
    const startLine = startLoc.line;
    const startColumn = startLoc.column;
    const endLine = endLoc.line;
    const endColumn = endLoc.column;
    let start = Math.max(startLine - (linesAbove + 1), 0);
    let end = Math.min(source.length, endLine + linesBelow);
    if (startLine === -1) {
      start = 0;
    }
    if (endLine === -1) {
      end = source.length;
    }
    const lineDiff = endLine - startLine;
    const markerLines = {};
    if (lineDiff) {
      for (let i = 0; i <= lineDiff; i++) {
        const lineNumber = i + startLine;
        if (!startColumn) {
          markerLines[lineNumber] = true;
        } else if (i === 0) {
          const sourceLength = source[lineNumber - 1].length;
          markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
        } else if (i === lineDiff) {
          markerLines[lineNumber] = [0, endColumn];
        } else {
          const sourceLength = source[lineNumber - i].length;
          markerLines[lineNumber] = [0, sourceLength];
        }
      }
    } else {
      if (startColumn === endColumn) {
        if (startColumn) {
          markerLines[startLine] = [startColumn, 0];
        } else {
          markerLines[startLine] = true;
        }
      } else {
        markerLines[startLine] = [startColumn, endColumn - startColumn];
      }
    }
    return {
      start,
      end,
      markerLines
    };
  }
  function codeFrameColumns(rawLines, loc, opts = {}) {
    const shouldHighlight = opts.forceColor || isColorSupported() && opts.highlightCode;
    const defs = getDefs(shouldHighlight);
    const lines = rawLines.split(NEWLINE);
    const {
      start,
      end,
      markerLines
    } = getMarkerLines(loc, lines, opts);
    const hasColumns = loc.start && typeof loc.start.column === "number";
    const numberMaxWidth = String(end).length;
    const highlightedLines = shouldHighlight ? highlight(rawLines) : rawLines;
    let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index2) => {
      const number = start + 1 + index2;
      const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
      const gutter = ` ${paddedNumber} |`;
      const hasMarker = markerLines[number];
      const lastMarkerLine = !markerLines[number + 1];
      if (hasMarker) {
        let markerLine = "";
        if (Array.isArray(hasMarker)) {
          const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
          const numberOfMarkers = hasMarker[1] || 1;
          markerLine = ["\n ", defs.gutter(gutter.replace(/\d/g, " ")), " ", markerSpacing, defs.marker("^").repeat(numberOfMarkers)].join("");
          if (lastMarkerLine && opts.message) {
            markerLine += " " + defs.message(opts.message);
          }
        }
        return [defs.marker(">"), defs.gutter(gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
      } else {
        return ` ${defs.gutter(gutter)}${line.length > 0 ? ` ${line}` : ""}`;
      }
    }).join("\n");
    if (opts.message && !hasColumns) {
      frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
    }
    if (shouldHighlight) {
      return defs.reset(frame);
    } else {
      return frame;
    }
  }
  function index(rawLines, lineNumber, colNumber, opts = {}) {
    if (!deprecationWarningShown) {
      deprecationWarningShown = true;
      const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning) {
        process.emitWarning(message, "DeprecationWarning");
      } else {
        const deprecationError = new Error(message);
        deprecationError.name = "DeprecationWarning";
        console.warn(new Error(message));
      }
    }
    colNumber = Math.max(colNumber, 0);
    const location = {
      start: {
        column: colNumber,
        line: lineNumber
      }
    };
    return codeFrameColumns(rawLines, location, opts);
  }
  lib$6.codeFrameColumns = codeFrameColumns;
  lib$6.default = index;
  lib$6.highlight = highlight;
  return lib$6;
}
var hasRequiredParse$2;
function requireParse$2() {
  if (hasRequiredParse$2) return parse$3;
  hasRequiredParse$2 = 1;
  Object.defineProperty(parse$3, "__esModule", {
    value: true
  });
  parse$3.default = parseAndBuildMetadata;
  var _t2 = requireLib$b();
  var _parser = requireLib$a();
  var _codeFrame = requireLib$9();
  const {
    isCallExpression,
    isExpressionStatement,
    isFunction,
    isIdentifier,
    isJSXIdentifier,
    isNewExpression,
    isPlaceholder,
    isStatement,
    isStringLiteral,
    removePropertiesDeep: removePropertiesDeep2,
    traverse: traverse2
  } = _t2;
  const PATTERN = /^[_$A-Z0-9]+$/;
  function parseAndBuildMetadata(formatter, code, opts) {
    const {
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    } = opts;
    const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);
    removePropertiesDeep2(ast, {
      preserveComments
    });
    formatter.validate(ast);
    const state = {
      syntactic: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      legacy: {
        placeholders: [],
        placeholderNames: /* @__PURE__ */ new Set()
      },
      placeholderWhitelist,
      placeholderPattern,
      syntacticPlaceholders
    };
    traverse2(ast, placeholderVisitorHandler, state);
    return Object.assign({
      ast
    }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
  }
  function placeholderVisitorHandler(node2, ancestors, state) {
    var _state$placeholderWhi;
    let name;
    let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
    if (isPlaceholder(node2)) {
      if (state.syntacticPlaceholders === false) {
        throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
      }
      name = node2.name.name;
      hasSyntacticPlaceholders = true;
    } else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) {
      return;
    } else if (isIdentifier(node2) || isJSXIdentifier(node2)) {
      name = node2.name;
    } else if (isStringLiteral(node2)) {
      name = node2.value;
    } else {
      return;
    }
    if (hasSyntacticPlaceholders && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
    }
    if (!hasSyntacticPlaceholders && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {
      return;
    }
    ancestors = ancestors.slice();
    const {
      node: parent,
      key
    } = ancestors[ancestors.length - 1];
    let type;
    if (isStringLiteral(node2) || isPlaceholder(node2, {
      expectedNode: "StringLiteral"
    })) {
      type = "string";
    } else if (isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction(parent) && key === "params") {
      type = "param";
    } else if (isExpressionStatement(parent) && !isPlaceholder(node2)) {
      type = "statement";
      ancestors = ancestors.slice(0, -1);
    } else if (isStatement(node2) && isPlaceholder(node2)) {
      type = "statement";
    } else {
      type = "other";
    }
    const {
      placeholders: placeholders2,
      placeholderNames
    } = !hasSyntacticPlaceholders ? state.legacy : state.syntactic;
    placeholders2.push({
      name,
      type,
      resolve: (ast) => resolveAncestors(ast, ancestors),
      isDuplicate: placeholderNames.has(name)
    });
    placeholderNames.add(name);
  }
  function resolveAncestors(ast, ancestors) {
    let parent = ast;
    for (let i = 0; i < ancestors.length - 1; i++) {
      const {
        key: key2,
        index: index2
      } = ancestors[i];
      if (index2 === void 0) {
        parent = parent[key2];
      } else {
        parent = parent[key2][index2];
      }
    }
    const {
      key,
      index
    } = ancestors[ancestors.length - 1];
    return {
      parent,
      key,
      index
    };
  }
  function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
    const plugins2 = (parserOpts.plugins || []).slice();
    if (syntacticPlaceholders !== false) {
      plugins2.push("placeholders");
    }
    parserOpts = Object.assign({
      allowAwaitOutsideFunction: true,
      allowReturnOutsideFunction: true,
      allowNewTargetOutsideFunction: true,
      allowSuperOutsideMethod: true,
      allowYieldOutsideFunction: true,
      sourceType: "module"
    }, parserOpts, {
      plugins: plugins2
    });
    try {
      return (0, _parser.parse)(code, parserOpts);
    } catch (err) {
      const loc = err.loc;
      if (loc) {
        err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code, {
          start: loc
        });
        err.code = "BABEL_TEMPLATE_PARSE_ERROR";
      }
      throw err;
    }
  }
  return parse$3;
}
var populate = {};
var hasRequiredPopulate;
function requirePopulate() {
  if (hasRequiredPopulate) return populate;
  hasRequiredPopulate = 1;
  Object.defineProperty(populate, "__esModule", {
    value: true
  });
  populate.default = populatePlaceholders;
  var _t2 = requireLib$b();
  const {
    blockStatement,
    cloneNode: cloneNode2,
    emptyStatement,
    expressionStatement,
    identifier: identifier2,
    isStatement,
    isStringLiteral,
    stringLiteral,
    validate: validate2
  } = _t2;
  function populatePlaceholders(metadata, replacements) {
    const ast = cloneNode2(metadata.ast);
    if (replacements) {
      metadata.placeholders.forEach((placeholder) => {
        if (!hasOwnProperty.call(replacements, placeholder.name)) {
          const placeholderName = placeholder.name;
          throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
        }
      });
      Object.keys(replacements).forEach((key) => {
        if (!metadata.placeholderNames.has(key)) {
          throw new Error(`Unknown substitution "${key}" given`);
        }
      });
    }
    metadata.placeholders.slice().reverse().forEach((placeholder) => {
      try {
        var _ref;
        applyReplacement(placeholder, ast, (_ref = replacements && replacements[placeholder.name]) != null ? _ref : null);
      } catch (e) {
        e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`;
        throw e;
      }
    });
    return ast;
  }
  function applyReplacement(placeholder, ast, replacement2) {
    if (placeholder.isDuplicate) {
      if (Array.isArray(replacement2)) {
        replacement2 = replacement2.map((node2) => cloneNode2(node2));
      } else if (typeof replacement2 === "object") {
        replacement2 = cloneNode2(replacement2);
      }
    }
    const {
      parent,
      key,
      index
    } = placeholder.resolve(ast);
    if (placeholder.type === "string") {
      if (typeof replacement2 === "string") {
        replacement2 = stringLiteral(replacement2);
      }
      if (!replacement2 || !isStringLiteral(replacement2)) {
        throw new Error("Expected string substitution");
      }
    } else if (placeholder.type === "statement") {
      if (index === void 0) {
        if (!replacement2) {
          replacement2 = emptyStatement();
        } else if (Array.isArray(replacement2)) {
          replacement2 = blockStatement(replacement2);
        } else if (typeof replacement2 === "string") {
          replacement2 = expressionStatement(identifier2(replacement2));
        } else if (!isStatement(replacement2)) {
          replacement2 = expressionStatement(replacement2);
        }
      } else {
        if (replacement2 && !Array.isArray(replacement2)) {
          if (typeof replacement2 === "string") {
            replacement2 = identifier2(replacement2);
          }
          if (!isStatement(replacement2)) {
            replacement2 = expressionStatement(replacement2);
          }
        }
      }
    } else if (placeholder.type === "param") {
      if (typeof replacement2 === "string") {
        replacement2 = identifier2(replacement2);
      }
      if (index === void 0) throw new Error("Assertion failure.");
    } else {
      if (typeof replacement2 === "string") {
        replacement2 = identifier2(replacement2);
      }
      if (Array.isArray(replacement2)) {
        throw new Error("Cannot replace single expression with an array.");
      }
    }
    function set(parent2, key2, value2) {
      const node2 = parent2[key2];
      parent2[key2] = value2;
      if (node2.type === "Identifier" || node2.type === "Placeholder") {
        if (node2.typeAnnotation) {
          value2.typeAnnotation = node2.typeAnnotation;
        }
        if (node2.optional) {
          value2.optional = node2.optional;
        }
        if (node2.decorators) {
          value2.decorators = node2.decorators;
        }
      }
    }
    if (index === void 0) {
      validate2(parent, key, replacement2);
      set(parent, key, replacement2);
    } else {
      const items = parent[key].slice();
      if (placeholder.type === "statement" || placeholder.type === "param") {
        if (replacement2 == null) {
          items.splice(index, 1);
        } else if (Array.isArray(replacement2)) {
          items.splice(index, 1, ...replacement2);
        } else {
          set(items, index, replacement2);
        }
      } else {
        set(items, index, replacement2);
      }
      validate2(parent, key, items);
      parent[key] = items;
    }
  }
  return populate;
}
var hasRequiredString;
function requireString() {
  if (hasRequiredString) return string;
  hasRequiredString = 1;
  Object.defineProperty(string, "__esModule", {
    value: true
  });
  string.default = stringTemplate;
  var _options = requireOptions$2();
  var _parse = requireParse$2();
  var _populate = requirePopulate();
  function stringTemplate(formatter, code, opts) {
    code = formatter.code(code);
    let metadata;
    return (arg) => {
      const replacements = (0, _options.normalizeReplacements)(arg);
      if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);
      return formatter.unwrap((0, _populate.default)(metadata, replacements));
    };
  }
  return string;
}
var literal = {};
var hasRequiredLiteral;
function requireLiteral() {
  if (hasRequiredLiteral) return literal;
  hasRequiredLiteral = 1;
  Object.defineProperty(literal, "__esModule", {
    value: true
  });
  literal.default = literalTemplate;
  var _options = requireOptions$2();
  var _parse = requireParse$2();
  var _populate = requirePopulate();
  function literalTemplate(formatter, tpl, opts) {
    const {
      metadata,
      names
    } = buildLiteralData(formatter, tpl, opts);
    return (arg) => {
      const defaultReplacements = {};
      arg.forEach((replacement2, i) => {
        defaultReplacements[names[i]] = replacement2;
      });
      return (arg2) => {
        const replacements = (0, _options.normalizeReplacements)(arg2);
        if (replacements) {
          Object.keys(replacements).forEach((key) => {
            if (hasOwnProperty.call(defaultReplacements, key)) {
              throw new Error("Unexpected replacement overlap.");
            }
          });
        }
        return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
      };
    };
  }
  function buildLiteralData(formatter, tpl, opts) {
    let prefix = "BABEL_TPL$";
    const raw = tpl.join("");
    do {
      prefix = "$$" + prefix;
    } while (raw.includes(prefix));
    const {
      names,
      code
    } = buildTemplateCode(tpl, prefix);
    const metadata = (0, _parse.default)(formatter, formatter.code(code), {
      parser: opts.parser,
      placeholderWhitelist: new Set(names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
      placeholderPattern: opts.placeholderPattern,
      preserveComments: opts.preserveComments,
      syntacticPlaceholders: opts.syntacticPlaceholders
    });
    return {
      metadata,
      names
    };
  }
  function buildTemplateCode(tpl, prefix) {
    const names = [];
    let code = tpl[0];
    for (let i = 1; i < tpl.length; i++) {
      const value2 = `${prefix}${i - 1}`;
      names.push(value2);
      code += value2 + tpl[i];
    }
    return {
      names,
      code
    };
  }
  return literal;
}
var hasRequiredBuilder;
function requireBuilder() {
  if (hasRequiredBuilder) return builder;
  hasRequiredBuilder = 1;
  Object.defineProperty(builder, "__esModule", {
    value: true
  });
  builder.default = createTemplateBuilder;
  var _options = requireOptions$2();
  var _string = requireString();
  var _literal = requireLiteral();
  const NO_PLACEHOLDER = (0, _options.validate)({
    placeholderPattern: false
  });
  function createTemplateBuilder(formatter, defaultOpts) {
    const templateFnCache = /* @__PURE__ */ new WeakMap();
    const templateAstCache = /* @__PURE__ */ new WeakMap();
    const cachedOpts = defaultOpts || (0, _options.validate)(null);
    return Object.assign((tpl, ...args) => {
      if (typeof tpl === "string") {
        if (args.length > 1) throw new Error("Unexpected extra params.");
        return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
      } else if (Array.isArray(tpl)) {
        let builder2 = templateFnCache.get(tpl);
        if (!builder2) {
          builder2 = (0, _literal.default)(formatter, tpl, cachedOpts);
          templateFnCache.set(tpl, builder2);
        }
        return extendedTrace(builder2(args));
      } else if (typeof tpl === "object" && tpl) {
        if (args.length > 0) throw new Error("Unexpected extra params.");
        return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
      }
      throw new Error(`Unexpected template param ${typeof tpl}`);
    }, {
      ast: (tpl, ...args) => {
        if (typeof tpl === "string") {
          if (args.length > 1) throw new Error("Unexpected extra params.");
          return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
        } else if (Array.isArray(tpl)) {
          let builder2 = templateAstCache.get(tpl);
          if (!builder2) {
            builder2 = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));
            templateAstCache.set(tpl, builder2);
          }
          return builder2(args)();
        }
        throw new Error(`Unexpected template param ${typeof tpl}`);
      }
    });
  }
  function extendedTrace(fn2) {
    let rootStack = "";
    try {
      throw new Error();
    } catch (error2) {
      if (error2.stack) {
        rootStack = error2.stack.split("\n").slice(3).join("\n");
      }
    }
    return (arg) => {
      try {
        return fn2(arg);
      } catch (err) {
        err.stack += `
    =============
${rootStack}`;
        throw err;
      }
    };
  }
  return builder;
}
var hasRequiredLib$8;
function requireLib$8() {
  if (hasRequiredLib$8) return lib$8;
  hasRequiredLib$8 = 1;
  Object.defineProperty(lib$8, "__esModule", {
    value: true
  });
  lib$8.statements = lib$8.statement = lib$8.smart = lib$8.program = lib$8.expression = lib$8.default = void 0;
  var formatters2 = requireFormatters();
  var _builder = requireBuilder();
  const smart = lib$8.smart = (0, _builder.default)(formatters2.smart);
  const statement = lib$8.statement = (0, _builder.default)(formatters2.statement);
  const statements2 = lib$8.statements = (0, _builder.default)(formatters2.statements);
  const expression = lib$8.expression = (0, _builder.default)(formatters2.expression);
  const program = lib$8.program = (0, _builder.default)(formatters2.program);
  lib$8.default = Object.assign(smart.bind(void 0), {
    smart,
    statement,
    statements: statements2,
    expression,
    program,
    ast: smart.ast
  });
  return lib$8;
}
var hasRequiredHelpersGenerated;
function requireHelpersGenerated() {
  if (hasRequiredHelpersGenerated) return helpersGenerated;
  hasRequiredHelpersGenerated = 1;
  Object.defineProperty(helpersGenerated, "__esModule", {
    value: true
  });
  helpersGenerated.default = void 0;
  var _template = requireLib$8();
  function helper(minVersion, source, metadata) {
    return Object.freeze({
      minVersion,
      ast: () => _template.default.program.ast(source, {
        preserveComments: true
      }),
      metadata
    });
  }
  const helpers = helpersGenerated.default = {
    __proto__: null,
    OverloadYield: helper("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", {
      globals: [],
      locals: {
        _OverloadYield: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_OverloadYield",
      dependencies: {},
      internal: false
    }),
    applyDecoratedDescriptor: helper("7.0.0-beta.0", 'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}', {
      globals: ["Object"],
      locals: {
        _applyDecoratedDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_applyDecoratedDescriptor",
      dependencies: {},
      internal: false
    }),
    applyDecs2311: helper("7.24.0", 'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("Attempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not supported yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],"A decorator","be",!0),z=n?h[O-1]:void 0,A={},H={kind:["field","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError("attempted to call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,"class decorators","return")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}', {
      globals: ["Symbol", "Object", "TypeError", "Error"],
      locals: {
        applyDecs2311: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2311",
      dependencies: {
        checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"],
        toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee"]
      },
      internal: false
    }),
    arrayLikeToArray: helper("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}", {
      globals: ["Array"],
      locals: {
        _arrayLikeToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayLikeToArray",
      dependencies: {},
      internal: false
    }),
    arrayWithHoles: helper("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", {
      globals: ["Array"],
      locals: {
        _arrayWithHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithHoles",
      dependencies: {},
      internal: false
    }),
    arrayWithoutHoles: helper("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", {
      globals: ["Array"],
      locals: {
        _arrayWithoutHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithoutHoles",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"]
      },
      internal: false
    }),
    assertClassBrand: helper("7.24.0", 'function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}', {
      globals: ["TypeError"],
      locals: {
        _assertClassBrand: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertClassBrand",
      dependencies: {},
      internal: false
    }),
    assertThisInitialized: helper("7.0.0-beta.0", `function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}`, {
      globals: ["ReferenceError"],
      locals: {
        _assertThisInitialized: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertThisInitialized",
      dependencies: {},
      internal: false
    }),
    asyncGeneratorDelegate: helper("7.0.0-beta.0", 'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}', {
      globals: ["Promise", "Symbol"],
      locals: {
        _asyncGeneratorDelegate: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncGeneratorDelegate",
      dependencies: {
        OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"]
      },
      internal: false
    }),
    asyncIterator: helper("7.15.9", 'function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}', {
      globals: ["Symbol", "TypeError", "Object", "Promise"],
      locals: {
        _asyncIterator: ["body.0.id"],
        AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expressions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncIterator",
      dependencies: {},
      internal: false
    }),
    asyncToGenerator: helper("7.0.0-beta.0", 'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,"throw",n)}_next(void 0)}))}}', {
      globals: ["Promise"],
      locals: {
        asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"],
        _asyncToGenerator: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncToGenerator",
      dependencies: {},
      internal: false
    }),
    awaitAsyncGenerator: helper("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", {
      globals: [],
      locals: {
        _awaitAsyncGenerator: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_awaitAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.0.body.body.0.argument.callee"]
      },
      internal: false
    }),
    callSuper: helper("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", {
      globals: ["Reflect"],
      locals: {
        _callSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_callSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"],
        possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"]
      },
      internal: false
    }),
    checkInRHS: helper("7.20.5", `function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==e?typeof e:"null"));return e}`, {
      globals: ["Object", "TypeError"],
      locals: {
        _checkInRHS: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkInRHS",
      dependencies: {},
      internal: false
    }),
    checkPrivateRedeclaration: helper("7.14.1", 'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}', {
      globals: ["TypeError"],
      locals: {
        _checkPrivateRedeclaration: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkPrivateRedeclaration",
      dependencies: {},
      internal: false
    }),
    classCallCheck: helper("7.0.0-beta.0", 'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}', {
      globals: ["TypeError"],
      locals: {
        _classCallCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCallCheck",
      dependencies: {},
      internal: false
    }),
    classNameTDZError: helper("7.0.0-beta.0", `function _classNameTDZError(e){throw new ReferenceError('Class "'+e+'" cannot be referenced in computed property keys.')}`, {
      globals: ["ReferenceError"],
      locals: {
        _classNameTDZError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classNameTDZError",
      dependencies: {},
      internal: false
    }),
    classPrivateFieldGet2: helper("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", {
      globals: [],
      locals: {
        _classPrivateFieldGet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldGet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      },
      internal: false
    }),
    classPrivateFieldInitSpec: helper("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", {
      globals: [],
      locals: {
        _classPrivateFieldInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      },
      internal: false
    }),
    classPrivateFieldLooseBase: helper("7.0.0-beta.0", 'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}', {
      globals: ["TypeError"],
      locals: {
        _classPrivateFieldBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldBase",
      dependencies: {},
      internal: false
    }),
    classPrivateFieldLooseKey: helper("7.0.0-beta.0", 'var id=0;function _classPrivateFieldKey(e){return"__private_"+id+++"_"+e}', {
      globals: [],
      locals: {
        id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.right.argument"],
        _classPrivateFieldKey: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldKey",
      dependencies: {},
      internal: false
    }),
    classPrivateFieldSet2: helper("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", {
      globals: [],
      locals: {
        _classPrivateFieldSet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldSet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      },
      internal: false
    }),
    classPrivateGetter: helper("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", {
      globals: [],
      locals: {
        _classPrivateGetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateGetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      },
      internal: false
    }),
    classPrivateMethodInitSpec: helper("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", {
      globals: [],
      locals: {
        _classPrivateMethodInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      },
      internal: false
    }),
    classPrivateSetter: helper("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", {
      globals: [],
      locals: {
        _classPrivateSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateSetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      },
      internal: false
    }),
    classStaticPrivateMethodGet: helper("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", {
      globals: [],
      locals: {
        _classStaticPrivateMethodGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateMethodGet",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
      },
      internal: false
    }),
    construct: helper("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", {
      globals: ["Reflect"],
      locals: {
        _construct: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_construct",
      dependencies: {
        isNativeReflectConstruct: ["body.0.body.body.0.test.callee"],
        setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"]
      },
      internal: false
    }),
    createClass: helper("7.0.0-beta.0", 'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}', {
      globals: ["Object"],
      locals: {
        _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.1.right.callee"],
        _createClass: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createClass",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"]
      },
      internal: false
    }),
    createForOfIteratorHelper: helper("7.9.0", 'function _createForOfIteratorHelper(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}', {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelper",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"]
      },
      internal: false
    }),
    createForOfIteratorHelperLoose: helper("7.9.0", 'function _createForOfIteratorHelperLoose(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelperLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelperLoose",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"]
      },
      internal: false
    }),
    createSuper: helper("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}", {
      globals: ["Reflect"],
      locals: {
        _createSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"],
        possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"]
      },
      internal: false
    }),
    decorate: helper("7.1.5", `function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,r){["method","field"].forEach((function(t){r.forEach((function(r){r.kind===t&&"own"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;["method","field"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&("static"===o||"prototype"===o)){var n="static"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if("field"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError("Duplicated element ("+e[s].key+")")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"field"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element descriptor"),r}),this)},toElementDescriptor:function(e){var r=e.kind+"";if("method"!==r&&"field"!==r)throw new TypeError('An element descriptor\\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+r+'"');var t=toPropertyKey(e.key),i=e.placement+"";if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError('An element descriptor\\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+i+'"');var o=e.descriptor;this.disallowProperty(e,"elements","An element descriptor");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return"field"!==r?this.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(o,"get","The property descriptor of a field descriptor"),this.disallowProperty(o,"set","The property descriptor of a field descriptor"),this.disallowProperty(o,"value","The property descriptor of a field descriptor"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:"class",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+"";if("class"!==r)throw new TypeError('A class descriptor\\'s .kind property must be "class", but a decorator created a class descriptor with .kind "'+r+'"');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placement","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descriptor"),this.disallowProperty(e,"extras","A class descriptor");var t=_optionalCallableProperty(e,"finisher");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if("function"!=typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+" can't have a ."+r+" property.")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);"method"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kind?"field":"method",key:t,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:r};return e.decorators&&(i.decorators=e.decorators),"field"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return"method"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if("method"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError("Duplicated methods ("+o.key+") can't be decorated.");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError("Decorators can't be placed on different accessors with for the same property ("+o.key+").");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&"function"!=typeof t)throw new TypeError("Expected '"+r+"' to be a function");return t}`, {
      globals: ["Object", "TypeError", "Symbol", "ReferenceError"],
      locals: {
        _decorate: ["body.0.id"],
        _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"],
        _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"],
        _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"],
        _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"],
        _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"],
        _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.consequent.test.right.callee"],
        _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"]
      },
      exportBindingAssignments: [],
      exportName: "_decorate",
      dependencies: {
        toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"],
        toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.body.0.declarations.1.init.callee"]
      },
      internal: false
    }),
    defaults: helper("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", {
      globals: ["Object"],
      locals: {
        _defaults: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defaults",
      dependencies: {},
      internal: false
    }),
    defineAccessor: helper("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}", {
      globals: ["Object"],
      locals: {
        _defineAccessor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineAccessor",
      dependencies: {},
      internal: false
    }),
    defineProperty: helper("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}", {
      globals: ["Object"],
      locals: {
        _defineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineProperty",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"]
      },
      internal: false
    }),
    extends: helper("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", {
      globals: ["Object"],
      locals: {
        _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_extends",
      dependencies: {},
      internal: false
    }),
    get: helper("7.0.0-beta.0", 'function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}', {
      globals: ["Reflect", "Object"],
      locals: {
        _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_get",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"]
      },
      internal: false
    }),
    getPrototypeOf: helper("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", {
      globals: ["Object"],
      locals: {
        _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_getPrototypeOf",
      dependencies: {},
      internal: false
    }),
    identity: helper("7.17.0", "function _identity(t){return t}", {
      globals: [],
      locals: {
        _identity: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_identity",
      dependencies: {},
      internal: false
    }),
    importDeferProxy: helper("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}", {
      globals: ["Proxy", "Reflect"],
      locals: {
        _importDeferProxy: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_importDeferProxy",
      dependencies: {},
      internal: false
    }),
    inherits: helper("7.0.0-beta.0", 'function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&setPrototypeOf(t,e)}', {
      globals: ["TypeError", "Object"],
      locals: {
        _inherits: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inherits",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"]
      },
      internal: false
    }),
    inheritsLoose: helper("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}", {
      globals: ["Object"],
      locals: {
        _inheritsLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inheritsLoose",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"]
      },
      internal: false
    }),
    initializerDefineProperty: helper("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", {
      globals: ["Object"],
      locals: {
        _initializerDefineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerDefineProperty",
      dependencies: {},
      internal: false
    }),
    initializerWarningHelper: helper("7.0.0-beta.0", 'function _initializerWarningHelper(r,e){throw Error("Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.")}', {
      globals: ["Error"],
      locals: {
        _initializerWarningHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerWarningHelper",
      dependencies: {},
      internal: false
    }),
    instanceof: helper("7.0.0-beta.0", 'function _instanceof(n,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}', {
      globals: ["Symbol"],
      locals: {
        _instanceof: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_instanceof",
      dependencies: {},
      internal: false
    }),
    interopRequireDefault: helper("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", {
      globals: [],
      locals: {
        _interopRequireDefault: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireDefault",
      dependencies: {},
      internal: false
    }),
    interopRequireWildcard: helper("7.14.0", 'function _interopRequireWildcard(e,t){if("function"==typeof WeakMap)var r=new WeakMap,n=new WeakMap;return(_interopRequireWildcard=function(e,t){if(!t&&e&&e.__esModule)return e;var o,i,f={__proto__:null,default:e};if(null===e||"object"!=typeof e&&"function"!=typeof e)return f;if(o=t?n:r){if(o.has(e))return o.get(e);o.set(e,f)}for(const t in e)"default"!==t&&{}.hasOwnProperty.call(e,t)&&((i=(o=Object.defineProperty)&&Object.getOwnPropertyDescriptor(e,t))&&(i.get||i.set)?o(f,t,i):f[t]=e[t]);return f})(e,t)}', {
      globals: ["WeakMap", "Object"],
      locals: {
        _interopRequireWildcard: ["body.0.id", "body.0.body.body.1.argument.callee.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.callee"],
      exportName: "_interopRequireWildcard",
      dependencies: {},
      internal: false
    }),
    isNativeFunction: helper("7.0.0-beta.0", 'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(n){return"function"==typeof t}}', {
      globals: ["Function"],
      locals: {
        _isNativeFunction: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_isNativeFunction",
      dependencies: {},
      internal: false
    }),
    isNativeReflectConstruct: helper("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", {
      globals: ["Boolean", "Reflect"],
      locals: {
        _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.callee"],
      exportName: "_isNativeReflectConstruct",
      dependencies: {},
      internal: false
    }),
    iterableToArray: helper("7.0.0-beta.0", 'function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}', {
      globals: ["Symbol", "Array"],
      locals: {
        _iterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArray",
      dependencies: {},
      internal: false
    }),
    iterableToArrayLimit: helper("7.0.0-beta.0", 'function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}', {
      globals: ["Symbol", "Object"],
      locals: {
        _iterableToArrayLimit: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArrayLimit",
      dependencies: {},
      internal: false
    }),
    jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}', {
      globals: ["Symbol", "Array"],
      locals: {
        REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.value", "body.1.body.body.0.expression.right.left"],
        _createRawReactElement: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createRawReactElement",
      dependencies: {},
      internal: false
    }),
    maybeArrayLike: helper("7.9.0", 'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&"number"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}', {
      globals: ["Array"],
      locals: {
        _maybeArrayLike: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_maybeArrayLike",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"]
      },
      internal: false
    }),
    newArrowCheck: helper("7.0.0-beta.0", 'function _newArrowCheck(n,r){if(n!==r)throw new TypeError("Cannot instantiate an arrow function")}', {
      globals: ["TypeError"],
      locals: {
        _newArrowCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_newArrowCheck",
      dependencies: {},
      internal: false
    }),
    nonIterableRest: helper("7.0.0-beta.0", 'function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["TypeError"],
      locals: {
        _nonIterableRest: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableRest",
      dependencies: {},
      internal: false
    }),
    nonIterableSpread: helper("7.0.0-beta.0", 'function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', {
      globals: ["TypeError"],
      locals: {
        _nonIterableSpread: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableSpread",
      dependencies: {},
      internal: false
    }),
    nullishReceiverError: helper("7.22.6", 'function _nullishReceiverError(r){throw new TypeError("Cannot set property of null or undefined.")}', {
      globals: ["TypeError"],
      locals: {
        _nullishReceiverError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nullishReceiverError",
      dependencies: {},
      internal: false
    }),
    objectDestructuringEmpty: helper("7.0.0-beta.0", 'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError("Cannot destructure "+t)}', {
      globals: ["TypeError"],
      locals: {
        _objectDestructuringEmpty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectDestructuringEmpty",
      dependencies: {},
      internal: false
    }),
    objectSpread2: helper("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", {
      globals: ["Object"],
      locals: {
        ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee"],
        _objectSpread2: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectSpread2",
      dependencies: {
        defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"]
      },
      internal: false
    }),
    objectWithoutProperties: helper("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],-1===t.indexOf(o)&&{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}", {
      globals: ["Object"],
      locals: {
        _objectWithoutProperties: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutProperties",
      dependencies: {
        objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"]
      },
      internal: false
    }),
    objectWithoutPropertiesLoose: helper("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(-1!==e.indexOf(n))continue;t[n]=r[n]}return t}", {
      globals: [],
      locals: {
        _objectWithoutPropertiesLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutPropertiesLoose",
      dependencies: {},
      internal: false
    }),
    possibleConstructorReturn: helper("7.0.0-beta.0", 'function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return assertThisInitialized(t)}', {
      globals: ["TypeError"],
      locals: {
        _possibleConstructorReturn: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_possibleConstructorReturn",
      dependencies: {
        assertThisInitialized: ["body.0.body.body.2.argument.callee"]
      },
      internal: false
    }),
    readOnlyError: helper("7.0.0-beta.0", `function _readOnlyError(r){throw new TypeError('"'+r+'" is read-only')}`, {
      globals: ["TypeError"],
      locals: {
        _readOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_readOnlyError",
      dependencies: {},
      internal: false
    }),
    regenerator: helper("7.27.0", `function _regenerator(){
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",o=r.toStringTag||"@@toStringTag";function i(r,n,o,i){var c=n&&n.prototype instanceof Generator?n:Generator,u=Object.create(c.prototype);return define(u,"_invoke",function(r,n,o){var i,c,u,f=0,p=o||[],y=!1,G={p:0,n:0,v:e,a:d,f:d.bind(e,4),d:function(t,r){return i=t,c=0,u=e,G.n=r,a}};function d(r,n){for(c=r,u=n,t=0;!y&&f&&!o&&t<p.length;t++){var o,i=p[t],d=G.p,l=i[2];r>3?(o=l===n)&&(u=i[(c=i[4])?5:(c=3,3)],i[4]=i[5]=e):i[0]<=d&&((o=r<2&&d<i[1])?(c=0,G.v=n,G.n=i[1]):d<l&&(o=r<3||i[0]>n||n>l)&&(i[4]=r,i[5]=n,G.n=l,c=0))}if(o||r>1)return a;throw y=!0,n}return function(o,p,l){if(f>1)throw TypeError("Generator is already running");for(y&&1===p&&d(p,l),c=p,u=l;(t=c<2?e:u)||!y;){i||(c?c<3?(c>1&&(G.n=-1),d(c,u)):G.n=u:G.v=u);try{if(f=2,i){if(c||(o="next"),t=i[o]){if(!(t=t.call(i,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,c<2&&(c=0)}else 1===c&&(t=i.return)&&t.call(i),c<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),c=1);i=e}else if((t=(y=G.n<0)?u:r.call(n,G))!==a)break}catch(t){i=e,c=1,u=t}finally{f=1}}return{value:t,done:y}}}(r,o,i),!0),u}var a={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}t=Object.getPrototypeOf;var c=[][n]?t(t([][n]())):(define(t={},n,(function(){return this})),t),u=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(c);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,GeneratorFunctionPrototype):(e.__proto__=GeneratorFunctionPrototype,define(e,o,"GeneratorFunction")),e.prototype=Object.create(u),e}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(u,"constructor",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName="GeneratorFunction",define(GeneratorFunctionPrototype,o,"GeneratorFunction"),define(u),define(u,o,"Generator"),define(u,n,(function(){return this})),define(u,"toString",(function(){return"[object Generator]"})),(_regenerator=function(){return{w:i,m:f}})()}`, {
      globals: ["Symbol", "Object", "TypeError"],
      locals: {
        _regenerator: ["body.0.id", "body.0.body.body.9.argument.expressions.9.callee.left"]
      },
      exportBindingAssignments: ["body.0.body.body.9.argument.expressions.9.callee"],
      exportName: "_regenerator",
      dependencies: {
        regeneratorDefine: ["body.0.body.body.1.body.body.1.argument.expressions.0.callee", "body.0.body.body.7.declarations.0.init.alternate.expressions.0.callee", "body.0.body.body.8.body.body.0.argument.expressions.0.alternate.expressions.1.callee", "body.0.body.body.9.argument.expressions.1.callee", "body.0.body.body.9.argument.expressions.2.callee", "body.0.body.body.9.argument.expressions.4.callee", "body.0.body.body.9.argument.expressions.5.callee", "body.0.body.body.9.argument.expressions.6.callee", "body.0.body.body.9.argument.expressions.7.callee", "body.0.body.body.9.argument.expressions.8.callee"]
      },
      internal: false
    }),
    regeneratorAsync: helper("7.27.0", "function _regeneratorAsync(n,e,r,t,o){var a=asyncGen(n,e,r,t,o);return a.next().then((function(n){return n.done?n.value:a.next()}))}", {
      globals: [],
      locals: {
        _regeneratorAsync: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_regeneratorAsync",
      dependencies: {
        regeneratorAsyncGen: ["body.0.body.body.0.declarations.0.init.callee"]
      },
      internal: false
    }),
    regeneratorAsyncGen: helper("7.27.0", "function _regeneratorAsyncGen(r,e,t,o,n){return new regeneratorAsyncIterator(regenerator().w(r,e,t,o),n||Promise)}", {
      globals: ["Promise"],
      locals: {
        _regeneratorAsyncGen: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_regeneratorAsyncGen",
      dependencies: {
        regenerator: ["body.0.body.body.0.argument.arguments.0.callee.object.callee"],
        regeneratorAsyncIterator: ["body.0.body.body.0.argument.callee"]
      },
      internal: false
    }),
    regeneratorAsyncIterator: helper("7.27.0", 'function AsyncIterator(t,e){function n(r,o,i,f){try{var c=t[r](o),u=c.value;return u instanceof OverloadYield?e.resolve(u.v).then((function(t){n("next",t,i,f)}),(function(t){n("throw",t,i,f)})):e.resolve(u).then((function(t){c.value=t,i(c)}),(function(t){return n("throw",t,i,f)}))}catch(t){f(t)}}var r;this.next||(define(AsyncIterator.prototype),define(AsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),define(this,"_invoke",(function(t,o,i){function f(){return new e((function(e,r){n(t,i,e,r)}))}return r=r?r.then(f,f):f()}),!0)}', {
      globals: ["Symbol"],
      locals: {
        AsyncIterator: ["body.0.id", "body.0.body.body.2.expression.expressions.0.right.expressions.0.arguments.0.object", "body.0.body.body.2.expression.expressions.0.right.expressions.1.arguments.0.object"]
      },
      exportBindingAssignments: [],
      exportName: "AsyncIterator",
      dependencies: {
        OverloadYield: ["body.0.body.body.0.body.body.0.block.body.1.argument.test.right"],
        regeneratorDefine: ["body.0.body.body.2.expression.expressions.0.right.expressions.0.callee", "body.0.body.body.2.expression.expressions.0.right.expressions.1.callee", "body.0.body.body.2.expression.expressions.1.callee"]
      },
      internal: true
    }),
    regeneratorDefine: helper("7.27.0", 'function regeneratorDefine(e,r,n,t){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}regeneratorDefine=function(e,r,n,t){if(r)i?i(e,r,{value:n,enumerable:!t,configurable:!t,writable:!t}):e[r]=n;else{function o(r,n){regeneratorDefine(e,r,(function(e){return this._invoke(r,n,e)}))}o("next",0),o("throw",1),o("return",2)}},regeneratorDefine(e,r,n,t)}', {
      globals: ["Object"],
      locals: {
        regeneratorDefine: ["body.0.id", "body.0.body.body.2.expression.expressions.0.right.body.body.0.alternate.body.0.body.body.0.expression.callee", "body.0.body.body.2.expression.expressions.1.callee", "body.0.body.body.2.expression.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.2.expression.expressions.0"],
      exportName: "regeneratorDefine",
      dependencies: {},
      internal: true
    }),
    regeneratorKeys: helper("7.27.0", "function _regeneratorKeys(e){var n=Object(e),r=[];for(var t in n)r.unshift(t);return function e(){for(;r.length;)if((t=r.pop())in n)return e.value=t,e.done=!1,e;return e.done=!0,e}}", {
      globals: ["Object"],
      locals: {
        _regeneratorKeys: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_regeneratorKeys",
      dependencies: {},
      internal: false
    }),
    regeneratorValues: helper("7.18.0", 'function _regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(typeof e+" is not iterable")}', {
      globals: ["Symbol", "isNaN", "TypeError"],
      locals: {
        _regeneratorValues: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_regeneratorValues",
      dependencies: {},
      internal: false
    }),
    set: helper("7.0.0-beta.0", 'function set(e,r,t,o){return set="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError("failed to set property");return t}', {
      globals: ["Reflect", "Object", "TypeError"],
      locals: {
        set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.body.0.argument.expressions.0.left"],
        _set: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_set",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"],
        defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"]
      },
      internal: false
    }),
    setFunctionName: helper("7.23.6", 'function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.defineProperty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}', {
      globals: ["Object"],
      locals: {
        setFunctionName: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "setFunctionName",
      dependencies: {},
      internal: false
    }),
    setPrototypeOf: helper("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", {
      globals: ["Object"],
      locals: {
        _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_setPrototypeOf",
      dependencies: {},
      internal: false
    }),
    skipFirstGeneratorNext: helper("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}", {
      globals: [],
      locals: {
        _skipFirstGeneratorNext: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_skipFirstGeneratorNext",
      dependencies: {},
      internal: false
    }),
    slicedToArray: helper("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}", {
      globals: [],
      locals: {
        _slicedToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_slicedToArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      },
      internal: false
    }),
    superPropBase: helper("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}", {
      globals: [],
      locals: {
        _superPropBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropBase",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"]
      },
      internal: false
    }),
    superPropGet: helper("7.25.0", 'function _superPropGet(t,o,e,r){var p=get(getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&"function"==typeof p?function(t){return p.apply(e,t)}:p}', {
      globals: [],
      locals: {
        _superPropGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropGet",
      dependencies: {
        get: ["body.0.body.body.0.declarations.0.init.callee"],
        getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"]
      },
      internal: false
    }),
    superPropSet: helper("7.25.0", "function _superPropSet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", {
      globals: [],
      locals: {
        _superPropSet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropSet",
      dependencies: {
        set: ["body.0.body.body.0.argument.callee"],
        getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"]
      },
      internal: false
    }),
    taggedTemplateLiteral: helper("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}", {
      globals: ["Object"],
      locals: {
        _taggedTemplateLiteral: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteral",
      dependencies: {},
      internal: false
    }),
    taggedTemplateLiteralLoose: helper("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", {
      globals: [],
      locals: {
        _taggedTemplateLiteralLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteralLoose",
      dependencies: {},
      internal: false
    }),
    tdz: helper("7.5.5", 'function _tdzError(e){throw new ReferenceError(e+" is not defined - temporal dead zone")}', {
      globals: ["ReferenceError"],
      locals: {
        _tdzError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_tdzError",
      dependencies: {},
      internal: false
    }),
    temporalRef: helper("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", {
      globals: [],
      locals: {
        _temporalRef: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalRef",
      dependencies: {
        temporalUndefined: ["body.0.body.body.0.argument.test.right"],
        tdz: ["body.0.body.body.0.argument.consequent.callee"]
      },
      internal: false
    }),
    temporalUndefined: helper("7.0.0-beta.0", "function _temporalUndefined(){}", {
      globals: [],
      locals: {
        _temporalUndefined: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalUndefined",
      dependencies: {},
      internal: false
    }),
    toArray: helper("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}", {
      globals: [],
      locals: {
        _toArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      },
      internal: false
    }),
    toConsumableArray: helper("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}", {
      globals: [],
      locals: {
        _toConsumableArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toConsumableArray",
      dependencies: {
        arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableSpread: ["body.0.body.body.0.argument.right.callee"]
      },
      internal: false
    }),
    toPrimitive: helper("7.1.5", 'function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}', {
      globals: ["Symbol", "TypeError", "String", "Number"],
      locals: {
        toPrimitive: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPrimitive",
      dependencies: {},
      internal: false
    }),
    toPropertyKey: helper("7.1.5", 'function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}', {
      globals: [],
      locals: {
        toPropertyKey: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPropertyKey",
      dependencies: {
        toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"]
      },
      internal: false
    }),
    toSetter: helper("7.24.0", 'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,t.apply(n,e)}})}', {
      globals: ["Object"],
      locals: {
        _toSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toSetter",
      dependencies: {},
      internal: false
    }),
    tsRewriteRelativeImportExtensions: helper("7.27.0", 'function tsRewriteRelativeImportExtensions(t,e){return"string"==typeof t&&/^\\.\\.?\\//.test(t)?t.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+)?)\\.([cm]?)ts$/i,(function(t,s,r,n,o){return s?e?".jsx":".js":!r||n&&o?r+n+"."+o.toLowerCase()+"js":t})):t}', {
      globals: [],
      locals: {
        tsRewriteRelativeImportExtensions: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "tsRewriteRelativeImportExtensions",
      dependencies: {},
      internal: false
    }),
    typeof: helper("7.0.0-beta.0", 'function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}', {
      globals: ["Symbol"],
      locals: {
        _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_typeof",
      dependencies: {},
      internal: false
    }),
    unsupportedIterableToArray: helper("7.9.0", 'function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}', {
      globals: ["Array"],
      locals: {
        _unsupportedIterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_unsupportedIterableToArray",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee"]
      },
      internal: false
    }),
    usingCtx: helper("7.23.9", 'function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return n.name="SuppressedError",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for("Symbol.dispose")],r))var t=o;if("function"!=typeof o)throw new TypeError("Object is not disposable.");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)return s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}catch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n,next()}return next()}}}', {
      globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"],
      locals: {
        _usingCtx: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_usingCtx",
      dependencies: {},
      internal: false
    }),
    wrapAsyncGenerator: helper("7.0.0-beta.0", 'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"normal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};', {
      globals: ["Promise", "Symbol"],
      locals: {
        _wrapAsyncGenerator: ["body.0.id"],
        AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.object.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.expressions.3.left.object.object"]
      },
      exportBindingAssignments: [],
      exportName: "_wrapAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"]
      },
      internal: false
    }),
    wrapNativeSuper: helper("7.0.0-beta.0", 'function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}', {
      globals: ["Map", "TypeError", "Object"],
      locals: {
        _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"],
      exportName: "_wrapNativeSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"],
        setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"],
        isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"],
        construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"]
      },
      internal: false
    }),
    wrapRegExp: helper("7.19.0", 'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)(>|$)/g,(function(e,r,t){if(""===t)return e;var p=o[r];return Array.isArray(p)?"$"+p.join("$"):"number"==typeof p?"$"+p:""})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}', {
      globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"],
      locals: {
        _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_wrapRegExp",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"],
        inherits: ["body.0.body.body.4.argument.expressions.0.callee"]
      },
      internal: false
    }),
    writeOnlyError: helper("7.12.13", `function _writeOnlyError(r){throw new TypeError('"'+r+'" is write-only')}`, {
      globals: ["TypeError"],
      locals: {
        _writeOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_writeOnlyError",
      dependencies: {},
      internal: false
    })
  };
  {
    Object.assign(helpers, {
      AwaitValue: helper("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", {
        globals: [],
        locals: {
          _AwaitValue: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_AwaitValue",
        dependencies: {},
        internal: false
      }),
      applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"getMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMetadataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&old_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}', {
        globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"],
        locals: {
          old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"],
          old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expressions.3.callee"],
          old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"],
          old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee"],
          old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee"],
          old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"],
          old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee"],
          old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee"],
          old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"],
          old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"],
          old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"],
          old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressions.1.callee"],
          old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"],
          applyDecs: ["body.13.id"]
        },
        exportBindingAssignments: [],
        exportName: "applyDecs",
        dependencies: {
          setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
          toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
        },
        internal: false
      }),
      applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}', {
        globals: ["Error", "TypeError", "Object", "Map", "Array"],
        locals: {
          applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"],
          applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee.left"],
          applyDecs2203: ["body.2.id"]
        },
        exportBindingAssignments: [],
        exportName: "applyDecs2203",
        dependencies: {},
        internal: false
      }),
      applyDecs2203R: helper("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}', {
        globals: ["Error", "TypeError", "Object", "Map", "Array"],
        locals: {
          applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
          applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
        },
        exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
        exportName: "applyDecs2203R",
        dependencies: {
          setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
          toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
        },
        internal: false
      }),
      applyDecs2301: helper("7.21.0", 'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="field"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}', {
        globals: ["Error", "TypeError", "Object", "Map", "Array"],
        locals: {
          applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
          applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
        },
        exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
        exportName: "applyDecs2301",
        dependencies: {
          checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee"],
          setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
          toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
        },
        internal: false
      }),
      applyDecs2305: helper("7.21.0", 'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeError(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!==P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method")+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}', {
        globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"],
        locals: {
          applyDecs2305: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "applyDecs2305",
        dependencies: {
          checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"],
          setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"],
          toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee"]
        },
        internal: false
      }),
      classApplyDescriptorDestructureSet: helper("7.13.10", 'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return"__destrObj"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError("attempted to set read only private field");return t}', {
        globals: ["TypeError"],
        locals: {
          _classApplyDescriptorDestructureSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classApplyDescriptorDestructureSet",
        dependencies: {},
        internal: false
      }),
      classApplyDescriptorGet: helper("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", {
        globals: [],
        locals: {
          _classApplyDescriptorGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classApplyDescriptorGet",
        dependencies: {},
        internal: false
      }),
      classApplyDescriptorSet: helper("7.13.10", 'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=l}}', {
        globals: ["TypeError"],
        locals: {
          _classApplyDescriptorSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classApplyDescriptorSet",
        dependencies: {},
        internal: false
      }),
      classCheckPrivateStaticAccess: helper("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", {
        globals: [],
        locals: {
          _classCheckPrivateStaticAccess: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classCheckPrivateStaticAccess",
        dependencies: {
          assertClassBrand: ["body.0.body.body.0.argument.callee"]
        },
        internal: false
      }),
      classCheckPrivateStaticFieldDescriptor: helper("7.13.10", 'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError("attempted to "+e+" private static field before its declaration")}', {
        globals: ["TypeError"],
        locals: {
          _classCheckPrivateStaticFieldDescriptor: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classCheckPrivateStaticFieldDescriptor",
        dependencies: {},
        internal: false
      }),
      classExtractFieldDescriptor: helper("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", {
        globals: [],
        locals: {
          _classExtractFieldDescriptor: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classExtractFieldDescriptor",
        dependencies: {
          classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"]
        },
        internal: false
      }),
      classPrivateFieldDestructureSet: helper("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}", {
        globals: [],
        locals: {
          _classPrivateFieldDestructureSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateFieldDestructureSet",
        dependencies: {
          classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"],
          classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
        },
        internal: false
      }),
      classPrivateFieldGet: helper("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}", {
        globals: [],
        locals: {
          _classPrivateFieldGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateFieldGet",
        dependencies: {
          classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"],
          classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
        },
        internal: false
      }),
      classPrivateFieldSet: helper("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}", {
        globals: [],
        locals: {
          _classPrivateFieldSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateFieldSet",
        dependencies: {
          classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"],
          classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
        },
        internal: false
      }),
      classPrivateMethodGet: helper("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", {
        globals: [],
        locals: {
          _classPrivateMethodGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateMethodGet",
        dependencies: {
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
        },
        internal: false
      }),
      classPrivateMethodSet: helper("7.1.6", 'function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method")}', {
        globals: ["TypeError"],
        locals: {
          _classPrivateMethodSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateMethodSet",
        dependencies: {},
        internal: false
      }),
      classStaticPrivateFieldDestructureSet: helper("7.13.10", 'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,"set"),classApplyDescriptorDestructureSet(t,s)}', {
        globals: [],
        locals: {
          _classStaticPrivateFieldDestructureSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateFieldDestructureSet",
        dependencies: {
          classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"],
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
          classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
        },
        internal: false
      }),
      classStaticPrivateFieldSpecGet: helper("7.0.2", 'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,"get"),classApplyDescriptorGet(t,r)}', {
        globals: [],
        locals: {
          _classStaticPrivateFieldSpecGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateFieldSpecGet",
        dependencies: {
          classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"],
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
          classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
        },
        internal: false
      }),
      classStaticPrivateFieldSpecSet: helper("7.0.2", 'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,"set"),classApplyDescriptorSet(s,r,e),e}', {
        globals: [],
        locals: {
          _classStaticPrivateFieldSpecSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateFieldSpecSet",
        dependencies: {
          classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"],
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
          classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
        },
        internal: false
      }),
      classStaticPrivateMethodSet: helper("7.3.2", 'function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static private field")}', {
        globals: ["TypeError"],
        locals: {
          _classStaticPrivateMethodSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateMethodSet",
        dependencies: {},
        internal: false
      }),
      defineEnumerableProperties: helper("7.0.0-beta.0", 'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}', {
        globals: ["Object"],
        locals: {
          _defineEnumerableProperties: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_defineEnumerableProperties",
        dependencies: {},
        internal: false
      }),
      dispose: helper("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}', {
        globals: ["SuppressedError", "Error", "Object", "Promise"],
        locals: {
          dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expressions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"],
          _dispose: ["body.1.id"]
        },
        exportBindingAssignments: [],
        exportName: "_dispose",
        dependencies: {},
        internal: false
      }),
      objectSpread: helper("7.0.0-beta.0", 'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}', {
        globals: ["Object"],
        locals: {
          _objectSpread: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_objectSpread",
        dependencies: {
          defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"]
        },
        internal: false
      }),
      regeneratorRuntime: helper("7.18.0", 'function _regeneratorRuntime(){"use strict";var r=regenerator(),e=r.m(_regeneratorRuntime),t=(Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__).constructor;function n(r){var e="function"==typeof r&&r.constructor;return!!e&&(e===t||"GeneratorFunction"===(e.displayName||e.name))}var o={throw:1,return:2,break:3,continue:3};function a(r){var e,t;return function(n){e||(e={stop:function(){return t(n.a,2)},catch:function(){return n.v},abrupt:function(r,e){return t(n.a,o[r],e)},delegateYield:function(r,o,a){return e.resultName=o,t(n.d,values(r),a)},finish:function(r){return t(n.f,r)}},t=function(r,t,o){n.p=e.prev,n.n=e.next;try{return r(t,o)}finally{e.next=n.n}}),e.resultName&&(e[e.resultName]=n.v,e.resultName=void 0),e.sent=n.v,e.next=n.n;try{return r.call(this,e)}finally{n.p=e.prev,n.n=e.next}}}return(_regeneratorRuntime=function(){return{wrap:function(e,t,n,o){return r.w(a(e),t,n,o&&o.reverse())},isGeneratorFunction:n,mark:r.m,awrap:function(r,e){return new OverloadYield(r,e)},AsyncIterator:AsyncIterator,async:function(r,e,t,o,u){return(n(e)?asyncGen:async)(a(r),e,t,o,u)},keys:keys,values:values}})()}', {
        globals: ["Object"],
        locals: {
          _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.declarations.1.init.arguments.0", "body.0.body.body.4.argument.callee.left"]
        },
        exportBindingAssignments: ["body.0.body.body.4.argument.callee"],
        exportName: "_regeneratorRuntime",
        dependencies: {
          OverloadYield: ["body.0.body.body.4.argument.callee.right.body.body.0.argument.properties.3.value.body.body.0.argument.callee"],
          regenerator: ["body.0.body.body.0.declarations.0.init.callee"],
          regeneratorAsync: ["body.0.body.body.4.argument.callee.right.body.body.0.argument.properties.5.value.body.body.0.argument.callee.alternate"],
          regeneratorAsyncGen: ["body.0.body.body.4.argument.callee.right.body.body.0.argument.properties.5.value.body.body.0.argument.callee.consequent"],
          regeneratorAsyncIterator: ["body.0.body.body.4.argument.callee.right.body.body.0.argument.properties.4.value"],
          regeneratorKeys: ["body.0.body.body.4.argument.callee.right.body.body.0.argument.properties.6.value"],
          regeneratorValues: ["body.0.body.body.3.body.body.1.argument.body.body.0.expression.expressions.0.right.expressions.0.right.properties.3.value.body.body.0.argument.expressions.1.arguments.1.callee", "body.0.body.body.4.argument.callee.right.body.body.0.argument.properties.7.value"]
        },
        internal: false
      }),
      using: helper("7.22.0", 'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.push({v:n,d:r,a:e}),n}', {
        globals: ["Object", "TypeError", "Symbol"],
        locals: {
          _using: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_using",
        dependencies: {},
        internal: false
      })
    });
  }
  return helpersGenerated;
}
var hasRequiredLib$7;
function requireLib$7() {
  if (hasRequiredLib$7) return lib$c;
  hasRequiredLib$7 = 1;
  Object.defineProperty(lib$c, "__esModule", {
    value: true
  });
  lib$c.default = void 0;
  lib$c.get = get;
  lib$c.getDependencies = getDependencies;
  lib$c.isInternal = isInternal;
  lib$c.list = void 0;
  lib$c.minVersion = minVersion;
  var _t2 = requireLib$b();
  var _helpersGenerated = requireHelpersGenerated();
  const {
    cloneNode: cloneNode2,
    identifier: identifier2
  } = _t2;
  function deep(obj, path2, value2) {
    try {
      const parts = path2.split(".");
      let last = parts.shift();
      while (parts.length > 0) {
        obj = obj[last];
        last = parts.shift();
      }
      if (arguments.length > 2) {
        obj[last] = value2;
      } else {
        return obj[last];
      }
    } catch (e) {
      e.message += ` (when accessing ${path2})`;
      throw e;
    }
  }
  function permuteHelperAST(ast, metadata, bindingName, localBindings, getDependency, adjustAst) {
    const {
      locals,
      dependencies,
      exportBindingAssignments,
      exportName
    } = metadata;
    const bindings = new Set(localBindings || []);
    if (bindingName) bindings.add(bindingName);
    for (const [name, paths] of (Object.entries || ((o) => Object.keys(o).map((k2) => [k2, o[k2]])))(locals)) {
      let newName = name;
      if (bindingName && name === exportName) {
        newName = bindingName;
      } else {
        while (bindings.has(newName)) newName = "_" + newName;
      }
      if (newName !== name) {
        for (const path2 of paths) {
          deep(ast, path2, identifier2(newName));
        }
      }
    }
    for (const [name, paths] of (Object.entries || ((o) => Object.keys(o).map((k2) => [k2, o[k2]])))(dependencies)) {
      const ref = typeof getDependency === "function" && getDependency(name) || identifier2(name);
      for (const path2 of paths) {
        deep(ast, path2, cloneNode2(ref));
      }
    }
    adjustAst == null || adjustAst(ast, exportName, (map) => {
      exportBindingAssignments.forEach((p) => deep(ast, p, map(deep(ast, p))));
    });
  }
  const helperData = /* @__PURE__ */ Object.create(null);
  function loadHelper(name) {
    if (!helperData[name]) {
      const helper = _helpersGenerated.default[name];
      if (!helper) {
        throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {
          code: "BABEL_HELPER_UNKNOWN",
          helper: name
        });
      }
      helperData[name] = {
        minVersion: helper.minVersion,
        build(getDependency, bindingName, localBindings, adjustAst) {
          const ast = helper.ast();
          permuteHelperAST(ast, helper.metadata, bindingName, localBindings, getDependency, adjustAst);
          return {
            nodes: ast.body,
            globals: helper.metadata.globals
          };
        },
        getDependencies() {
          return Object.keys(helper.metadata.dependencies);
        }
      };
    }
    return helperData[name];
  }
  function get(name, getDependency, bindingName, localBindings, adjustAst) {
    {
      if (typeof bindingName === "object") {
        const id = bindingName;
        if ((id == null ? void 0 : id.type) === "Identifier") {
          bindingName = id.name;
        } else {
          bindingName = void 0;
        }
      }
    }
    return loadHelper(name).build(getDependency, bindingName, localBindings, adjustAst);
  }
  function minVersion(name) {
    return loadHelper(name).minVersion;
  }
  function getDependencies(name) {
    return loadHelper(name).getDependencies();
  }
  function isInternal(name) {
    var _helpers$name;
    return (_helpers$name = _helpersGenerated.default[name]) == null ? void 0 : _helpers$name.metadata.internal;
  }
  {
    lib$c.ensure = (name) => {
      loadHelper(name);
    };
  }
  lib$c.list = Object.keys(_helpersGenerated.default).map((name) => name.replace(/^_/, ""));
  lib$c.default = get;
  return lib$c;
}
var lib$5 = {};
var context$1 = {};
var traverseNode = {};
var context = {};
var path = {};
var virtualTypes = {};
var hasRequiredVirtualTypes;
function requireVirtualTypes() {
  if (hasRequiredVirtualTypes) return virtualTypes;
  hasRequiredVirtualTypes = 1;
  Object.defineProperty(virtualTypes, "__esModule", {
    value: true
  });
  virtualTypes.Var = virtualTypes.User = virtualTypes.Statement = virtualTypes.SpreadProperty = virtualTypes.Scope = virtualTypes.RestProperty = virtualTypes.ReferencedMemberExpression = virtualTypes.ReferencedIdentifier = virtualTypes.Referenced = virtualTypes.Pure = virtualTypes.NumericLiteralTypeAnnotation = virtualTypes.Generated = virtualTypes.ForAwaitStatement = virtualTypes.Flow = virtualTypes.Expression = virtualTypes.ExistentialTypeParam = virtualTypes.BlockScoped = virtualTypes.BindingIdentifier = void 0;
  virtualTypes.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
  virtualTypes.ReferencedMemberExpression = ["MemberExpression"];
  virtualTypes.BindingIdentifier = ["Identifier"];
  virtualTypes.Statement = ["Statement"];
  virtualTypes.Expression = ["Expression"];
  virtualTypes.Scope = ["Scopable", "Pattern"];
  virtualTypes.Referenced = null;
  virtualTypes.BlockScoped = null;
  virtualTypes.Var = ["VariableDeclaration"];
  virtualTypes.User = null;
  virtualTypes.Generated = null;
  virtualTypes.Pure = null;
  virtualTypes.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
  virtualTypes.RestProperty = ["RestElement"];
  virtualTypes.SpreadProperty = ["RestElement"];
  virtualTypes.ExistentialTypeParam = ["ExistsTypeAnnotation"];
  virtualTypes.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
  virtualTypes.ForAwaitStatement = ["ForOfStatement"];
  return virtualTypes;
}
var browser$2 = { exports: {} };
var ms;
var hasRequiredMs;
function requireMs() {
  if (hasRequiredMs) return ms;
  hasRequiredMs = 1;
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w2 = d * 7;
  var y2 = d * 365.25;
  ms = function(val, options2) {
    options2 = options2 || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse2(val);
    } else if (type === "number" && isFinite(val)) {
      return options2.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
    );
  };
  function parse2(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y2;
      case "weeks":
      case "week":
      case "w":
        return n * w2;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return Math.round(ms2 / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms2 / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms2 / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms2 / s) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return plural(ms2, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms2, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms2, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms2, msAbs, s, "second");
    }
    return ms2 + " ms";
  }
  function plural(ms2, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
  }
  return ms;
}
var common;
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug2(...args) {
        if (!debug2.enabled) {
          return;
        }
        const self2 = debug2;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug2.namespace = namespace;
      debug2.useColors = createDebug.useColors();
      debug2.color = createDebug.selectColor(namespace);
      debug2.extend = extend;
      debug2.destroy = createDebug.destroy;
      Object.defineProperty(debug2, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug2);
      }
      return debug2;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  common = setup;
  return common;
}
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1) return browser$2.exports;
  hasRequiredBrowser$1 = 1;
  (function(module2, exports2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug") || exports2.storage.getItem("DEBUG");
      } catch (error2) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module2.exports = requireCommon()(exports2);
    const { formatters: formatters2 } = module2.exports;
    formatters2.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  })(browser$2, browser$2.exports);
  return browser$2.exports;
}
var scope = {};
var renamer = {};
var visitors = {};
var virtualTypesValidator = {};
var hasRequiredVirtualTypesValidator;
function requireVirtualTypesValidator() {
  if (hasRequiredVirtualTypesValidator) return virtualTypesValidator;
  hasRequiredVirtualTypesValidator = 1;
  Object.defineProperty(virtualTypesValidator, "__esModule", {
    value: true
  });
  virtualTypesValidator.isBindingIdentifier = isBindingIdentifier;
  virtualTypesValidator.isBlockScoped = isBlockScoped2;
  virtualTypesValidator.isExpression = isExpression;
  virtualTypesValidator.isFlow = isFlow;
  virtualTypesValidator.isForAwaitStatement = isForAwaitStatement;
  virtualTypesValidator.isGenerated = isGenerated;
  virtualTypesValidator.isPure = isPure;
  virtualTypesValidator.isReferenced = isReferenced2;
  virtualTypesValidator.isReferencedIdentifier = isReferencedIdentifier;
  virtualTypesValidator.isReferencedMemberExpression = isReferencedMemberExpression;
  virtualTypesValidator.isRestProperty = isRestProperty;
  virtualTypesValidator.isScope = isScope2;
  virtualTypesValidator.isSpreadProperty = isSpreadProperty;
  virtualTypesValidator.isStatement = isStatement;
  virtualTypesValidator.isUser = isUser;
  virtualTypesValidator.isVar = isVar2;
  var _t2 = requireLib$b();
  const {
    isBinding: isBinding2,
    isBlockScoped: nodeIsBlockScoped,
    isExportDeclaration,
    isExpression: nodeIsExpression,
    isFlow: nodeIsFlow,
    isForStatement,
    isForXStatement,
    isIdentifier,
    isImportDeclaration,
    isImportSpecifier,
    isJSXIdentifier,
    isJSXMemberExpression,
    isMemberExpression,
    isRestElement: nodeIsRestElement,
    isReferenced: nodeIsReferenced,
    isScope: nodeIsScope,
    isStatement: nodeIsStatement,
    isVar: nodeIsVar,
    isVariableDeclaration,
    react,
    isForOfStatement
  } = _t2;
  const {
    isCompatTag: isCompatTag2
  } = react;
  function isReferencedIdentifier(opts) {
    const {
      node: node2,
      parent
    } = this;
    if (!isIdentifier(node2, opts) && !isJSXMemberExpression(parent, opts)) {
      if (isJSXIdentifier(node2, opts)) {
        if (isCompatTag2(node2.name)) return false;
      } else {
        return false;
      }
    }
    return nodeIsReferenced(node2, parent, this.parentPath.parent);
  }
  function isReferencedMemberExpression() {
    const {
      node: node2,
      parent
    } = this;
    return isMemberExpression(node2) && nodeIsReferenced(node2, parent);
  }
  function isBindingIdentifier() {
    const {
      node: node2,
      parent
    } = this;
    const grandparent = this.parentPath.parent;
    return isIdentifier(node2) && isBinding2(node2, parent, grandparent);
  }
  function isStatement() {
    const {
      node: node2,
      parent
    } = this;
    if (nodeIsStatement(node2)) {
      if (isVariableDeclaration(node2)) {
        if (isForXStatement(parent, {
          left: node2
        })) return false;
        if (isForStatement(parent, {
          init: node2
        })) return false;
      }
      return true;
    } else {
      return false;
    }
  }
  function isExpression() {
    if (this.isIdentifier()) {
      return this.isReferencedIdentifier();
    } else {
      return nodeIsExpression(this.node);
    }
  }
  function isScope2() {
    return nodeIsScope(this.node, this.parent);
  }
  function isReferenced2() {
    return nodeIsReferenced(this.node, this.parent);
  }
  function isBlockScoped2() {
    return nodeIsBlockScoped(this.node);
  }
  function isVar2() {
    return nodeIsVar(this.node);
  }
  function isUser() {
    return this.node && !!this.node.loc;
  }
  function isGenerated() {
    return !this.isUser();
  }
  function isPure(constantsOnly) {
    return this.scope.isPure(this.node, constantsOnly);
  }
  function isFlow() {
    const {
      node: node2
    } = this;
    if (nodeIsFlow(node2)) {
      return true;
    } else if (isImportDeclaration(node2)) {
      return node2.importKind === "type" || node2.importKind === "typeof";
    } else if (isExportDeclaration(node2)) {
      return node2.exportKind === "type";
    } else if (isImportSpecifier(node2)) {
      return node2.importKind === "type" || node2.importKind === "typeof";
    } else {
      return false;
    }
  }
  function isRestProperty() {
    var _this$parentPath;
    return nodeIsRestElement(this.node) && ((_this$parentPath = this.parentPath) == null ? void 0 : _this$parentPath.isObjectPattern());
  }
  function isSpreadProperty() {
    var _this$parentPath2;
    return nodeIsRestElement(this.node) && ((_this$parentPath2 = this.parentPath) == null ? void 0 : _this$parentPath2.isObjectExpression());
  }
  function isForAwaitStatement() {
    return isForOfStatement(this.node, {
      await: true
    });
  }
  {
    virtualTypesValidator.isExistentialTypeParam = function isExistentialTypeParam() {
      throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
    };
    virtualTypesValidator.isNumericLiteralTypeAnnotation = function isNumericLiteralTypeAnnotation() {
      throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
    };
  }
  return virtualTypesValidator;
}
var hasRequiredVisitors;
function requireVisitors() {
  if (hasRequiredVisitors) return visitors;
  hasRequiredVisitors = 1;
  Object.defineProperty(visitors, "__esModule", {
    value: true
  });
  visitors.environmentVisitor = environmentVisitor;
  visitors.explode = explode$1;
  visitors.isExplodedVisitor = isExplodedVisitor;
  visitors.merge = merge;
  visitors.verify = verify$1;
  var virtualTypes2 = requireVirtualTypes();
  var virtualTypesValidators = requireVirtualTypesValidator();
  var _t2 = requireLib$b();
  var _context = requireContext();
  const {
    DEPRECATED_KEYS,
    DEPRECATED_ALIASES,
    FLIPPED_ALIAS_KEYS,
    TYPES,
    __internal__deprecationWarning: deprecationWarning2
  } = _t2;
  function isVirtualType(type) {
    return type in virtualTypes2;
  }
  function isExplodedVisitor(visitor) {
    return visitor == null ? void 0 : visitor._exploded;
  }
  function explode$1(visitor) {
    if (isExplodedVisitor(visitor)) return visitor;
    visitor._exploded = true;
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      const parts = nodeType.split("|");
      if (parts.length === 1) continue;
      const fns = visitor[nodeType];
      delete visitor[nodeType];
      for (const part of parts) {
        visitor[part] = fns;
      }
    }
    verify$1(visitor);
    delete visitor.__esModule;
    ensureEntranceObjects(visitor);
    ensureCallbackArrays(visitor);
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      if (!isVirtualType(nodeType)) continue;
      const fns = visitor[nodeType];
      for (const type of Object.keys(fns)) {
        fns[type] = wrapCheck(nodeType, fns[type]);
      }
      delete visitor[nodeType];
      const types2 = virtualTypes2[nodeType];
      if (types2 !== null) {
        for (const type of types2) {
          if (visitor[type]) {
            mergePair(visitor[type], fns);
          } else {
            visitor[type] = fns;
          }
        }
      } else {
        mergePair(visitor, fns);
      }
    }
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      let aliases = FLIPPED_ALIAS_KEYS[nodeType];
      if (nodeType in DEPRECATED_KEYS) {
        const deprecatedKey = DEPRECATED_KEYS[nodeType];
        deprecationWarning2(nodeType, deprecatedKey, "Visitor ");
        aliases = [deprecatedKey];
      } else if (nodeType in DEPRECATED_ALIASES) {
        const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
        deprecationWarning2(nodeType, deprecatedAlias, "Visitor ");
        aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
      }
      if (!aliases) continue;
      const fns = visitor[nodeType];
      delete visitor[nodeType];
      for (const alias of aliases) {
        const existing = visitor[alias];
        if (existing) {
          mergePair(existing, fns);
        } else {
          visitor[alias] = Object.assign({}, fns);
        }
      }
    }
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      ensureCallbackArrays(visitor[nodeType]);
    }
    return visitor;
  }
  function verify$1(visitor) {
    if (visitor._verified) return;
    if (typeof visitor === "function") {
      throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
    }
    for (const nodeType of Object.keys(visitor)) {
      if (nodeType === "enter" || nodeType === "exit") {
        validateVisitorMethods(nodeType, visitor[nodeType]);
      }
      if (shouldIgnoreKey(nodeType)) continue;
      if (!TYPES.includes(nodeType)) {
        throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse ${"7.27.4"}`);
      }
      const visitors2 = visitor[nodeType];
      if (typeof visitors2 === "object") {
        for (const visitorKey of Object.keys(visitors2)) {
          if (visitorKey === "enter" || visitorKey === "exit") {
            validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors2[visitorKey]);
          } else {
            throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
          }
        }
      }
    }
    visitor._verified = true;
  }
  function validateVisitorMethods(path2, val) {
    const fns = [].concat(val);
    for (const fn2 of fns) {
      if (typeof fn2 !== "function") {
        throw new TypeError(`Non-function found defined in ${path2} with type ${typeof fn2}`);
      }
    }
  }
  function merge(visitors2, states = [], wrapper) {
    const mergedVisitor = {
      _verified: true,
      _exploded: true
    };
    {
      Object.defineProperty(mergedVisitor, "_exploded", {
        enumerable: false
      });
      Object.defineProperty(mergedVisitor, "_verified", {
        enumerable: false
      });
    }
    for (let i = 0; i < visitors2.length; i++) {
      const visitor = explode$1(visitors2[i]);
      const state = states[i];
      let topVisitor = visitor;
      if (state || wrapper) {
        topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);
      }
      mergePair(mergedVisitor, topVisitor);
      for (const key of Object.keys(visitor)) {
        if (shouldIgnoreKey(key)) continue;
        let typeVisitor = visitor[key];
        if (state || wrapper) {
          typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);
        }
        const nodeVisitor = mergedVisitor[key] || (mergedVisitor[key] = {});
        mergePair(nodeVisitor, typeVisitor);
      }
    }
    return mergedVisitor;
  }
  function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
    const newVisitor = {};
    for (const phase of ["enter", "exit"]) {
      let fns = oldVisitor[phase];
      if (!Array.isArray(fns)) continue;
      fns = fns.map(function(fn2) {
        let newFn = fn2;
        if (state) {
          newFn = function(path2) {
            fn2.call(state, path2, state);
          };
        }
        if (wrapper) {
          newFn = wrapper(state == null ? void 0 : state.key, phase, newFn);
        }
        if (newFn !== fn2) {
          newFn.toString = () => fn2.toString();
        }
        return newFn;
      });
      newVisitor[phase] = fns;
    }
    return newVisitor;
  }
  function ensureEntranceObjects(obj) {
    for (const key of Object.keys(obj)) {
      if (shouldIgnoreKey(key)) continue;
      const fns = obj[key];
      if (typeof fns === "function") {
        obj[key] = {
          enter: fns
        };
      }
    }
  }
  function ensureCallbackArrays(obj) {
    if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
    if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
  }
  function wrapCheck(nodeType, fn2) {
    const fnKey = `is${nodeType}`;
    const validator2 = virtualTypesValidators[fnKey];
    const newFn = function(path2) {
      if (validator2.call(path2)) {
        return fn2.apply(this, arguments);
      }
    };
    newFn.toString = () => fn2.toString();
    return newFn;
  }
  function shouldIgnoreKey(key) {
    if (key[0] === "_") return true;
    if (key === "enter" || key === "exit" || key === "shouldSkip") return true;
    if (key === "denylist" || key === "noScope" || key === "skipKeys") {
      return true;
    }
    {
      if (key === "blacklist") {
        return true;
      }
    }
    return false;
  }
  function mergePair(dest, src) {
    for (const phase of ["enter", "exit"]) {
      if (!src[phase]) continue;
      dest[phase] = [].concat(dest[phase] || [], src[phase]);
    }
  }
  const _environmentVisitor = {
    FunctionParent(path2) {
      if (path2.isArrowFunctionExpression()) return;
      path2.skip();
      if (path2.isMethod()) {
        if (!path2.requeueComputedKeyAndDecorators) {
          _context.requeueComputedKeyAndDecorators.call(path2);
        } else {
          path2.requeueComputedKeyAndDecorators();
        }
      }
    },
    Property(path2) {
      if (path2.isObjectProperty()) return;
      path2.skip();
      if (!path2.requeueComputedKeyAndDecorators) {
        _context.requeueComputedKeyAndDecorators.call(path2);
      } else {
        path2.requeueComputedKeyAndDecorators();
      }
    }
  };
  function environmentVisitor(visitor) {
    return merge([_environmentVisitor, visitor]);
  }
  return visitors;
}
var hasRequiredRenamer;
function requireRenamer() {
  if (hasRequiredRenamer) return renamer;
  hasRequiredRenamer = 1;
  Object.defineProperty(renamer, "__esModule", {
    value: true
  });
  renamer.default = void 0;
  var t = requireLib$b();
  var _t2 = t;
  var _traverseNode = requireTraverseNode();
  var _visitors = requireVisitors();
  var _context = requireContext();
  const {
    getAssignmentIdentifiers: getAssignmentIdentifiers2
  } = _t2;
  const renameVisitor = {
    ReferencedIdentifier({
      node: node2
    }, state) {
      if (node2.name === state.oldName) {
        node2.name = state.newName;
      }
    },
    Scope(path2, state) {
      if (!path2.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
        path2.skip();
        if (path2.isMethod()) {
          if (!path2.requeueComputedKeyAndDecorators) {
            _context.requeueComputedKeyAndDecorators.call(path2);
          } else {
            path2.requeueComputedKeyAndDecorators();
          }
        }
      }
    },
    ObjectProperty({
      node: node2,
      scope: scope2
    }, state) {
      const {
        name
      } = node2.key;
      if (node2.shorthand && (name === state.oldName || name === state.newName) && scope2.getBindingIdentifier(name) === state.binding.identifier) {
        node2.shorthand = false;
        {
          var _node$extra;
          if ((_node$extra = node2.extra) != null && _node$extra.shorthand) node2.extra.shorthand = false;
        }
      }
    },
    "AssignmentExpression|Declaration|VariableDeclarator"(path2, state) {
      if (path2.isVariableDeclaration()) return;
      const ids = path2.isAssignmentExpression() ? getAssignmentIdentifiers2(path2.node) : path2.getOuterBindingIdentifiers();
      for (const name in ids) {
        if (name === state.oldName) ids[name].name = state.newName;
      }
    }
  };
  class Renamer {
    constructor(binding2, oldName, newName) {
      this.newName = newName;
      this.oldName = oldName;
      this.binding = binding2;
    }
    maybeConvertFromExportDeclaration(parentDeclar) {
      const maybeExportDeclar = parentDeclar.parentPath;
      if (!maybeExportDeclar.isExportDeclaration()) {
        return;
      }
      if (maybeExportDeclar.isExportDefaultDeclaration()) {
        const {
          declaration
        } = maybeExportDeclar.node;
        if (t.isDeclaration(declaration) && !declaration.id) {
          return;
        }
      }
      if (maybeExportDeclar.isExportAllDeclaration()) {
        return;
      }
      maybeExportDeclar.splitExportDeclaration();
    }
    maybeConvertFromClassFunctionDeclaration(path2) {
      return path2;
    }
    maybeConvertFromClassFunctionExpression(path2) {
      return path2;
    }
    rename() {
      const {
        binding: binding2,
        oldName,
        newName
      } = this;
      const {
        scope: scope2,
        path: path2
      } = binding2;
      const parentDeclar = path2.find((path3) => path3.isDeclaration() || path3.isFunctionExpression() || path3.isClassExpression());
      if (parentDeclar) {
        const bindingIds = parentDeclar.getOuterBindingIdentifiers();
        if (bindingIds[oldName] === binding2.identifier) {
          this.maybeConvertFromExportDeclaration(parentDeclar);
        }
      }
      const blockToTraverse = arguments[0] || scope2.block;
      const skipKeys = {
        discriminant: true
      };
      if (t.isMethod(blockToTraverse)) {
        if (blockToTraverse.computed) {
          skipKeys.key = true;
        }
        if (!t.isObjectMethod(blockToTraverse)) {
          skipKeys.decorators = true;
        }
      }
      (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope2, this, scope2.path, skipKeys);
      if (!arguments[0]) {
        scope2.removeOwnBinding(oldName);
        scope2.bindings[newName] = binding2;
        this.binding.identifier.name = newName;
      }
      if (parentDeclar) {
        this.maybeConvertFromClassFunctionDeclaration(path2);
        this.maybeConvertFromClassFunctionExpression(path2);
      }
    }
  }
  renamer.default = Renamer;
  return renamer;
}
var binding = {};
var hasRequiredBinding;
function requireBinding() {
  if (hasRequiredBinding) return binding;
  hasRequiredBinding = 1;
  Object.defineProperty(binding, "__esModule", {
    value: true
  });
  binding.default = void 0;
  class Binding {
    constructor({
      identifier: identifier2,
      scope: scope2,
      path: path2,
      kind
    }) {
      this.identifier = void 0;
      this.scope = void 0;
      this.path = void 0;
      this.kind = void 0;
      this.constantViolations = [];
      this.constant = true;
      this.referencePaths = [];
      this.referenced = false;
      this.references = 0;
      this.identifier = identifier2;
      this.scope = scope2;
      this.path = path2;
      this.kind = kind;
      if ((kind === "var" || kind === "hoisted") && isInitInLoop(path2)) {
        this.reassign(path2);
      }
      this.clearValue();
    }
    deoptValue() {
      this.clearValue();
      this.hasDeoptedValue = true;
    }
    setValue(value2) {
      if (this.hasDeoptedValue) return;
      this.hasValue = true;
      this.value = value2;
    }
    clearValue() {
      this.hasDeoptedValue = false;
      this.hasValue = false;
      this.value = null;
    }
    reassign(path2) {
      this.constant = false;
      if (this.constantViolations.includes(path2)) {
        return;
      }
      this.constantViolations.push(path2);
    }
    reference(path2) {
      if (this.referencePaths.includes(path2)) {
        return;
      }
      this.referenced = true;
      this.references++;
      this.referencePaths.push(path2);
    }
    dereference() {
      this.references--;
      this.referenced = !!this.references;
    }
  }
  binding.default = Binding;
  function isInitInLoop(path2) {
    const isFunctionDeclarationOrHasInit = !path2.isVariableDeclarator() || path2.node.init;
    for (let {
      parentPath,
      key
    } = path2; parentPath; {
      parentPath,
      key
    } = parentPath) {
      if (parentPath.isFunctionParent()) return false;
      if (key === "left" && parentPath.isForXStatement() || isFunctionDeclarationOrHasInit && key === "body" && parentPath.isLoop()) {
        return true;
      }
    }
    return false;
  }
  return binding;
}
const builtin = { "Array": false, "ArrayBuffer": false, "Atomics": false, "BigInt": false, "BigInt64Array": false, "BigUint64Array": false, "Boolean": false, "constructor": false, "DataView": false, "Date": false, "decodeURI": false, "decodeURIComponent": false, "encodeURI": false, "encodeURIComponent": false, "Error": false, "escape": false, "eval": false, "EvalError": false, "Float32Array": false, "Float64Array": false, "Function": false, "globalThis": false, "hasOwnProperty": false, "Infinity": false, "Int16Array": false, "Int32Array": false, "Int8Array": false, "isFinite": false, "isNaN": false, "isPrototypeOf": false, "JSON": false, "Map": false, "Math": false, "NaN": false, "Number": false, "Object": false, "parseFloat": false, "parseInt": false, "Promise": false, "propertyIsEnumerable": false, "Proxy": false, "RangeError": false, "ReferenceError": false, "Reflect": false, "RegExp": false, "Set": false, "SharedArrayBuffer": false, "String": false, "Symbol": false, "SyntaxError": false, "toLocaleString": false, "toString": false, "TypeError": false, "Uint16Array": false, "Uint32Array": false, "Uint8Array": false, "Uint8ClampedArray": false, "undefined": false, "unescape": false, "URIError": false, "valueOf": false, "WeakMap": false, "WeakSet": false };
const es5 = { "Array": false, "Boolean": false, "constructor": false, "Date": false, "decodeURI": false, "decodeURIComponent": false, "encodeURI": false, "encodeURIComponent": false, "Error": false, "escape": false, "eval": false, "EvalError": false, "Function": false, "hasOwnProperty": false, "Infinity": false, "isFinite": false, "isNaN": false, "isPrototypeOf": false, "JSON": false, "Math": false, "NaN": false, "Number": false, "Object": false, "parseFloat": false, "parseInt": false, "propertyIsEnumerable": false, "RangeError": false, "ReferenceError": false, "RegExp": false, "String": false, "SyntaxError": false, "toLocaleString": false, "toString": false, "TypeError": false, "undefined": false, "unescape": false, "URIError": false, "valueOf": false };
const es2015 = { "Array": false, "ArrayBuffer": false, "Boolean": false, "constructor": false, "DataView": false, "Date": false, "decodeURI": false, "decodeURIComponent": false, "encodeURI": false, "encodeURIComponent": false, "Error": false, "escape": false, "eval": false, "EvalError": false, "Float32Array": false, "Float64Array": false, "Function": false, "hasOwnProperty": false, "Infinity": false, "Int16Array": false, "Int32Array": false, "Int8Array": false, "isFinite": false, "isNaN": false, "isPrototypeOf": false, "JSON": false, "Map": false, "Math": false, "NaN": false, "Number": false, "Object": false, "parseFloat": false, "parseInt": false, "Promise": false, "propertyIsEnumerable": false, "Proxy": false, "RangeError": false, "ReferenceError": false, "Reflect": false, "RegExp": false, "Set": false, "String": false, "Symbol": false, "SyntaxError": false, "toLocaleString": false, "toString": false, "TypeError": false, "Uint16Array": false, "Uint32Array": false, "Uint8Array": false, "Uint8ClampedArray": false, "undefined": false, "unescape": false, "URIError": false, "valueOf": false, "WeakMap": false, "WeakSet": false };
const es2017 = { "Array": false, "ArrayBuffer": false, "Atomics": false, "Boolean": false, "constructor": false, "DataView": false, "Date": false, "decodeURI": false, "decodeURIComponent": false, "encodeURI": false, "encodeURIComponent": false, "Error": false, "escape": false, "eval": false, "EvalError": false, "Float32Array": false, "Float64Array": false, "Function": false, "hasOwnProperty": false, "Infinity": false, "Int16Array": false, "Int32Array": false, "Int8Array": false, "isFinite": false, "isNaN": false, "isPrototypeOf": false, "JSON": false, "Map": false, "Math": false, "NaN": false, "Number": false, "Object": false, "parseFloat": false, "parseInt": false, "Promise": false, "propertyIsEnumerable": false, "Proxy": false, "RangeError": false, "ReferenceError": false, "Reflect": false, "RegExp": false, "Set": false, "SharedArrayBuffer": false, "String": false, "Symbol": false, "SyntaxError": false, "toLocaleString": false, "toString": false, "TypeError": false, "Uint16Array": false, "Uint32Array": false, "Uint8Array": false, "Uint8ClampedArray": false, "undefined": false, "unescape": false, "URIError": false, "valueOf": false, "WeakMap": false, "WeakSet": false };
const browser$1 = /* @__PURE__ */ JSON.parse('{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false}');
const worker = { "addEventListener": false, "applicationCache": false, "atob": false, "Blob": false, "BroadcastChannel": false, "btoa": false, "Cache": false, "caches": false, "clearInterval": false, "clearTimeout": false, "close": true, "console": false, "fetch": false, "FileReaderSync": false, "FormData": false, "Headers": false, "IDBCursor": false, "IDBCursorWithValue": false, "IDBDatabase": false, "IDBFactory": false, "IDBIndex": false, "IDBKeyRange": false, "IDBObjectStore": false, "IDBOpenDBRequest": false, "IDBRequest": false, "IDBTransaction": false, "IDBVersionChangeEvent": false, "ImageData": false, "importScripts": true, "indexedDB": false, "location": false, "MessageChannel": false, "MessagePort": false, "name": false, "navigator": false, "Notification": false, "onclose": true, "onconnect": true, "onerror": true, "onlanguagechange": true, "onmessage": true, "onoffline": true, "ononline": true, "onrejectionhandled": true, "onunhandledrejection": true, "performance": false, "Performance": false, "PerformanceEntry": false, "PerformanceMark": false, "PerformanceMeasure": false, "PerformanceNavigation": false, "PerformanceResourceTiming": false, "PerformanceTiming": false, "postMessage": true, "Promise": false, "queueMicrotask": false, "removeEventListener": false, "Request": false, "Response": false, "self": true, "ServiceWorkerRegistration": false, "setInterval": false, "setTimeout": false, "TextDecoder": false, "TextEncoder": false, "URL": false, "URLSearchParams": false, "WebSocket": false, "Worker": false, "WorkerGlobalScope": false, "XMLHttpRequest": false };
const node$1 = { "__dirname": false, "__filename": false, "Buffer": false, "clearImmediate": false, "clearInterval": false, "clearTimeout": false, "console": false, "exports": true, "global": false, "Intl": false, "module": false, "process": false, "queueMicrotask": false, "require": false, "setImmediate": false, "setInterval": false, "setTimeout": false, "TextDecoder": false, "TextEncoder": false, "URL": false, "URLSearchParams": false };
const commonjs = { "exports": true, "global": false, "module": false, "require": false };
const amd = { "define": false, "require": false };
const mocha = { "after": false, "afterEach": false, "before": false, "beforeEach": false, "context": false, "describe": false, "it": false, "mocha": false, "run": false, "setup": false, "specify": false, "suite": false, "suiteSetup": false, "suiteTeardown": false, "teardown": false, "test": false, "xcontext": false, "xdescribe": false, "xit": false, "xspecify": false };
const jasmine = { "afterAll": false, "afterEach": false, "beforeAll": false, "beforeEach": false, "describe": false, "expect": false, "fail": false, "fdescribe": false, "fit": false, "it": false, "jasmine": false, "pending": false, "runs": false, "spyOn": false, "spyOnProperty": false, "waits": false, "waitsFor": false, "xdescribe": false, "xit": false };
const jest = { "afterAll": false, "afterEach": false, "beforeAll": false, "beforeEach": false, "describe": false, "expect": false, "fdescribe": false, "fit": false, "it": false, "jest": false, "pit": false, "require": false, "test": false, "xdescribe": false, "xit": false, "xtest": false };
const qunit = { "asyncTest": false, "deepEqual": false, "equal": false, "expect": false, "module": false, "notDeepEqual": false, "notEqual": false, "notOk": false, "notPropEqual": false, "notStrictEqual": false, "ok": false, "propEqual": false, "QUnit": false, "raises": false, "start": false, "stop": false, "strictEqual": false, "test": false, "throws": false };
const phantomjs = { "console": true, "exports": true, "phantom": true, "require": true, "WebPage": true };
const couch = { "emit": false, "exports": false, "getRow": false, "log": false, "module": false, "provides": false, "require": false, "respond": false, "send": false, "start": false, "sum": false };
const rhino = { "defineClass": false, "deserialize": false, "gc": false, "help": false, "importClass": false, "importPackage": false, "java": false, "load": false, "loadClass": false, "Packages": false, "print": false, "quit": false, "readFile": false, "readUrl": false, "runCommand": false, "seal": false, "serialize": false, "spawn": false, "sync": false, "toint32": false, "version": false };
const nashorn = { "__DIR__": false, "__FILE__": false, "__LINE__": false, "com": false, "edu": false, "exit": false, "java": false, "Java": false, "javafx": false, "JavaImporter": false, "javax": false, "JSAdapter": false, "load": false, "loadWithNewGlobal": false, "org": false, "Packages": false, "print": false, "quit": false };
const wsh = { "ActiveXObject": true, "Enumerator": true, "GetObject": true, "ScriptEngine": true, "ScriptEngineBuildVersion": true, "ScriptEngineMajorVersion": true, "ScriptEngineMinorVersion": true, "VBArray": true, "WScript": true, "WSH": true, "XDomainRequest": true };
const jquery = { "$": false, "jQuery": false };
const yui = { "YAHOO": false, "YAHOO_config": false, "YUI": false, "YUI_config": false };
const shelljs = { "cat": false, "cd": false, "chmod": false, "config": false, "cp": false, "dirs": false, "echo": false, "env": false, "error": false, "exec": false, "exit": false, "find": false, "grep": false, "ln": false, "ls": false, "mkdir": false, "mv": false, "popd": false, "pushd": false, "pwd": false, "rm": false, "sed": false, "set": false, "target": false, "tempdir": false, "test": false, "touch": false, "which": false };
const prototypejs = { "$": false, "$$": false, "$A": false, "$break": false, "$continue": false, "$F": false, "$H": false, "$R": false, "$w": false, "Abstract": false, "Ajax": false, "Autocompleter": false, "Builder": false, "Class": false, "Control": false, "Draggable": false, "Draggables": false, "Droppables": false, "Effect": false, "Element": false, "Enumerable": false, "Event": false, "Field": false, "Form": false, "Hash": false, "Insertion": false, "ObjectRange": false, "PeriodicalExecuter": false, "Position": false, "Prototype": false, "Scriptaculous": false, "Selector": false, "Sortable": false, "SortableObserver": false, "Sound": false, "Template": false, "Toggle": false, "Try": false };
const meteor = { "_": false, "$": false, "Accounts": false, "AccountsClient": false, "AccountsCommon": false, "AccountsServer": false, "App": false, "Assets": false, "Blaze": false, "check": false, "Cordova": false, "DDP": false, "DDPRateLimiter": false, "DDPServer": false, "Deps": false, "EJSON": false, "Email": false, "HTTP": false, "Log": false, "Match": false, "Meteor": false, "Mongo": false, "MongoInternals": false, "Npm": false, "Package": false, "Plugin": false, "process": false, "Random": false, "ReactiveDict": false, "ReactiveVar": false, "Router": false, "ServiceConfiguration": false, "Session": false, "share": false, "Spacebars": false, "Template": false, "Tinytest": false, "Tracker": false, "UI": false, "Utils": false, "WebApp": false, "WebAppInternals": false };
const mongo = { "_isWindows": false, "_rand": false, "BulkWriteResult": false, "cat": false, "cd": false, "connect": false, "db": false, "getHostName": false, "getMemInfo": false, "hostname": false, "ISODate": false, "listFiles": false, "load": false, "ls": false, "md5sumFile": false, "mkdir": false, "Mongo": false, "NumberInt": false, "NumberLong": false, "ObjectId": false, "PlanCache": false, "print": false, "printjson": false, "pwd": false, "quit": false, "removeFile": false, "rs": false, "sh": false, "UUID": false, "version": false, "WriteResult": false };
const applescript = { "$": false, "Application": false, "Automation": false, "console": false, "delay": false, "Library": false, "ObjC": false, "ObjectSpecifier": false, "Path": false, "Progress": false, "Ref": false };
const serviceworker = { "addEventListener": false, "applicationCache": false, "atob": false, "Blob": false, "BroadcastChannel": false, "btoa": false, "Cache": false, "caches": false, "CacheStorage": false, "clearInterval": false, "clearTimeout": false, "Client": false, "clients": false, "Clients": false, "close": true, "console": false, "ExtendableEvent": false, "ExtendableMessageEvent": false, "fetch": false, "FetchEvent": false, "FileReaderSync": false, "FormData": false, "Headers": false, "IDBCursor": false, "IDBCursorWithValue": false, "IDBDatabase": false, "IDBFactory": false, "IDBIndex": false, "IDBKeyRange": false, "IDBObjectStore": false, "IDBOpenDBRequest": false, "IDBRequest": false, "IDBTransaction": false, "IDBVersionChangeEvent": false, "ImageData": false, "importScripts": false, "indexedDB": false, "location": false, "MessageChannel": false, "MessagePort": false, "name": false, "navigator": false, "Notification": false, "onclose": true, "onconnect": true, "onerror": true, "onfetch": true, "oninstall": true, "onlanguagechange": true, "onmessage": true, "onmessageerror": true, "onnotificationclick": true, "onnotificationclose": true, "onoffline": true, "ononline": true, "onpush": true, "onpushsubscriptionchange": true, "onrejectionhandled": true, "onsync": true, "onunhandledrejection": true, "performance": false, "Performance": false, "PerformanceEntry": false, "PerformanceMark": false, "PerformanceMeasure": false, "PerformanceNavigation": false, "PerformanceResourceTiming": false, "PerformanceTiming": false, "postMessage": true, "Promise": false, "queueMicrotask": false, "registration": false, "removeEventListener": false, "Request": false, "Response": false, "self": false, "ServiceWorker": false, "ServiceWorkerContainer": false, "ServiceWorkerGlobalScope": false, "ServiceWorkerMessageEvent": false, "ServiceWorkerRegistration": false, "setInterval": false, "setTimeout": false, "skipWaiting": false, "TextDecoder": false, "TextEncoder": false, "URL": false, "URLSearchParams": false, "WebSocket": false, "WindowClient": false, "Worker": false, "WorkerGlobalScope": false, "XMLHttpRequest": false };
const atomtest = { "advanceClock": false, "fakeClearInterval": false, "fakeClearTimeout": false, "fakeSetInterval": false, "fakeSetTimeout": false, "resetTimeouts": false, "waitsForPromise": false };
const embertest = { "andThen": false, "click": false, "currentPath": false, "currentRouteName": false, "currentURL": false, "fillIn": false, "find": false, "findAll": false, "findWithAssert": false, "keyEvent": false, "pauseTest": false, "resumeTest": false, "triggerEvent": false, "visit": false, "wait": false };
const protractor = { "$": false, "$$": false, "browser": false, "by": false, "By": false, "DartObject": false, "element": false, "protractor": false };
const webextensions = { "browser": false, "chrome": false, "opr": false };
const greasemonkey = { "cloneInto": false, "createObjectIn": false, "exportFunction": false, "GM": false, "GM_addStyle": false, "GM_deleteValue": false, "GM_getResourceText": false, "GM_getResourceURL": false, "GM_getValue": false, "GM_info": false, "GM_listValues": false, "GM_log": false, "GM_openInTab": false, "GM_registerMenuCommand": false, "GM_setClipboard": false, "GM_setValue": false, "GM_xmlhttpRequest": false, "unsafeWindow": false };
const devtools = { "$": false, "$_": false, "$$": false, "$0": false, "$1": false, "$2": false, "$3": false, "$4": false, "$x": false, "chrome": false, "clear": false, "copy": false, "debug": false, "dir": false, "dirxml": false, "getEventListeners": false, "inspect": false, "keys": false, "monitor": false, "monitorEvents": false, "profile": false, "profileEnd": false, "queryObjects": false, "table": false, "undebug": false, "unmonitor": false, "unmonitorEvents": false, "values": false };
const require$$0$3 = {
  builtin,
  es5,
  es2015,
  es2017,
  browser: browser$1,
  worker,
  node: node$1,
  commonjs,
  amd,
  mocha,
  jasmine,
  jest,
  qunit,
  phantomjs,
  couch,
  rhino,
  nashorn,
  wsh,
  jquery,
  yui,
  shelljs,
  prototypejs,
  meteor,
  mongo,
  applescript,
  serviceworker,
  atomtest,
  embertest,
  protractor,
  "shared-node-browser": { "clearInterval": false, "clearTimeout": false, "console": false, "setInterval": false, "setTimeout": false, "URL": false, "URLSearchParams": false },
  webextensions,
  greasemonkey,
  devtools
};
var globals;
var hasRequiredGlobals;
function requireGlobals() {
  if (hasRequiredGlobals) return globals;
  hasRequiredGlobals = 1;
  globals = require$$0$3;
  return globals;
}
var cache = {};
var hasRequiredCache;
function requireCache() {
  if (hasRequiredCache) return cache;
  hasRequiredCache = 1;
  Object.defineProperty(cache, "__esModule", {
    value: true
  });
  cache.clear = clear;
  cache.clearPath = clearPath;
  cache.clearScope = clearScope;
  cache.getCachedPaths = getCachedPaths;
  cache.getOrCreateCachedPaths = getOrCreateCachedPaths;
  cache.scope = cache.path = void 0;
  let pathsCache = cache.path = /* @__PURE__ */ new WeakMap();
  cache.scope = /* @__PURE__ */ new WeakMap();
  function clear() {
    clearPath();
    clearScope();
  }
  function clearPath() {
    cache.path = pathsCache = /* @__PURE__ */ new WeakMap();
  }
  function clearScope() {
    cache.scope = /* @__PURE__ */ new WeakMap();
  }
  function getCachedPaths(path2) {
    const {
      parent,
      parentPath
    } = path2;
    return pathsCache.get(parent);
  }
  function getOrCreateCachedPaths(node2, parentPath) {
    let paths = pathsCache.get(node2);
    if (!paths) pathsCache.set(node2, paths = /* @__PURE__ */ new Map());
    return paths;
  }
  return cache;
}
var hasRequiredScope;
function requireScope() {
  if (hasRequiredScope) return scope;
  hasRequiredScope = 1;
  Object.defineProperty(scope, "__esModule", {
    value: true
  });
  scope.default = void 0;
  var _renamer = requireRenamer();
  var _index = requireLib$5();
  var _binding = requireBinding();
  var _globals = requireGlobals();
  var _t2 = requireLib$b();
  var t = _t2;
  var _cache = requireCache();
  const {
    assignmentExpression,
    callExpression,
    cloneNode: cloneNode2,
    getBindingIdentifiers: getBindingIdentifiers2,
    identifier: identifier2,
    isArrayExpression,
    isBinary,
    isCallExpression,
    isClass,
    isClassBody,
    isClassDeclaration,
    isExportAllDeclaration,
    isExportDefaultDeclaration,
    isExportNamedDeclaration,
    isFunctionDeclaration,
    isIdentifier,
    isImportDeclaration,
    isLiteral,
    isMemberExpression,
    isMethod,
    isModuleSpecifier,
    isNullLiteral,
    isObjectExpression,
    isProperty,
    isPureish,
    isRegExpLiteral,
    isSuper,
    isTaggedTemplateExpression,
    isTemplateLiteral,
    isThisExpression,
    isUnaryExpression,
    isVariableDeclaration,
    expressionStatement,
    matchesPattern: matchesPattern2,
    memberExpression,
    numericLiteral,
    toIdentifier: toIdentifier2,
    variableDeclaration,
    variableDeclarator,
    isRecordExpression,
    isTupleExpression,
    isObjectProperty,
    isTopicReference,
    isMetaProperty,
    isPrivateName,
    isExportDeclaration,
    buildUndefinedNode,
    sequenceExpression
  } = _t2;
  function gatherNodeParts(node2, parts) {
    switch (node2 == null ? void 0 : node2.type) {
      default:
        if (isImportDeclaration(node2) || isExportDeclaration(node2)) {
          var _node$specifiers;
          if ((isExportAllDeclaration(node2) || isExportNamedDeclaration(node2) || isImportDeclaration(node2)) && node2.source) {
            gatherNodeParts(node2.source, parts);
          } else if ((isExportNamedDeclaration(node2) || isImportDeclaration(node2)) && (_node$specifiers = node2.specifiers) != null && _node$specifiers.length) {
            for (const e of node2.specifiers) gatherNodeParts(e, parts);
          } else if ((isExportDefaultDeclaration(node2) || isExportNamedDeclaration(node2)) && node2.declaration) {
            gatherNodeParts(node2.declaration, parts);
          }
        } else if (isModuleSpecifier(node2)) {
          gatherNodeParts(node2.local, parts);
        } else if (isLiteral(node2) && !isNullLiteral(node2) && !isRegExpLiteral(node2) && !isTemplateLiteral(node2)) {
          parts.push(node2.value);
        }
        break;
      case "MemberExpression":
      case "OptionalMemberExpression":
      case "JSXMemberExpression":
        gatherNodeParts(node2.object, parts);
        gatherNodeParts(node2.property, parts);
        break;
      case "Identifier":
      case "JSXIdentifier":
        parts.push(node2.name);
        break;
      case "CallExpression":
      case "OptionalCallExpression":
      case "NewExpression":
        gatherNodeParts(node2.callee, parts);
        break;
      case "ObjectExpression":
      case "ObjectPattern":
        for (const e of node2.properties) {
          gatherNodeParts(e, parts);
        }
        break;
      case "SpreadElement":
      case "RestElement":
        gatherNodeParts(node2.argument, parts);
        break;
      case "ObjectProperty":
      case "ObjectMethod":
      case "ClassProperty":
      case "ClassMethod":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
        gatherNodeParts(node2.key, parts);
        break;
      case "ThisExpression":
        parts.push("this");
        break;
      case "Super":
        parts.push("super");
        break;
      case "Import":
        parts.push("import");
        break;
      case "DoExpression":
        parts.push("do");
        break;
      case "YieldExpression":
        parts.push("yield");
        gatherNodeParts(node2.argument, parts);
        break;
      case "AwaitExpression":
        parts.push("await");
        gatherNodeParts(node2.argument, parts);
        break;
      case "AssignmentExpression":
        gatherNodeParts(node2.left, parts);
        break;
      case "VariableDeclarator":
        gatherNodeParts(node2.id, parts);
        break;
      case "FunctionExpression":
      case "FunctionDeclaration":
      case "ClassExpression":
      case "ClassDeclaration":
        gatherNodeParts(node2.id, parts);
        break;
      case "PrivateName":
        gatherNodeParts(node2.id, parts);
        break;
      case "ParenthesizedExpression":
        gatherNodeParts(node2.expression, parts);
        break;
      case "UnaryExpression":
      case "UpdateExpression":
        gatherNodeParts(node2.argument, parts);
        break;
      case "MetaProperty":
        gatherNodeParts(node2.meta, parts);
        gatherNodeParts(node2.property, parts);
        break;
      case "JSXElement":
        gatherNodeParts(node2.openingElement, parts);
        break;
      case "JSXOpeningElement":
        gatherNodeParts(node2.name, parts);
        break;
      case "JSXFragment":
        gatherNodeParts(node2.openingFragment, parts);
        break;
      case "JSXOpeningFragment":
        parts.push("Fragment");
        break;
      case "JSXNamespacedName":
        gatherNodeParts(node2.namespace, parts);
        gatherNodeParts(node2.name, parts);
        break;
    }
  }
  function resetScope(scope2) {
    {
      scope2.references = /* @__PURE__ */ Object.create(null);
      scope2.uids = /* @__PURE__ */ Object.create(null);
    }
    scope2.bindings = /* @__PURE__ */ Object.create(null);
    scope2.globals = /* @__PURE__ */ Object.create(null);
  }
  {
    var NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
  }
  const collectorVisitor = {
    ForStatement(path2) {
      const declar = path2.get("init");
      if (declar.isVar()) {
        const {
          scope: scope2
        } = path2;
        const parentScope = scope2.getFunctionParent() || scope2.getProgramParent();
        parentScope.registerBinding("var", declar);
      }
    },
    Declaration(path2) {
      if (path2.isBlockScoped()) return;
      if (path2.isImportDeclaration()) return;
      if (path2.isExportDeclaration()) return;
      const parent = path2.scope.getFunctionParent() || path2.scope.getProgramParent();
      parent.registerDeclaration(path2);
    },
    ImportDeclaration(path2) {
      const parent = path2.scope.getBlockParent();
      parent.registerDeclaration(path2);
    },
    TSImportEqualsDeclaration(path2) {
      const parent = path2.scope.getBlockParent();
      parent.registerDeclaration(path2);
    },
    ReferencedIdentifier(path2, state) {
      if (t.isTSQualifiedName(path2.parent) && path2.parent.right === path2.node) {
        return;
      }
      if (path2.parentPath.isTSImportEqualsDeclaration()) return;
      state.references.push(path2);
    },
    ForXStatement(path2, state) {
      const left = path2.get("left");
      if (left.isPattern() || left.isIdentifier()) {
        state.constantViolations.push(path2);
      } else if (left.isVar()) {
        const {
          scope: scope2
        } = path2;
        const parentScope = scope2.getFunctionParent() || scope2.getProgramParent();
        parentScope.registerBinding("var", left);
      }
    },
    ExportDeclaration: {
      exit(path2) {
        const {
          node: node2,
          scope: scope2
        } = path2;
        if (isExportAllDeclaration(node2)) return;
        const declar = node2.declaration;
        if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
          const id = declar.id;
          if (!id) return;
          const binding2 = scope2.getBinding(id.name);
          binding2 == null || binding2.reference(path2);
        } else if (isVariableDeclaration(declar)) {
          for (const decl of declar.declarations) {
            for (const name of Object.keys(getBindingIdentifiers2(decl))) {
              const binding2 = scope2.getBinding(name);
              binding2 == null || binding2.reference(path2);
            }
          }
        }
      }
    },
    LabeledStatement(path2) {
      path2.scope.getBlockParent().registerDeclaration(path2);
    },
    AssignmentExpression(path2, state) {
      state.assignments.push(path2);
    },
    UpdateExpression(path2, state) {
      state.constantViolations.push(path2);
    },
    UnaryExpression(path2, state) {
      if (path2.node.operator === "delete") {
        state.constantViolations.push(path2);
      }
    },
    BlockScoped(path2) {
      let scope2 = path2.scope;
      if (scope2.path === path2) scope2 = scope2.parent;
      const parent = scope2.getBlockParent();
      parent.registerDeclaration(path2);
      if (path2.isClassDeclaration() && path2.node.id) {
        const id = path2.node.id;
        const name = id.name;
        path2.scope.bindings[name] = path2.scope.parent.getBinding(name);
      }
    },
    CatchClause(path2) {
      path2.scope.registerBinding("let", path2);
    },
    Function(path2) {
      const params = path2.get("params");
      for (const param of params) {
        path2.scope.registerBinding("param", param);
      }
      if (path2.isFunctionExpression() && path2.node.id && !path2.node.id[NOT_LOCAL_BINDING]) {
        path2.scope.registerBinding("local", path2.get("id"), path2);
      }
    },
    ClassExpression(path2) {
      if (path2.node.id && !path2.node.id[NOT_LOCAL_BINDING]) {
        path2.scope.registerBinding("local", path2.get("id"), path2);
      }
    },
    TSTypeAnnotation(path2) {
      path2.skip();
    }
  };
  let scopeVisitor;
  let uid = 0;
  class Scope {
    constructor(path2) {
      this.uid = void 0;
      this.path = void 0;
      this.block = void 0;
      this.inited = void 0;
      this.labels = void 0;
      this.bindings = void 0;
      this.referencesSet = void 0;
      this.globals = void 0;
      this.uidsSet = void 0;
      this.data = void 0;
      this.crawling = void 0;
      const {
        node: node2
      } = path2;
      const cached = _cache.scope.get(node2);
      if ((cached == null ? void 0 : cached.path) === path2) {
        return cached;
      }
      _cache.scope.set(node2, this);
      this.uid = uid++;
      this.block = node2;
      this.path = path2;
      this.labels = /* @__PURE__ */ new Map();
      this.inited = false;
      {
        Object.defineProperties(this, {
          references: {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ Object.create(null)
          },
          uids: {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ Object.create(null)
          }
        });
      }
    }
    get parent() {
      var _parent;
      let parent, path2 = this.path;
      do {
        var _path;
        const shouldSkip = path2.key === "key" || path2.listKey === "decorators";
        path2 = path2.parentPath;
        if (shouldSkip && path2.isMethod()) path2 = path2.parentPath;
        if ((_path = path2) != null && _path.isScope()) parent = path2;
      } while (path2 && !parent);
      return (_parent = parent) == null ? void 0 : _parent.scope;
    }
    get references() {
      throw new Error("Scope#references is not available in Babel 8. Use Scope#referencesSet instead.");
    }
    get uids() {
      throw new Error("Scope#uids is not available in Babel 8. Use Scope#uidsSet instead.");
    }
    generateDeclaredUidIdentifier(name) {
      const id = this.generateUidIdentifier(name);
      this.push({
        id
      });
      return cloneNode2(id);
    }
    generateUidIdentifier(name) {
      return identifier2(this.generateUid(name));
    }
    generateUid(name = "temp") {
      name = toIdentifier2(name).replace(/^_+/, "").replace(/\d+$/g, "");
      let uid2;
      let i = 0;
      do {
        uid2 = `_${name}`;
        if (i >= 11) uid2 += i - 1;
        else if (i >= 9) uid2 += i - 9;
        else if (i >= 1) uid2 += i + 1;
        i++;
      } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
      const program = this.getProgramParent();
      {
        program.references[uid2] = true;
        program.uids[uid2] = true;
      }
      return uid2;
    }
    generateUidBasedOnNode(node2, defaultName) {
      const parts = [];
      gatherNodeParts(node2, parts);
      let id = parts.join("$");
      id = id.replace(/^_/, "") || defaultName || "ref";
      return this.generateUid(id.slice(0, 20));
    }
    generateUidIdentifierBasedOnNode(node2, defaultName) {
      return identifier2(this.generateUidBasedOnNode(node2, defaultName));
    }
    isStatic(node2) {
      if (isThisExpression(node2) || isSuper(node2) || isTopicReference(node2)) {
        return true;
      }
      if (isIdentifier(node2)) {
        const binding2 = this.getBinding(node2.name);
        if (binding2) {
          return binding2.constant;
        } else {
          return this.hasBinding(node2.name);
        }
      }
      return false;
    }
    maybeGenerateMemoised(node2, dontPush) {
      if (this.isStatic(node2)) {
        return null;
      } else {
        const id = this.generateUidIdentifierBasedOnNode(node2);
        if (!dontPush) {
          this.push({
            id
          });
          return cloneNode2(id);
        }
        return id;
      }
    }
    checkBlockScopedCollisions(local, kind, name, id) {
      if (kind === "param") return;
      if (local.kind === "local") return;
      const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";
      if (duplicate) {
        throw this.path.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
      }
    }
    rename(oldName, newName) {
      const binding2 = this.getBinding(oldName);
      if (binding2) {
        newName || (newName = this.generateUidIdentifier(oldName).name);
        const renamer2 = new _renamer.default(binding2, oldName, newName);
        {
          renamer2.rename(arguments[2]);
        }
      }
    }
    dump() {
      const sep = "-".repeat(60);
      console.log(sep);
      let scope2 = this;
      do {
        console.log("#", scope2.block.type);
        for (const name of Object.keys(scope2.bindings)) {
          const binding2 = scope2.bindings[name];
          console.log(" -", name, {
            constant: binding2.constant,
            references: binding2.references,
            violations: binding2.constantViolations.length,
            kind: binding2.kind
          });
        }
      } while (scope2 = scope2.parent);
      console.log(sep);
    }
    hasLabel(name) {
      return !!this.getLabel(name);
    }
    getLabel(name) {
      return this.labels.get(name);
    }
    registerLabel(path2) {
      this.labels.set(path2.node.label.name, path2);
    }
    registerDeclaration(path2) {
      if (path2.isLabeledStatement()) {
        this.registerLabel(path2);
      } else if (path2.isFunctionDeclaration()) {
        this.registerBinding("hoisted", path2.get("id"), path2);
      } else if (path2.isVariableDeclaration()) {
        const declarations = path2.get("declarations");
        const {
          kind
        } = path2.node;
        for (const declar of declarations) {
          this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);
        }
      } else if (path2.isClassDeclaration()) {
        if (path2.node.declare) return;
        this.registerBinding("let", path2);
      } else if (path2.isImportDeclaration()) {
        const isTypeDeclaration = path2.node.importKind === "type" || path2.node.importKind === "typeof";
        const specifiers = path2.get("specifiers");
        for (const specifier of specifiers) {
          const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
          this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
        }
      } else if (path2.isExportDeclaration()) {
        const declar = path2.get("declaration");
        if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
          this.registerDeclaration(declar);
        }
      } else {
        this.registerBinding("unknown", path2);
      }
    }
    buildUndefinedNode() {
      return buildUndefinedNode();
    }
    registerConstantViolation(path2) {
      const ids = path2.getAssignmentIdentifiers();
      for (const name of Object.keys(ids)) {
        var _this$getBinding;
        (_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path2);
      }
    }
    registerBinding(kind, path2, bindingPath = path2) {
      if (!kind) throw new ReferenceError("no `kind`");
      if (path2.isVariableDeclaration()) {
        const declarators = path2.get("declarations");
        for (const declar of declarators) {
          this.registerBinding(kind, declar);
        }
        return;
      }
      const parent = this.getProgramParent();
      const ids = path2.getOuterBindingIdentifiers(true);
      for (const name of Object.keys(ids)) {
        {
          parent.references[name] = true;
        }
        for (const id of ids[name]) {
          const local = this.getOwnBinding(name);
          if (local) {
            if (local.identifier === id) continue;
            this.checkBlockScopedCollisions(local, kind, name, id);
          }
          if (local) {
            local.reassign(bindingPath);
          } else {
            this.bindings[name] = new _binding.default({
              identifier: id,
              scope: this,
              path: bindingPath,
              kind
            });
          }
        }
      }
    }
    addGlobal(node2) {
      this.globals[node2.name] = node2;
    }
    hasUid(name) {
      {
        let scope2 = this;
        do {
          if (scope2.uids[name]) return true;
        } while (scope2 = scope2.parent);
        return false;
      }
    }
    hasGlobal(name) {
      let scope2 = this;
      do {
        if (scope2.globals[name]) return true;
      } while (scope2 = scope2.parent);
      return false;
    }
    hasReference(name) {
      {
        return !!this.getProgramParent().references[name];
      }
    }
    isPure(node2, constantsOnly) {
      if (isIdentifier(node2)) {
        const binding2 = this.getBinding(node2.name);
        if (!binding2) return false;
        if (constantsOnly) return binding2.constant;
        return true;
      } else if (isThisExpression(node2) || isMetaProperty(node2) || isTopicReference(node2) || isPrivateName(node2)) {
        return true;
      } else if (isClass(node2)) {
        var _node$decorators;
        if (node2.superClass && !this.isPure(node2.superClass, constantsOnly)) {
          return false;
        }
        if (((_node$decorators = node2.decorators) == null ? void 0 : _node$decorators.length) > 0) {
          return false;
        }
        return this.isPure(node2.body, constantsOnly);
      } else if (isClassBody(node2)) {
        for (const method of node2.body) {
          if (!this.isPure(method, constantsOnly)) return false;
        }
        return true;
      } else if (isBinary(node2)) {
        return this.isPure(node2.left, constantsOnly) && this.isPure(node2.right, constantsOnly);
      } else if (isArrayExpression(node2) || isTupleExpression(node2)) {
        for (const elem of node2.elements) {
          if (elem !== null && !this.isPure(elem, constantsOnly)) return false;
        }
        return true;
      } else if (isObjectExpression(node2) || isRecordExpression(node2)) {
        for (const prop of node2.properties) {
          if (!this.isPure(prop, constantsOnly)) return false;
        }
        return true;
      } else if (isMethod(node2)) {
        var _node$decorators2;
        if (node2.computed && !this.isPure(node2.key, constantsOnly)) return false;
        if (((_node$decorators2 = node2.decorators) == null ? void 0 : _node$decorators2.length) > 0) {
          return false;
        }
        return true;
      } else if (isProperty(node2)) {
        var _node$decorators3;
        if (node2.computed && !this.isPure(node2.key, constantsOnly)) return false;
        if (((_node$decorators3 = node2.decorators) == null ? void 0 : _node$decorators3.length) > 0) {
          return false;
        }
        if (isObjectProperty(node2) || node2.static) {
          if (node2.value !== null && !this.isPure(node2.value, constantsOnly)) {
            return false;
          }
        }
        return true;
      } else if (isUnaryExpression(node2)) {
        return this.isPure(node2.argument, constantsOnly);
      } else if (isTemplateLiteral(node2)) {
        for (const expression of node2.expressions) {
          if (!this.isPure(expression, constantsOnly)) return false;
        }
        return true;
      } else if (isTaggedTemplateExpression(node2)) {
        return matchesPattern2(node2.tag, "String.raw") && !this.hasBinding("String", {
          noGlobals: true
        }) && this.isPure(node2.quasi, constantsOnly);
      } else if (isMemberExpression(node2)) {
        return !node2.computed && isIdentifier(node2.object) && node2.object.name === "Symbol" && isIdentifier(node2.property) && node2.property.name !== "for" && !this.hasBinding("Symbol", {
          noGlobals: true
        });
      } else if (isCallExpression(node2)) {
        return matchesPattern2(node2.callee, "Symbol.for") && !this.hasBinding("Symbol", {
          noGlobals: true
        }) && node2.arguments.length === 1 && t.isStringLiteral(node2.arguments[0]);
      } else {
        return isPureish(node2);
      }
    }
    setData(key, val) {
      return this.data[key] = val;
    }
    getData(key) {
      let scope2 = this;
      do {
        const data = scope2.data[key];
        if (data != null) return data;
      } while (scope2 = scope2.parent);
    }
    removeData(key) {
      let scope2 = this;
      do {
        const data = scope2.data[key];
        if (data != null) scope2.data[key] = null;
      } while (scope2 = scope2.parent);
    }
    init() {
      if (!this.inited) {
        this.inited = true;
        this.crawl();
      }
    }
    crawl() {
      const path2 = this.path;
      resetScope(this);
      this.data = /* @__PURE__ */ Object.create(null);
      let scope2 = this;
      do {
        if (scope2.crawling) return;
        if (scope2.path.isProgram()) {
          break;
        }
      } while (scope2 = scope2.parent);
      const programParent = scope2;
      const state = {
        references: [],
        constantViolations: [],
        assignments: []
      };
      this.crawling = true;
      scopeVisitor || (scopeVisitor = _index.default.visitors.merge([{
        Scope(path3) {
          resetScope(path3.scope);
        }
      }, collectorVisitor]));
      if (path2.type !== "Program") {
        for (const visit of scopeVisitor.enter) {
          visit.call(state, path2, state);
        }
        const typeVisitors = scopeVisitor[path2.type];
        if (typeVisitors) {
          for (const visit of typeVisitors.enter) {
            visit.call(state, path2, state);
          }
        }
      }
      path2.traverse(scopeVisitor, state);
      this.crawling = false;
      for (const path3 of state.assignments) {
        const ids = path3.getAssignmentIdentifiers();
        for (const name of Object.keys(ids)) {
          if (path3.scope.getBinding(name)) continue;
          programParent.addGlobal(ids[name]);
        }
        path3.scope.registerConstantViolation(path3);
      }
      for (const ref of state.references) {
        const binding2 = ref.scope.getBinding(ref.node.name);
        if (binding2) {
          binding2.reference(ref);
        } else {
          programParent.addGlobal(ref.node);
        }
      }
      for (const path3 of state.constantViolations) {
        path3.scope.registerConstantViolation(path3);
      }
    }
    push(opts) {
      let path2 = this.path;
      if (path2.isPattern()) {
        path2 = this.getPatternParent().path;
      } else if (!path2.isBlockStatement() && !path2.isProgram()) {
        path2 = this.getBlockParent().path;
      }
      if (path2.isSwitchStatement()) {
        path2 = (this.getFunctionParent() || this.getProgramParent()).path;
      }
      const {
        init,
        unique,
        kind = "var",
        id
      } = opts;
      if (!init && !unique && (kind === "var" || kind === "let") && path2.isFunction() && !path2.node.name && isCallExpression(path2.parent, {
        callee: path2.node
      }) && path2.parent.arguments.length <= path2.node.params.length && isIdentifier(id)) {
        path2.pushContainer("params", id);
        path2.scope.registerBinding("param", path2.get("params")[path2.node.params.length - 1]);
        return;
      }
      if (path2.isLoop() || path2.isCatchClause() || path2.isFunction()) {
        path2.ensureBlock();
        path2 = path2.get("body");
      }
      const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
      const dataKey = `declaration:${kind}:${blockHoist}`;
      let declarPath = !unique && path2.getData(dataKey);
      if (!declarPath) {
        const declar = variableDeclaration(kind, []);
        declar._blockHoist = blockHoist;
        [declarPath] = path2.unshiftContainer("body", [declar]);
        if (!unique) path2.setData(dataKey, declarPath);
      }
      const declarator = variableDeclarator(id, init);
      const len = declarPath.node.declarations.push(declarator);
      path2.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
    }
    getProgramParent() {
      let scope2 = this;
      do {
        if (scope2.path.isProgram()) {
          return scope2;
        }
      } while (scope2 = scope2.parent);
      throw new Error("Couldn't find a Program");
    }
    getFunctionParent() {
      let scope2 = this;
      do {
        if (scope2.path.isFunctionParent()) {
          return scope2;
        }
      } while (scope2 = scope2.parent);
      return null;
    }
    getBlockParent() {
      let scope2 = this;
      do {
        if (scope2.path.isBlockParent()) {
          return scope2;
        }
      } while (scope2 = scope2.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getPatternParent() {
      let scope2 = this;
      do {
        if (!scope2.path.isPattern()) {
          return scope2.getBlockParent();
        }
      } while (scope2 = scope2.parent.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getAllBindings() {
      const ids = /* @__PURE__ */ Object.create(null);
      let scope2 = this;
      do {
        for (const key of Object.keys(scope2.bindings)) {
          if (key in ids === false) {
            ids[key] = scope2.bindings[key];
          }
        }
        scope2 = scope2.parent;
      } while (scope2);
      return ids;
    }
    bindingIdentifierEquals(name, node2) {
      return this.getBindingIdentifier(name) === node2;
    }
    getBinding(name) {
      let scope2 = this;
      let previousPath;
      do {
        const binding2 = scope2.getOwnBinding(name);
        if (binding2) {
          var _previousPath;
          if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding2.kind !== "param" && binding2.kind !== "local") ;
          else {
            return binding2;
          }
        } else if (!binding2 && name === "arguments" && scope2.path.isFunction() && !scope2.path.isArrowFunctionExpression()) {
          break;
        }
        previousPath = scope2.path;
      } while (scope2 = scope2.parent);
    }
    getOwnBinding(name) {
      return this.bindings[name];
    }
    getBindingIdentifier(name) {
      var _this$getBinding2;
      return (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.identifier;
    }
    getOwnBindingIdentifier(name) {
      const binding2 = this.bindings[name];
      return binding2 == null ? void 0 : binding2.identifier;
    }
    hasOwnBinding(name) {
      return !!this.getOwnBinding(name);
    }
    hasBinding(name, opts) {
      if (!name) return false;
      let noGlobals;
      let noUids;
      let upToScope;
      if (typeof opts === "object") {
        noGlobals = opts.noGlobals;
        noUids = opts.noUids;
        upToScope = opts.upToScope;
      } else if (typeof opts === "boolean") {
        noGlobals = opts;
      }
      let scope2 = this;
      do {
        if (upToScope === scope2) {
          break;
        }
        if (scope2.hasOwnBinding(name)) {
          return true;
        }
      } while (scope2 = scope2.parent);
      if (!noUids && this.hasUid(name)) return true;
      if (!noGlobals && Scope.globals.includes(name)) return true;
      if (!noGlobals && Scope.contextVariables.includes(name)) return true;
      return false;
    }
    parentHasBinding(name, opts) {
      var _this$parent;
      return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);
    }
    moveBindingTo(name, scope2) {
      const info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
        info.scope = scope2;
        scope2.bindings[name] = info;
      }
    }
    removeOwnBinding(name) {
      delete this.bindings[name];
    }
    removeBinding(name) {
      var _this$getBinding3;
      (_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);
      {
        let scope2 = this;
        do {
          if (scope2.uids[name]) {
            scope2.uids[name] = false;
          }
        } while (scope2 = scope2.parent);
      }
    }
    hoistVariables(emit = (id) => this.push({
      id
    })) {
      this.crawl();
      const seen = /* @__PURE__ */ new Set();
      for (const name of Object.keys(this.bindings)) {
        const binding2 = this.bindings[name];
        if (!binding2) continue;
        const {
          path: path2
        } = binding2;
        if (!path2.isVariableDeclarator()) continue;
        const {
          parent,
          parentPath
        } = path2;
        if (parent.kind !== "var" || seen.has(parent)) continue;
        seen.add(path2.parent);
        let firstId;
        const init = [];
        for (const decl of parent.declarations) {
          firstId != null ? firstId : firstId = decl.id;
          if (decl.init) {
            init.push(assignmentExpression("=", decl.id, decl.init));
          }
          const ids = Object.keys(getBindingIdentifiers2(decl, false, true, true));
          for (const name2 of ids) {
            emit(identifier2(name2), decl.init != null);
          }
        }
        if (parentPath.parentPath.isFor({
          left: parent
        })) {
          parentPath.replaceWith(firstId);
        } else if (init.length === 0) {
          parentPath.remove();
        } else {
          const expr = init.length === 1 ? init[0] : sequenceExpression(init);
          if (parentPath.parentPath.isForStatement({
            init: parent
          })) {
            parentPath.replaceWith(expr);
          } else {
            parentPath.replaceWith(expressionStatement(expr));
          }
        }
      }
    }
  }
  scope.default = Scope;
  Scope.globals = Object.keys(_globals.builtin);
  Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
  {
    Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value2) {
      if (map[oldName]) {
        map[newName] = value2;
        map[oldName] = null;
      }
    };
    Scope.prototype.traverse = function(node2, opts, state) {
      (0, _index.default)(node2, opts, this, state, this.path);
    };
    Scope.prototype._generateUid = function _generateUid(name, i) {
      let id = name;
      if (i > 1) id += i;
      return `_${id}`;
    };
    Scope.prototype.toArray = function toArray(node2, i, arrayLikeIsIterable) {
      if (isIdentifier(node2)) {
        const binding2 = this.getBinding(node2.name);
        if (binding2 != null && binding2.constant && binding2.path.isGenericType("Array")) {
          return node2;
        }
      }
      if (isArrayExpression(node2)) {
        return node2;
      }
      if (isIdentifier(node2, {
        name: "arguments"
      })) {
        return callExpression(memberExpression(memberExpression(memberExpression(identifier2("Array"), identifier2("prototype")), identifier2("slice")), identifier2("call")), [node2]);
      }
      let helperName;
      const args = [node2];
      if (i === true) {
        helperName = "toConsumableArray";
      } else if (typeof i === "number") {
        args.push(numericLiteral(i));
        helperName = "slicedToArray";
      } else {
        helperName = "toArray";
      }
      if (arrayLikeIsIterable) {
        args.unshift(this.path.hub.addHelper(helperName));
        helperName = "maybeArrayLike";
      }
      return callExpression(this.path.hub.addHelper(helperName), args);
    };
    Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind(...kinds) {
      const ids = /* @__PURE__ */ Object.create(null);
      for (const kind of kinds) {
        let scope2 = this;
        do {
          for (const name of Object.keys(scope2.bindings)) {
            const binding2 = scope2.bindings[name];
            if (binding2.kind === kind) ids[name] = binding2;
          }
          scope2 = scope2.parent;
        } while (scope2);
      }
      return ids;
    };
    Object.defineProperties(Scope.prototype, {
      parentBlock: {
        configurable: true,
        enumerable: true,
        get() {
          return this.path.parent;
        }
      },
      hub: {
        configurable: true,
        enumerable: true,
        get() {
          return this.path.hub;
        }
      }
    });
  }
  return scope;
}
var lib$4 = {};
var sourceMap = {};
var genMapping_umd$1 = { exports: {} };
var setArray_umd$1 = { exports: {} };
var setArray_umd = setArray_umd$1.exports;
var hasRequiredSetArray_umd;
function requireSetArray_umd() {
  if (hasRequiredSetArray_umd) return setArray_umd$1.exports;
  hasRequiredSetArray_umd = 1;
  (function(module2, exports2) {
    (function(global2, factory) {
      factory(exports2);
    })(setArray_umd, function(exports3) {
      class SetArray {
        constructor() {
          this._indexes = { __proto__: null };
          this.array = [];
        }
      }
      function cast(set) {
        return set;
      }
      function get(setarr, key) {
        return cast(setarr)._indexes[key];
      }
      function put(setarr, key) {
        const index = get(setarr, key);
        if (index !== void 0)
          return index;
        const { array, _indexes: indexes } = cast(setarr);
        const length = array.push(key);
        return indexes[key] = length - 1;
      }
      function pop(setarr) {
        const { array, _indexes: indexes } = cast(setarr);
        if (array.length === 0)
          return;
        const last = array.pop();
        indexes[last] = void 0;
      }
      function remove(setarr, key) {
        const index = get(setarr, key);
        if (index === void 0)
          return;
        const { array, _indexes: indexes } = cast(setarr);
        for (let i = index + 1; i < array.length; i++) {
          const k2 = array[i];
          array[i - 1] = k2;
          indexes[k2]--;
        }
        indexes[key] = void 0;
        array.pop();
      }
      exports3.SetArray = SetArray;
      exports3.get = get;
      exports3.pop = pop;
      exports3.put = put;
      exports3.remove = remove;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  })(setArray_umd$1, setArray_umd$1.exports);
  return setArray_umd$1.exports;
}
var sourcemapCodec_umd$1 = { exports: {} };
var sourcemapCodec_umd = sourcemapCodec_umd$1.exports;
var hasRequiredSourcemapCodec_umd;
function requireSourcemapCodec_umd() {
  if (hasRequiredSourcemapCodec_umd) return sourcemapCodec_umd$1.exports;
  hasRequiredSourcemapCodec_umd = 1;
  (function(module2, exports2) {
    (function(global2, factory) {
      factory(exports2);
    })(sourcemapCodec_umd, function(exports3) {
      const comma = ",".charCodeAt(0);
      const semicolon = ";".charCodeAt(0);
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      const intToChar = new Uint8Array(64);
      const charToInt = new Uint8Array(128);
      for (let i = 0; i < chars.length; i++) {
        const c = chars.charCodeAt(i);
        intToChar[i] = c;
        charToInt[c] = i;
      }
      function decodeInteger(reader, relative) {
        let value2 = 0;
        let shift = 0;
        let integer = 0;
        do {
          const c = reader.next();
          integer = charToInt[c];
          value2 |= (integer & 31) << shift;
          shift += 5;
        } while (integer & 32);
        const shouldNegate = value2 & 1;
        value2 >>>= 1;
        if (shouldNegate) {
          value2 = -2147483648 | -value2;
        }
        return relative + value2;
      }
      function encodeInteger(builder2, num, relative) {
        let delta = num - relative;
        delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
        do {
          let clamped = delta & 31;
          delta >>>= 5;
          if (delta > 0)
            clamped |= 32;
          builder2.write(intToChar[clamped]);
        } while (delta > 0);
        return num;
      }
      function hasMoreVlq(reader, max) {
        if (reader.pos >= max)
          return false;
        return reader.peek() !== comma;
      }
      const bufLength = 1024 * 16;
      const td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? {
        decode(buf) {
          const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
          return out.toString();
        }
      } : {
        decode(buf) {
          let out = "";
          for (let i = 0; i < buf.length; i++) {
            out += String.fromCharCode(buf[i]);
          }
          return out;
        }
      };
      class StringWriter {
        constructor() {
          this.pos = 0;
          this.out = "";
          this.buffer = new Uint8Array(bufLength);
        }
        write(v) {
          const { buffer: buffer2 } = this;
          buffer2[this.pos++] = v;
          if (this.pos === bufLength) {
            this.out += td.decode(buffer2);
            this.pos = 0;
          }
        }
        flush() {
          const { buffer: buffer2, out, pos } = this;
          return pos > 0 ? out + td.decode(buffer2.subarray(0, pos)) : out;
        }
      }
      class StringReader {
        constructor(buffer2) {
          this.pos = 0;
          this.buffer = buffer2;
        }
        next() {
          return this.buffer.charCodeAt(this.pos++);
        }
        peek() {
          return this.buffer.charCodeAt(this.pos);
        }
        indexOf(char) {
          const { buffer: buffer2, pos } = this;
          const idx = buffer2.indexOf(char, pos);
          return idx === -1 ? buffer2.length : idx;
        }
      }
      const EMPTY = [];
      function decodeOriginalScopes(input) {
        const { length } = input;
        const reader = new StringReader(input);
        const scopes = [];
        const stack = [];
        let line = 0;
        for (; reader.pos < length; reader.pos++) {
          line = decodeInteger(reader, line);
          const column = decodeInteger(reader, 0);
          if (!hasMoreVlq(reader, length)) {
            const last = stack.pop();
            last[2] = line;
            last[3] = column;
            continue;
          }
          const kind = decodeInteger(reader, 0);
          const fields = decodeInteger(reader, 0);
          const hasName = fields & 1;
          const scope2 = hasName ? [line, column, 0, 0, kind, decodeInteger(reader, 0)] : [line, column, 0, 0, kind];
          let vars = EMPTY;
          if (hasMoreVlq(reader, length)) {
            vars = [];
            do {
              const varsIndex = decodeInteger(reader, 0);
              vars.push(varsIndex);
            } while (hasMoreVlq(reader, length));
          }
          scope2.vars = vars;
          scopes.push(scope2);
          stack.push(scope2);
        }
        return scopes;
      }
      function encodeOriginalScopes(scopes) {
        const writer = new StringWriter();
        for (let i = 0; i < scopes.length; ) {
          i = _encodeOriginalScopes(scopes, i, writer, [0]);
        }
        return writer.flush();
      }
      function _encodeOriginalScopes(scopes, index, writer, state) {
        const scope2 = scopes[index];
        const { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope2;
        if (index > 0)
          writer.write(comma);
        state[0] = encodeInteger(writer, startLine, state[0]);
        encodeInteger(writer, startColumn, 0);
        encodeInteger(writer, kind, 0);
        const fields = scope2.length === 6 ? 1 : 0;
        encodeInteger(writer, fields, 0);
        if (scope2.length === 6)
          encodeInteger(writer, scope2[5], 0);
        for (const v of vars) {
          encodeInteger(writer, v, 0);
        }
        for (index++; index < scopes.length; ) {
          const next = scopes[index];
          const { 0: l, 1: c } = next;
          if (l > endLine || l === endLine && c >= endColumn) {
            break;
          }
          index = _encodeOriginalScopes(scopes, index, writer, state);
        }
        writer.write(comma);
        state[0] = encodeInteger(writer, endLine, state[0]);
        encodeInteger(writer, endColumn, 0);
        return index;
      }
      function decodeGeneratedRanges(input) {
        const { length } = input;
        const reader = new StringReader(input);
        const ranges = [];
        const stack = [];
        let genLine = 0;
        let definitionSourcesIndex = 0;
        let definitionScopeIndex = 0;
        let callsiteSourcesIndex = 0;
        let callsiteLine = 0;
        let callsiteColumn = 0;
        let bindingLine = 0;
        let bindingColumn = 0;
        do {
          const semi = reader.indexOf(";");
          let genColumn = 0;
          for (; reader.pos < semi; reader.pos++) {
            genColumn = decodeInteger(reader, genColumn);
            if (!hasMoreVlq(reader, semi)) {
              const last = stack.pop();
              last[2] = genLine;
              last[3] = genColumn;
              continue;
            }
            const fields = decodeInteger(reader, 0);
            const hasDefinition = fields & 1;
            const hasCallsite = fields & 2;
            const hasScope = fields & 4;
            let callsite = null;
            let bindings = EMPTY;
            let range;
            if (hasDefinition) {
              const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
              definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0);
              definitionSourcesIndex = defSourcesIndex;
              range = [genLine, genColumn, 0, 0, defSourcesIndex, definitionScopeIndex];
            } else {
              range = [genLine, genColumn, 0, 0];
            }
            range.isScope = !!hasScope;
            if (hasCallsite) {
              const prevCsi = callsiteSourcesIndex;
              const prevLine = callsiteLine;
              callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
              const sameSource = prevCsi === callsiteSourcesIndex;
              callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0);
              callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0);
              callsite = [callsiteSourcesIndex, callsiteLine, callsiteColumn];
            }
            range.callsite = callsite;
            if (hasMoreVlq(reader, semi)) {
              bindings = [];
              do {
                bindingLine = genLine;
                bindingColumn = genColumn;
                const expressionsCount = decodeInteger(reader, 0);
                let expressionRanges;
                if (expressionsCount < -1) {
                  expressionRanges = [[decodeInteger(reader, 0)]];
                  for (let i = -1; i > expressionsCount; i--) {
                    const prevBl = bindingLine;
                    bindingLine = decodeInteger(reader, bindingLine);
                    bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
                    const expression = decodeInteger(reader, 0);
                    expressionRanges.push([expression, bindingLine, bindingColumn]);
                  }
                } else {
                  expressionRanges = [[expressionsCount]];
                }
                bindings.push(expressionRanges);
              } while (hasMoreVlq(reader, semi));
            }
            range.bindings = bindings;
            ranges.push(range);
            stack.push(range);
          }
          genLine++;
          reader.pos = semi + 1;
        } while (reader.pos < length);
        return ranges;
      }
      function encodeGeneratedRanges(ranges) {
        if (ranges.length === 0)
          return "";
        const writer = new StringWriter();
        for (let i = 0; i < ranges.length; ) {
          i = _encodeGeneratedRanges(ranges, i, writer, [0, 0, 0, 0, 0, 0, 0]);
        }
        return writer.flush();
      }
      function _encodeGeneratedRanges(ranges, index, writer, state) {
        const range = ranges[index];
        const { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope: isScope2, callsite, bindings } = range;
        if (state[0] < startLine) {
          catchupLine(writer, state[0], startLine);
          state[0] = startLine;
          state[1] = 0;
        } else if (index > 0) {
          writer.write(comma);
        }
        state[1] = encodeInteger(writer, range[1], state[1]);
        const fields = (range.length === 6 ? 1 : 0) | (callsite ? 2 : 0) | (isScope2 ? 4 : 0);
        encodeInteger(writer, fields, 0);
        if (range.length === 6) {
          const { 4: sourcesIndex, 5: scopesIndex } = range;
          if (sourcesIndex !== state[2]) {
            state[3] = 0;
          }
          state[2] = encodeInteger(writer, sourcesIndex, state[2]);
          state[3] = encodeInteger(writer, scopesIndex, state[3]);
        }
        if (callsite) {
          const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range.callsite;
          if (sourcesIndex !== state[4]) {
            state[5] = 0;
            state[6] = 0;
          } else if (callLine !== state[5]) {
            state[6] = 0;
          }
          state[4] = encodeInteger(writer, sourcesIndex, state[4]);
          state[5] = encodeInteger(writer, callLine, state[5]);
          state[6] = encodeInteger(writer, callColumn, state[6]);
        }
        if (bindings) {
          for (const binding2 of bindings) {
            if (binding2.length > 1)
              encodeInteger(writer, -binding2.length, 0);
            const expression = binding2[0][0];
            encodeInteger(writer, expression, 0);
            let bindingStartLine = startLine;
            let bindingStartColumn = startColumn;
            for (let i = 1; i < binding2.length; i++) {
              const expRange = binding2[i];
              bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine);
              bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn);
              encodeInteger(writer, expRange[0], 0);
            }
          }
        }
        for (index++; index < ranges.length; ) {
          const next = ranges[index];
          const { 0: l, 1: c } = next;
          if (l > endLine || l === endLine && c >= endColumn) {
            break;
          }
          index = _encodeGeneratedRanges(ranges, index, writer, state);
        }
        if (state[0] < endLine) {
          catchupLine(writer, state[0], endLine);
          state[0] = endLine;
          state[1] = 0;
        } else {
          writer.write(comma);
        }
        state[1] = encodeInteger(writer, endColumn, state[1]);
        return index;
      }
      function catchupLine(writer, lastLine, line) {
        do {
          writer.write(semicolon);
        } while (++lastLine < line);
      }
      function decode(mappings) {
        const { length } = mappings;
        const reader = new StringReader(mappings);
        const decoded = [];
        let genColumn = 0;
        let sourcesIndex = 0;
        let sourceLine = 0;
        let sourceColumn = 0;
        let namesIndex = 0;
        do {
          const semi = reader.indexOf(";");
          const line = [];
          let sorted = true;
          let lastCol = 0;
          genColumn = 0;
          while (reader.pos < semi) {
            let seg;
            genColumn = decodeInteger(reader, genColumn);
            if (genColumn < lastCol)
              sorted = false;
            lastCol = genColumn;
            if (hasMoreVlq(reader, semi)) {
              sourcesIndex = decodeInteger(reader, sourcesIndex);
              sourceLine = decodeInteger(reader, sourceLine);
              sourceColumn = decodeInteger(reader, sourceColumn);
              if (hasMoreVlq(reader, semi)) {
                namesIndex = decodeInteger(reader, namesIndex);
                seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex];
              } else {
                seg = [genColumn, sourcesIndex, sourceLine, sourceColumn];
              }
            } else {
              seg = [genColumn];
            }
            line.push(seg);
            reader.pos++;
          }
          if (!sorted)
            sort(line);
          decoded.push(line);
          reader.pos = semi + 1;
        } while (reader.pos <= length);
        return decoded;
      }
      function sort(line) {
        line.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[0] - b[0];
      }
      function encode(decoded) {
        const writer = new StringWriter();
        let sourcesIndex = 0;
        let sourceLine = 0;
        let sourceColumn = 0;
        let namesIndex = 0;
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          if (i > 0)
            writer.write(semicolon);
          if (line.length === 0)
            continue;
          let genColumn = 0;
          for (let j = 0; j < line.length; j++) {
            const segment = line[j];
            if (j > 0)
              writer.write(comma);
            genColumn = encodeInteger(writer, segment[0], genColumn);
            if (segment.length === 1)
              continue;
            sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);
            sourceLine = encodeInteger(writer, segment[2], sourceLine);
            sourceColumn = encodeInteger(writer, segment[3], sourceColumn);
            if (segment.length === 4)
              continue;
            namesIndex = encodeInteger(writer, segment[4], namesIndex);
          }
        }
        return writer.flush();
      }
      exports3.decode = decode;
      exports3.decodeGeneratedRanges = decodeGeneratedRanges;
      exports3.decodeOriginalScopes = decodeOriginalScopes;
      exports3.encode = encode;
      exports3.encodeGeneratedRanges = encodeGeneratedRanges;
      exports3.encodeOriginalScopes = encodeOriginalScopes;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  })(sourcemapCodec_umd$1, sourcemapCodec_umd$1.exports);
  return sourcemapCodec_umd$1.exports;
}
var traceMapping_umd$1 = { exports: {} };
var resolveUri_umd$1 = { exports: {} };
var resolveUri_umd = resolveUri_umd$1.exports;
var hasRequiredResolveUri_umd;
function requireResolveUri_umd() {
  if (hasRequiredResolveUri_umd) return resolveUri_umd$1.exports;
  hasRequiredResolveUri_umd = 1;
  (function(module2, exports2) {
    (function(global2, factory) {
      module2.exports = factory();
    })(resolveUri_umd, function() {
      const schemeRegex = /^[\w+.-]+:\/\//;
      const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
      const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
      function isAbsoluteUrl(input) {
        return schemeRegex.test(input);
      }
      function isSchemeRelativeUrl(input) {
        return input.startsWith("//");
      }
      function isAbsolutePath(input) {
        return input.startsWith("/");
      }
      function isFileUrl(input) {
        return input.startsWith("file:");
      }
      function isRelative(input) {
        return /^[.?#]/.test(input);
      }
      function parseAbsoluteUrl(input) {
        const match = urlRegex.exec(input);
        return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
      }
      function parseFileUrl(input) {
        const match = fileRegex.exec(input);
        const path2 = match[2];
        return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path2) ? path2 : "/" + path2, match[3] || "", match[4] || "");
      }
      function makeUrl(scheme, user, host, port, path2, query, hash) {
        return {
          scheme,
          user,
          host,
          port,
          path: path2,
          query,
          hash,
          type: 7
        };
      }
      function parseUrl(input) {
        if (isSchemeRelativeUrl(input)) {
          const url2 = parseAbsoluteUrl("http:" + input);
          url2.scheme = "";
          url2.type = 6;
          return url2;
        }
        if (isAbsolutePath(input)) {
          const url2 = parseAbsoluteUrl("http://foo.com" + input);
          url2.scheme = "";
          url2.host = "";
          url2.type = 5;
          return url2;
        }
        if (isFileUrl(input))
          return parseFileUrl(input);
        if (isAbsoluteUrl(input))
          return parseAbsoluteUrl(input);
        const url = parseAbsoluteUrl("http://foo.com/" + input);
        url.scheme = "";
        url.host = "";
        url.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1;
        return url;
      }
      function stripPathFilename(path2) {
        if (path2.endsWith("/.."))
          return path2;
        const index = path2.lastIndexOf("/");
        return path2.slice(0, index + 1);
      }
      function mergePaths(url, base2) {
        normalizePath(base2, base2.type);
        if (url.path === "/") {
          url.path = base2.path;
        } else {
          url.path = stripPathFilename(base2.path) + url.path;
        }
      }
      function normalizePath(url, type) {
        const rel = type <= 4;
        const pieces = url.path.split("/");
        let pointer = 1;
        let positive = 0;
        let addTrailingSlash = false;
        for (let i = 1; i < pieces.length; i++) {
          const piece = pieces[i];
          if (!piece) {
            addTrailingSlash = true;
            continue;
          }
          addTrailingSlash = false;
          if (piece === ".")
            continue;
          if (piece === "..") {
            if (positive) {
              addTrailingSlash = true;
              positive--;
              pointer--;
            } else if (rel) {
              pieces[pointer++] = piece;
            }
            continue;
          }
          pieces[pointer++] = piece;
          positive++;
        }
        let path2 = "";
        for (let i = 1; i < pointer; i++) {
          path2 += "/" + pieces[i];
        }
        if (!path2 || addTrailingSlash && !path2.endsWith("/..")) {
          path2 += "/";
        }
        url.path = path2;
      }
      function resolve(input, base2) {
        if (!input && !base2)
          return "";
        const url = parseUrl(input);
        let inputType = url.type;
        if (base2 && inputType !== 7) {
          const baseUrl = parseUrl(base2);
          const baseType = baseUrl.type;
          switch (inputType) {
            case 1:
              url.hash = baseUrl.hash;
            // fall through
            case 2:
              url.query = baseUrl.query;
            // fall through
            case 3:
            case 4:
              mergePaths(url, baseUrl);
            // fall through
            case 5:
              url.user = baseUrl.user;
              url.host = baseUrl.host;
              url.port = baseUrl.port;
            // fall through
            case 6:
              url.scheme = baseUrl.scheme;
          }
          if (baseType > inputType)
            inputType = baseType;
        }
        normalizePath(url, inputType);
        const queryHash = url.query + url.hash;
        switch (inputType) {
          // This is impossible, because of the empty checks at the start of the function.
          // case UrlType.Empty:
          case 2:
          case 3:
            return queryHash;
          case 4: {
            const path2 = url.path.slice(1);
            if (!path2)
              return queryHash || ".";
            if (isRelative(base2 || input) && !isRelative(path2)) {
              return "./" + path2 + queryHash;
            }
            return path2 + queryHash;
          }
          case 5:
            return url.path + queryHash;
          default:
            return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
        }
      }
      return resolve;
    });
  })(resolveUri_umd$1);
  return resolveUri_umd$1.exports;
}
var traceMapping_umd = traceMapping_umd$1.exports;
var hasRequiredTraceMapping_umd;
function requireTraceMapping_umd() {
  if (hasRequiredTraceMapping_umd) return traceMapping_umd$1.exports;
  hasRequiredTraceMapping_umd = 1;
  (function(module2, exports2) {
    (function(global2, factory) {
      factory(exports2, requireSourcemapCodec_umd(), requireResolveUri_umd());
    })(traceMapping_umd, function(exports3, sourcemapCodec, resolveUri) {
      function resolve(input, base2) {
        if (base2 && !base2.endsWith("/"))
          base2 += "/";
        return resolveUri(input, base2);
      }
      function stripFilename(path2) {
        if (!path2)
          return "";
        const index = path2.lastIndexOf("/");
        return path2.slice(0, index + 1);
      }
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const REV_GENERATED_LINE = 1;
      const REV_GENERATED_COLUMN = 2;
      function maybeSort(mappings, owned) {
        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
        if (unsortedIndex === mappings.length)
          return mappings;
        if (!owned)
          mappings = mappings.slice();
        for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
          mappings[i] = sortSegments(mappings[i], owned);
        }
        return mappings;
      }
      function nextUnsortedSegmentLine(mappings, start) {
        for (let i = start; i < mappings.length; i++) {
          if (!isSorted(mappings[i]))
            return i;
        }
        return mappings.length;
      }
      function isSorted(line) {
        for (let j = 1; j < line.length; j++) {
          if (line[j][COLUMN] < line[j - 1][COLUMN]) {
            return false;
          }
        }
        return true;
      }
      function sortSegments(line, owned) {
        if (!owned)
          line = line.slice();
        return line.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[COLUMN] - b[COLUMN];
      }
      let found = false;
      function binarySearch(haystack, needle, low, high) {
        while (low <= high) {
          const mid = low + (high - low >> 1);
          const cmp = haystack[mid][COLUMN] - needle;
          if (cmp === 0) {
            found = true;
            return mid;
          }
          if (cmp < 0) {
            low = mid + 1;
          } else {
            high = mid - 1;
          }
        }
        found = false;
        return low - 1;
      }
      function upperBound(haystack, needle, index) {
        for (let i = index + 1; i < haystack.length; index = i++) {
          if (haystack[i][COLUMN] !== needle)
            break;
        }
        return index;
      }
      function lowerBound(haystack, needle, index) {
        for (let i = index - 1; i >= 0; index = i--) {
          if (haystack[i][COLUMN] !== needle)
            break;
        }
        return index;
      }
      function memoizedState() {
        return {
          lastKey: -1,
          lastNeedle: -1,
          lastIndex: -1
        };
      }
      function memoizedBinarySearch(haystack, needle, state, key) {
        const { lastKey, lastNeedle, lastIndex } = state;
        let low = 0;
        let high = haystack.length - 1;
        if (key === lastKey) {
          if (needle === lastNeedle) {
            found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
            return lastIndex;
          }
          if (needle >= lastNeedle) {
            low = lastIndex === -1 ? 0 : lastIndex;
          } else {
            high = lastIndex;
          }
        }
        state.lastKey = key;
        state.lastNeedle = needle;
        return state.lastIndex = binarySearch(haystack, needle, low, high);
      }
      function buildBySources(decoded, memos) {
        const sources = memos.map(buildNullArray);
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            if (seg.length === 1)
              continue;
            const sourceIndex2 = seg[SOURCES_INDEX];
            const sourceLine = seg[SOURCE_LINE];
            const sourceColumn = seg[SOURCE_COLUMN];
            const originalSource = sources[sourceIndex2];
            const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
            const memo = memos[sourceIndex2];
            let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
            memo.lastIndex = ++index;
            insert(originalLine, index, [sourceColumn, i, seg[COLUMN]]);
          }
        }
        return sources;
      }
      function insert(array, index, value2) {
        for (let i = array.length; i > index; i--) {
          array[i] = array[i - 1];
        }
        array[index] = value2;
      }
      function buildNullArray() {
        return { __proto__: null };
      }
      const AnyMap = function(map, mapUrl) {
        const parsed = parse2(map);
        if (!("sections" in parsed)) {
          return new TraceMap(parsed, mapUrl);
        }
        const mappings = [];
        const sources = [];
        const sourcesContent = [];
        const names = [];
        const ignoreList = [];
        recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity);
        const joined = {
          version: 3,
          file: parsed.file,
          names,
          sources,
          sourcesContent,
          mappings,
          ignoreList
        };
        return presortedDecodedMap(joined);
      };
      function parse2(map) {
        return typeof map === "string" ? JSON.parse(map) : map;
      }
      function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const { sections } = input;
        for (let i = 0; i < sections.length; i++) {
          const { map, offset } = sections[i];
          let sl = stopLine;
          let sc = stopColumn;
          if (i + 1 < sections.length) {
            const nextOffset = sections[i + 1].offset;
            sl = Math.min(stopLine, lineOffset + nextOffset.line);
            if (sl === stopLine) {
              sc = Math.min(stopColumn, columnOffset + nextOffset.column);
            } else if (sl < stopLine) {
              sc = columnOffset + nextOffset.column;
            }
          }
          addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
        }
      }
      function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const parsed = parse2(input);
        if ("sections" in parsed)
          return recurse(...arguments);
        const map = new TraceMap(parsed, mapUrl);
        const sourcesOffset = sources.length;
        const namesOffset = names.length;
        const decoded = decodedMappings(map);
        const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
        append(sources, resolvedSources);
        append(names, map.names);
        if (contents)
          append(sourcesContent, contents);
        else
          for (let i = 0; i < resolvedSources.length; i++)
            sourcesContent.push(null);
        if (ignores)
          for (let i = 0; i < ignores.length; i++)
            ignoreList.push(ignores[i] + sourcesOffset);
        for (let i = 0; i < decoded.length; i++) {
          const lineI = lineOffset + i;
          if (lineI > stopLine)
            return;
          const out = getLine(mappings, lineI);
          const cOffset = i === 0 ? columnOffset : 0;
          const line = decoded[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const column = cOffset + seg[COLUMN];
            if (lineI === stopLine && column >= stopColumn)
              return;
            if (seg.length === 1) {
              out.push([column]);
              continue;
            }
            const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
            const sourceLine = seg[SOURCE_LINE];
            const sourceColumn = seg[SOURCE_COLUMN];
            out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
          }
        }
      }
      function append(arr, other) {
        for (let i = 0; i < other.length; i++)
          arr.push(other[i]);
      }
      function getLine(arr, index) {
        for (let i = arr.length; i <= index; i++)
          arr[i] = [];
        return arr[index];
      }
      const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
      const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
      const LEAST_UPPER_BOUND = -1;
      const GREATEST_LOWER_BOUND = 1;
      class TraceMap {
        constructor(map, mapUrl) {
          const isString = typeof map === "string";
          if (!isString && map._decodedMemo)
            return map;
          const parsed = isString ? JSON.parse(map) : map;
          const { version, file: file2, names, sourceRoot, sources, sourcesContent } = parsed;
          this.version = version;
          this.file = file2;
          this.names = names || [];
          this.sourceRoot = sourceRoot;
          this.sources = sources;
          this.sourcesContent = sourcesContent;
          this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
          const from = resolve(sourceRoot || "", stripFilename(mapUrl));
          this.resolvedSources = sources.map((s) => resolve(s || "", from));
          const { mappings } = parsed;
          if (typeof mappings === "string") {
            this._encoded = mappings;
            this._decoded = void 0;
          } else {
            this._encoded = void 0;
            this._decoded = maybeSort(mappings, isString);
          }
          this._decodedMemo = memoizedState();
          this._bySources = void 0;
          this._bySourceMemos = void 0;
        }
      }
      function cast(map) {
        return map;
      }
      function encodedMappings(map) {
        var _a;
        var _b;
        return (_a = (_b = cast(map))._encoded) !== null && _a !== void 0 ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
      }
      function decodedMappings(map) {
        var _a;
        return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
      }
      function traceSegment(map, line, column) {
        const decoded = decodedMappings(map);
        if (line >= decoded.length)
          return null;
        const segments = decoded[line];
        const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
        return index === -1 ? null : segments[index];
      }
      function originalPositionFor(map, needle) {
        let { line, column, bias } = needle;
        line--;
        if (line < 0)
          throw new Error(LINE_GTR_ZERO);
        if (column < 0)
          throw new Error(COL_GTR_EQ_ZERO);
        const decoded = decodedMappings(map);
        if (line >= decoded.length)
          return OMapping(null, null, null, null);
        const segments = decoded[line];
        const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
        if (index === -1)
          return OMapping(null, null, null, null);
        const segment = segments[index];
        if (segment.length === 1)
          return OMapping(null, null, null, null);
        const { names, resolvedSources } = map;
        return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
      }
      function generatedPositionFor(map, needle) {
        const { source, line, column, bias } = needle;
        return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
      }
      function allGeneratedPositionsFor(map, needle) {
        const { source, line, column, bias } = needle;
        return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
      }
      function eachMapping(map, cb) {
        const decoded = decodedMappings(map);
        const { names, resolvedSources } = map;
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const generatedLine = i + 1;
            const generatedColumn = seg[0];
            let source = null;
            let originalLine = null;
            let originalColumn = null;
            let name = null;
            if (seg.length !== 1) {
              source = resolvedSources[seg[1]];
              originalLine = seg[2] + 1;
              originalColumn = seg[3];
            }
            if (seg.length === 5)
              name = names[seg[4]];
            cb({
              generatedLine,
              generatedColumn,
              source,
              originalLine,
              originalColumn,
              name
            });
          }
        }
      }
      function sourceIndex(map, source) {
        const { sources, resolvedSources } = map;
        let index = sources.indexOf(source);
        if (index === -1)
          index = resolvedSources.indexOf(source);
        return index;
      }
      function sourceContentFor(map, source) {
        const { sourcesContent } = map;
        if (sourcesContent == null)
          return null;
        const index = sourceIndex(map, source);
        return index === -1 ? null : sourcesContent[index];
      }
      function isIgnored(map, source) {
        const { ignoreList } = map;
        if (ignoreList == null)
          return false;
        const index = sourceIndex(map, source);
        return index === -1 ? false : ignoreList.includes(index);
      }
      function presortedDecodedMap(map, mapUrl) {
        const tracer = new TraceMap(clone2(map, []), mapUrl);
        cast(tracer)._decoded = map.mappings;
        return tracer;
      }
      function decodedMap(map) {
        return clone2(map, decodedMappings(map));
      }
      function encodedMap(map) {
        return clone2(map, encodedMappings(map));
      }
      function clone2(map, mappings) {
        return {
          version: map.version,
          file: map.file,
          names: map.names,
          sourceRoot: map.sourceRoot,
          sources: map.sources,
          sourcesContent: map.sourcesContent,
          mappings,
          ignoreList: map.ignoreList || map.x_google_ignoreList
        };
      }
      function OMapping(source, line, column, name) {
        return { source, line, column, name };
      }
      function GMapping(line, column) {
        return { line, column };
      }
      function traceSegmentInternal(segments, memo, line, column, bias) {
        let index = memoizedBinarySearch(segments, column, memo, line);
        if (found) {
          index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
        } else if (bias === LEAST_UPPER_BOUND)
          index++;
        if (index === -1 || index === segments.length)
          return -1;
        return index;
      }
      function sliceGeneratedPositions(segments, memo, line, column, bias) {
        let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
        if (!found && bias === LEAST_UPPER_BOUND)
          min++;
        if (min === -1 || min === segments.length)
          return [];
        const matchedColumn = found ? column : segments[min][COLUMN];
        if (!found)
          min = lowerBound(segments, matchedColumn, min);
        const max = upperBound(segments, matchedColumn, min);
        const result = [];
        for (; min <= max; min++) {
          const segment = segments[min];
          result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
        }
        return result;
      }
      function generatedPosition(map, source, line, column, bias, all) {
        var _a;
        line--;
        if (line < 0)
          throw new Error(LINE_GTR_ZERO);
        if (column < 0)
          throw new Error(COL_GTR_EQ_ZERO);
        const { sources, resolvedSources } = map;
        let sourceIndex2 = sources.indexOf(source);
        if (sourceIndex2 === -1)
          sourceIndex2 = resolvedSources.indexOf(source);
        if (sourceIndex2 === -1)
          return all ? [] : GMapping(null, null);
        const generated2 = (_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState)));
        const segments = generated2[sourceIndex2][line];
        if (segments == null)
          return all ? [] : GMapping(null, null);
        const memo = cast(map)._bySourceMemos[sourceIndex2];
        if (all)
          return sliceGeneratedPositions(segments, memo, line, column, bias);
        const index = traceSegmentInternal(segments, memo, line, column, bias);
        if (index === -1)
          return GMapping(null, null);
        const segment = segments[index];
        return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
      }
      exports3.AnyMap = AnyMap;
      exports3.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
      exports3.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
      exports3.TraceMap = TraceMap;
      exports3.allGeneratedPositionsFor = allGeneratedPositionsFor;
      exports3.decodedMap = decodedMap;
      exports3.decodedMappings = decodedMappings;
      exports3.eachMapping = eachMapping;
      exports3.encodedMap = encodedMap;
      exports3.encodedMappings = encodedMappings;
      exports3.generatedPositionFor = generatedPositionFor;
      exports3.isIgnored = isIgnored;
      exports3.originalPositionFor = originalPositionFor;
      exports3.presortedDecodedMap = presortedDecodedMap;
      exports3.sourceContentFor = sourceContentFor;
      exports3.traceSegment = traceSegment;
    });
  })(traceMapping_umd$1, traceMapping_umd$1.exports);
  return traceMapping_umd$1.exports;
}
var genMapping_umd = genMapping_umd$1.exports;
var hasRequiredGenMapping_umd;
function requireGenMapping_umd() {
  if (hasRequiredGenMapping_umd) return genMapping_umd$1.exports;
  hasRequiredGenMapping_umd = 1;
  (function(module2, exports2) {
    (function(global2, factory) {
      factory(exports2, requireSetArray_umd(), requireSourcemapCodec_umd(), requireTraceMapping_umd());
    })(genMapping_umd, function(exports3, setArray, sourcemapCodec, traceMapping) {
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const NO_NAME = -1;
      class GenMapping {
        constructor({ file: file2, sourceRoot } = {}) {
          this._names = new setArray.SetArray();
          this._sources = new setArray.SetArray();
          this._sourcesContent = [];
          this._mappings = [];
          this.file = file2;
          this.sourceRoot = sourceRoot;
          this._ignoreList = new setArray.SetArray();
        }
      }
      function cast(map) {
        return map;
      }
      function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
        return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
      }
      function addMapping(map, mapping) {
        return addMappingInternal(false, map, mapping);
      }
      const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
        return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
      };
      const maybeAddMapping = (map, mapping) => {
        return addMappingInternal(true, map, mapping);
      };
      function setSourceContent(map, source, content) {
        const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
        const index = setArray.put(sources, source);
        sourcesContent[index] = content;
      }
      function setIgnore(map, source, ignore = true) {
        const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);
        const index = setArray.put(sources, source);
        if (index === sourcesContent.length)
          sourcesContent[index] = null;
        if (ignore)
          setArray.put(ignoreList, index);
        else
          setArray.remove(ignoreList, index);
      }
      function toDecodedMap(map) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
        removeEmptyFinalLines(mappings);
        return {
          version: 3,
          file: map.file || void 0,
          names: names.array,
          sourceRoot: map.sourceRoot || void 0,
          sources: sources.array,
          sourcesContent,
          mappings,
          ignoreList: ignoreList.array
        };
      }
      function toEncodedMap(map) {
        const decoded = toDecodedMap(map);
        return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
      }
      function fromMap(input) {
        const map = new traceMapping.TraceMap(input);
        const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
        putAll(cast(gen)._names, map.names);
        putAll(cast(gen)._sources, map.sources);
        cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);
        cast(gen)._mappings = traceMapping.decodedMappings(map);
        if (map.ignoreList)
          putAll(cast(gen)._ignoreList, map.ignoreList);
        return gen;
      }
      function allMappings(map) {
        const out = [];
        const { _mappings: mappings, _sources: sources, _names: names } = cast(map);
        for (let i = 0; i < mappings.length; i++) {
          const line = mappings[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const generated2 = { line: i + 1, column: seg[COLUMN] };
            let source = void 0;
            let original = void 0;
            let name = void 0;
            if (seg.length !== 1) {
              source = sources.array[seg[SOURCES_INDEX]];
              original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };
              if (seg.length === 5)
                name = names.array[seg[NAMES_INDEX]];
            }
            out.push({ generated: generated2, source, original, name });
          }
        }
        return out;
      }
      function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map);
        const line = getLine(mappings, genLine);
        const index = getColumnIndex(line, genColumn);
        if (!source) {
          if (skipable && skipSourceless(line, index))
            return;
          return insert(line, index, [genColumn]);
        }
        const sourcesIndex = setArray.put(sources, source);
        const namesIndex = name ? setArray.put(names, name) : NO_NAME;
        if (sourcesIndex === sourcesContent.length)
          sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
        if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
          return;
        }
        return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
      }
      function getLine(mappings, index) {
        for (let i = mappings.length; i <= index; i++) {
          mappings[i] = [];
        }
        return mappings[index];
      }
      function getColumnIndex(line, genColumn) {
        let index = line.length;
        for (let i = index - 1; i >= 0; index = i--) {
          const current = line[i];
          if (genColumn >= current[COLUMN])
            break;
        }
        return index;
      }
      function insert(array, index, value2) {
        for (let i = array.length; i > index; i--) {
          array[i] = array[i - 1];
        }
        array[index] = value2;
      }
      function removeEmptyFinalLines(mappings) {
        const { length } = mappings;
        let len = length;
        for (let i = len - 1; i >= 0; len = i, i--) {
          if (mappings[i].length > 0)
            break;
        }
        if (len < length)
          mappings.length = len;
      }
      function putAll(setarr, array) {
        for (let i = 0; i < array.length; i++)
          setArray.put(setarr, array[i]);
      }
      function skipSourceless(line, index) {
        if (index === 0)
          return true;
        const prev = line[index - 1];
        return prev.length === 1;
      }
      function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
        if (index === 0)
          return false;
        const prev = line[index - 1];
        if (prev.length === 1)
          return false;
        return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
      }
      function addMappingInternal(skipable, map, mapping) {
        const { generated: generated2, source, original, name, content } = mapping;
        if (!source) {
          return addSegmentInternal(skipable, map, generated2.line - 1, generated2.column, null, null, null, null, null);
        }
        return addSegmentInternal(skipable, map, generated2.line - 1, generated2.column, source, original.line - 1, original.column, name, content);
      }
      exports3.GenMapping = GenMapping;
      exports3.addMapping = addMapping;
      exports3.addSegment = addSegment;
      exports3.allMappings = allMappings;
      exports3.fromMap = fromMap;
      exports3.maybeAddMapping = maybeAddMapping;
      exports3.maybeAddSegment = maybeAddSegment;
      exports3.setIgnore = setIgnore;
      exports3.setSourceContent = setSourceContent;
      exports3.toDecodedMap = toDecodedMap;
      exports3.toEncodedMap = toEncodedMap;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  })(genMapping_umd$1, genMapping_umd$1.exports);
  return genMapping_umd$1.exports;
}
var hasRequiredSourceMap;
function requireSourceMap() {
  if (hasRequiredSourceMap) return sourceMap;
  hasRequiredSourceMap = 1;
  Object.defineProperty(sourceMap, "__esModule", {
    value: true
  });
  sourceMap.default = void 0;
  var _genMapping = requireGenMapping_umd();
  var _traceMapping = requireTraceMapping_umd();
  class SourceMap {
    constructor(opts, code) {
      var _opts$sourceFileName;
      this._map = void 0;
      this._rawMappings = void 0;
      this._sourceFileName = void 0;
      this._lastGenLine = 0;
      this._lastSourceLine = 0;
      this._lastSourceColumn = 0;
      this._inputMap = void 0;
      const map = this._map = new _genMapping.GenMapping({
        sourceRoot: opts.sourceRoot
      });
      this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\/g, "/");
      this._rawMappings = void 0;
      if (opts.inputSourceMap) {
        this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
        const resolvedSources = this._inputMap.resolvedSources;
        if (resolvedSources.length) {
          for (let i = 0; i < resolvedSources.length; i++) {
            var _this$_inputMap$sourc;
            (0, _genMapping.setSourceContent)(map, resolvedSources[i], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? void 0 : _this$_inputMap$sourc[i]);
          }
        }
      }
      if (typeof code === "string" && !opts.inputSourceMap) {
        (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
      } else if (typeof code === "object") {
        for (const sourceFileName of Object.keys(code)) {
          (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
        }
      }
    }
    get() {
      return (0, _genMapping.toEncodedMap)(this._map);
    }
    getDecoded() {
      return (0, _genMapping.toDecodedMap)(this._map);
    }
    getRawMappings() {
      return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
    }
    mark(generated2, line, column, identifierName, identifierNamePos, filename) {
      var _originalMapping;
      this._rawMappings = void 0;
      let originalMapping;
      if (line != null) {
        if (this._inputMap) {
          originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {
            line,
            column
          });
          if (!originalMapping.name && identifierNamePos) {
            const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
            if (originalIdentifierMapping.name) {
              identifierName = originalIdentifierMapping.name;
            }
          }
        } else {
          originalMapping = {
            source: (filename == null ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName,
            line,
            column
          };
        }
      }
      (0, _genMapping.maybeAddMapping)(this._map, {
        name: identifierName,
        generated: generated2,
        source: (_originalMapping = originalMapping) == null ? void 0 : _originalMapping.source,
        original: originalMapping
      });
    }
  }
  sourceMap.default = SourceMap;
  return sourceMap;
}
var printer$2 = {};
var buffer = {};
var hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer) return buffer;
  hasRequiredBuffer = 1;
  Object.defineProperty(buffer, "__esModule", {
    value: true
  });
  buffer.default = void 0;
  class Buffer2 {
    constructor(map, indentChar) {
      this._map = null;
      this._buf = "";
      this._str = "";
      this._appendCount = 0;
      this._last = 0;
      this._queue = [];
      this._queueCursor = 0;
      this._canMarkIdName = true;
      this._indentChar = "";
      this._fastIndentations = [];
      this._position = {
        line: 1,
        column: 0
      };
      this._sourcePosition = {
        identifierName: void 0,
        identifierNamePos: void 0,
        line: void 0,
        column: void 0,
        filename: void 0
      };
      this._map = map;
      this._indentChar = indentChar;
      for (let i = 0; i < 64; i++) {
        this._fastIndentations.push(indentChar.repeat(i));
      }
      this._allocQueue();
    }
    _allocQueue() {
      const queue = this._queue;
      for (let i = 0; i < 16; i++) {
        queue.push({
          char: 0,
          repeat: 1,
          line: void 0,
          column: void 0,
          identifierName: void 0,
          identifierNamePos: void 0,
          filename: ""
        });
      }
    }
    _pushQueue(char, repeat, line, column, filename) {
      const cursor = this._queueCursor;
      if (cursor === this._queue.length) {
        this._allocQueue();
      }
      const item2 = this._queue[cursor];
      item2.char = char;
      item2.repeat = repeat;
      item2.line = line;
      item2.column = column;
      item2.filename = filename;
      this._queueCursor++;
    }
    _popQueue() {
      if (this._queueCursor === 0) {
        throw new Error("Cannot pop from empty queue");
      }
      return this._queue[--this._queueCursor];
    }
    get() {
      this._flush();
      const map = this._map;
      const result = {
        code: (this._buf + this._str).trimRight(),
        decodedMap: map == null ? void 0 : map.getDecoded(),
        get __mergedMap() {
          return this.map;
        },
        get map() {
          const resultMap = map ? map.get() : null;
          result.map = resultMap;
          return resultMap;
        },
        set map(value2) {
          Object.defineProperty(result, "map", {
            value: value2,
            writable: true
          });
        },
        get rawMappings() {
          const mappings = map == null ? void 0 : map.getRawMappings();
          result.rawMappings = mappings;
          return mappings;
        },
        set rawMappings(value2) {
          Object.defineProperty(result, "rawMappings", {
            value: value2,
            writable: true
          });
        }
      };
      return result;
    }
    append(str, maybeNewline) {
      this._flush();
      this._append(str, this._sourcePosition, maybeNewline);
    }
    appendChar(char) {
      this._flush();
      this._appendChar(char, 1, this._sourcePosition);
    }
    queue(char) {
      if (char === 10) {
        while (this._queueCursor !== 0) {
          const char2 = this._queue[this._queueCursor - 1].char;
          if (char2 !== 32 && char2 !== 9) {
            break;
          }
          this._queueCursor--;
        }
      }
      const sourcePosition = this._sourcePosition;
      this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
    }
    queueIndentation(repeat) {
      if (repeat === 0) return;
      this._pushQueue(-1, repeat, void 0, void 0, void 0);
    }
    _flush() {
      const queueCursor = this._queueCursor;
      const queue = this._queue;
      for (let i = 0; i < queueCursor; i++) {
        const item2 = queue[i];
        this._appendChar(item2.char, item2.repeat, item2);
      }
      this._queueCursor = 0;
    }
    _appendChar(char, repeat, sourcePos) {
      this._last = char;
      if (char === -1) {
        const fastIndentation = this._fastIndentations[repeat];
        if (fastIndentation !== void 0) {
          this._str += fastIndentation;
        } else {
          this._str += repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
        }
      } else {
        this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
      }
      if (char !== 10) {
        this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename);
        this._position.column += repeat;
      } else {
        this._position.line++;
        this._position.column = 0;
      }
      if (this._canMarkIdName) {
        sourcePos.identifierName = void 0;
        sourcePos.identifierNamePos = void 0;
      }
    }
    _append(str, sourcePos, maybeNewline) {
      const len = str.length;
      const position = this._position;
      this._last = str.charCodeAt(len - 1);
      if (++this._appendCount > 4096) {
        +this._str;
        this._buf += this._str;
        this._str = str;
        this._appendCount = 0;
      } else {
        this._str += str;
      }
      if (!maybeNewline && !this._map) {
        position.column += len;
        return;
      }
      const {
        column,
        identifierName,
        identifierNamePos,
        filename
      } = sourcePos;
      let line = sourcePos.line;
      if ((identifierName != null || identifierNamePos != null) && this._canMarkIdName) {
        sourcePos.identifierName = void 0;
        sourcePos.identifierNamePos = void 0;
      }
      let i = str.indexOf("\n");
      let last = 0;
      if (i !== 0) {
        this._mark(line, column, identifierName, identifierNamePos, filename);
      }
      while (i !== -1) {
        position.line++;
        position.column = 0;
        last = i + 1;
        if (last < len && line !== void 0) {
          this._mark(++line, 0, null, null, filename);
        }
        i = str.indexOf("\n", last);
      }
      position.column += len - last;
    }
    _mark(line, column, identifierName, identifierNamePos, filename) {
      var _this$_map;
      (_this$_map = this._map) == null || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
    }
    removeTrailingNewline() {
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) {
        this._queueCursor--;
      }
    }
    removeLastSemicolon() {
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) {
        this._queueCursor--;
      }
    }
    getLastChar() {
      const queueCursor = this._queueCursor;
      return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;
    }
    getNewlineCount() {
      const queueCursor = this._queueCursor;
      let count = 0;
      if (queueCursor === 0) return this._last === 10 ? 1 : 0;
      for (let i = queueCursor - 1; i >= 0; i--) {
        if (this._queue[i].char !== 10) {
          break;
        }
        count++;
      }
      return count === queueCursor && this._last === 10 ? count + 1 : count;
    }
    endsWithCharAndNewline() {
      const queue = this._queue;
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0) {
        const lastCp = queue[queueCursor - 1].char;
        if (lastCp !== 10) return;
        if (queueCursor > 1) {
          return queue[queueCursor - 2].char;
        } else {
          return this._last;
        }
      }
    }
    hasContent() {
      return this._queueCursor !== 0 || !!this._last;
    }
    exactSource(loc, cb) {
      if (!this._map) {
        cb();
        return;
      }
      this.source("start", loc);
      const identifierName = loc.identifierName;
      const sourcePos = this._sourcePosition;
      if (identifierName) {
        this._canMarkIdName = false;
        sourcePos.identifierName = identifierName;
      }
      cb();
      if (identifierName) {
        this._canMarkIdName = true;
        sourcePos.identifierName = void 0;
        sourcePos.identifierNamePos = void 0;
      }
      this.source("end", loc);
    }
    source(prop, loc) {
      if (!this._map) return;
      this._normalizePosition(prop, loc, 0);
    }
    sourceWithOffset(prop, loc, columnOffset) {
      if (!this._map) return;
      this._normalizePosition(prop, loc, columnOffset);
    }
    _normalizePosition(prop, loc, columnOffset) {
      const pos = loc[prop];
      const target = this._sourcePosition;
      if (pos) {
        target.line = pos.line;
        target.column = Math.max(pos.column + columnOffset, 0);
        target.filename = loc.filename;
      }
    }
    getCurrentColumn() {
      const queue = this._queue;
      const queueCursor = this._queueCursor;
      let lastIndex = -1;
      let len = 0;
      for (let i = 0; i < queueCursor; i++) {
        const item2 = queue[i];
        if (item2.char === 10) {
          lastIndex = len;
        }
        len += item2.repeat;
      }
      return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;
    }
    getCurrentLine() {
      let count = 0;
      const queue = this._queue;
      for (let i = 0; i < this._queueCursor; i++) {
        if (queue[i].char === 10) {
          count++;
        }
      }
      return this._position.line + count;
    }
  }
  buffer.default = Buffer2;
  return buffer;
}
var node = {};
var whitespace = {};
var hasRequiredWhitespace;
function requireWhitespace() {
  if (hasRequiredWhitespace) return whitespace;
  hasRequiredWhitespace = 1;
  Object.defineProperty(whitespace, "__esModule", {
    value: true
  });
  whitespace.nodes = void 0;
  var _t2 = requireLib$b();
  const {
    FLIPPED_ALIAS_KEYS,
    isArrayExpression,
    isAssignmentExpression,
    isBinary,
    isBlockStatement,
    isCallExpression,
    isFunction,
    isIdentifier,
    isLiteral,
    isMemberExpression,
    isObjectExpression,
    isOptionalCallExpression,
    isOptionalMemberExpression,
    isStringLiteral
  } = _t2;
  function crawlInternal(node2, state) {
    if (!node2) return state;
    if (isMemberExpression(node2) || isOptionalMemberExpression(node2)) {
      crawlInternal(node2.object, state);
      if (node2.computed) crawlInternal(node2.property, state);
    } else if (isBinary(node2) || isAssignmentExpression(node2)) {
      crawlInternal(node2.left, state);
      crawlInternal(node2.right, state);
    } else if (isCallExpression(node2) || isOptionalCallExpression(node2)) {
      state.hasCall = true;
      crawlInternal(node2.callee, state);
    } else if (isFunction(node2)) {
      state.hasFunction = true;
    } else if (isIdentifier(node2)) {
      state.hasHelper = state.hasHelper || node2.callee && isHelper(node2.callee);
    }
    return state;
  }
  function crawl(node2) {
    return crawlInternal(node2, {
      hasCall: false,
      hasFunction: false,
      hasHelper: false
    });
  }
  function isHelper(node2) {
    if (!node2) return false;
    if (isMemberExpression(node2)) {
      return isHelper(node2.object) || isHelper(node2.property);
    } else if (isIdentifier(node2)) {
      return node2.name === "require" || node2.name.charCodeAt(0) === 95;
    } else if (isCallExpression(node2)) {
      return isHelper(node2.callee);
    } else if (isBinary(node2) || isAssignmentExpression(node2)) {
      return isIdentifier(node2.left) && isHelper(node2.left) || isHelper(node2.right);
    } else {
      return false;
    }
  }
  function isType2(node2) {
    return isLiteral(node2) || isObjectExpression(node2) || isArrayExpression(node2) || isIdentifier(node2) || isMemberExpression(node2);
  }
  const nodes = whitespace.nodes = {
    AssignmentExpression(node2) {
      const state = crawl(node2.right);
      if (state.hasCall && state.hasHelper || state.hasFunction) {
        return state.hasFunction ? 1 | 2 : 2;
      }
    },
    SwitchCase(node2, parent) {
      return (!!node2.consequent.length || parent.cases[0] === node2 ? 1 : 0) | (!node2.consequent.length && parent.cases[parent.cases.length - 1] === node2 ? 2 : 0);
    },
    LogicalExpression(node2) {
      if (isFunction(node2.left) || isFunction(node2.right)) {
        return 2;
      }
    },
    Literal(node2) {
      if (isStringLiteral(node2) && node2.value === "use strict") {
        return 2;
      }
    },
    CallExpression(node2) {
      if (isFunction(node2.callee) || isHelper(node2)) {
        return 1 | 2;
      }
    },
    OptionalCallExpression(node2) {
      if (isFunction(node2.callee)) {
        return 1 | 2;
      }
    },
    VariableDeclaration(node2) {
      for (let i = 0; i < node2.declarations.length; i++) {
        const declar = node2.declarations[i];
        let enabled = isHelper(declar.id) && !isType2(declar.init);
        if (!enabled && declar.init) {
          const state = crawl(declar.init);
          enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
        }
        if (enabled) {
          return 1 | 2;
        }
      }
    },
    IfStatement(node2) {
      if (isBlockStatement(node2.consequent)) {
        return 1 | 2;
      }
    }
  };
  nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node2, parent) {
    if (parent.properties[0] === node2) {
      return 1;
    }
  };
  nodes.ObjectTypeCallProperty = function(node2, parent) {
    var _parent$properties;
    if (parent.callProperties[0] === node2 && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {
      return 1;
    }
  };
  nodes.ObjectTypeIndexer = function(node2, parent) {
    var _parent$properties2, _parent$callPropertie;
    if (parent.indexers[0] === node2 && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {
      return 1;
    }
  };
  nodes.ObjectTypeInternalSlot = function(node2, parent) {
    var _parent$properties3, _parent$callPropertie2, _parent$indexers;
    if (parent.internalSlots[0] === node2 && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {
      return 1;
    }
  };
  [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
    [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
      const ret = amounts ? 1 | 2 : 0;
      nodes[type2] = () => ret;
    });
  });
  return whitespace;
}
var parentheses = {};
var hasRequiredParentheses;
function requireParentheses() {
  if (hasRequiredParentheses) return parentheses;
  hasRequiredParentheses = 1;
  Object.defineProperty(parentheses, "__esModule", {
    value: true
  });
  parentheses.AssignmentExpression = AssignmentExpression;
  parentheses.Binary = Binary;
  parentheses.BinaryExpression = BinaryExpression;
  parentheses.ClassExpression = ClassExpression;
  parentheses.ArrowFunctionExpression = parentheses.ConditionalExpression = ConditionalExpression;
  parentheses.DoExpression = DoExpression;
  parentheses.FunctionExpression = FunctionExpression;
  parentheses.FunctionTypeAnnotation = FunctionTypeAnnotation;
  parentheses.Identifier = Identifier;
  parentheses.LogicalExpression = LogicalExpression;
  parentheses.NullableTypeAnnotation = NullableTypeAnnotation;
  parentheses.ObjectExpression = ObjectExpression;
  parentheses.OptionalIndexedAccessType = OptionalIndexedAccessType;
  parentheses.OptionalCallExpression = parentheses.OptionalMemberExpression = OptionalMemberExpression;
  parentheses.SequenceExpression = SequenceExpression;
  parentheses.TSSatisfiesExpression = parentheses.TSAsExpression = TSAsExpression;
  parentheses.TSConditionalType = TSConditionalType;
  parentheses.TSConstructorType = parentheses.TSFunctionType = TSFunctionType;
  parentheses.TSInferType = TSInferType;
  parentheses.TSInstantiationExpression = TSInstantiationExpression;
  parentheses.TSIntersectionType = TSIntersectionType;
  parentheses.UnaryLike = parentheses.TSTypeAssertion = UnaryLike;
  parentheses.TSTypeOperator = TSTypeOperator;
  parentheses.TSUnionType = TSUnionType;
  parentheses.IntersectionTypeAnnotation = parentheses.UnionTypeAnnotation = UnionTypeAnnotation;
  parentheses.UpdateExpression = UpdateExpression;
  parentheses.AwaitExpression = parentheses.YieldExpression = YieldExpression;
  var _t2 = requireLib$b();
  var _index = requireNode();
  const {
    isArrayTypeAnnotation,
    isBinaryExpression,
    isCallExpression,
    isForOfStatement,
    isIndexedAccessType,
    isMemberExpression,
    isObjectPattern,
    isOptionalMemberExpression,
    isYieldExpression,
    isStatement
  } = _t2;
  const PRECEDENCE = /* @__PURE__ */ new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
  function getBinaryPrecedence(node2, nodeType) {
    if (nodeType === "BinaryExpression" || nodeType === "LogicalExpression") {
      return PRECEDENCE.get(node2.operator);
    }
    if (nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression") {
      return PRECEDENCE.get("in");
    }
  }
  function isTSTypeExpression(nodeType) {
    return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";
  }
  const isClassExtendsClause = (node2, parent) => {
    const parentType = parent.type;
    return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node2;
  };
  const hasPostfixPart = (node2, parent) => {
    const parentType = parent.type;
    return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node2 || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node2 || parentType === "TaggedTemplateExpression" && parent.tag === node2 || parentType === "TSNonNullExpression";
  };
  function NullableTypeAnnotation(node2, parent) {
    return isArrayTypeAnnotation(parent);
  }
  function FunctionTypeAnnotation(node2, parent, tokenContext) {
    const parentType = parent.type;
    return parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType);
  }
  function UpdateExpression(node2, parent) {
    return hasPostfixPart(node2, parent) || isClassExtendsClause(node2, parent);
  }
  function needsParenBeforeExpressionBrace(tokenContext) {
    return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));
  }
  function ObjectExpression(node2, parent, tokenContext) {
    return needsParenBeforeExpressionBrace(tokenContext);
  }
  function DoExpression(node2, parent, tokenContext) {
    return !node2.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);
  }
  function Binary(node2, parent) {
    const parentType = parent.type;
    if (node2.type === "BinaryExpression" && node2.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**") {
      return parent.left === node2;
    }
    if (isClassExtendsClause(node2, parent)) {
      return true;
    }
    if (hasPostfixPart(node2, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression") {
      return true;
    }
    const parentPos = getBinaryPrecedence(parent, parentType);
    if (parentPos != null) {
      const nodePos = getBinaryPrecedence(node2, node2.type);
      if (parentPos === nodePos && parentType === "BinaryExpression" && parent.right === node2 || parentPos > nodePos) {
        return true;
      }
    }
    return void 0;
  }
  function UnionTypeAnnotation(node2, parent) {
    const parentType = parent.type;
    return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";
  }
  function OptionalIndexedAccessType(node2, parent) {
    return isIndexedAccessType(parent) && parent.objectType === node2;
  }
  function TSAsExpression(node2, parent) {
    if ((parent.type === "AssignmentExpression" || parent.type === "AssignmentPattern") && parent.left === node2) {
      return true;
    }
    if (parent.type === "BinaryExpression" && (parent.operator === "|" || parent.operator === "&") && node2 === parent.left) {
      return true;
    }
    return Binary(node2, parent);
  }
  function TSConditionalType(node2, parent) {
    const parentType = parent.type;
    if (parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node2 || parentType === "TSOptionalType" || parentType === "TSTypeOperator" || parentType === "TSTypeParameter") {
      return true;
    }
    if ((parentType === "TSIntersectionType" || parentType === "TSUnionType") && parent.types[0] === node2) {
      return true;
    }
    if (parentType === "TSConditionalType" && (parent.checkType === node2 || parent.extendsType === node2)) {
      return true;
    }
    return false;
  }
  function TSUnionType(node2, parent) {
    const parentType = parent.type;
    return parentType === "TSIntersectionType" || parentType === "TSTypeOperator" || parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node2 || parentType === "TSOptionalType";
  }
  function TSIntersectionType(node2, parent) {
    const parentType = parent.type;
    return parentType === "TSTypeOperator" || parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node2 || parentType === "TSOptionalType";
  }
  function TSInferType(node2, parent) {
    const parentType = parent.type;
    if (parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node2 || parentType === "TSOptionalType") {
      return true;
    }
    if (node2.typeParameter.constraint) {
      if ((parentType === "TSIntersectionType" || parentType === "TSUnionType") && parent.types[0] === node2) {
        return true;
      }
    }
    return false;
  }
  function TSTypeOperator(node2, parent) {
    const parentType = parent.type;
    return parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node2 || parentType === "TSOptionalType";
  }
  function TSInstantiationExpression(node2, parent) {
    const parentType = parent.type;
    return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;
  }
  function TSFunctionType(node2, parent) {
    const parentType = parent.type;
    return parentType === "TSIntersectionType" || parentType === "TSUnionType" || parentType === "TSTypeOperator" || parentType === "TSOptionalType" || parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node2 || parentType === "TSConditionalType" && (parent.checkType === node2 || parent.extendsType === node2);
  }
  function BinaryExpression(node2, parent, tokenContext) {
    return node2.operator === "in" && Boolean(tokenContext & _index.TokenContext.forInOrInitHeadAccumulate);
  }
  function SequenceExpression(node2, parent) {
    const parentType = parent.type;
    if (parentType === "SequenceExpression" || parentType === "ParenthesizedExpression" || parentType === "MemberExpression" && parent.property === node2 || parentType === "OptionalMemberExpression" && parent.property === node2 || parentType === "TemplateLiteral") {
      return false;
    }
    if (parentType === "ClassDeclaration") {
      return true;
    }
    if (parentType === "ForOfStatement") {
      return parent.right === node2;
    }
    if (parentType === "ExportDefaultDeclaration") {
      return true;
    }
    return !isStatement(parent);
  }
  function YieldExpression(node2, parent) {
    const parentType = parent.type;
    return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node2, parent) || parentType === "AwaitExpression" && isYieldExpression(node2) || parentType === "ConditionalExpression" && node2 === parent.test || isClassExtendsClause(node2, parent) || isTSTypeExpression(parentType);
  }
  function ClassExpression(node2, parent, tokenContext) {
    return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
  }
  function UnaryLike(node2, parent) {
    return hasPostfixPart(node2, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node2 || isClassExtendsClause(node2, parent);
  }
  function FunctionExpression(node2, parent, tokenContext) {
    return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
  }
  function ConditionalExpression(node2, parent) {
    const parentType = parent.type;
    if (parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node2 || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) {
      return true;
    }
    return UnaryLike(node2, parent);
  }
  function OptionalMemberExpression(node2, parent) {
    return isCallExpression(parent) && parent.callee === node2 || isMemberExpression(parent) && parent.object === node2;
  }
  function AssignmentExpression(node2, parent, tokenContext) {
    if (needsParenBeforeExpressionBrace(tokenContext) && isObjectPattern(node2.left)) {
      return true;
    } else {
      return ConditionalExpression(node2, parent);
    }
  }
  function LogicalExpression(node2, parent) {
    const parentType = parent.type;
    if (isTSTypeExpression(parentType)) return true;
    if (parentType !== "LogicalExpression") return false;
    switch (node2.operator) {
      case "||":
        return parent.operator === "??" || parent.operator === "&&";
      case "&&":
        return parent.operator === "??";
      case "??":
        return parent.operator !== "??";
    }
  }
  function Identifier(node2, parent, tokenContext, getRawIdentifier) {
    var _node$extra;
    const parentType = parent.type;
    if ((_node$extra = node2.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node2) {
      const rightType = parent.right.type;
      if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null) {
        return true;
      }
    }
    if (getRawIdentifier && getRawIdentifier(node2) !== node2.name) {
      return false;
    }
    if (node2.name === "let") {
      const isFollowedByBracket = isMemberExpression(parent, {
        object: node2,
        computed: true
      }) || isOptionalMemberExpression(parent, {
        object: node2,
        computed: true,
        optional: false
      });
      if (isFollowedByBracket && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forInitHead | _index.TokenContext.forInHead)) {
        return true;
      }
      return Boolean(tokenContext & _index.TokenContext.forOfHead);
    }
    return node2.name === "async" && isForOfStatement(parent, {
      left: node2,
      await: false
    });
  }
  return parentheses;
}
var hasRequiredNode;
function requireNode() {
  if (hasRequiredNode) return node;
  hasRequiredNode = 1;
  Object.defineProperty(node, "__esModule", {
    value: true
  });
  node.TokenContext = void 0;
  node.isLastChild = isLastChild;
  node.needsParens = needsParens;
  node.needsWhitespace = needsWhitespace;
  node.needsWhitespaceAfter = needsWhitespaceAfter;
  node.needsWhitespaceBefore = needsWhitespaceBefore;
  var whitespace2 = requireWhitespace();
  var parens = requireParentheses();
  var _t2 = requireLib$b();
  const {
    FLIPPED_ALIAS_KEYS,
    VISITOR_KEYS,
    isCallExpression,
    isDecorator,
    isExpressionStatement,
    isMemberExpression,
    isNewExpression,
    isParenthesizedExpression
  } = _t2;
  node.TokenContext = {
    normal: 0,
    expressionStatement: 1,
    arrowBody: 2,
    exportDefault: 4,
    arrowFlowReturnType: 8,
    forInitHead: 16,
    forInHead: 32,
    forOfHead: 64,
    forInOrInitHeadAccumulate: 128,
    forInOrInitHeadAccumulatePassThroughMask: 128
  };
  function expandAliases(obj) {
    const map = /* @__PURE__ */ new Map();
    function add(type, func) {
      const fn2 = map.get(type);
      map.set(type, fn2 ? function(node2, parent, stack, getRawIdentifier) {
        var _fn;
        return (_fn = fn2(node2, parent, stack, getRawIdentifier)) != null ? _fn : func(node2, parent, stack, getRawIdentifier);
      } : func);
    }
    for (const type of Object.keys(obj)) {
      const aliases = FLIPPED_ALIAS_KEYS[type];
      if (aliases) {
        for (const alias of aliases) {
          add(alias, obj[type]);
        }
      } else {
        add(type, obj[type]);
      }
    }
    return map;
  }
  const expandedParens = expandAliases(parens);
  const expandedWhitespaceNodes = expandAliases(whitespace2.nodes);
  function isOrHasCallExpression(node2) {
    if (isCallExpression(node2)) {
      return true;
    }
    return isMemberExpression(node2) && isOrHasCallExpression(node2.object);
  }
  function needsWhitespace(node2, parent, type) {
    var _expandedWhitespaceNo;
    if (!node2) return false;
    if (isExpressionStatement(node2)) {
      node2 = node2.expression;
    }
    const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node2.type)) == null ? void 0 : _expandedWhitespaceNo(node2, parent);
    if (typeof flag === "number") {
      return (flag & type) !== 0;
    }
    return false;
  }
  function needsWhitespaceBefore(node2, parent) {
    return needsWhitespace(node2, parent, 1);
  }
  function needsWhitespaceAfter(node2, parent) {
    return needsWhitespace(node2, parent, 2);
  }
  function needsParens(node2, parent, tokenContext, getRawIdentifier) {
    var _expandedParens$get;
    if (!parent) return false;
    if (isNewExpression(parent) && parent.callee === node2) {
      if (isOrHasCallExpression(node2)) return true;
    }
    if (isDecorator(parent)) {
      return !isDecoratorMemberExpression(node2) && !(isCallExpression(node2) && isDecoratorMemberExpression(node2.callee)) && !isParenthesizedExpression(node2);
    }
    return (_expandedParens$get = expandedParens.get(node2.type)) == null ? void 0 : _expandedParens$get(node2, parent, tokenContext, getRawIdentifier);
  }
  function isDecoratorMemberExpression(node2) {
    switch (node2.type) {
      case "Identifier":
        return true;
      case "MemberExpression":
        return !node2.computed && node2.property.type === "Identifier" && isDecoratorMemberExpression(node2.object);
      default:
        return false;
    }
  }
  function isLastChild(parent, child) {
    const visitorKeys = VISITOR_KEYS[parent.type];
    for (let i = visitorKeys.length - 1; i >= 0; i--) {
      const val = parent[visitorKeys[i]];
      if (val === child) {
        return true;
      } else if (Array.isArray(val)) {
        let j = val.length - 1;
        while (j >= 0 && val[j] === null) j--;
        return j >= 0 && val[j] === child;
      } else if (val) {
        return false;
      }
    }
    return false;
  }
  return node;
}
var tokenMap = {};
var hasRequiredTokenMap;
function requireTokenMap() {
  if (hasRequiredTokenMap) return tokenMap;
  hasRequiredTokenMap = 1;
  Object.defineProperty(tokenMap, "__esModule", {
    value: true
  });
  tokenMap.TokenMap = void 0;
  var _t2 = requireLib$b();
  const {
    traverseFast: traverseFast2,
    VISITOR_KEYS
  } = _t2;
  class TokenMap {
    constructor(ast, tokens, source) {
      this._tokens = void 0;
      this._source = void 0;
      this._nodesToTokenIndexes = /* @__PURE__ */ new Map();
      this._nodesOccurrencesCountCache = /* @__PURE__ */ new Map();
      this._tokensCache = /* @__PURE__ */ new Map();
      this._tokens = tokens;
      this._source = source;
      traverseFast2(ast, (node2) => {
        const indexes = this._getTokensIndexesOfNode(node2);
        if (indexes.length > 0) this._nodesToTokenIndexes.set(node2, indexes);
      });
      this._tokensCache = null;
    }
    has(node2) {
      return this._nodesToTokenIndexes.has(node2);
    }
    getIndexes(node2) {
      return this._nodesToTokenIndexes.get(node2);
    }
    find(node2, condition) {
      const indexes = this._nodesToTokenIndexes.get(node2);
      if (indexes) {
        for (let k2 = 0; k2 < indexes.length; k2++) {
          const index = indexes[k2];
          const tok = this._tokens[index];
          if (condition(tok, index)) return tok;
        }
      }
      return null;
    }
    findLastIndex(node2, condition) {
      const indexes = this._nodesToTokenIndexes.get(node2);
      if (indexes) {
        for (let k2 = indexes.length - 1; k2 >= 0; k2--) {
          const index = indexes[k2];
          const tok = this._tokens[index];
          if (condition(tok, index)) return index;
        }
      }
      return -1;
    }
    findMatching(node2, test, occurrenceCount = 0) {
      const indexes = this._nodesToTokenIndexes.get(node2);
      if (indexes) {
        let i = 0;
        const count = occurrenceCount;
        if (count > 1) {
          const cache2 = this._nodesOccurrencesCountCache.get(node2);
          if (cache2 && cache2.test === test && cache2.count < count) {
            i = cache2.i + 1;
            occurrenceCount -= cache2.count + 1;
          }
        }
        for (; i < indexes.length; i++) {
          const tok = this._tokens[indexes[i]];
          if (this.matchesOriginal(tok, test)) {
            if (occurrenceCount === 0) {
              if (count > 0) {
                this._nodesOccurrencesCountCache.set(node2, {
                  test,
                  count,
                  i
                });
              }
              return tok;
            }
            occurrenceCount--;
          }
        }
      }
      return null;
    }
    matchesOriginal(token, test) {
      if (token.end - token.start !== test.length) return false;
      if (token.value != null) return token.value === test;
      return this._source.startsWith(test, token.start);
    }
    startMatches(node2, test) {
      const indexes = this._nodesToTokenIndexes.get(node2);
      if (!indexes) return false;
      const tok = this._tokens[indexes[0]];
      if (tok.start !== node2.start) return false;
      return this.matchesOriginal(tok, test);
    }
    endMatches(node2, test) {
      const indexes = this._nodesToTokenIndexes.get(node2);
      if (!indexes) return false;
      const tok = this._tokens[indexes[indexes.length - 1]];
      if (tok.end !== node2.end) return false;
      return this.matchesOriginal(tok, test);
    }
    _getTokensIndexesOfNode(node2) {
      if (node2.start == null || node2.end == null) return [];
      const {
        first,
        last
      } = this._findTokensOfNode(node2, 0, this._tokens.length - 1);
      let low = first;
      const children = childrenIterator(node2);
      if ((node2.type === "ExportNamedDeclaration" || node2.type === "ExportDefaultDeclaration") && node2.declaration && node2.declaration.type === "ClassDeclaration") {
        children.next();
      }
      const indexes = [];
      for (const child of children) {
        if (child == null) continue;
        if (child.start == null || child.end == null) continue;
        const childTok = this._findTokensOfNode(child, low, last);
        const high = childTok.first;
        for (let k2 = low; k2 < high; k2++) indexes.push(k2);
        low = childTok.last + 1;
      }
      for (let k2 = low; k2 <= last; k2++) indexes.push(k2);
      return indexes;
    }
    _findTokensOfNode(node2, low, high) {
      const cached = this._tokensCache.get(node2);
      if (cached) return cached;
      const first = this._findFirstTokenOfNode(node2.start, low, high);
      const last = this._findLastTokenOfNode(node2.end, first, high);
      this._tokensCache.set(node2, {
        first,
        last
      });
      return {
        first,
        last
      };
    }
    _findFirstTokenOfNode(start, low, high) {
      while (low <= high) {
        const mid = high + low >> 1;
        if (start < this._tokens[mid].start) {
          high = mid - 1;
        } else if (start > this._tokens[mid].start) {
          low = mid + 1;
        } else {
          return mid;
        }
      }
      return low;
    }
    _findLastTokenOfNode(end, low, high) {
      while (low <= high) {
        const mid = high + low >> 1;
        if (end < this._tokens[mid].end) {
          high = mid - 1;
        } else if (end > this._tokens[mid].end) {
          low = mid + 1;
        } else {
          return mid;
        }
      }
      return high;
    }
  }
  tokenMap.TokenMap = TokenMap;
  function* childrenIterator(node2) {
    if (node2.type === "TemplateLiteral") {
      yield node2.quasis[0];
      for (let i = 1; i < node2.quasis.length; i++) {
        yield node2.expressions[i - 1];
        yield node2.quasis[i];
      }
      return;
    }
    const keys = VISITOR_KEYS[node2.type];
    for (const key of keys) {
      const child = node2[key];
      if (!child) continue;
      if (Array.isArray(child)) {
        yield* child;
      } else {
        yield child;
      }
    }
  }
  return tokenMap;
}
var generators = {};
var templateLiterals = {};
var hasRequiredTemplateLiterals;
function requireTemplateLiterals() {
  if (hasRequiredTemplateLiterals) return templateLiterals;
  hasRequiredTemplateLiterals = 1;
  Object.defineProperty(templateLiterals, "__esModule", {
    value: true
  });
  templateLiterals.TaggedTemplateExpression = TaggedTemplateExpression;
  templateLiterals.TemplateElement = TemplateElement;
  templateLiterals.TemplateLiteral = TemplateLiteral;
  templateLiterals._printTemplate = _printTemplate;
  function TaggedTemplateExpression(node2) {
    this.print(node2.tag);
    {
      this.print(node2.typeParameters);
    }
    this.print(node2.quasi);
  }
  function TemplateElement() {
    throw new Error("TemplateElement printing is handled in TemplateLiteral");
  }
  function _printTemplate(node2, substitutions) {
    const quasis = node2.quasis;
    let partRaw = "`";
    for (let i = 0; i < quasis.length - 1; i++) {
      partRaw += quasis[i].value.raw;
      this.token(partRaw + "${", true);
      this.print(substitutions[i]);
      partRaw = "}";
      if (this.tokenMap) {
        const token = this.tokenMap.findMatching(node2, "}", i);
        if (token) this._catchUpTo(token.loc.start);
      }
    }
    partRaw += quasis[quasis.length - 1].value.raw;
    this.token(partRaw + "`", true);
  }
  function TemplateLiteral(node2) {
    this._printTemplate(node2, node2.expressions);
  }
  return templateLiterals;
}
var expressions = {};
var hasRequiredExpressions;
function requireExpressions() {
  if (hasRequiredExpressions) return expressions;
  hasRequiredExpressions = 1;
  Object.defineProperty(expressions, "__esModule", {
    value: true
  });
  expressions.LogicalExpression = expressions.BinaryExpression = expressions.AssignmentExpression = AssignmentExpression;
  expressions.AssignmentPattern = AssignmentPattern;
  expressions.AwaitExpression = AwaitExpression;
  expressions.BindExpression = BindExpression;
  expressions.CallExpression = CallExpression;
  expressions.ConditionalExpression = ConditionalExpression;
  expressions.Decorator = Decorator;
  expressions.DoExpression = DoExpression;
  expressions.EmptyStatement = EmptyStatement;
  expressions.ExpressionStatement = ExpressionStatement;
  expressions.Import = Import;
  expressions.MemberExpression = MemberExpression;
  expressions.MetaProperty = MetaProperty;
  expressions.ModuleExpression = ModuleExpression;
  expressions.NewExpression = NewExpression;
  expressions.OptionalCallExpression = OptionalCallExpression;
  expressions.OptionalMemberExpression = OptionalMemberExpression;
  expressions.ParenthesizedExpression = ParenthesizedExpression;
  expressions.PrivateName = PrivateName;
  expressions.SequenceExpression = SequenceExpression;
  expressions.Super = Super;
  expressions.ThisExpression = ThisExpression;
  expressions.UnaryExpression = UnaryExpression;
  expressions.UpdateExpression = UpdateExpression;
  expressions.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
  expressions.YieldExpression = YieldExpression;
  expressions._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;
  var _t2 = requireLib$b();
  var _index = requireNode();
  const {
    isCallExpression,
    isLiteral,
    isMemberExpression,
    isNewExpression,
    isPattern
  } = _t2;
  function UnaryExpression(node2) {
    const {
      operator
    } = node2;
    if (operator === "void" || operator === "delete" || operator === "typeof" || operator === "throw") {
      this.word(operator);
      this.space();
    } else {
      this.token(operator);
    }
    this.print(node2.argument);
  }
  function DoExpression(node2) {
    if (node2.async) {
      this.word("async", true);
      this.space();
    }
    this.word("do");
    this.space();
    this.print(node2.body);
  }
  function ParenthesizedExpression(node2) {
    this.tokenChar(40);
    const exit = this.enterDelimited();
    this.print(node2.expression);
    exit();
    this.rightParens(node2);
  }
  function UpdateExpression(node2) {
    if (node2.prefix) {
      this.token(node2.operator);
      this.print(node2.argument);
    } else {
      this.print(node2.argument, true);
      this.token(node2.operator);
    }
  }
  function ConditionalExpression(node2) {
    this.print(node2.test);
    this.space();
    this.tokenChar(63);
    this.space();
    this.print(node2.consequent);
    this.space();
    this.tokenChar(58);
    this.space();
    this.print(node2.alternate);
  }
  function NewExpression(node2, parent) {
    this.word("new");
    this.space();
    this.print(node2.callee);
    if (this.format.minified && node2.arguments.length === 0 && !node2.optional && !isCallExpression(parent, {
      callee: node2
    }) && !isMemberExpression(parent) && !isNewExpression(parent)) {
      return;
    }
    this.print(node2.typeArguments);
    {
      this.print(node2.typeParameters);
    }
    if (node2.optional) {
      this.token("?.");
    }
    if (node2.arguments.length === 0 && this.tokenMap && !this.tokenMap.endMatches(node2, ")")) {
      return;
    }
    this.tokenChar(40);
    const exit = this.enterDelimited();
    this.printList(node2.arguments, this.shouldPrintTrailingComma(")"));
    exit();
    this.rightParens(node2);
  }
  function SequenceExpression(node2) {
    this.printList(node2.expressions);
  }
  function ThisExpression() {
    this.word("this");
  }
  function Super() {
    this.word("super");
  }
  function _shouldPrintDecoratorsBeforeExport(node2) {
    if (typeof this.format.decoratorsBeforeExport === "boolean") {
      return this.format.decoratorsBeforeExport;
    }
    return typeof node2.start === "number" && node2.start === node2.declaration.start;
  }
  function Decorator(node2) {
    this.tokenChar(64);
    this.print(node2.expression);
    this.newline();
  }
  function OptionalMemberExpression(node2) {
    let {
      computed
    } = node2;
    const {
      optional,
      property
    } = node2;
    this.print(node2.object);
    if (!computed && isMemberExpression(property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    if (isLiteral(property) && typeof property.value === "number") {
      computed = true;
    }
    if (optional) {
      this.token("?.");
    }
    if (computed) {
      this.tokenChar(91);
      this.print(property);
      this.tokenChar(93);
    } else {
      if (!optional) {
        this.tokenChar(46);
      }
      this.print(property);
    }
  }
  function OptionalCallExpression(node2) {
    this.print(node2.callee);
    {
      this.print(node2.typeParameters);
    }
    if (node2.optional) {
      this.token("?.");
    }
    this.print(node2.typeArguments);
    this.tokenChar(40);
    const exit = this.enterDelimited();
    this.printList(node2.arguments);
    exit();
    this.rightParens(node2);
  }
  function CallExpression(node2) {
    this.print(node2.callee);
    this.print(node2.typeArguments);
    {
      this.print(node2.typeParameters);
    }
    this.tokenChar(40);
    const exit = this.enterDelimited();
    this.printList(node2.arguments, this.shouldPrintTrailingComma(")"));
    exit();
    this.rightParens(node2);
  }
  function Import() {
    this.word("import");
  }
  function AwaitExpression(node2) {
    this.word("await");
    this.space();
    this.print(node2.argument);
  }
  function YieldExpression(node2) {
    if (node2.delegate) {
      this.word("yield", true);
      this.tokenChar(42);
      if (node2.argument) {
        this.space();
        this.print(node2.argument);
      }
    } else if (node2.argument) {
      this.word("yield", true);
      this.space();
      this.print(node2.argument);
    } else {
      this.word("yield");
    }
  }
  function EmptyStatement() {
    this.semicolon(true);
  }
  function ExpressionStatement(node2) {
    this.tokenContext |= _index.TokenContext.expressionStatement;
    this.print(node2.expression);
    this.semicolon();
  }
  function AssignmentPattern(node2) {
    this.print(node2.left);
    if (node2.left.type === "Identifier" || isPattern(node2.left)) {
      if (node2.left.optional) this.tokenChar(63);
      this.print(node2.left.typeAnnotation);
    }
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node2.right);
  }
  function AssignmentExpression(node2) {
    this.print(node2.left);
    this.space();
    if (node2.operator === "in" || node2.operator === "instanceof") {
      this.word(node2.operator);
    } else {
      this.token(node2.operator);
      this._endsWithDiv = node2.operator === "/";
    }
    this.space();
    this.print(node2.right);
  }
  function BindExpression(node2) {
    this.print(node2.object);
    this.token("::");
    this.print(node2.callee);
  }
  function MemberExpression(node2) {
    this.print(node2.object);
    if (!node2.computed && isMemberExpression(node2.property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    let computed = node2.computed;
    if (isLiteral(node2.property) && typeof node2.property.value === "number") {
      computed = true;
    }
    if (computed) {
      const exit = this.enterDelimited();
      this.tokenChar(91);
      this.print(node2.property);
      this.tokenChar(93);
      exit();
    } else {
      this.tokenChar(46);
      this.print(node2.property);
    }
  }
  function MetaProperty(node2) {
    this.print(node2.meta);
    this.tokenChar(46);
    this.print(node2.property);
  }
  function PrivateName(node2) {
    this.tokenChar(35);
    this.print(node2.id);
  }
  function V8IntrinsicIdentifier(node2) {
    this.tokenChar(37);
    this.word(node2.name);
  }
  function ModuleExpression(node2) {
    this.word("module", true);
    this.space();
    this.tokenChar(123);
    this.indent();
    const {
      body
    } = node2;
    if (body.body.length || body.directives.length) {
      this.newline();
    }
    this.print(body);
    this.dedent();
    this.rightBrace(node2);
  }
  return expressions;
}
var statements = {};
var hasRequiredStatements;
function requireStatements() {
  if (hasRequiredStatements) return statements;
  hasRequiredStatements = 1;
  Object.defineProperty(statements, "__esModule", {
    value: true
  });
  statements.BreakStatement = BreakStatement;
  statements.CatchClause = CatchClause;
  statements.ContinueStatement = ContinueStatement;
  statements.DebuggerStatement = DebuggerStatement;
  statements.DoWhileStatement = DoWhileStatement;
  statements.ForOfStatement = statements.ForInStatement = void 0;
  statements.ForStatement = ForStatement;
  statements.IfStatement = IfStatement;
  statements.LabeledStatement = LabeledStatement;
  statements.ReturnStatement = ReturnStatement;
  statements.SwitchCase = SwitchCase;
  statements.SwitchStatement = SwitchStatement;
  statements.ThrowStatement = ThrowStatement;
  statements.TryStatement = TryStatement;
  statements.VariableDeclaration = VariableDeclaration;
  statements.VariableDeclarator = VariableDeclarator;
  statements.WhileStatement = WhileStatement;
  statements.WithStatement = WithStatement;
  var _t2 = requireLib$b();
  const {
    isFor,
    isForStatement,
    isIfStatement,
    isStatement
  } = _t2;
  function WithStatement(node2) {
    this.word("with");
    this.space();
    this.tokenChar(40);
    this.print(node2.object);
    this.tokenChar(41);
    this.printBlock(node2);
  }
  function IfStatement(node2) {
    this.word("if");
    this.space();
    this.tokenChar(40);
    this.print(node2.test);
    this.tokenChar(41);
    this.space();
    const needsBlock = node2.alternate && isIfStatement(getLastStatement(node2.consequent));
    if (needsBlock) {
      this.tokenChar(123);
      this.newline();
      this.indent();
    }
    this.printAndIndentOnComments(node2.consequent);
    if (needsBlock) {
      this.dedent();
      this.newline();
      this.tokenChar(125);
    }
    if (node2.alternate) {
      if (this.endsWith(125)) this.space();
      this.word("else");
      this.space();
      this.printAndIndentOnComments(node2.alternate);
    }
  }
  function getLastStatement(statement) {
    const {
      body
    } = statement;
    if (isStatement(body) === false) {
      return statement;
    }
    return getLastStatement(body);
  }
  function ForStatement(node2) {
    this.word("for");
    this.space();
    this.tokenChar(40);
    {
      const exit = this.enterForStatementInit();
      this.print(node2.init);
      exit();
    }
    this.tokenChar(59);
    if (node2.test) {
      this.space();
      this.print(node2.test);
    }
    this.token(";", false, 1);
    if (node2.update) {
      this.space();
      this.print(node2.update);
    }
    this.tokenChar(41);
    this.printBlock(node2);
  }
  function WhileStatement(node2) {
    this.word("while");
    this.space();
    this.tokenChar(40);
    this.print(node2.test);
    this.tokenChar(41);
    this.printBlock(node2);
  }
  function ForXStatement(node2) {
    this.word("for");
    this.space();
    const isForOf = node2.type === "ForOfStatement";
    if (isForOf && node2.await) {
      this.word("await");
      this.space();
    }
    this.noIndentInnerCommentsHere();
    this.tokenChar(40);
    {
      const exit = this.enterForXStatementInit(isForOf);
      this.print(node2.left);
      exit == null || exit();
    }
    this.space();
    this.word(isForOf ? "of" : "in");
    this.space();
    this.print(node2.right);
    this.tokenChar(41);
    this.printBlock(node2);
  }
  statements.ForInStatement = ForXStatement;
  statements.ForOfStatement = ForXStatement;
  function DoWhileStatement(node2) {
    this.word("do");
    this.space();
    this.print(node2.body);
    this.space();
    this.word("while");
    this.space();
    this.tokenChar(40);
    this.print(node2.test);
    this.tokenChar(41);
    this.semicolon();
  }
  function printStatementAfterKeyword(printer2, node2) {
    if (node2) {
      printer2.space();
      printer2.printTerminatorless(node2);
    }
    printer2.semicolon();
  }
  function BreakStatement(node2) {
    this.word("break");
    printStatementAfterKeyword(this, node2.label);
  }
  function ContinueStatement(node2) {
    this.word("continue");
    printStatementAfterKeyword(this, node2.label);
  }
  function ReturnStatement(node2) {
    this.word("return");
    printStatementAfterKeyword(this, node2.argument);
  }
  function ThrowStatement(node2) {
    this.word("throw");
    printStatementAfterKeyword(this, node2.argument);
  }
  function LabeledStatement(node2) {
    this.print(node2.label);
    this.tokenChar(58);
    this.space();
    this.print(node2.body);
  }
  function TryStatement(node2) {
    this.word("try");
    this.space();
    this.print(node2.block);
    this.space();
    if (node2.handlers) {
      this.print(node2.handlers[0]);
    } else {
      this.print(node2.handler);
    }
    if (node2.finalizer) {
      this.space();
      this.word("finally");
      this.space();
      this.print(node2.finalizer);
    }
  }
  function CatchClause(node2) {
    this.word("catch");
    this.space();
    if (node2.param) {
      this.tokenChar(40);
      this.print(node2.param);
      this.print(node2.param.typeAnnotation);
      this.tokenChar(41);
      this.space();
    }
    this.print(node2.body);
  }
  function SwitchStatement(node2) {
    this.word("switch");
    this.space();
    this.tokenChar(40);
    this.print(node2.discriminant);
    this.tokenChar(41);
    this.space();
    this.tokenChar(123);
    this.printSequence(node2.cases, true, void 0, function addNewlines(leading, cas) {
      if (!leading && node2.cases[node2.cases.length - 1] === cas) return -1;
    });
    this.rightBrace(node2);
  }
  function SwitchCase(node2) {
    if (node2.test) {
      this.word("case");
      this.space();
      this.print(node2.test);
      this.tokenChar(58);
    } else {
      this.word("default");
      this.tokenChar(58);
    }
    if (node2.consequent.length) {
      this.newline();
      this.printSequence(node2.consequent, true);
    }
  }
  function DebuggerStatement() {
    this.word("debugger");
    this.semicolon();
  }
  function VariableDeclaration(node2, parent) {
    if (node2.declare) {
      this.word("declare");
      this.space();
    }
    const {
      kind
    } = node2;
    if (kind === "await using") {
      this.word("await");
      this.space();
      this.word("using", true);
    } else {
      this.word(kind, kind === "using");
    }
    this.space();
    let hasInits = false;
    if (!isFor(parent)) {
      for (const declar of node2.declarations) {
        if (declar.init) {
          hasInits = true;
        }
      }
    }
    this.printList(node2.declarations, void 0, void 0, node2.declarations.length > 1, hasInits ? function(occurrenceCount) {
      this.token(",", false, occurrenceCount);
      this.newline();
    } : void 0);
    if (isFor(parent)) {
      if (isForStatement(parent)) {
        if (parent.init === node2) return;
      } else {
        if (parent.left === node2) return;
      }
    }
    this.semicolon();
  }
  function VariableDeclarator(node2) {
    this.print(node2.id);
    if (node2.definite) this.tokenChar(33);
    this.print(node2.id.typeAnnotation);
    if (node2.init) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.init);
    }
  }
  return statements;
}
var classes = {};
var hasRequiredClasses;
function requireClasses() {
  if (hasRequiredClasses) return classes;
  hasRequiredClasses = 1;
  Object.defineProperty(classes, "__esModule", {
    value: true
  });
  classes.ClassAccessorProperty = ClassAccessorProperty;
  classes.ClassBody = ClassBody;
  classes.ClassExpression = classes.ClassDeclaration = ClassDeclaration;
  classes.ClassMethod = ClassMethod;
  classes.ClassPrivateMethod = ClassPrivateMethod;
  classes.ClassPrivateProperty = ClassPrivateProperty;
  classes.ClassProperty = ClassProperty;
  classes.StaticBlock = StaticBlock;
  classes._classMethodHead = _classMethodHead;
  var _t2 = requireLib$b();
  const {
    isExportDefaultDeclaration,
    isExportNamedDeclaration
  } = _t2;
  function ClassDeclaration(node2, parent) {
    const inExport = isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);
    if (!inExport || !this._shouldPrintDecoratorsBeforeExport(parent)) {
      this.printJoin(node2.decorators);
    }
    if (node2.declare) {
      this.word("declare");
      this.space();
    }
    if (node2.abstract) {
      this.word("abstract");
      this.space();
    }
    this.word("class");
    if (node2.id) {
      this.space();
      this.print(node2.id);
    }
    this.print(node2.typeParameters);
    if (node2.superClass) {
      this.space();
      this.word("extends");
      this.space();
      this.print(node2.superClass);
      this.print(node2.superTypeParameters);
    }
    if (node2.implements) {
      this.space();
      this.word("implements");
      this.space();
      this.printList(node2.implements);
    }
    this.space();
    this.print(node2.body);
  }
  function ClassBody(node2) {
    this.tokenChar(123);
    if (node2.body.length === 0) {
      this.tokenChar(125);
    } else {
      this.newline();
      const separator = classBodyEmptySemicolonsPrinter(this, node2);
      separator == null || separator(-1);
      const exit = this.enterDelimited();
      this.printJoin(node2.body, true, true, separator, true);
      exit();
      if (!this.endsWith(10)) this.newline();
      this.rightBrace(node2);
    }
  }
  function classBodyEmptySemicolonsPrinter(printer2, node2) {
    if (!printer2.tokenMap || node2.start == null || node2.end == null) {
      return null;
    }
    const indexes = printer2.tokenMap.getIndexes(node2);
    if (!indexes) return null;
    let k2 = 1;
    let occurrenceCount = 0;
    let nextLocIndex = 0;
    const advanceNextLocIndex = () => {
      while (nextLocIndex < node2.body.length && node2.body[nextLocIndex].start == null) {
        nextLocIndex++;
      }
    };
    advanceNextLocIndex();
    return (i) => {
      if (nextLocIndex <= i) {
        nextLocIndex = i + 1;
        advanceNextLocIndex();
      }
      const end = nextLocIndex === node2.body.length ? node2.end : node2.body[nextLocIndex].start;
      let tok;
      while (k2 < indexes.length && printer2.tokenMap.matchesOriginal(tok = printer2._tokens[indexes[k2]], ";") && tok.start < end) {
        printer2.token(";", void 0, occurrenceCount++);
        k2++;
      }
    };
  }
  function ClassProperty(node2) {
    this.printJoin(node2.decorators);
    if (!node2.static && !this.format.preserveFormat) {
      var _node$key$loc;
      const endLine = (_node$key$loc = node2.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? void 0 : _node$key$loc.line;
      if (endLine) this.catchUp(endLine);
    }
    this.tsPrintClassMemberModifiers(node2);
    if (node2.computed) {
      this.tokenChar(91);
      this.print(node2.key);
      this.tokenChar(93);
    } else {
      this._variance(node2);
      this.print(node2.key);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
    if (node2.definite) {
      this.tokenChar(33);
    }
    this.print(node2.typeAnnotation);
    if (node2.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.value);
    }
    this.semicolon();
  }
  function ClassAccessorProperty(node2) {
    var _node$key$loc2;
    this.printJoin(node2.decorators);
    const endLine = (_node$key$loc2 = node2.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? void 0 : _node$key$loc2.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node2);
    this.word("accessor", true);
    this.space();
    if (node2.computed) {
      this.tokenChar(91);
      this.print(node2.key);
      this.tokenChar(93);
    } else {
      this._variance(node2);
      this.print(node2.key);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
    if (node2.definite) {
      this.tokenChar(33);
    }
    this.print(node2.typeAnnotation);
    if (node2.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.value);
    }
    this.semicolon();
  }
  function ClassPrivateProperty(node2) {
    this.printJoin(node2.decorators);
    this.tsPrintClassMemberModifiers(node2);
    this.print(node2.key);
    if (node2.optional) {
      this.tokenChar(63);
    }
    if (node2.definite) {
      this.tokenChar(33);
    }
    this.print(node2.typeAnnotation);
    if (node2.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.value);
    }
    this.semicolon();
  }
  function ClassMethod(node2) {
    this._classMethodHead(node2);
    this.space();
    this.print(node2.body);
  }
  function ClassPrivateMethod(node2) {
    this._classMethodHead(node2);
    this.space();
    this.print(node2.body);
  }
  function _classMethodHead(node2) {
    this.printJoin(node2.decorators);
    if (!this.format.preserveFormat) {
      var _node$key$loc3;
      const endLine = (_node$key$loc3 = node2.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? void 0 : _node$key$loc3.line;
      if (endLine) this.catchUp(endLine);
    }
    this.tsPrintClassMemberModifiers(node2);
    this._methodHead(node2);
  }
  function StaticBlock(node2) {
    this.word("static");
    this.space();
    this.tokenChar(123);
    if (node2.body.length === 0) {
      this.tokenChar(125);
    } else {
      this.newline();
      this.printSequence(node2.body, true);
      this.rightBrace(node2);
    }
  }
  return classes;
}
var methods = {};
var hasRequiredMethods;
function requireMethods() {
  if (hasRequiredMethods) return methods;
  hasRequiredMethods = 1;
  Object.defineProperty(methods, "__esModule", {
    value: true
  });
  methods.ArrowFunctionExpression = ArrowFunctionExpression;
  methods.FunctionDeclaration = methods.FunctionExpression = FunctionExpression;
  methods._functionHead = _functionHead;
  methods._methodHead = _methodHead;
  methods._param = _param;
  methods._parameters = _parameters;
  methods._params = _params;
  methods._predicate = _predicate;
  methods._shouldPrintArrowParamsParens = _shouldPrintArrowParamsParens;
  var _t2 = requireLib$b();
  var _index = requireNode();
  const {
    isIdentifier
  } = _t2;
  function _params(node2, idNode, parentNode) {
    this.print(node2.typeParameters);
    const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
    if (nameInfo) {
      this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
    }
    this.tokenChar(40);
    this._parameters(node2.params, ")");
    const noLineTerminator = node2.type === "ArrowFunctionExpression";
    this.print(node2.returnType, noLineTerminator);
    this._noLineTerminator = noLineTerminator;
  }
  function _parameters(parameters, endToken) {
    const exit = this.enterDelimited();
    const trailingComma = this.shouldPrintTrailingComma(endToken);
    const paramLength = parameters.length;
    for (let i = 0; i < paramLength; i++) {
      this._param(parameters[i]);
      if (trailingComma || i < paramLength - 1) {
        this.token(",", null, i);
        this.space();
      }
    }
    this.token(endToken);
    exit();
  }
  function _param(parameter) {
    this.printJoin(parameter.decorators);
    this.print(parameter);
    if (parameter.optional) {
      this.tokenChar(63);
    }
    this.print(parameter.typeAnnotation);
  }
  function _methodHead(node2) {
    const kind = node2.kind;
    const key = node2.key;
    if (kind === "get" || kind === "set") {
      this.word(kind);
      this.space();
    }
    if (node2.async) {
      this.word("async", true);
      this.space();
    }
    if (kind === "method" || kind === "init") {
      if (node2.generator) {
        this.tokenChar(42);
      }
    }
    if (node2.computed) {
      this.tokenChar(91);
      this.print(key);
      this.tokenChar(93);
    } else {
      this.print(key);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
    this._params(node2, node2.computed && node2.key.type !== "StringLiteral" ? void 0 : node2.key, void 0);
  }
  function _predicate(node2, noLineTerminatorAfter) {
    if (node2.predicate) {
      if (!node2.returnType) {
        this.tokenChar(58);
      }
      this.space();
      this.print(node2.predicate, noLineTerminatorAfter);
    }
  }
  function _functionHead(node2, parent) {
    if (node2.async) {
      this.word("async");
      if (!this.format.preserveFormat) {
        this._endsWithInnerRaw = false;
      }
      this.space();
    }
    this.word("function");
    if (node2.generator) {
      if (!this.format.preserveFormat) {
        this._endsWithInnerRaw = false;
      }
      this.tokenChar(42);
    }
    this.space();
    if (node2.id) {
      this.print(node2.id);
    }
    this._params(node2, node2.id, parent);
    if (node2.type !== "TSDeclareFunction") {
      this._predicate(node2);
    }
  }
  function FunctionExpression(node2, parent) {
    this._functionHead(node2, parent);
    this.space();
    this.print(node2.body);
  }
  function ArrowFunctionExpression(node2, parent) {
    if (node2.async) {
      this.word("async", true);
      this.space();
    }
    if (this._shouldPrintArrowParamsParens(node2)) {
      this._params(node2, void 0, parent);
    } else {
      this.print(node2.params[0], true);
    }
    this._predicate(node2, true);
    this.space();
    this.printInnerComments();
    this.token("=>");
    this.space();
    this.tokenContext |= _index.TokenContext.arrowBody;
    this.print(node2.body);
  }
  function _shouldPrintArrowParamsParens(node2) {
    var _firstParam$leadingCo, _firstParam$trailingC;
    if (node2.params.length !== 1) return true;
    if (node2.typeParameters || node2.returnType || node2.predicate) {
      return true;
    }
    const firstParam = node2.params[0];
    if (!isIdentifier(firstParam) || firstParam.typeAnnotation || firstParam.optional || (_firstParam$leadingCo = firstParam.leadingComments) != null && _firstParam$leadingCo.length || (_firstParam$trailingC = firstParam.trailingComments) != null && _firstParam$trailingC.length) {
      return true;
    }
    if (this.tokenMap) {
      if (node2.loc == null) return true;
      if (this.tokenMap.findMatching(node2, "(") !== null) return true;
      const arrowToken = this.tokenMap.findMatching(node2, "=>");
      if ((arrowToken == null ? void 0 : arrowToken.loc) == null) return true;
      return arrowToken.loc.start.line !== node2.loc.start.line;
    }
    if (this.format.retainLines) return true;
    return false;
  }
  function _getFuncIdName(idNode, parent) {
    let id = idNode;
    if (!id && parent) {
      const parentType = parent.type;
      if (parentType === "VariableDeclarator") {
        id = parent.id;
      } else if (parentType === "AssignmentExpression" || parentType === "AssignmentPattern") {
        id = parent.left;
      } else if (parentType === "ObjectProperty" || parentType === "ClassProperty") {
        if (!parent.computed || parent.key.type === "StringLiteral") {
          id = parent.key;
        }
      } else if (parentType === "ClassPrivateProperty" || parentType === "ClassAccessorProperty") {
        id = parent.key;
      }
    }
    if (!id) return;
    let nameInfo;
    if (id.type === "Identifier") {
      var _id$loc, _id$loc2;
      nameInfo = {
        pos: (_id$loc = id.loc) == null ? void 0 : _id$loc.start,
        name: ((_id$loc2 = id.loc) == null ? void 0 : _id$loc2.identifierName) || id.name
      };
    } else if (id.type === "PrivateName") {
      var _id$loc3;
      nameInfo = {
        pos: (_id$loc3 = id.loc) == null ? void 0 : _id$loc3.start,
        name: "#" + id.id.name
      };
    } else if (id.type === "StringLiteral") {
      var _id$loc4;
      nameInfo = {
        pos: (_id$loc4 = id.loc) == null ? void 0 : _id$loc4.start,
        name: id.value
      };
    }
    return nameInfo;
  }
  return methods;
}
var modules = {};
var hasRequiredModules;
function requireModules() {
  if (hasRequiredModules) return modules;
  hasRequiredModules = 1;
  Object.defineProperty(modules, "__esModule", {
    value: true
  });
  modules.ExportAllDeclaration = ExportAllDeclaration;
  modules.ExportDefaultDeclaration = ExportDefaultDeclaration;
  modules.ExportDefaultSpecifier = ExportDefaultSpecifier;
  modules.ExportNamedDeclaration = ExportNamedDeclaration;
  modules.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
  modules.ExportSpecifier = ExportSpecifier;
  modules.ImportAttribute = ImportAttribute;
  modules.ImportDeclaration = ImportDeclaration;
  modules.ImportDefaultSpecifier = ImportDefaultSpecifier;
  modules.ImportExpression = ImportExpression;
  modules.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
  modules.ImportSpecifier = ImportSpecifier;
  modules._printAttributes = _printAttributes;
  var _t2 = requireLib$b();
  var _index = requireNode();
  const {
    isClassDeclaration,
    isExportDefaultSpecifier,
    isExportNamespaceSpecifier,
    isImportDefaultSpecifier,
    isImportNamespaceSpecifier,
    isStatement
  } = _t2;
  function ImportSpecifier(node2) {
    if (node2.importKind === "type" || node2.importKind === "typeof") {
      this.word(node2.importKind);
      this.space();
    }
    this.print(node2.imported);
    if (node2.local && node2.local.name !== node2.imported.name) {
      this.space();
      this.word("as");
      this.space();
      this.print(node2.local);
    }
  }
  function ImportDefaultSpecifier(node2) {
    this.print(node2.local);
  }
  function ExportDefaultSpecifier(node2) {
    this.print(node2.exported);
  }
  function ExportSpecifier(node2) {
    if (node2.exportKind === "type") {
      this.word("type");
      this.space();
    }
    this.print(node2.local);
    if (node2.exported && node2.local.name !== node2.exported.name) {
      this.space();
      this.word("as");
      this.space();
      this.print(node2.exported);
    }
  }
  function ExportNamespaceSpecifier(node2) {
    this.tokenChar(42);
    this.space();
    this.word("as");
    this.space();
    this.print(node2.exported);
  }
  let warningShown = false;
  function _printAttributes(node2, hasPreviousBrace) {
    var _node$extra;
    const {
      importAttributesKeyword
    } = this.format;
    const {
      attributes,
      assertions
    } = node2;
    if (attributes && !importAttributesKeyword && node2.extra && (node2.extra.deprecatedAssertSyntax || node2.extra.deprecatedWithLegacySyntax) && !warningShown) {
      warningShown = true;
      console.warn(`You are using import attributes, without specifying the desired output syntax.
Please specify the "importAttributesKeyword" generator option, whose value can be one of:
 - "with"        : \`import { a } from "b" with { type: "json" };\`
 - "assert"      : \`import { a } from "b" assert { type: "json" };\`
 - "with-legacy" : \`import { a } from "b" with type: "json";\`
`);
    }
    const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions;
    this.word(useAssertKeyword ? "assert" : "with");
    this.space();
    if (!useAssertKeyword && (importAttributesKeyword === "with-legacy" || !importAttributesKeyword && (_node$extra = node2.extra) != null && _node$extra.deprecatedWithLegacySyntax)) {
      this.printList(attributes || assertions);
      return;
    }
    const occurrenceCount = hasPreviousBrace ? 1 : 0;
    this.token("{", null, occurrenceCount);
    this.space();
    this.printList(attributes || assertions, this.shouldPrintTrailingComma("}"));
    this.space();
    this.token("}", null, occurrenceCount);
  }
  function ExportAllDeclaration(node2) {
    var _node$attributes, _node$assertions;
    this.word("export");
    this.space();
    if (node2.exportKind === "type") {
      this.word("type");
      this.space();
    }
    this.tokenChar(42);
    this.space();
    this.word("from");
    this.space();
    if ((_node$attributes = node2.attributes) != null && _node$attributes.length || (_node$assertions = node2.assertions) != null && _node$assertions.length) {
      this.print(node2.source, true);
      this.space();
      this._printAttributes(node2, false);
    } else {
      this.print(node2.source);
    }
    this.semicolon();
  }
  function maybePrintDecoratorsBeforeExport(printer2, node2) {
    if (isClassDeclaration(node2.declaration) && printer2._shouldPrintDecoratorsBeforeExport(node2)) {
      printer2.printJoin(node2.declaration.decorators);
    }
  }
  function ExportNamedDeclaration(node2) {
    maybePrintDecoratorsBeforeExport(this, node2);
    this.word("export");
    this.space();
    if (node2.declaration) {
      const declar = node2.declaration;
      this.print(declar);
      if (!isStatement(declar)) this.semicolon();
    } else {
      if (node2.exportKind === "type") {
        this.word("type");
        this.space();
      }
      const specifiers = node2.specifiers.slice(0);
      let hasSpecial = false;
      for (; ; ) {
        const first = specifiers[0];
        if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
          hasSpecial = true;
          this.print(specifiers.shift());
          if (specifiers.length) {
            this.tokenChar(44);
            this.space();
          }
        } else {
          break;
        }
      }
      let hasBrace = false;
      if (specifiers.length || !specifiers.length && !hasSpecial) {
        hasBrace = true;
        this.tokenChar(123);
        if (specifiers.length) {
          this.space();
          this.printList(specifiers, this.shouldPrintTrailingComma("}"));
          this.space();
        }
        this.tokenChar(125);
      }
      if (node2.source) {
        var _node$attributes2, _node$assertions2;
        this.space();
        this.word("from");
        this.space();
        if ((_node$attributes2 = node2.attributes) != null && _node$attributes2.length || (_node$assertions2 = node2.assertions) != null && _node$assertions2.length) {
          this.print(node2.source, true);
          this.space();
          this._printAttributes(node2, hasBrace);
        } else {
          this.print(node2.source);
        }
      }
      this.semicolon();
    }
  }
  function ExportDefaultDeclaration(node2) {
    maybePrintDecoratorsBeforeExport(this, node2);
    this.word("export");
    this.noIndentInnerCommentsHere();
    this.space();
    this.word("default");
    this.space();
    this.tokenContext |= _index.TokenContext.exportDefault;
    const declar = node2.declaration;
    this.print(declar);
    if (!isStatement(declar)) this.semicolon();
  }
  function ImportDeclaration(node2) {
    var _node$attributes3, _node$assertions3;
    this.word("import");
    this.space();
    const isTypeKind = node2.importKind === "type" || node2.importKind === "typeof";
    if (isTypeKind) {
      this.noIndentInnerCommentsHere();
      this.word(node2.importKind);
      this.space();
    } else if (node2.module) {
      this.noIndentInnerCommentsHere();
      this.word("module");
      this.space();
    } else if (node2.phase) {
      this.noIndentInnerCommentsHere();
      this.word(node2.phase);
      this.space();
    }
    const specifiers = node2.specifiers.slice(0);
    const hasSpecifiers = !!specifiers.length;
    while (hasSpecifiers) {
      const first = specifiers[0];
      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
        this.print(specifiers.shift());
        if (specifiers.length) {
          this.tokenChar(44);
          this.space();
        }
      } else {
        break;
      }
    }
    let hasBrace = false;
    if (specifiers.length) {
      hasBrace = true;
      this.tokenChar(123);
      this.space();
      this.printList(specifiers, this.shouldPrintTrailingComma("}"));
      this.space();
      this.tokenChar(125);
    } else if (isTypeKind && !hasSpecifiers) {
      hasBrace = true;
      this.tokenChar(123);
      this.tokenChar(125);
    }
    if (hasSpecifiers || isTypeKind) {
      this.space();
      this.word("from");
      this.space();
    }
    if ((_node$attributes3 = node2.attributes) != null && _node$attributes3.length || (_node$assertions3 = node2.assertions) != null && _node$assertions3.length) {
      this.print(node2.source, true);
      this.space();
      this._printAttributes(node2, hasBrace);
    } else {
      this.print(node2.source);
    }
    this.semicolon();
  }
  function ImportAttribute(node2) {
    this.print(node2.key);
    this.tokenChar(58);
    this.space();
    this.print(node2.value);
  }
  function ImportNamespaceSpecifier(node2) {
    this.tokenChar(42);
    this.space();
    this.word("as");
    this.space();
    this.print(node2.local);
  }
  function ImportExpression(node2) {
    this.word("import");
    if (node2.phase) {
      this.tokenChar(46);
      this.word(node2.phase);
    }
    this.tokenChar(40);
    const shouldPrintTrailingComma = this.shouldPrintTrailingComma(")");
    this.print(node2.source);
    if (node2.options != null) {
      this.tokenChar(44);
      this.space();
      this.print(node2.options);
    }
    if (shouldPrintTrailingComma) {
      this.tokenChar(44);
    }
    this.rightParens(node2);
  }
  return modules;
}
var types = {};
var jsesc_1;
var hasRequiredJsesc;
function requireJsesc() {
  if (hasRequiredJsesc) return jsesc_1;
  hasRequiredJsesc = 1;
  const object = {};
  const hasOwnProperty2 = object.hasOwnProperty;
  const forOwn = (object2, callback) => {
    for (const key in object2) {
      if (hasOwnProperty2.call(object2, key)) {
        callback(key, object2[key]);
      }
    }
  };
  const extend = (destination, source) => {
    if (!source) {
      return destination;
    }
    forOwn(source, (key, value2) => {
      destination[key] = value2;
    });
    return destination;
  };
  const forEach = (array, callback) => {
    const length = array.length;
    let index = -1;
    while (++index < length) {
      callback(array[index]);
    }
  };
  const fourHexEscape = (hex) => {
    return "\\u" + ("0000" + hex).slice(-4);
  };
  const hexadecimal = (code, lowercase2) => {
    let hexadecimal2 = code.toString(16);
    if (lowercase2) return hexadecimal2;
    return hexadecimal2.toUpperCase();
  };
  const toString = object.toString;
  const isArray = Array.isArray;
  const isBuffer = (value2) => {
    return typeof Buffer === "function" && Buffer.isBuffer(value2);
  };
  const isObject = (value2) => {
    return toString.call(value2) == "[object Object]";
  };
  const isString = (value2) => {
    return typeof value2 == "string" || toString.call(value2) == "[object String]";
  };
  const isNumber = (value2) => {
    return typeof value2 == "number" || toString.call(value2) == "[object Number]";
  };
  const isBigInt = (value2) => {
    return typeof value2 == "bigint";
  };
  const isFunction = (value2) => {
    return typeof value2 == "function";
  };
  const isMap = (value2) => {
    return toString.call(value2) == "[object Map]";
  };
  const isSet = (value2) => {
    return toString.call(value2) == "[object Set]";
  };
  const singleEscapes = {
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t"
    // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
    // '\v': '\\x0B'
  };
  const regexSingleEscape = /[\\\b\f\n\r\t]/;
  const regexDigit = /[0-9]/;
  const regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
  const escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
  const escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;
  const jsesc = (argument, options2) => {
    const increaseIndentation = () => {
      oldIndent = indent2;
      ++options2.indentLevel;
      indent2 = options2.indent.repeat(options2.indentLevel);
    };
    const defaults = {
      "escapeEverything": false,
      "minimal": false,
      "isScriptContext": false,
      "quotes": "single",
      "wrap": false,
      "es6": false,
      "json": false,
      "compact": true,
      "lowercaseHex": false,
      "numbers": "decimal",
      "indent": "	",
      "indentLevel": 0,
      "__inline1__": false,
      "__inline2__": false
    };
    const json = options2 && options2.json;
    if (json) {
      defaults.quotes = "double";
      defaults.wrap = true;
    }
    options2 = extend(defaults, options2);
    if (options2.quotes != "single" && options2.quotes != "double" && options2.quotes != "backtick") {
      options2.quotes = "single";
    }
    const quote = options2.quotes == "double" ? '"' : options2.quotes == "backtick" ? "`" : "'";
    const compact = options2.compact;
    const lowercaseHex = options2.lowercaseHex;
    let indent2 = options2.indent.repeat(options2.indentLevel);
    let oldIndent = "";
    const inline1 = options2.__inline1__;
    const inline2 = options2.__inline2__;
    const newLine = compact ? "" : "\n";
    let result;
    let isEmpty = true;
    const useBinNumbers = options2.numbers == "binary";
    const useOctNumbers = options2.numbers == "octal";
    const useDecNumbers = options2.numbers == "decimal";
    const useHexNumbers = options2.numbers == "hexadecimal";
    if (json && argument && isFunction(argument.toJSON)) {
      argument = argument.toJSON();
    }
    if (!isString(argument)) {
      if (isMap(argument)) {
        if (argument.size == 0) {
          return "new Map()";
        }
        if (!compact) {
          options2.__inline1__ = true;
          options2.__inline2__ = false;
        }
        return "new Map(" + jsesc(Array.from(argument), options2) + ")";
      }
      if (isSet(argument)) {
        if (argument.size == 0) {
          return "new Set()";
        }
        return "new Set(" + jsesc(Array.from(argument), options2) + ")";
      }
      if (isBuffer(argument)) {
        if (argument.length == 0) {
          return "Buffer.from([])";
        }
        return "Buffer.from(" + jsesc(Array.from(argument), options2) + ")";
      }
      if (isArray(argument)) {
        result = [];
        options2.wrap = true;
        if (inline1) {
          options2.__inline1__ = false;
          options2.__inline2__ = true;
        }
        if (!inline2) {
          increaseIndentation();
        }
        forEach(argument, (value2) => {
          isEmpty = false;
          if (inline2) {
            options2.__inline2__ = false;
          }
          result.push(
            (compact || inline2 ? "" : indent2) + jsesc(value2, options2)
          );
        });
        if (isEmpty) {
          return "[]";
        }
        if (inline2) {
          return "[" + result.join(", ") + "]";
        }
        return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
      } else if (isNumber(argument) || isBigInt(argument)) {
        if (json) {
          return JSON.stringify(Number(argument));
        }
        let result2;
        if (useDecNumbers) {
          result2 = String(argument);
        } else if (useHexNumbers) {
          let hexadecimal2 = argument.toString(16);
          if (!lowercaseHex) {
            hexadecimal2 = hexadecimal2.toUpperCase();
          }
          result2 = "0x" + hexadecimal2;
        } else if (useBinNumbers) {
          result2 = "0b" + argument.toString(2);
        } else if (useOctNumbers) {
          result2 = "0o" + argument.toString(8);
        }
        if (isBigInt(argument)) {
          return result2 + "n";
        }
        return result2;
      } else if (isBigInt(argument)) {
        if (json) {
          return JSON.stringify(Number(argument));
        }
        return argument + "n";
      } else if (!isObject(argument)) {
        if (json) {
          return JSON.stringify(argument) || "null";
        }
        return String(argument);
      } else {
        result = [];
        options2.wrap = true;
        increaseIndentation();
        forOwn(argument, (key, value2) => {
          isEmpty = false;
          result.push(
            (compact ? "" : indent2) + jsesc(key, options2) + ":" + (compact ? "" : " ") + jsesc(value2, options2)
          );
        });
        if (isEmpty) {
          return "{}";
        }
        return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
      }
    }
    const regex = options2.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
    result = argument.replace(regex, (char, pair, lone, quoteChar, index, string2) => {
      if (pair) {
        if (options2.minimal) return pair;
        const first = pair.charCodeAt(0);
        const second = pair.charCodeAt(1);
        if (options2.es6) {
          const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
          const hex2 = hexadecimal(codePoint, lowercaseHex);
          return "\\u{" + hex2 + "}";
        }
        return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
      }
      if (lone) {
        return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
      }
      if (char == "\0" && !json && !regexDigit.test(string2.charAt(index + 1))) {
        return "\\0";
      }
      if (quoteChar) {
        if (quoteChar == quote || options2.escapeEverything) {
          return "\\" + quoteChar;
        }
        return quoteChar;
      }
      if (regexSingleEscape.test(char)) {
        return singleEscapes[char];
      }
      if (options2.minimal && !regexWhitespace.test(char)) {
        return char;
      }
      const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
      if (json || hex.length > 2) {
        return fourHexEscape(hex);
      }
      return "\\x" + ("00" + hex).slice(-2);
    });
    if (quote == "`") {
      result = result.replace(/\$\{/g, "\\${");
    }
    if (options2.isScriptContext) {
      result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
    }
    if (options2.wrap) {
      result = quote + result + quote;
    }
    return result;
  };
  jsesc.version = "3.0.2";
  jsesc_1 = jsesc;
  return jsesc_1;
}
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types;
  hasRequiredTypes = 1;
  Object.defineProperty(types, "__esModule", {
    value: true
  });
  types.ArgumentPlaceholder = ArgumentPlaceholder;
  types.ArrayPattern = types.ArrayExpression = ArrayExpression;
  types.BigIntLiteral = BigIntLiteral;
  types.BooleanLiteral = BooleanLiteral;
  types.Identifier = Identifier;
  types.NullLiteral = NullLiteral;
  types.NumericLiteral = NumericLiteral;
  types.ObjectPattern = types.ObjectExpression = ObjectExpression;
  types.ObjectMethod = ObjectMethod;
  types.ObjectProperty = ObjectProperty;
  types.PipelineBareFunction = PipelineBareFunction;
  types.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
  types.PipelineTopicExpression = PipelineTopicExpression;
  types.RecordExpression = RecordExpression;
  types.RegExpLiteral = RegExpLiteral;
  types.SpreadElement = types.RestElement = RestElement;
  types.StringLiteral = StringLiteral;
  types.TopicReference = TopicReference;
  types.TupleExpression = TupleExpression;
  types._getRawIdentifier = _getRawIdentifier;
  var _t2 = requireLib$b();
  var _jsesc = requireJsesc();
  const {
    isAssignmentPattern,
    isIdentifier
  } = _t2;
  let lastRawIdentNode = null;
  let lastRawIdentResult = "";
  function _getRawIdentifier(node2) {
    if (node2 === lastRawIdentNode) return lastRawIdentResult;
    lastRawIdentNode = node2;
    const {
      name
    } = node2;
    const token = this.tokenMap.find(node2, (tok) => tok.value === name);
    if (token) {
      lastRawIdentResult = this._originalCode.slice(token.start, token.end);
      return lastRawIdentResult;
    }
    return lastRawIdentResult = node2.name;
  }
  function Identifier(node2) {
    var _node$loc;
    this.sourceIdentifierName(((_node$loc = node2.loc) == null ? void 0 : _node$loc.identifierName) || node2.name);
    this.word(this.tokenMap ? this._getRawIdentifier(node2) : node2.name);
  }
  function ArgumentPlaceholder() {
    this.tokenChar(63);
  }
  function RestElement(node2) {
    this.token("...");
    this.print(node2.argument);
  }
  function ObjectExpression(node2) {
    const props = node2.properties;
    this.tokenChar(123);
    if (props.length) {
      const exit = this.enterDelimited();
      this.space();
      this.printList(props, this.shouldPrintTrailingComma("}"), true, true);
      this.space();
      exit();
    }
    this.sourceWithOffset("end", node2.loc, -1);
    this.tokenChar(125);
  }
  function ObjectMethod(node2) {
    this.printJoin(node2.decorators);
    this._methodHead(node2);
    this.space();
    this.print(node2.body);
  }
  function ObjectProperty(node2) {
    this.printJoin(node2.decorators);
    if (node2.computed) {
      this.tokenChar(91);
      this.print(node2.key);
      this.tokenChar(93);
    } else {
      if (isAssignmentPattern(node2.value) && isIdentifier(node2.key) && node2.key.name === node2.value.left.name) {
        this.print(node2.value);
        return;
      }
      this.print(node2.key);
      if (node2.shorthand && isIdentifier(node2.key) && isIdentifier(node2.value) && node2.key.name === node2.value.name) {
        return;
      }
    }
    this.tokenChar(58);
    this.space();
    this.print(node2.value);
  }
  function ArrayExpression(node2) {
    const elems = node2.elements;
    const len = elems.length;
    this.tokenChar(91);
    const exit = this.enterDelimited();
    for (let i = 0; i < elems.length; i++) {
      const elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem);
        if (i < len - 1 || this.shouldPrintTrailingComma("]")) {
          this.token(",", false, i);
        }
      } else {
        this.token(",", false, i);
      }
    }
    exit();
    this.tokenChar(93);
  }
  function RecordExpression(node2) {
    const props = node2.properties;
    let startToken;
    let endToken;
    {
      if (this.format.recordAndTupleSyntaxType === "bar") {
        startToken = "{|";
        endToken = "|}";
      } else if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null) {
        throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
      } else {
        startToken = "#{";
        endToken = "}";
      }
    }
    this.token(startToken);
    if (props.length) {
      this.space();
      this.printList(props, this.shouldPrintTrailingComma(endToken), true, true);
      this.space();
    }
    this.token(endToken);
  }
  function TupleExpression(node2) {
    const elems = node2.elements;
    const len = elems.length;
    let startToken;
    let endToken;
    {
      if (this.format.recordAndTupleSyntaxType === "bar") {
        startToken = "[|";
        endToken = "|]";
      } else if (this.format.recordAndTupleSyntaxType === "hash") {
        startToken = "#[";
        endToken = "]";
      } else {
        throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
      }
    }
    this.token(startToken);
    for (let i = 0; i < elems.length; i++) {
      const elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem);
        if (i < len - 1 || this.shouldPrintTrailingComma(endToken)) {
          this.token(",", false, i);
        }
      }
    }
    this.token(endToken);
  }
  function RegExpLiteral(node2) {
    this.word(`/${node2.pattern}/${node2.flags}`);
  }
  function BooleanLiteral(node2) {
    this.word(node2.value ? "true" : "false");
  }
  function NullLiteral() {
    this.word("null");
  }
  function NumericLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    const opts = this.format.jsescOption;
    const value2 = node2.value;
    const str = value2 + "";
    if (opts.numbers) {
      this.number(_jsesc(value2, opts), value2);
    } else if (raw == null) {
      this.number(str, value2);
    } else if (this.format.minified) {
      this.number(raw.length < str.length ? raw : str, value2);
    } else {
      this.number(raw, value2);
    }
  }
  function StringLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.token(raw);
      return;
    }
    const val = _jsesc(node2.value, this.format.jsescOption);
    this.token(val);
  }
  function BigIntLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.word(raw);
      return;
    }
    this.word(node2.value + "n");
  }
  const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
  function TopicReference() {
    const {
      topicToken
    } = this.format;
    if (validTopicTokenSet.has(topicToken)) {
      this.token(topicToken);
    } else {
      const givenTopicTokenJSON = JSON.stringify(topicToken);
      const validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
      throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
    }
  }
  function PipelineTopicExpression(node2) {
    this.print(node2.expression);
  }
  function PipelineBareFunction(node2) {
    this.print(node2.callee);
  }
  function PipelinePrimaryTopicReference() {
    this.tokenChar(35);
  }
  return types;
}
var flow = {};
var hasRequiredFlow;
function requireFlow() {
  if (hasRequiredFlow) return flow;
  hasRequiredFlow = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.AnyTypeAnnotation = AnyTypeAnnotation;
    exports2.ArrayTypeAnnotation = ArrayTypeAnnotation;
    exports2.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
    exports2.BooleanTypeAnnotation = BooleanTypeAnnotation;
    exports2.DeclareClass = DeclareClass;
    exports2.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
    exports2.DeclareExportDeclaration = DeclareExportDeclaration;
    exports2.DeclareFunction = DeclareFunction;
    exports2.DeclareInterface = DeclareInterface;
    exports2.DeclareModule = DeclareModule;
    exports2.DeclareModuleExports = DeclareModuleExports;
    exports2.DeclareOpaqueType = DeclareOpaqueType;
    exports2.DeclareTypeAlias = DeclareTypeAlias;
    exports2.DeclareVariable = DeclareVariable;
    exports2.DeclaredPredicate = DeclaredPredicate;
    exports2.EmptyTypeAnnotation = EmptyTypeAnnotation;
    exports2.EnumBooleanBody = EnumBooleanBody;
    exports2.EnumBooleanMember = EnumBooleanMember;
    exports2.EnumDeclaration = EnumDeclaration;
    exports2.EnumDefaultedMember = EnumDefaultedMember;
    exports2.EnumNumberBody = EnumNumberBody;
    exports2.EnumNumberMember = EnumNumberMember;
    exports2.EnumStringBody = EnumStringBody;
    exports2.EnumStringMember = EnumStringMember;
    exports2.EnumSymbolBody = EnumSymbolBody;
    exports2.ExistsTypeAnnotation = ExistsTypeAnnotation;
    exports2.FunctionTypeAnnotation = FunctionTypeAnnotation;
    exports2.FunctionTypeParam = FunctionTypeParam;
    exports2.IndexedAccessType = IndexedAccessType;
    exports2.InferredPredicate = InferredPredicate;
    exports2.InterfaceDeclaration = InterfaceDeclaration;
    exports2.GenericTypeAnnotation = exports2.ClassImplements = exports2.InterfaceExtends = InterfaceExtends;
    exports2.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
    exports2.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
    exports2.MixedTypeAnnotation = MixedTypeAnnotation;
    exports2.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
    exports2.NullableTypeAnnotation = NullableTypeAnnotation;
    Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _types2.NumericLiteral;
      }
    });
    exports2.NumberTypeAnnotation = NumberTypeAnnotation;
    exports2.ObjectTypeAnnotation = ObjectTypeAnnotation;
    exports2.ObjectTypeCallProperty = ObjectTypeCallProperty;
    exports2.ObjectTypeIndexer = ObjectTypeIndexer;
    exports2.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
    exports2.ObjectTypeProperty = ObjectTypeProperty;
    exports2.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
    exports2.OpaqueType = OpaqueType;
    exports2.OptionalIndexedAccessType = OptionalIndexedAccessType;
    exports2.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
    Object.defineProperty(exports2, "StringLiteralTypeAnnotation", {
      enumerable: true,
      get: function() {
        return _types2.StringLiteral;
      }
    });
    exports2.StringTypeAnnotation = StringTypeAnnotation;
    exports2.SymbolTypeAnnotation = SymbolTypeAnnotation;
    exports2.ThisTypeAnnotation = ThisTypeAnnotation;
    exports2.TupleTypeAnnotation = TupleTypeAnnotation;
    exports2.TypeAlias = TypeAlias;
    exports2.TypeAnnotation = TypeAnnotation;
    exports2.TypeCastExpression = TypeCastExpression;
    exports2.TypeParameter = TypeParameter;
    exports2.TypeParameterDeclaration = exports2.TypeParameterInstantiation = TypeParameterInstantiation;
    exports2.TypeofTypeAnnotation = TypeofTypeAnnotation;
    exports2.UnionTypeAnnotation = UnionTypeAnnotation;
    exports2.Variance = Variance;
    exports2.VoidTypeAnnotation = VoidTypeAnnotation;
    exports2._interfaceish = _interfaceish;
    exports2._variance = _variance;
    var _t2 = requireLib$b();
    var _modules = requireModules();
    var _index = requireNode();
    var _types2 = requireTypes();
    const {
      isDeclareExportDeclaration,
      isStatement
    } = _t2;
    function AnyTypeAnnotation() {
      this.word("any");
    }
    function ArrayTypeAnnotation(node2) {
      this.print(node2.elementType, true);
      this.tokenChar(91);
      this.tokenChar(93);
    }
    function BooleanTypeAnnotation() {
      this.word("boolean");
    }
    function BooleanLiteralTypeAnnotation(node2) {
      this.word(node2.value ? "true" : "false");
    }
    function NullLiteralTypeAnnotation() {
      this.word("null");
    }
    function DeclareClass(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.word("class");
      this.space();
      this._interfaceish(node2);
    }
    function DeclareFunction(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.word("function");
      this.space();
      this.print(node2.id);
      this.print(node2.id.typeAnnotation.typeAnnotation);
      if (node2.predicate) {
        this.space();
        this.print(node2.predicate);
      }
      this.semicolon();
    }
    function InferredPredicate() {
      this.tokenChar(37);
      this.word("checks");
    }
    function DeclaredPredicate(node2) {
      this.tokenChar(37);
      this.word("checks");
      this.tokenChar(40);
      this.print(node2.value);
      this.tokenChar(41);
    }
    function DeclareInterface(node2) {
      this.word("declare");
      this.space();
      this.InterfaceDeclaration(node2);
    }
    function DeclareModule(node2) {
      this.word("declare");
      this.space();
      this.word("module");
      this.space();
      this.print(node2.id);
      this.space();
      this.print(node2.body);
    }
    function DeclareModuleExports(node2) {
      this.word("declare");
      this.space();
      this.word("module");
      this.tokenChar(46);
      this.word("exports");
      this.print(node2.typeAnnotation);
    }
    function DeclareTypeAlias(node2) {
      this.word("declare");
      this.space();
      this.TypeAlias(node2);
    }
    function DeclareOpaqueType(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.OpaqueType(node2);
    }
    function DeclareVariable(node2, parent) {
      if (!isDeclareExportDeclaration(parent)) {
        this.word("declare");
        this.space();
      }
      this.word("var");
      this.space();
      this.print(node2.id);
      this.print(node2.id.typeAnnotation);
      this.semicolon();
    }
    function DeclareExportDeclaration(node2) {
      this.word("declare");
      this.space();
      this.word("export");
      this.space();
      if (node2.default) {
        this.word("default");
        this.space();
      }
      FlowExportDeclaration.call(this, node2);
    }
    function DeclareExportAllDeclaration(node2) {
      this.word("declare");
      this.space();
      _modules.ExportAllDeclaration.call(this, node2);
    }
    function EnumDeclaration(node2) {
      const {
        id,
        body
      } = node2;
      this.word("enum");
      this.space();
      this.print(id);
      this.print(body);
    }
    function enumExplicitType(context2, name, hasExplicitType) {
      if (hasExplicitType) {
        context2.space();
        context2.word("of");
        context2.space();
        context2.word(name);
      }
      context2.space();
    }
    function enumBody(context2, node2) {
      const {
        members
      } = node2;
      context2.token("{");
      context2.indent();
      context2.newline();
      for (const member of members) {
        context2.print(member);
        context2.newline();
      }
      if (node2.hasUnknownMembers) {
        context2.token("...");
        context2.newline();
      }
      context2.dedent();
      context2.token("}");
    }
    function EnumBooleanBody(node2) {
      const {
        explicitType
      } = node2;
      enumExplicitType(this, "boolean", explicitType);
      enumBody(this, node2);
    }
    function EnumNumberBody(node2) {
      const {
        explicitType
      } = node2;
      enumExplicitType(this, "number", explicitType);
      enumBody(this, node2);
    }
    function EnumStringBody(node2) {
      const {
        explicitType
      } = node2;
      enumExplicitType(this, "string", explicitType);
      enumBody(this, node2);
    }
    function EnumSymbolBody(node2) {
      enumExplicitType(this, "symbol", true);
      enumBody(this, node2);
    }
    function EnumDefaultedMember(node2) {
      const {
        id
      } = node2;
      this.print(id);
      this.tokenChar(44);
    }
    function enumInitializedMember(context2, node2) {
      context2.print(node2.id);
      context2.space();
      context2.token("=");
      context2.space();
      context2.print(node2.init);
      context2.token(",");
    }
    function EnumBooleanMember(node2) {
      enumInitializedMember(this, node2);
    }
    function EnumNumberMember(node2) {
      enumInitializedMember(this, node2);
    }
    function EnumStringMember(node2) {
      enumInitializedMember(this, node2);
    }
    function FlowExportDeclaration(node2) {
      if (node2.declaration) {
        const declar = node2.declaration;
        this.print(declar);
        if (!isStatement(declar)) this.semicolon();
      } else {
        this.tokenChar(123);
        if (node2.specifiers.length) {
          this.space();
          this.printList(node2.specifiers);
          this.space();
        }
        this.tokenChar(125);
        if (node2.source) {
          this.space();
          this.word("from");
          this.space();
          this.print(node2.source);
        }
        this.semicolon();
      }
    }
    function ExistsTypeAnnotation() {
      this.tokenChar(42);
    }
    function FunctionTypeAnnotation(node2, parent) {
      this.print(node2.typeParameters);
      this.tokenChar(40);
      if (node2.this) {
        this.word("this");
        this.tokenChar(58);
        this.space();
        this.print(node2.this.typeAnnotation);
        if (node2.params.length || node2.rest) {
          this.tokenChar(44);
          this.space();
        }
      }
      this.printList(node2.params);
      if (node2.rest) {
        if (node2.params.length) {
          this.tokenChar(44);
          this.space();
        }
        this.token("...");
        this.print(node2.rest);
      }
      this.tokenChar(41);
      const type = parent == null ? void 0 : parent.type;
      if (type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method)) {
        this.tokenChar(58);
      } else {
        this.space();
        this.token("=>");
      }
      this.space();
      this.print(node2.returnType);
    }
    function FunctionTypeParam(node2) {
      this.print(node2.name);
      if (node2.optional) this.tokenChar(63);
      if (node2.name) {
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.typeAnnotation);
    }
    function InterfaceExtends(node2) {
      this.print(node2.id);
      this.print(node2.typeParameters, true);
    }
    function _interfaceish(node2) {
      var _node$extends;
      this.print(node2.id);
      this.print(node2.typeParameters);
      if ((_node$extends = node2.extends) != null && _node$extends.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(node2.extends);
      }
      if (node2.type === "DeclareClass") {
        var _node$mixins, _node$implements;
        if ((_node$mixins = node2.mixins) != null && _node$mixins.length) {
          this.space();
          this.word("mixins");
          this.space();
          this.printList(node2.mixins);
        }
        if ((_node$implements = node2.implements) != null && _node$implements.length) {
          this.space();
          this.word("implements");
          this.space();
          this.printList(node2.implements);
        }
      }
      this.space();
      this.print(node2.body);
    }
    function _variance(node2) {
      var _node$variance;
      const kind = (_node$variance = node2.variance) == null ? void 0 : _node$variance.kind;
      if (kind != null) {
        if (kind === "plus") {
          this.tokenChar(43);
        } else if (kind === "minus") {
          this.tokenChar(45);
        }
      }
    }
    function InterfaceDeclaration(node2) {
      this.word("interface");
      this.space();
      this._interfaceish(node2);
    }
    function andSeparator(occurrenceCount) {
      this.space();
      this.token("&", false, occurrenceCount);
      this.space();
    }
    function InterfaceTypeAnnotation(node2) {
      var _node$extends2;
      this.word("interface");
      if ((_node$extends2 = node2.extends) != null && _node$extends2.length) {
        this.space();
        this.word("extends");
        this.space();
        this.printList(node2.extends);
      }
      this.space();
      this.print(node2.body);
    }
    function IntersectionTypeAnnotation(node2) {
      this.printJoin(node2.types, void 0, void 0, andSeparator);
    }
    function MixedTypeAnnotation() {
      this.word("mixed");
    }
    function EmptyTypeAnnotation() {
      this.word("empty");
    }
    function NullableTypeAnnotation(node2) {
      this.tokenChar(63);
      this.print(node2.typeAnnotation);
    }
    function NumberTypeAnnotation() {
      this.word("number");
    }
    function StringTypeAnnotation() {
      this.word("string");
    }
    function ThisTypeAnnotation() {
      this.word("this");
    }
    function TupleTypeAnnotation(node2) {
      this.tokenChar(91);
      this.printList(node2.types);
      this.tokenChar(93);
    }
    function TypeofTypeAnnotation(node2) {
      this.word("typeof");
      this.space();
      this.print(node2.argument);
    }
    function TypeAlias(node2) {
      this.word("type");
      this.space();
      this.print(node2.id);
      this.print(node2.typeParameters);
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.right);
      this.semicolon();
    }
    function TypeAnnotation(node2, parent) {
      this.tokenChar(58);
      this.space();
      if (parent.type === "ArrowFunctionExpression") {
        this.tokenContext |= _index.TokenContext.arrowFlowReturnType;
      } else if (node2.optional) {
        this.tokenChar(63);
      }
      this.print(node2.typeAnnotation);
    }
    function TypeParameterInstantiation(node2) {
      this.tokenChar(60);
      this.printList(node2.params);
      this.tokenChar(62);
    }
    function TypeParameter(node2) {
      this._variance(node2);
      this.word(node2.name);
      if (node2.bound) {
        this.print(node2.bound);
      }
      if (node2.default) {
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node2.default);
      }
    }
    function OpaqueType(node2) {
      this.word("opaque");
      this.space();
      this.word("type");
      this.space();
      this.print(node2.id);
      this.print(node2.typeParameters);
      if (node2.supertype) {
        this.tokenChar(58);
        this.space();
        this.print(node2.supertype);
      }
      if (node2.impltype) {
        this.space();
        this.tokenChar(61);
        this.space();
        this.print(node2.impltype);
      }
      this.semicolon();
    }
    function ObjectTypeAnnotation(node2) {
      if (node2.exact) {
        this.token("{|");
      } else {
        this.tokenChar(123);
      }
      const props = [...node2.properties, ...node2.callProperties || [], ...node2.indexers || [], ...node2.internalSlots || []];
      if (props.length) {
        this.newline();
        this.space();
        this.printJoin(props, true, true, void 0, void 0, function addNewlines(leading) {
          if (leading && !props[0]) return 1;
        }, () => {
          if (props.length !== 1 || node2.inexact) {
            this.tokenChar(44);
            this.space();
          }
        });
        this.space();
      }
      if (node2.inexact) {
        this.indent();
        this.token("...");
        if (props.length) {
          this.newline();
        }
        this.dedent();
      }
      if (node2.exact) {
        this.token("|}");
      } else {
        this.tokenChar(125);
      }
    }
    function ObjectTypeInternalSlot(node2) {
      if (node2.static) {
        this.word("static");
        this.space();
      }
      this.tokenChar(91);
      this.tokenChar(91);
      this.print(node2.id);
      this.tokenChar(93);
      this.tokenChar(93);
      if (node2.optional) this.tokenChar(63);
      if (!node2.method) {
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.value);
    }
    function ObjectTypeCallProperty(node2) {
      if (node2.static) {
        this.word("static");
        this.space();
      }
      this.print(node2.value);
    }
    function ObjectTypeIndexer(node2) {
      if (node2.static) {
        this.word("static");
        this.space();
      }
      this._variance(node2);
      this.tokenChar(91);
      if (node2.id) {
        this.print(node2.id);
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.key);
      this.tokenChar(93);
      this.tokenChar(58);
      this.space();
      this.print(node2.value);
    }
    function ObjectTypeProperty(node2) {
      if (node2.proto) {
        this.word("proto");
        this.space();
      }
      if (node2.static) {
        this.word("static");
        this.space();
      }
      if (node2.kind === "get" || node2.kind === "set") {
        this.word(node2.kind);
        this.space();
      }
      this._variance(node2);
      this.print(node2.key);
      if (node2.optional) this.tokenChar(63);
      if (!node2.method) {
        this.tokenChar(58);
        this.space();
      }
      this.print(node2.value);
    }
    function ObjectTypeSpreadProperty(node2) {
      this.token("...");
      this.print(node2.argument);
    }
    function QualifiedTypeIdentifier(node2) {
      this.print(node2.qualification);
      this.tokenChar(46);
      this.print(node2.id);
    }
    function SymbolTypeAnnotation() {
      this.word("symbol");
    }
    function orSeparator(occurrenceCount) {
      this.space();
      this.token("|", false, occurrenceCount);
      this.space();
    }
    function UnionTypeAnnotation(node2) {
      this.printJoin(node2.types, void 0, void 0, orSeparator);
    }
    function TypeCastExpression(node2) {
      this.tokenChar(40);
      this.print(node2.expression);
      this.print(node2.typeAnnotation);
      this.tokenChar(41);
    }
    function Variance(node2) {
      if (node2.kind === "plus") {
        this.tokenChar(43);
      } else {
        this.tokenChar(45);
      }
    }
    function VoidTypeAnnotation() {
      this.word("void");
    }
    function IndexedAccessType(node2) {
      this.print(node2.objectType, true);
      this.tokenChar(91);
      this.print(node2.indexType);
      this.tokenChar(93);
    }
    function OptionalIndexedAccessType(node2) {
      this.print(node2.objectType);
      if (node2.optional) {
        this.token("?.");
      }
      this.tokenChar(91);
      this.print(node2.indexType);
      this.tokenChar(93);
    }
  })(flow);
  return flow;
}
var base = {};
var hasRequiredBase;
function requireBase() {
  if (hasRequiredBase) return base;
  hasRequiredBase = 1;
  Object.defineProperty(base, "__esModule", {
    value: true
  });
  base.BlockStatement = BlockStatement;
  base.Directive = Directive;
  base.DirectiveLiteral = DirectiveLiteral;
  base.File = File;
  base.InterpreterDirective = InterpreterDirective;
  base.Placeholder = Placeholder;
  base.Program = Program;
  function File(node2) {
    if (node2.program) {
      this.print(node2.program.interpreter);
    }
    this.print(node2.program);
  }
  function Program(node2) {
    var _node$directives;
    this.noIndentInnerCommentsHere();
    this.printInnerComments();
    const directivesLen = (_node$directives = node2.directives) == null ? void 0 : _node$directives.length;
    if (directivesLen) {
      var _node$directives$trai;
      const newline = node2.body.length ? 2 : 1;
      this.printSequence(node2.directives, void 0, newline);
      if (!((_node$directives$trai = node2.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length)) {
        this.newline(newline);
      }
    }
    this.printSequence(node2.body);
  }
  function BlockStatement(node2) {
    var _node$directives2;
    this.tokenChar(123);
    const exit = this.enterDelimited();
    const directivesLen = (_node$directives2 = node2.directives) == null ? void 0 : _node$directives2.length;
    if (directivesLen) {
      var _node$directives$trai2;
      const newline = node2.body.length ? 2 : 1;
      this.printSequence(node2.directives, true, newline);
      if (!((_node$directives$trai2 = node2.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length)) {
        this.newline(newline);
      }
    }
    this.printSequence(node2.body, true);
    exit();
    this.rightBrace(node2);
  }
  function Directive(node2) {
    this.print(node2.value);
    this.semicolon();
  }
  const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
  const unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
  function DirectiveLiteral(node2) {
    const raw = this.getPossibleRaw(node2);
    if (!this.format.minified && raw !== void 0) {
      this.token(raw);
      return;
    }
    const {
      value: value2
    } = node2;
    if (!unescapedDoubleQuoteRE.test(value2)) {
      this.token(`"${value2}"`);
    } else if (!unescapedSingleQuoteRE.test(value2)) {
      this.token(`'${value2}'`);
    } else {
      throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
    }
  }
  function InterpreterDirective(node2) {
    this.token(`#!${node2.value}`);
    this.newline(1, true);
  }
  function Placeholder(node2) {
    this.token("%%");
    this.print(node2.name);
    this.token("%%");
    if (node2.expectedNode === "Statement") {
      this.semicolon();
    }
  }
  return base;
}
var jsx = {};
var hasRequiredJsx;
function requireJsx() {
  if (hasRequiredJsx) return jsx;
  hasRequiredJsx = 1;
  Object.defineProperty(jsx, "__esModule", {
    value: true
  });
  jsx.JSXAttribute = JSXAttribute;
  jsx.JSXClosingElement = JSXClosingElement;
  jsx.JSXClosingFragment = JSXClosingFragment;
  jsx.JSXElement = JSXElement;
  jsx.JSXEmptyExpression = JSXEmptyExpression;
  jsx.JSXExpressionContainer = JSXExpressionContainer;
  jsx.JSXFragment = JSXFragment;
  jsx.JSXIdentifier = JSXIdentifier;
  jsx.JSXMemberExpression = JSXMemberExpression;
  jsx.JSXNamespacedName = JSXNamespacedName;
  jsx.JSXOpeningElement = JSXOpeningElement;
  jsx.JSXOpeningFragment = JSXOpeningFragment;
  jsx.JSXSpreadAttribute = JSXSpreadAttribute;
  jsx.JSXSpreadChild = JSXSpreadChild;
  jsx.JSXText = JSXText;
  function JSXAttribute(node2) {
    this.print(node2.name);
    if (node2.value) {
      this.tokenChar(61);
      this.print(node2.value);
    }
  }
  function JSXIdentifier(node2) {
    this.word(node2.name);
  }
  function JSXNamespacedName(node2) {
    this.print(node2.namespace);
    this.tokenChar(58);
    this.print(node2.name);
  }
  function JSXMemberExpression(node2) {
    this.print(node2.object);
    this.tokenChar(46);
    this.print(node2.property);
  }
  function JSXSpreadAttribute(node2) {
    this.tokenChar(123);
    this.token("...");
    this.print(node2.argument);
    this.rightBrace(node2);
  }
  function JSXExpressionContainer(node2) {
    this.tokenChar(123);
    this.print(node2.expression);
    this.rightBrace(node2);
  }
  function JSXSpreadChild(node2) {
    this.tokenChar(123);
    this.token("...");
    this.print(node2.expression);
    this.rightBrace(node2);
  }
  function JSXText(node2) {
    const raw = this.getPossibleRaw(node2);
    if (raw !== void 0) {
      this.token(raw, true);
    } else {
      this.token(node2.value, true);
    }
  }
  function JSXElement(node2) {
    const open = node2.openingElement;
    this.print(open);
    if (open.selfClosing) return;
    this.indent();
    for (const child of node2.children) {
      this.print(child);
    }
    this.dedent();
    this.print(node2.closingElement);
  }
  function spaceSeparator() {
    this.space();
  }
  function JSXOpeningElement(node2) {
    this.tokenChar(60);
    this.print(node2.name);
    {
      if (node2.typeArguments) {
        this.print(node2.typeArguments);
      }
      this.print(node2.typeParameters);
    }
    if (node2.attributes.length > 0) {
      this.space();
      this.printJoin(node2.attributes, void 0, void 0, spaceSeparator);
    }
    if (node2.selfClosing) {
      this.space();
      this.tokenChar(47);
    }
    this.tokenChar(62);
  }
  function JSXClosingElement(node2) {
    this.tokenChar(60);
    this.tokenChar(47);
    this.print(node2.name);
    this.tokenChar(62);
  }
  function JSXEmptyExpression() {
    this.printInnerComments();
  }
  function JSXFragment(node2) {
    this.print(node2.openingFragment);
    this.indent();
    for (const child of node2.children) {
      this.print(child);
    }
    this.dedent();
    this.print(node2.closingFragment);
  }
  function JSXOpeningFragment() {
    this.tokenChar(60);
    this.tokenChar(62);
  }
  function JSXClosingFragment() {
    this.token("</");
    this.tokenChar(62);
  }
  return jsx;
}
var typescript$1 = {};
var hasRequiredTypescript;
function requireTypescript() {
  if (hasRequiredTypescript) return typescript$1;
  hasRequiredTypescript = 1;
  Object.defineProperty(typescript$1, "__esModule", {
    value: true
  });
  typescript$1.TSAnyKeyword = TSAnyKeyword;
  typescript$1.TSArrayType = TSArrayType;
  typescript$1.TSSatisfiesExpression = typescript$1.TSAsExpression = TSTypeExpression;
  typescript$1.TSBigIntKeyword = TSBigIntKeyword;
  typescript$1.TSBooleanKeyword = TSBooleanKeyword;
  typescript$1.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
  typescript$1.TSInterfaceHeritage = typescript$1.TSClassImplements = TSClassImplements;
  typescript$1.TSConditionalType = TSConditionalType;
  typescript$1.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
  typescript$1.TSConstructorType = TSConstructorType;
  typescript$1.TSDeclareFunction = TSDeclareFunction;
  typescript$1.TSDeclareMethod = TSDeclareMethod;
  typescript$1.TSEnumBody = TSEnumBody;
  typescript$1.TSEnumDeclaration = TSEnumDeclaration;
  typescript$1.TSEnumMember = TSEnumMember;
  typescript$1.TSExportAssignment = TSExportAssignment;
  typescript$1.TSExternalModuleReference = TSExternalModuleReference;
  typescript$1.TSFunctionType = TSFunctionType;
  typescript$1.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
  typescript$1.TSImportType = TSImportType;
  typescript$1.TSIndexSignature = TSIndexSignature;
  typescript$1.TSIndexedAccessType = TSIndexedAccessType;
  typescript$1.TSInferType = TSInferType;
  typescript$1.TSInstantiationExpression = TSInstantiationExpression;
  typescript$1.TSInterfaceBody = TSInterfaceBody;
  typescript$1.TSInterfaceDeclaration = TSInterfaceDeclaration;
  typescript$1.TSIntersectionType = TSIntersectionType;
  typescript$1.TSIntrinsicKeyword = TSIntrinsicKeyword;
  typescript$1.TSLiteralType = TSLiteralType;
  typescript$1.TSMappedType = TSMappedType;
  typescript$1.TSMethodSignature = TSMethodSignature;
  typescript$1.TSModuleBlock = TSModuleBlock;
  typescript$1.TSModuleDeclaration = TSModuleDeclaration;
  typescript$1.TSNamedTupleMember = TSNamedTupleMember;
  typescript$1.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
  typescript$1.TSNeverKeyword = TSNeverKeyword;
  typescript$1.TSNonNullExpression = TSNonNullExpression;
  typescript$1.TSNullKeyword = TSNullKeyword;
  typescript$1.TSNumberKeyword = TSNumberKeyword;
  typescript$1.TSObjectKeyword = TSObjectKeyword;
  typescript$1.TSOptionalType = TSOptionalType;
  typescript$1.TSParameterProperty = TSParameterProperty;
  typescript$1.TSParenthesizedType = TSParenthesizedType;
  typescript$1.TSPropertySignature = TSPropertySignature;
  typescript$1.TSQualifiedName = TSQualifiedName;
  typescript$1.TSRestType = TSRestType;
  typescript$1.TSStringKeyword = TSStringKeyword;
  typescript$1.TSSymbolKeyword = TSSymbolKeyword;
  typescript$1.TSTemplateLiteralType = TSTemplateLiteralType;
  typescript$1.TSThisType = TSThisType;
  typescript$1.TSTupleType = TSTupleType;
  typescript$1.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
  typescript$1.TSTypeAnnotation = TSTypeAnnotation;
  typescript$1.TSTypeAssertion = TSTypeAssertion;
  typescript$1.TSTypeLiteral = TSTypeLiteral;
  typescript$1.TSTypeOperator = TSTypeOperator;
  typescript$1.TSTypeParameter = TSTypeParameter;
  typescript$1.TSTypeParameterDeclaration = typescript$1.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
  typescript$1.TSTypePredicate = TSTypePredicate;
  typescript$1.TSTypeQuery = TSTypeQuery;
  typescript$1.TSTypeReference = TSTypeReference;
  typescript$1.TSUndefinedKeyword = TSUndefinedKeyword;
  typescript$1.TSUnionType = TSUnionType;
  typescript$1.TSUnknownKeyword = TSUnknownKeyword;
  typescript$1.TSVoidKeyword = TSVoidKeyword;
  typescript$1.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
  typescript$1.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
  typescript$1.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
  typescript$1.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
  function TSTypeAnnotation(node2, parent) {
    this.token((parent.type === "TSFunctionType" || parent.type === "TSConstructorType") && parent.typeAnnotation === node2 ? "=>" : ":");
    this.space();
    if (node2.optional) this.tokenChar(63);
    this.print(node2.typeAnnotation);
  }
  function TSTypeParameterInstantiation(node2, parent) {
    this.tokenChar(60);
    let printTrailingSeparator = parent.type === "ArrowFunctionExpression" && node2.params.length === 1;
    if (this.tokenMap && node2.start != null && node2.end != null) {
      printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node2, (t) => this.tokenMap.matchesOriginal(t, ",")));
      printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">"));
    }
    this.printList(node2.params, printTrailingSeparator);
    this.tokenChar(62);
  }
  function TSTypeParameter(node2) {
    if (node2.const) {
      this.word("const");
      this.space();
    }
    if (node2.in) {
      this.word("in");
      this.space();
    }
    if (node2.out) {
      this.word("out");
      this.space();
    }
    this.word(node2.name);
    if (node2.constraint) {
      this.space();
      this.word("extends");
      this.space();
      this.print(node2.constraint);
    }
    if (node2.default) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node2.default);
    }
  }
  function TSParameterProperty(node2) {
    if (node2.accessibility) {
      this.word(node2.accessibility);
      this.space();
    }
    if (node2.readonly) {
      this.word("readonly");
      this.space();
    }
    this._param(node2.parameter);
  }
  function TSDeclareFunction(node2, parent) {
    if (node2.declare) {
      this.word("declare");
      this.space();
    }
    this._functionHead(node2, parent);
    this.semicolon();
  }
  function TSDeclareMethod(node2) {
    this._classMethodHead(node2);
    this.semicolon();
  }
  function TSQualifiedName(node2) {
    this.print(node2.left);
    this.tokenChar(46);
    this.print(node2.right);
  }
  function TSCallSignatureDeclaration(node2) {
    this.tsPrintSignatureDeclarationBase(node2);
    maybePrintTrailingCommaOrSemicolon(this, node2);
  }
  function maybePrintTrailingCommaOrSemicolon(printer2, node2) {
    if (!printer2.tokenMap || !node2.start || !node2.end) {
      printer2.semicolon();
      return;
    }
    if (printer2.tokenMap.endMatches(node2, ",")) {
      printer2.token(",");
    } else if (printer2.tokenMap.endMatches(node2, ";")) {
      printer2.semicolon();
    }
  }
  function TSConstructSignatureDeclaration(node2) {
    this.word("new");
    this.space();
    this.tsPrintSignatureDeclarationBase(node2);
    maybePrintTrailingCommaOrSemicolon(this, node2);
  }
  function TSPropertySignature(node2) {
    const {
      readonly
    } = node2;
    if (readonly) {
      this.word("readonly");
      this.space();
    }
    this.tsPrintPropertyOrMethodName(node2);
    this.print(node2.typeAnnotation);
    maybePrintTrailingCommaOrSemicolon(this, node2);
  }
  function tsPrintPropertyOrMethodName(node2) {
    if (node2.computed) {
      this.tokenChar(91);
    }
    this.print(node2.key);
    if (node2.computed) {
      this.tokenChar(93);
    }
    if (node2.optional) {
      this.tokenChar(63);
    }
  }
  function TSMethodSignature(node2) {
    const {
      kind
    } = node2;
    if (kind === "set" || kind === "get") {
      this.word(kind);
      this.space();
    }
    this.tsPrintPropertyOrMethodName(node2);
    this.tsPrintSignatureDeclarationBase(node2);
    maybePrintTrailingCommaOrSemicolon(this, node2);
  }
  function TSIndexSignature(node2) {
    const {
      readonly,
      static: isStatic
    } = node2;
    if (isStatic) {
      this.word("static");
      this.space();
    }
    if (readonly) {
      this.word("readonly");
      this.space();
    }
    this.tokenChar(91);
    this._parameters(node2.parameters, "]");
    this.print(node2.typeAnnotation);
    maybePrintTrailingCommaOrSemicolon(this, node2);
  }
  function TSAnyKeyword() {
    this.word("any");
  }
  function TSBigIntKeyword() {
    this.word("bigint");
  }
  function TSUnknownKeyword() {
    this.word("unknown");
  }
  function TSNumberKeyword() {
    this.word("number");
  }
  function TSObjectKeyword() {
    this.word("object");
  }
  function TSBooleanKeyword() {
    this.word("boolean");
  }
  function TSStringKeyword() {
    this.word("string");
  }
  function TSSymbolKeyword() {
    this.word("symbol");
  }
  function TSVoidKeyword() {
    this.word("void");
  }
  function TSUndefinedKeyword() {
    this.word("undefined");
  }
  function TSNullKeyword() {
    this.word("null");
  }
  function TSNeverKeyword() {
    this.word("never");
  }
  function TSIntrinsicKeyword() {
    this.word("intrinsic");
  }
  function TSThisType() {
    this.word("this");
  }
  function TSFunctionType(node2) {
    this.tsPrintFunctionOrConstructorType(node2);
  }
  function TSConstructorType(node2) {
    if (node2.abstract) {
      this.word("abstract");
      this.space();
    }
    this.word("new");
    this.space();
    this.tsPrintFunctionOrConstructorType(node2);
  }
  function tsPrintFunctionOrConstructorType(node2) {
    const {
      typeParameters
    } = node2;
    const parameters = node2.parameters;
    this.print(typeParameters);
    this.tokenChar(40);
    this._parameters(parameters, ")");
    this.space();
    const returnType = node2.typeAnnotation;
    this.print(returnType);
  }
  function TSTypeReference(node2) {
    const typeArguments = node2.typeParameters;
    this.print(node2.typeName, !!typeArguments);
    this.print(typeArguments);
  }
  function TSTypePredicate(node2) {
    if (node2.asserts) {
      this.word("asserts");
      this.space();
    }
    this.print(node2.parameterName);
    if (node2.typeAnnotation) {
      this.space();
      this.word("is");
      this.space();
      this.print(node2.typeAnnotation.typeAnnotation);
    }
  }
  function TSTypeQuery(node2) {
    this.word("typeof");
    this.space();
    this.print(node2.exprName);
    const typeArguments = node2.typeParameters;
    if (typeArguments) {
      this.print(typeArguments);
    }
  }
  function TSTypeLiteral(node2) {
    printBraced(this, node2, () => this.printJoin(node2.members, true, true));
  }
  function TSArrayType(node2) {
    this.print(node2.elementType, true);
    this.tokenChar(91);
    this.tokenChar(93);
  }
  function TSTupleType(node2) {
    this.tokenChar(91);
    this.printList(node2.elementTypes, this.shouldPrintTrailingComma("]"));
    this.tokenChar(93);
  }
  function TSOptionalType(node2) {
    this.print(node2.typeAnnotation);
    this.tokenChar(63);
  }
  function TSRestType(node2) {
    this.token("...");
    this.print(node2.typeAnnotation);
  }
  function TSNamedTupleMember(node2) {
    this.print(node2.label);
    if (node2.optional) this.tokenChar(63);
    this.tokenChar(58);
    this.space();
    this.print(node2.elementType);
  }
  function TSUnionType(node2) {
    tsPrintUnionOrIntersectionType(this, node2, "|");
  }
  function TSIntersectionType(node2) {
    tsPrintUnionOrIntersectionType(this, node2, "&");
  }
  function tsPrintUnionOrIntersectionType(printer2, node2, sep) {
    var _printer$tokenMap;
    let hasLeadingToken = 0;
    if ((_printer$tokenMap = printer2.tokenMap) != null && _printer$tokenMap.startMatches(node2, sep)) {
      hasLeadingToken = 1;
      printer2.token(sep);
    }
    printer2.printJoin(node2.types, void 0, void 0, function(i) {
      this.space();
      this.token(sep, null, i + hasLeadingToken);
      this.space();
    });
  }
  function TSConditionalType(node2) {
    this.print(node2.checkType);
    this.space();
    this.word("extends");
    this.space();
    this.print(node2.extendsType);
    this.space();
    this.tokenChar(63);
    this.space();
    this.print(node2.trueType);
    this.space();
    this.tokenChar(58);
    this.space();
    this.print(node2.falseType);
  }
  function TSInferType(node2) {
    this.word("infer");
    this.print(node2.typeParameter);
  }
  function TSParenthesizedType(node2) {
    this.tokenChar(40);
    this.print(node2.typeAnnotation);
    this.tokenChar(41);
  }
  function TSTypeOperator(node2) {
    this.word(node2.operator);
    this.space();
    this.print(node2.typeAnnotation);
  }
  function TSIndexedAccessType(node2) {
    this.print(node2.objectType, true);
    this.tokenChar(91);
    this.print(node2.indexType);
    this.tokenChar(93);
  }
  function TSMappedType(node2) {
    const {
      nameType,
      optional,
      readonly,
      typeAnnotation
    } = node2;
    this.tokenChar(123);
    const exit = this.enterDelimited();
    this.space();
    if (readonly) {
      tokenIfPlusMinus(this, readonly);
      this.word("readonly");
      this.space();
    }
    this.tokenChar(91);
    {
      this.word(node2.typeParameter.name);
    }
    this.space();
    this.word("in");
    this.space();
    {
      this.print(node2.typeParameter.constraint);
    }
    if (nameType) {
      this.space();
      this.word("as");
      this.space();
      this.print(nameType);
    }
    this.tokenChar(93);
    if (optional) {
      tokenIfPlusMinus(this, optional);
      this.tokenChar(63);
    }
    if (typeAnnotation) {
      this.tokenChar(58);
      this.space();
      this.print(typeAnnotation);
    }
    this.space();
    exit();
    this.tokenChar(125);
  }
  function tokenIfPlusMinus(self2, tok) {
    if (tok !== true) {
      self2.token(tok);
    }
  }
  function TSTemplateLiteralType(node2) {
    this._printTemplate(node2, node2.types);
  }
  function TSLiteralType(node2) {
    this.print(node2.literal);
  }
  function TSClassImplements(node2) {
    this.print(node2.expression);
    this.print(node2.typeArguments);
  }
  function TSInterfaceDeclaration(node2) {
    const {
      declare,
      id,
      typeParameters,
      extends: extendz,
      body
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    this.word("interface");
    this.space();
    this.print(id);
    this.print(typeParameters);
    if (extendz != null && extendz.length) {
      this.space();
      this.word("extends");
      this.space();
      this.printList(extendz);
    }
    this.space();
    this.print(body);
  }
  function TSInterfaceBody(node2) {
    printBraced(this, node2, () => this.printJoin(node2.body, true, true));
  }
  function TSTypeAliasDeclaration(node2) {
    const {
      declare,
      id,
      typeParameters,
      typeAnnotation
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    this.word("type");
    this.space();
    this.print(id);
    this.print(typeParameters);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(typeAnnotation);
    this.semicolon();
  }
  function TSTypeExpression(node2) {
    const {
      type,
      expression,
      typeAnnotation
    } = node2;
    this.print(expression, true);
    this.space();
    this.word(type === "TSAsExpression" ? "as" : "satisfies");
    this.space();
    this.print(typeAnnotation);
  }
  function TSTypeAssertion(node2) {
    const {
      typeAnnotation,
      expression
    } = node2;
    this.tokenChar(60);
    this.print(typeAnnotation);
    this.tokenChar(62);
    this.space();
    this.print(expression);
  }
  function TSInstantiationExpression(node2) {
    this.print(node2.expression);
    {
      this.print(node2.typeParameters);
    }
  }
  function TSEnumDeclaration(node2) {
    const {
      declare,
      const: isConst,
      id
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    if (isConst) {
      this.word("const");
      this.space();
    }
    this.word("enum");
    this.space();
    this.print(id);
    this.space();
    {
      TSEnumBody.call(this, node2);
    }
  }
  function TSEnumBody(node2) {
    printBraced(this, node2, () => {
      var _this$shouldPrintTrai;
      return this.printList(node2.members, (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) != null ? _this$shouldPrintTrai : true, true, true);
    });
  }
  function TSEnumMember(node2) {
    const {
      id,
      initializer
    } = node2;
    this.print(id);
    if (initializer) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(initializer);
    }
  }
  function TSModuleDeclaration(node2) {
    const {
      declare,
      id,
      kind
    } = node2;
    if (declare) {
      this.word("declare");
      this.space();
    }
    {
      if (!node2.global) {
        this.word(kind != null ? kind : id.type === "Identifier" ? "namespace" : "module");
        this.space();
      }
      this.print(id);
      if (!node2.body) {
        this.semicolon();
        return;
      }
      let body = node2.body;
      while (body.type === "TSModuleDeclaration") {
        this.tokenChar(46);
        this.print(body.id);
        body = body.body;
      }
      this.space();
      this.print(body);
    }
  }
  function TSModuleBlock(node2) {
    printBraced(this, node2, () => this.printSequence(node2.body, true));
  }
  function TSImportType(node2) {
    const {
      argument,
      qualifier,
      options: options2
    } = node2;
    this.word("import");
    this.tokenChar(40);
    this.print(argument);
    if (options2) {
      this.tokenChar(44);
      this.print(options2);
    }
    this.tokenChar(41);
    if (qualifier) {
      this.tokenChar(46);
      this.print(qualifier);
    }
    const typeArguments = node2.typeParameters;
    if (typeArguments) {
      this.print(typeArguments);
    }
  }
  function TSImportEqualsDeclaration(node2) {
    const {
      id,
      moduleReference
    } = node2;
    if (node2.isExport) {
      this.word("export");
      this.space();
    }
    this.word("import");
    this.space();
    this.print(id);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(moduleReference);
    this.semicolon();
  }
  function TSExternalModuleReference(node2) {
    this.token("require(");
    this.print(node2.expression);
    this.tokenChar(41);
  }
  function TSNonNullExpression(node2) {
    this.print(node2.expression);
    this.tokenChar(33);
  }
  function TSExportAssignment(node2) {
    this.word("export");
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node2.expression);
    this.semicolon();
  }
  function TSNamespaceExportDeclaration(node2) {
    this.word("export");
    this.space();
    this.word("as");
    this.space();
    this.word("namespace");
    this.space();
    this.print(node2.id);
    this.semicolon();
  }
  function tsPrintSignatureDeclarationBase(node2) {
    const {
      typeParameters
    } = node2;
    const parameters = node2.parameters;
    this.print(typeParameters);
    this.tokenChar(40);
    this._parameters(parameters, ")");
    const returnType = node2.typeAnnotation;
    this.print(returnType);
  }
  function tsPrintClassMemberModifiers(node2) {
    const isPrivateField = node2.type === "ClassPrivateProperty";
    const isPublicField = node2.type === "ClassAccessorProperty" || node2.type === "ClassProperty";
    printModifiersList(this, node2, [isPublicField && node2.declare && "declare", !isPrivateField && node2.accessibility]);
    if (node2.static) {
      this.word("static");
      this.space();
    }
    printModifiersList(this, node2, [!isPrivateField && node2.abstract && "abstract", !isPrivateField && node2.override && "override", (isPublicField || isPrivateField) && node2.readonly && "readonly"]);
  }
  function printBraced(printer2, node2, cb) {
    printer2.token("{");
    const exit = printer2.enterDelimited();
    cb();
    exit();
    printer2.rightBrace(node2);
  }
  function printModifiersList(printer2, node2, modifiers) {
    var _printer$tokenMap2;
    const modifiersSet = /* @__PURE__ */ new Set();
    for (const modifier of modifiers) {
      if (modifier) modifiersSet.add(modifier);
    }
    (_printer$tokenMap2 = printer2.tokenMap) == null || _printer$tokenMap2.find(node2, (tok) => {
      if (modifiersSet.has(tok.value)) {
        printer2.token(tok.value);
        printer2.space();
        modifiersSet.delete(tok.value);
        return modifiersSet.size === 0;
      }
    });
    for (const modifier of modifiersSet) {
      printer2.word(modifier);
      printer2.space();
    }
  }
  return typescript$1;
}
var hasRequiredGenerators;
function requireGenerators() {
  if (hasRequiredGenerators) return generators;
  hasRequiredGenerators = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _templateLiterals = requireTemplateLiterals();
    Object.keys(_templateLiterals).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _templateLiterals[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _templateLiterals[key];
        }
      });
    });
    var _expressions = requireExpressions();
    Object.keys(_expressions).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _expressions[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _expressions[key];
        }
      });
    });
    var _statements = requireStatements();
    Object.keys(_statements).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _statements[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _statements[key];
        }
      });
    });
    var _classes = requireClasses();
    Object.keys(_classes).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _classes[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _classes[key];
        }
      });
    });
    var _methods = requireMethods();
    Object.keys(_methods).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _methods[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _methods[key];
        }
      });
    });
    var _modules = requireModules();
    Object.keys(_modules).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _modules[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _modules[key];
        }
      });
    });
    var _types = requireTypes();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _types[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _types[key];
        }
      });
    });
    var _flow = requireFlow();
    Object.keys(_flow).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _flow[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _flow[key];
        }
      });
    });
    var _base = requireBase();
    Object.keys(_base).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _base[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _base[key];
        }
      });
    });
    var _jsx = requireJsx();
    Object.keys(_jsx).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _jsx[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _jsx[key];
        }
      });
    });
    var _typescript = requireTypescript();
    Object.keys(_typescript).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _typescript[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _typescript[key];
        }
      });
    });
  })(generators);
  return generators;
}
var deprecated = {};
var hasRequiredDeprecated;
function requireDeprecated() {
  if (hasRequiredDeprecated) return deprecated;
  hasRequiredDeprecated = 1;
  Object.defineProperty(deprecated, "__esModule", {
    value: true
  });
  deprecated.addDeprecatedGenerators = addDeprecatedGenerators;
  function addDeprecatedGenerators(PrinterClass) {
    {
      const deprecatedBabel7Generators = {
        Noop() {
        },
        TSExpressionWithTypeArguments(node2) {
          this.print(node2.expression);
          this.print(node2.typeParameters);
        },
        DecimalLiteral(node2) {
          const raw = this.getPossibleRaw(node2);
          if (!this.format.minified && raw !== void 0) {
            this.word(raw);
            return;
          }
          this.word(node2.value + "m");
        }
      };
      Object.assign(PrinterClass.prototype, deprecatedBabel7Generators);
    }
  }
  return deprecated;
}
var hasRequiredPrinter$1;
function requirePrinter$1() {
  if (hasRequiredPrinter$1) return printer$2;
  hasRequiredPrinter$1 = 1;
  Object.defineProperty(printer$2, "__esModule", {
    value: true
  });
  printer$2.default = void 0;
  var _buffer = requireBuffer();
  var _index = requireNode();
  var n = _index;
  var _t2 = requireLib$b();
  var _tokenMap = requireTokenMap();
  var generatorFunctions = requireGenerators();
  var _deprecated = requireDeprecated();
  const {
    isExpression,
    isFunction,
    isStatement,
    isClassBody,
    isTSInterfaceBody,
    isTSEnumMember
  } = _t2;
  const SCIENTIFIC_NOTATION = /e/i;
  const ZERO_DECIMAL_INTEGER = /\.0+$/;
  const HAS_NEWLINE = /[\n\r\u2028\u2029]/;
  const HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
  function commentIsNewline(c) {
    return c.type === "CommentLine" || HAS_NEWLINE.test(c.value);
  }
  const {
    needsParens
  } = n;
  class Printer {
    constructor(format, map, tokens, originalCode) {
      this.tokenContext = _index.TokenContext.normal;
      this._tokens = null;
      this._originalCode = null;
      this._currentNode = null;
      this._indent = 0;
      this._indentRepeat = 0;
      this._insideAux = false;
      this._noLineTerminator = false;
      this._noLineTerminatorAfterNode = null;
      this._printAuxAfterOnNextUserNode = false;
      this._printedComments = /* @__PURE__ */ new Set();
      this._endsWithInteger = false;
      this._endsWithWord = false;
      this._endsWithDiv = false;
      this._lastCommentLine = 0;
      this._endsWithInnerRaw = false;
      this._indentInnerComments = true;
      this.tokenMap = null;
      this._boundGetRawIdentifier = this._getRawIdentifier.bind(this);
      this._printSemicolonBeforeNextNode = -1;
      this._printSemicolonBeforeNextToken = -1;
      this.format = format;
      this._tokens = tokens;
      this._originalCode = originalCode;
      this._indentRepeat = format.indent.style.length;
      this._inputMap = map == null ? void 0 : map._inputMap;
      this._buf = new _buffer.default(map, format.indent.style[0]);
    }
    enterForStatementInit() {
      this.tokenContext |= _index.TokenContext.forInitHead | _index.TokenContext.forInOrInitHeadAccumulate;
      return () => this.tokenContext = _index.TokenContext.normal;
    }
    enterForXStatementInit(isForOf) {
      if (isForOf) {
        this.tokenContext |= _index.TokenContext.forOfHead;
        return null;
      } else {
        this.tokenContext |= _index.TokenContext.forInHead | _index.TokenContext.forInOrInitHeadAccumulate;
        return () => this.tokenContext = _index.TokenContext.normal;
      }
    }
    enterDelimited() {
      const oldTokenContext = this.tokenContext;
      const oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
      if (!(oldTokenContext & _index.TokenContext.forInOrInitHeadAccumulate) && oldNoLineTerminatorAfterNode === null) {
        return () => {
        };
      }
      this._noLineTerminatorAfterNode = null;
      this.tokenContext = _index.TokenContext.normal;
      return () => {
        this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
        this.tokenContext = oldTokenContext;
      };
    }
    generate(ast) {
      if (this.format.preserveFormat) {
        this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode);
      }
      this.print(ast);
      this._maybeAddAuxComment();
      return this._buf.get();
    }
    indent() {
      const {
        format
      } = this;
      if (format.preserveFormat || format.compact || format.concise) {
        return;
      }
      this._indent++;
    }
    dedent() {
      const {
        format
      } = this;
      if (format.preserveFormat || format.compact || format.concise) {
        return;
      }
      this._indent--;
    }
    semicolon(force = false) {
      this._maybeAddAuxComment();
      if (force) {
        this._appendChar(59);
        this._noLineTerminator = false;
        return;
      }
      if (this.tokenMap) {
        const node2 = this._currentNode;
        if (node2.start != null && node2.end != null) {
          if (!this.tokenMap.endMatches(node2, ";")) {
            this._printSemicolonBeforeNextNode = this._buf.getCurrentLine();
            return;
          }
          const indexes = this.tokenMap.getIndexes(this._currentNode);
          this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);
        }
      }
      this._queue(59);
      this._noLineTerminator = false;
    }
    rightBrace(node2) {
      if (this.format.minified) {
        this._buf.removeLastSemicolon();
      }
      this.sourceWithOffset("end", node2.loc, -1);
      this.tokenChar(125);
    }
    rightParens(node2) {
      this.sourceWithOffset("end", node2.loc, -1);
      this.tokenChar(41);
    }
    space(force = false) {
      const {
        format
      } = this;
      if (format.compact || format.preserveFormat) return;
      if (force) {
        this._space();
      } else if (this._buf.hasContent()) {
        const lastCp = this.getLastChar();
        if (lastCp !== 32 && lastCp !== 10) {
          this._space();
        }
      }
    }
    word(str, noLineTerminatorAfter = false) {
      this.tokenContext &= _index.TokenContext.forInOrInitHeadAccumulatePassThroughMask;
      this._maybePrintInnerComments(str);
      this._maybeAddAuxComment();
      if (this.tokenMap) this._catchUpToCurrentToken(str);
      if (this._endsWithWord || this._endsWithDiv && str.charCodeAt(0) === 47) {
        this._space();
      }
      this._append(str, false);
      this._endsWithWord = true;
      this._noLineTerminator = noLineTerminatorAfter;
    }
    number(str, number) {
      function isNonDecimalLiteral(str2) {
        if (str2.length > 2 && str2.charCodeAt(0) === 48) {
          const secondChar = str2.charCodeAt(1);
          return secondChar === 98 || secondChar === 111 || secondChar === 120;
        }
        return false;
      }
      this.word(str);
      this._endsWithInteger = Number.isInteger(number) && !isNonDecimalLiteral(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
    }
    token(str, maybeNewline = false, occurrenceCount = 0) {
      this.tokenContext &= _index.TokenContext.forInOrInitHeadAccumulatePassThroughMask;
      this._maybePrintInnerComments(str, occurrenceCount);
      this._maybeAddAuxComment();
      if (this.tokenMap) this._catchUpToCurrentToken(str, occurrenceCount);
      const lastChar = this.getLastChar();
      const strFirst = str.charCodeAt(0);
      if (lastChar === 33 && (str === "--" || strFirst === 61) || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {
        this._space();
      }
      this._append(str, maybeNewline);
      this._noLineTerminator = false;
    }
    tokenChar(char) {
      this.tokenContext &= _index.TokenContext.forInOrInitHeadAccumulatePassThroughMask;
      const str = String.fromCharCode(char);
      this._maybePrintInnerComments(str);
      this._maybeAddAuxComment();
      if (this.tokenMap) this._catchUpToCurrentToken(str);
      const lastChar = this.getLastChar();
      if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) {
        this._space();
      }
      this._appendChar(char);
      this._noLineTerminator = false;
    }
    newline(i = 1, force) {
      if (i <= 0) return;
      if (!force) {
        if (this.format.retainLines || this.format.compact) return;
        if (this.format.concise) {
          this.space();
          return;
        }
      }
      if (i > 2) i = 2;
      i -= this._buf.getNewlineCount();
      for (let j = 0; j < i; j++) {
        this._newline();
      }
      return;
    }
    endsWith(char) {
      return this.getLastChar() === char;
    }
    getLastChar() {
      return this._buf.getLastChar();
    }
    endsWithCharAndNewline() {
      return this._buf.endsWithCharAndNewline();
    }
    removeTrailingNewline() {
      this._buf.removeTrailingNewline();
    }
    exactSource(loc, cb) {
      if (!loc) {
        cb();
        return;
      }
      this._catchUp("start", loc);
      this._buf.exactSource(loc, cb);
    }
    source(prop, loc) {
      if (!loc) return;
      this._catchUp(prop, loc);
      this._buf.source(prop, loc);
    }
    sourceWithOffset(prop, loc, columnOffset) {
      if (!loc || this.format.preserveFormat) return;
      this._catchUp(prop, loc);
      this._buf.sourceWithOffset(prop, loc, columnOffset);
    }
    sourceIdentifierName(identifierName, pos) {
      if (!this._buf._canMarkIdName) return;
      const sourcePosition = this._buf._sourcePosition;
      sourcePosition.identifierNamePos = pos;
      sourcePosition.identifierName = identifierName;
    }
    _space() {
      this._queue(32);
    }
    _newline() {
      this._queue(10);
    }
    _catchUpToCurrentToken(str, occurrenceCount = 0) {
      const token = this.tokenMap.findMatching(this._currentNode, str, occurrenceCount);
      if (token) this._catchUpTo(token.loc.start);
      if (this._printSemicolonBeforeNextToken !== -1 && this._printSemicolonBeforeNextToken === this._buf.getCurrentLine()) {
        this._buf.appendChar(59);
        this._endsWithWord = false;
        this._endsWithInteger = false;
        this._endsWithDiv = false;
      }
      this._printSemicolonBeforeNextToken = -1;
      this._printSemicolonBeforeNextNode = -1;
    }
    _append(str, maybeNewline) {
      this._maybeIndent(str.charCodeAt(0));
      this._buf.append(str, maybeNewline);
      this._endsWithWord = false;
      this._endsWithInteger = false;
      this._endsWithDiv = false;
    }
    _appendChar(char) {
      this._maybeIndent(char);
      this._buf.appendChar(char);
      this._endsWithWord = false;
      this._endsWithInteger = false;
      this._endsWithDiv = false;
    }
    _queue(char) {
      this._maybeIndent(char);
      this._buf.queue(char);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _maybeIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        this._buf.queueIndentation(this._getIndent());
      }
    }
    _shouldIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        return true;
      }
    }
    catchUp(line) {
      if (!this.format.retainLines) return;
      const count = line - this._buf.getCurrentLine();
      for (let i = 0; i < count; i++) {
        this._newline();
      }
    }
    _catchUp(prop, loc) {
      const {
        format
      } = this;
      if (!format.preserveFormat) {
        if (format.retainLines && loc != null && loc[prop]) {
          this.catchUp(loc[prop].line);
        }
        return;
      }
      const pos = loc == null ? void 0 : loc[prop];
      if (pos != null) this._catchUpTo(pos);
    }
    _catchUpTo({
      line,
      column,
      index
    }) {
      const count = line - this._buf.getCurrentLine();
      if (count > 0 && this._noLineTerminator) {
        return;
      }
      for (let i = 0; i < count; i++) {
        this._newline();
      }
      const spacesCount = count > 0 ? column : column - this._buf.getCurrentColumn();
      if (spacesCount > 0) {
        const spaces = this._originalCode ? this._originalCode.slice(index - spacesCount, index).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu, " ") : " ".repeat(spacesCount);
        this._append(spaces, false);
      }
    }
    _getIndent() {
      return this._indentRepeat * this._indent;
    }
    printTerminatorless(node2) {
      this._noLineTerminator = true;
      this.print(node2);
    }
    print(node2, noLineTerminatorAfter, trailingCommentsLineOffset) {
      var _node$extra, _node$leadingComments, _node$leadingComments2;
      if (!node2) return;
      this._endsWithInnerRaw = false;
      const nodeType = node2.type;
      const format = this.format;
      const oldConcise = format.concise;
      if (node2._compact) {
        format.concise = true;
      }
      const printMethod = this[nodeType];
      if (printMethod === void 0) {
        throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node2.constructor.name)}`);
      }
      const parent = this._currentNode;
      this._currentNode = node2;
      if (this.tokenMap) {
        this._printSemicolonBeforeNextToken = this._printSemicolonBeforeNextNode;
      }
      const oldInAux = this._insideAux;
      this._insideAux = node2.loc == null;
      this._maybeAddAuxComment(this._insideAux && !oldInAux);
      const parenthesized = (_node$extra = node2.extra) == null ? void 0 : _node$extra.parenthesized;
      let shouldPrintParens = parenthesized && format.preserveFormat || parenthesized && format.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node2, parent, this.tokenContext, format.preserveFormat ? this._boundGetRawIdentifier : void 0);
      if (!shouldPrintParens && parenthesized && (_node$leadingComments = node2.leadingComments) != null && _node$leadingComments.length && node2.leadingComments[0].type === "CommentBlock") {
        const parentType = parent == null ? void 0 : parent.type;
        switch (parentType) {
          case "ExpressionStatement":
          case "VariableDeclarator":
          case "AssignmentExpression":
          case "ReturnStatement":
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            if (parent.callee !== node2) break;
          default:
            shouldPrintParens = true;
        }
      }
      let indentParenthesized = false;
      if (!shouldPrintParens && this._noLineTerminator && ((_node$leadingComments2 = node2.leadingComments) != null && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node2.loc && node2.loc.start.line > this._buf.getCurrentLine())) {
        shouldPrintParens = true;
        indentParenthesized = true;
      }
      let oldNoLineTerminatorAfterNode;
      let oldTokenContext;
      if (!shouldPrintParens) {
        noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n.isLastChild(parent, node2));
        if (noLineTerminatorAfter) {
          var _node$trailingComment;
          if ((_node$trailingComment = node2.trailingComments) != null && _node$trailingComment.some(commentIsNewline)) {
            if (isExpression(node2)) shouldPrintParens = true;
          } else {
            oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
            this._noLineTerminatorAfterNode = node2;
          }
        }
      }
      if (shouldPrintParens) {
        this.tokenChar(40);
        if (indentParenthesized) this.indent();
        this._endsWithInnerRaw = false;
        if (this.tokenContext & _index.TokenContext.forInOrInitHeadAccumulate) {
          oldTokenContext = this.tokenContext;
          this.tokenContext = _index.TokenContext.normal;
        }
        oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
        this._noLineTerminatorAfterNode = null;
      }
      this._lastCommentLine = 0;
      this._printLeadingComments(node2, parent);
      const loc = nodeType === "Program" || nodeType === "File" ? null : node2.loc;
      this.exactSource(loc, printMethod.bind(this, node2, parent));
      if (shouldPrintParens) {
        this._printTrailingComments(node2, parent);
        if (indentParenthesized) {
          this.dedent();
          this.newline();
        }
        this.tokenChar(41);
        this._noLineTerminator = noLineTerminatorAfter;
        if (oldTokenContext) this.tokenContext = oldTokenContext;
      } else if (noLineTerminatorAfter && !this._noLineTerminator) {
        this._noLineTerminator = true;
        this._printTrailingComments(node2, parent);
      } else {
        this._printTrailingComments(node2, parent, trailingCommentsLineOffset);
      }
      this._currentNode = parent;
      format.concise = oldConcise;
      this._insideAux = oldInAux;
      if (oldNoLineTerminatorAfterNode !== void 0) {
        this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
      }
      this._endsWithInnerRaw = false;
    }
    _maybeAddAuxComment(enteredPositionlessNode) {
      if (enteredPositionlessNode) this._printAuxBeforeComment();
      if (!this._insideAux) this._printAuxAfterComment();
    }
    _printAuxBeforeComment() {
      if (this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = true;
      const comment = this.format.auxiliaryCommentBefore;
      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        }, 0);
      }
    }
    _printAuxAfterComment() {
      if (!this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = false;
      const comment = this.format.auxiliaryCommentAfter;
      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        }, 0);
      }
    }
    getPossibleRaw(node2) {
      const extra = node2.extra;
      if ((extra == null ? void 0 : extra.raw) != null && extra.rawValue != null && node2.value === extra.rawValue) {
        return extra.raw;
      }
    }
    printJoin(nodes, statement, indent2, separator, printTrailingSeparator, addNewlines, iterator2, trailingCommentsLineOffset) {
      if (!(nodes != null && nodes.length)) return;
      if (indent2 == null && this.format.retainLines) {
        var _nodes$0$loc;
        const startLine = (_nodes$0$loc = nodes[0].loc) == null ? void 0 : _nodes$0$loc.start.line;
        if (startLine != null && startLine !== this._buf.getCurrentLine()) {
          indent2 = true;
        }
      }
      if (indent2) this.indent();
      const newlineOpts = {
        addNewlines,
        nextNodeStartLine: 0
      };
      const boundSeparator = separator == null ? void 0 : separator.bind(this);
      const len = nodes.length;
      for (let i = 0; i < len; i++) {
        const node2 = nodes[i];
        if (!node2) continue;
        if (statement) this._printNewline(i === 0, newlineOpts);
        this.print(node2, void 0, trailingCommentsLineOffset || 0);
        iterator2 == null || iterator2(node2, i);
        if (boundSeparator != null) {
          if (i < len - 1) boundSeparator(i, false);
          else if (printTrailingSeparator) boundSeparator(i, true);
        }
        if (statement) {
          var _node$trailingComment2;
          if (!((_node$trailingComment2 = node2.trailingComments) != null && _node$trailingComment2.length)) {
            this._lastCommentLine = 0;
          }
          if (i + 1 === len) {
            this.newline(1);
          } else {
            var _nextNode$loc;
            const nextNode = nodes[i + 1];
            newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? void 0 : _nextNode$loc.start.line) || 0;
            this._printNewline(true, newlineOpts);
          }
        }
      }
      if (indent2) this.dedent();
    }
    printAndIndentOnComments(node2) {
      const indent2 = node2.leadingComments && node2.leadingComments.length > 0;
      if (indent2) this.indent();
      this.print(node2);
      if (indent2) this.dedent();
    }
    printBlock(parent) {
      const node2 = parent.body;
      if (node2.type !== "EmptyStatement") {
        this.space();
      }
      this.print(node2);
    }
    _printTrailingComments(node2, parent, lineOffset) {
      const {
        innerComments,
        trailingComments
      } = node2;
      if (innerComments != null && innerComments.length) {
        this._printComments(2, innerComments, node2, parent, lineOffset);
      }
      if (trailingComments != null && trailingComments.length) {
        this._printComments(2, trailingComments, node2, parent, lineOffset);
      }
    }
    _printLeadingComments(node2, parent) {
      const comments2 = node2.leadingComments;
      if (!(comments2 != null && comments2.length)) return;
      this._printComments(0, comments2, node2, parent);
    }
    _maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {
      if (this._endsWithInnerRaw) {
        var _this$tokenMap;
        this.printInnerComments((_this$tokenMap = this.tokenMap) == null ? void 0 : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));
      }
      this._endsWithInnerRaw = true;
      this._indentInnerComments = true;
    }
    printInnerComments(nextToken) {
      const node2 = this._currentNode;
      const comments2 = node2.innerComments;
      if (!(comments2 != null && comments2.length)) return;
      const hasSpace = this.endsWith(32);
      const indent2 = this._indentInnerComments;
      const printedCommentsCount = this._printedComments.size;
      if (indent2) this.indent();
      this._printComments(1, comments2, node2, void 0, void 0, nextToken);
      if (hasSpace && printedCommentsCount !== this._printedComments.size) {
        this.space();
      }
      if (indent2) this.dedent();
    }
    noIndentInnerCommentsHere() {
      this._indentInnerComments = false;
    }
    printSequence(nodes, indent2, trailingCommentsLineOffset, addNewlines) {
      this.printJoin(nodes, true, indent2 != null ? indent2 : false, void 0, void 0, addNewlines, void 0, trailingCommentsLineOffset);
    }
    printList(items, printTrailingSeparator, statement, indent2, separator, iterator2) {
      this.printJoin(items, statement, indent2, separator != null ? separator : commaSeparator, printTrailingSeparator, void 0, iterator2);
    }
    shouldPrintTrailingComma(listEnd) {
      if (!this.tokenMap) return null;
      const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, (token) => this.tokenMap.matchesOriginal(token, listEnd));
      if (listEndIndex <= 0) return null;
      return this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");
    }
    _printNewline(newLine, opts) {
      const format = this.format;
      if (format.retainLines || format.compact) return;
      if (format.concise) {
        this.space();
        return;
      }
      if (!newLine) {
        return;
      }
      const startLine = opts.nextNodeStartLine;
      const lastCommentLine = this._lastCommentLine;
      if (startLine > 0 && lastCommentLine > 0) {
        const offset = startLine - lastCommentLine;
        if (offset >= 0) {
          this.newline(offset || 1);
          return;
        }
      }
      if (this._buf.hasContent()) {
        this.newline(1);
      }
    }
    _shouldPrintComment(comment, nextToken) {
      if (comment.ignore) return 0;
      if (this._printedComments.has(comment)) return 0;
      if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) {
        return 2;
      }
      if (nextToken && this.tokenMap) {
        const commentTok = this.tokenMap.find(this._currentNode, (token) => token.value === comment.value);
        if (commentTok && commentTok.start > nextToken.start) {
          return 2;
        }
      }
      this._printedComments.add(comment);
      if (!this.format.shouldPrintComment(comment.value)) {
        return 0;
      }
      return 1;
    }
    _printComment(comment, skipNewLines) {
      const noLineTerminator = this._noLineTerminator;
      const isBlockComment = comment.type === "CommentBlock";
      const printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;
      if (printNewLines && this._buf.hasContent() && skipNewLines !== 2) {
        this.newline(1);
      }
      const lastCharCode = this.getLastChar();
      if (lastCharCode !== 91 && lastCharCode !== 123 && lastCharCode !== 40) {
        this.space();
      }
      let val;
      if (isBlockComment) {
        val = `/*${comment.value}*/`;
        if (this.format.indent.adjustMultilineComment) {
          var _comment$loc;
          const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;
          if (offset) {
            const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
            val = val.replace(newlineRegex, "\n");
          }
          if (this.format.concise) {
            val = val.replace(/\n(?!$)/g, `
`);
          } else {
            let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
            if (this._shouldIndent(47) || this.format.retainLines) {
              indentSize += this._getIndent();
            }
            val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
          }
        }
      } else if (!noLineTerminator) {
        val = `//${comment.value}`;
      } else {
        val = `/*${comment.value}*/`;
      }
      if (this._endsWithDiv) this._space();
      if (this.tokenMap) {
        const {
          _printSemicolonBeforeNextToken,
          _printSemicolonBeforeNextNode
        } = this;
        this._printSemicolonBeforeNextToken = -1;
        this._printSemicolonBeforeNextNode = -1;
        this.source("start", comment.loc);
        this._append(val, isBlockComment);
        this._printSemicolonBeforeNextNode = _printSemicolonBeforeNextNode;
        this._printSemicolonBeforeNextToken = _printSemicolonBeforeNextToken;
      } else {
        this.source("start", comment.loc);
        this._append(val, isBlockComment);
      }
      if (!isBlockComment && !noLineTerminator) {
        this.newline(1, true);
      }
      if (printNewLines && skipNewLines !== 3) {
        this.newline(1);
      }
    }
    _printComments(type, comments2, node2, parent, lineOffset = 0, nextToken) {
      const nodeLoc = node2.loc;
      const len = comments2.length;
      let hasLoc = !!nodeLoc;
      const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;
      const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
      let lastLine = 0;
      let leadingCommentNewline = 0;
      const maybeNewline = this._noLineTerminator ? function() {
      } : this.newline.bind(this);
      for (let i = 0; i < len; i++) {
        const comment = comments2[i];
        const shouldPrint = this._shouldPrintComment(comment, nextToken);
        if (shouldPrint === 2) {
          hasLoc = false;
          break;
        }
        if (hasLoc && comment.loc && shouldPrint === 1) {
          const commentStartLine = comment.loc.start.line;
          const commentEndLine = comment.loc.end.line;
          if (type === 0) {
            let offset = 0;
            if (i === 0) {
              if (this._buf.hasContent() && (comment.type === "CommentLine" || commentStartLine !== commentEndLine)) {
                offset = leadingCommentNewline = 1;
              }
            } else {
              offset = commentStartLine - lastLine;
            }
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
            if (i + 1 === len) {
              maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline));
              lastLine = nodeStartLine;
            }
          } else if (type === 1) {
            const offset = commentStartLine - (i === 0 ? nodeStartLine : lastLine);
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
            if (i + 1 === len) {
              maybeNewline(Math.min(1, nodeEndLine - lastLine));
              lastLine = nodeEndLine;
            }
          } else {
            const offset = commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
          }
        } else {
          hasLoc = false;
          if (shouldPrint !== 1) {
            continue;
          }
          if (len === 1) {
            const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value);
            const shouldSkipNewline = singleLine && !isStatement(node2) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumMember(node2);
            if (type === 0) {
              this._printComment(comment, shouldSkipNewline && node2.type !== "ObjectExpression" || singleLine && isFunction(parent, {
                body: node2
              }) ? 1 : 0);
            } else if (shouldSkipNewline && type === 2) {
              this._printComment(comment, 1);
            } else {
              this._printComment(comment, 0);
            }
          } else if (type === 1 && !(node2.type === "ObjectExpression" && node2.properties.length > 1) && node2.type !== "ClassBody" && node2.type !== "TSInterfaceBody") {
            this._printComment(comment, i === 0 ? 2 : i === len - 1 ? 3 : 0);
          } else {
            this._printComment(comment, 0);
          }
        }
      }
      if (type === 2 && hasLoc && lastLine) {
        this._lastCommentLine = lastLine;
      }
    }
  }
  Object.assign(Printer.prototype, generatorFunctions);
  {
    (0, _deprecated.addDeprecatedGenerators)(Printer);
  }
  printer$2.default = Printer;
  function commaSeparator(occurrenceCount, last) {
    this.token(",", false, occurrenceCount);
    if (!last) this.space();
  }
  return printer$2;
}
var hasRequiredLib$6;
function requireLib$6() {
  if (hasRequiredLib$6) return lib$4;
  hasRequiredLib$6 = 1;
  Object.defineProperty(lib$4, "__esModule", {
    value: true
  });
  lib$4.default = void 0;
  lib$4.generate = generate2;
  var _sourceMap = requireSourceMap();
  var _printer = requirePrinter$1();
  function normalizeOptions(code, opts, ast) {
    if (opts.experimental_preserveFormat) {
      if (typeof code !== "string") {
        throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
      }
      if (!opts.retainLines) {
        throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
      }
      if (opts.compact && opts.compact !== "auto") {
        throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
      }
      if (opts.minified) {
        throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
      }
      if (opts.jsescOption) {
        throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
      }
      if (!Array.isArray(ast.tokens)) {
        throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");
      }
    }
    const format = {
      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
      shouldPrintComment: opts.shouldPrintComment,
      preserveFormat: opts.experimental_preserveFormat,
      retainLines: opts.retainLines,
      retainFunctionParens: opts.retainFunctionParens,
      comments: opts.comments == null || opts.comments,
      compact: opts.compact,
      minified: opts.minified,
      concise: opts.concise,
      indent: {
        adjustMultilineComment: true,
        style: "  "
      },
      jsescOption: Object.assign({
        quotes: "double",
        wrap: true,
        minimal: false
      }, opts.jsescOption),
      topicToken: opts.topicToken,
      importAttributesKeyword: opts.importAttributesKeyword
    };
    {
      var _opts$recordAndTupleS;
      format.decoratorsBeforeExport = opts.decoratorsBeforeExport;
      format.jsescOption.json = opts.jsonCompatibleStrings;
      format.recordAndTupleSyntaxType = (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash";
    }
    if (format.minified) {
      format.compact = true;
      format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
    } else {
      format.shouldPrintComment = format.shouldPrintComment || ((value2) => format.comments || value2.includes("@license") || value2.includes("@preserve"));
    }
    if (format.compact === "auto") {
      format.compact = typeof code === "string" && code.length > 5e5;
      if (format.compact) {
        console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of ${"500KB"}.`);
      }
    }
    if (format.compact || format.preserveFormat) {
      format.indent.adjustMultilineComment = false;
    }
    const {
      auxiliaryCommentBefore,
      auxiliaryCommentAfter,
      shouldPrintComment
    } = format;
    if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {
      format.auxiliaryCommentBefore = void 0;
    }
    if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {
      format.auxiliaryCommentAfter = void 0;
    }
    return format;
  }
  {
    lib$4.CodeGenerator = class CodeGenerator {
      constructor(ast, opts = {}, code) {
        this._ast = void 0;
        this._format = void 0;
        this._map = void 0;
        this._ast = ast;
        this._format = normalizeOptions(code, opts, ast);
        this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
      }
      generate() {
        const printer2 = new _printer.default(this._format, this._map);
        return printer2.generate(this._ast);
      }
    };
  }
  function generate2(ast, opts = {}, code) {
    const format = normalizeOptions(code, opts, ast);
    const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
    const printer2 = new _printer.default(format, map, ast.tokens, typeof code === "string" ? code : null);
    return printer2.generate(ast);
  }
  lib$4.default = generate2;
  return lib$4;
}
var ancestry = {};
var hasRequiredAncestry;
function requireAncestry() {
  if (hasRequiredAncestry) return ancestry;
  hasRequiredAncestry = 1;
  Object.defineProperty(ancestry, "__esModule", {
    value: true
  });
  ancestry.find = find;
  ancestry.findParent = findParent;
  ancestry.getAncestry = getAncestry;
  ancestry.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
  ancestry.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
  ancestry.getFunctionParent = getFunctionParent;
  ancestry.getStatementParent = getStatementParent;
  ancestry.inType = inType;
  ancestry.isAncestor = isAncestor;
  ancestry.isDescendant = isDescendant;
  var _t2 = requireLib$b();
  const {
    VISITOR_KEYS
  } = _t2;
  function findParent(callback) {
    let path2 = this;
    while (path2 = path2.parentPath) {
      if (callback(path2)) return path2;
    }
    return null;
  }
  function find(callback) {
    let path2 = this;
    do {
      if (callback(path2)) return path2;
    } while (path2 = path2.parentPath);
    return null;
  }
  function getFunctionParent() {
    return this.findParent((p) => p.isFunction());
  }
  function getStatementParent() {
    let path2 = this;
    do {
      if (!path2.parentPath || Array.isArray(path2.container) && path2.isStatement()) {
        break;
      } else {
        path2 = path2.parentPath;
      }
    } while (path2);
    if (path2 && (path2.isProgram() || path2.isFile())) {
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    }
    return path2;
  }
  function getEarliestCommonAncestorFrom(paths) {
    return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
      let earliest;
      const keys = VISITOR_KEYS[deepest.type];
      for (const ancestry2 of ancestries) {
        const path2 = ancestry2[i + 1];
        if (!earliest) {
          earliest = path2;
          continue;
        }
        if (path2.listKey && earliest.listKey === path2.listKey) {
          if (path2.key < earliest.key) {
            earliest = path2;
            continue;
          }
        }
        const earliestKeyIndex = keys.indexOf(earliest.parentKey);
        const currentKeyIndex = keys.indexOf(path2.parentKey);
        if (earliestKeyIndex > currentKeyIndex) {
          earliest = path2;
        }
      }
      return earliest;
    });
  }
  function getDeepestCommonAncestorFrom(paths, filter) {
    if (!paths.length) {
      return this;
    }
    if (paths.length === 1) {
      return paths[0];
    }
    let minDepth = Infinity;
    let lastCommonIndex, lastCommon;
    const ancestries = paths.map((path2) => {
      const ancestry2 = [];
      do {
        ancestry2.unshift(path2);
      } while ((path2 = path2.parentPath) && path2 !== this);
      if (ancestry2.length < minDepth) {
        minDepth = ancestry2.length;
      }
      return ancestry2;
    });
    const first = ancestries[0];
    depthLoop: for (let i = 0; i < minDepth; i++) {
      const shouldMatch = first[i];
      for (const ancestry2 of ancestries) {
        if (ancestry2[i] !== shouldMatch) {
          break depthLoop;
        }
      }
      lastCommonIndex = i;
      lastCommon = shouldMatch;
    }
    if (lastCommon) {
      if (filter) {
        return filter(lastCommon, lastCommonIndex, ancestries);
      } else {
        return lastCommon;
      }
    } else {
      throw new Error("Couldn't find intersection");
    }
  }
  function getAncestry() {
    let path2 = this;
    const paths = [];
    do {
      paths.push(path2);
    } while (path2 = path2.parentPath);
    return paths;
  }
  function isAncestor(maybeDescendant) {
    return maybeDescendant.isDescendant(this);
  }
  function isDescendant(maybeAncestor) {
    return !!this.findParent((parent) => parent === maybeAncestor);
  }
  function inType(...candidateTypes) {
    let path2 = this;
    while (path2) {
      if (candidateTypes.includes(path2.node.type)) return true;
      path2 = path2.parentPath;
    }
    return false;
  }
  return ancestry;
}
var inference = {};
var inferers = {};
var infererReference = {};
var util$1 = {};
var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1) return util$1;
  hasRequiredUtil$1 = 1;
  Object.defineProperty(util$1, "__esModule", {
    value: true
  });
  util$1.createUnionType = createUnionType;
  var _t2 = requireLib$b();
  const {
    createFlowUnionType: createFlowUnionType2,
    createTSUnionType: createTSUnionType2,
    createUnionTypeAnnotation,
    isFlowType,
    isTSType
  } = _t2;
  function createUnionType(types2) {
    {
      if (types2.every((v) => isFlowType(v))) {
        if (createFlowUnionType2) {
          return createFlowUnionType2(types2);
        }
        return createUnionTypeAnnotation(types2);
      } else if (types2.every((v) => isTSType(v))) {
        if (createTSUnionType2) {
          return createTSUnionType2(types2);
        }
      }
    }
  }
  return util$1;
}
var hasRequiredInfererReference;
function requireInfererReference() {
  if (hasRequiredInfererReference) return infererReference;
  hasRequiredInfererReference = 1;
  Object.defineProperty(infererReference, "__esModule", {
    value: true
  });
  infererReference.default = _default;
  var _t2 = requireLib$b();
  var _util = requireUtil$1();
  const {
    BOOLEAN_NUMBER_BINARY_OPERATORS,
    createTypeAnnotationBasedOnTypeof: createTypeAnnotationBasedOnTypeof2,
    numberTypeAnnotation,
    voidTypeAnnotation
  } = _t2;
  function _default(node2) {
    if (!this.isReferenced()) return;
    const binding2 = this.scope.getBinding(node2.name);
    if (binding2) {
      if (binding2.identifier.typeAnnotation) {
        return binding2.identifier.typeAnnotation;
      } else {
        return getTypeAnnotationBindingConstantViolations(binding2, this, node2.name);
      }
    }
    if (node2.name === "undefined") {
      return voidTypeAnnotation();
    } else if (node2.name === "NaN" || node2.name === "Infinity") {
      return numberTypeAnnotation();
    } else if (node2.name === "arguments") ;
  }
  function getTypeAnnotationBindingConstantViolations(binding2, path2, name) {
    const types2 = [];
    const functionConstantViolations = [];
    let constantViolations = getConstantViolationsBefore(binding2, path2, functionConstantViolations);
    const testType = getConditionalAnnotation(binding2, path2, name);
    if (testType) {
      const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
      constantViolations = constantViolations.filter((path3) => !testConstantViolations.includes(path3));
      types2.push(testType.typeAnnotation);
    }
    if (constantViolations.length) {
      constantViolations.push(...functionConstantViolations);
      for (const violation of constantViolations) {
        types2.push(violation.getTypeAnnotation());
      }
    }
    if (!types2.length) {
      return;
    }
    return (0, _util.createUnionType)(types2);
  }
  function getConstantViolationsBefore(binding2, path2, functions) {
    const violations = binding2.constantViolations.slice();
    violations.unshift(binding2.path);
    return violations.filter((violation) => {
      violation = violation.resolve();
      const status = violation._guessExecutionStatusRelativeTo(path2);
      if (functions && status === "unknown") functions.push(violation);
      return status === "before";
    });
  }
  function inferAnnotationFromBinaryExpression(name, path2) {
    const operator = path2.node.operator;
    const right = path2.get("right").resolve();
    const left = path2.get("left").resolve();
    let target;
    if (left.isIdentifier({
      name
    })) {
      target = right;
    } else if (right.isIdentifier({
      name
    })) {
      target = left;
    }
    if (target) {
      if (operator === "===") {
        return target.getTypeAnnotation();
      }
      if (BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator)) {
        return numberTypeAnnotation();
      }
      return;
    }
    if (operator !== "===" && operator !== "==") return;
    let typeofPath;
    let typePath;
    if (left.isUnaryExpression({
      operator: "typeof"
    })) {
      typeofPath = left;
      typePath = right;
    } else if (right.isUnaryExpression({
      operator: "typeof"
    })) {
      typeofPath = right;
      typePath = left;
    }
    if (!typeofPath) return;
    if (!typeofPath.get("argument").isIdentifier({
      name
    })) return;
    typePath = typePath.resolve();
    if (!typePath.isLiteral()) return;
    const typeValue = typePath.node.value;
    if (typeof typeValue !== "string") return;
    return createTypeAnnotationBasedOnTypeof2(typeValue);
  }
  function getParentConditionalPath(binding2, path2, name) {
    let parentPath;
    while (parentPath = path2.parentPath) {
      if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
        if (path2.key === "test") {
          return;
        }
        return parentPath;
      }
      if (parentPath.isFunction()) {
        if (parentPath.parentPath.scope.getBinding(name) !== binding2) return;
      }
      path2 = parentPath;
    }
  }
  function getConditionalAnnotation(binding2, path2, name) {
    const ifStatement = getParentConditionalPath(binding2, path2, name);
    if (!ifStatement) return;
    const test = ifStatement.get("test");
    const paths = [test];
    const types2 = [];
    for (let i = 0; i < paths.length; i++) {
      const path3 = paths[i];
      if (path3.isLogicalExpression()) {
        if (path3.node.operator === "&&") {
          paths.push(path3.get("left"));
          paths.push(path3.get("right"));
        }
      } else if (path3.isBinaryExpression()) {
        const type = inferAnnotationFromBinaryExpression(name, path3);
        if (type) types2.push(type);
      }
    }
    if (types2.length) {
      return {
        typeAnnotation: (0, _util.createUnionType)(types2),
        ifStatement
      };
    }
    return getConditionalAnnotation(binding2, ifStatement, name);
  }
  return infererReference;
}
var hasRequiredInferers;
function requireInferers() {
  if (hasRequiredInferers) return inferers;
  hasRequiredInferers = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ArrayExpression = ArrayExpression;
    exports2.AssignmentExpression = AssignmentExpression;
    exports2.BinaryExpression = BinaryExpression;
    exports2.BooleanLiteral = BooleanLiteral;
    exports2.CallExpression = CallExpression;
    exports2.ConditionalExpression = ConditionalExpression;
    exports2.ClassDeclaration = exports2.ClassExpression = exports2.FunctionDeclaration = exports2.ArrowFunctionExpression = exports2.FunctionExpression = Func;
    Object.defineProperty(exports2, "Identifier", {
      enumerable: true,
      get: function() {
        return _infererReference.default;
      }
    });
    exports2.LogicalExpression = LogicalExpression;
    exports2.NewExpression = NewExpression;
    exports2.NullLiteral = NullLiteral;
    exports2.NumericLiteral = NumericLiteral;
    exports2.ObjectExpression = ObjectExpression;
    exports2.ParenthesizedExpression = ParenthesizedExpression;
    exports2.RegExpLiteral = RegExpLiteral;
    exports2.RestElement = RestElement;
    exports2.SequenceExpression = SequenceExpression;
    exports2.StringLiteral = StringLiteral;
    exports2.TSAsExpression = TSAsExpression;
    exports2.TSNonNullExpression = TSNonNullExpression;
    exports2.TaggedTemplateExpression = TaggedTemplateExpression;
    exports2.TemplateLiteral = TemplateLiteral;
    exports2.TypeCastExpression = TypeCastExpression;
    exports2.UnaryExpression = UnaryExpression;
    exports2.UpdateExpression = UpdateExpression;
    exports2.VariableDeclarator = VariableDeclarator;
    var _t2 = requireLib$b();
    var _infererReference = requireInfererReference();
    var _util = requireUtil$1();
    const {
      BOOLEAN_BINARY_OPERATORS,
      BOOLEAN_UNARY_OPERATORS,
      NUMBER_BINARY_OPERATORS,
      NUMBER_UNARY_OPERATORS,
      STRING_UNARY_OPERATORS,
      anyTypeAnnotation,
      arrayTypeAnnotation,
      booleanTypeAnnotation,
      buildMatchMemberExpression: buildMatchMemberExpression2,
      genericTypeAnnotation,
      identifier: identifier2,
      nullLiteralTypeAnnotation,
      numberTypeAnnotation,
      stringTypeAnnotation,
      tupleTypeAnnotation,
      unionTypeAnnotation,
      voidTypeAnnotation,
      isIdentifier
    } = _t2;
    function VariableDeclarator() {
      if (!this.get("id").isIdentifier()) return;
      return this.get("init").getTypeAnnotation();
    }
    function TypeCastExpression(node2) {
      return node2.typeAnnotation;
    }
    TypeCastExpression.validParent = true;
    function TSAsExpression(node2) {
      return node2.typeAnnotation;
    }
    TSAsExpression.validParent = true;
    function TSNonNullExpression() {
      return this.get("expression").getTypeAnnotation();
    }
    function NewExpression(node2) {
      if (node2.callee.type === "Identifier") {
        return genericTypeAnnotation(node2.callee);
      }
    }
    function TemplateLiteral() {
      return stringTypeAnnotation();
    }
    function UnaryExpression(node2) {
      const operator = node2.operator;
      if (operator === "void") {
        return voidTypeAnnotation();
      } else if (NUMBER_UNARY_OPERATORS.includes(operator)) {
        return numberTypeAnnotation();
      } else if (STRING_UNARY_OPERATORS.includes(operator)) {
        return stringTypeAnnotation();
      } else if (BOOLEAN_UNARY_OPERATORS.includes(operator)) {
        return booleanTypeAnnotation();
      }
    }
    function BinaryExpression(node2) {
      const operator = node2.operator;
      if (NUMBER_BINARY_OPERATORS.includes(operator)) {
        return numberTypeAnnotation();
      } else if (BOOLEAN_BINARY_OPERATORS.includes(operator)) {
        return booleanTypeAnnotation();
      } else if (operator === "+") {
        const right = this.get("right");
        const left = this.get("left");
        if (left.isBaseType("number") && right.isBaseType("number")) {
          return numberTypeAnnotation();
        } else if (left.isBaseType("string") || right.isBaseType("string")) {
          return stringTypeAnnotation();
        }
        return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
      }
    }
    function LogicalExpression() {
      const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
      return (0, _util.createUnionType)(argumentTypes);
    }
    function ConditionalExpression() {
      const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
      return (0, _util.createUnionType)(argumentTypes);
    }
    function SequenceExpression() {
      return this.get("expressions").pop().getTypeAnnotation();
    }
    function ParenthesizedExpression() {
      return this.get("expression").getTypeAnnotation();
    }
    function AssignmentExpression() {
      return this.get("right").getTypeAnnotation();
    }
    function UpdateExpression(node2) {
      const operator = node2.operator;
      if (operator === "++" || operator === "--") {
        return numberTypeAnnotation();
      }
    }
    function StringLiteral() {
      return stringTypeAnnotation();
    }
    function NumericLiteral() {
      return numberTypeAnnotation();
    }
    function BooleanLiteral() {
      return booleanTypeAnnotation();
    }
    function NullLiteral() {
      return nullLiteralTypeAnnotation();
    }
    function RegExpLiteral() {
      return genericTypeAnnotation(identifier2("RegExp"));
    }
    function ObjectExpression() {
      return genericTypeAnnotation(identifier2("Object"));
    }
    function ArrayExpression() {
      return genericTypeAnnotation(identifier2("Array"));
    }
    function RestElement() {
      return ArrayExpression();
    }
    RestElement.validParent = true;
    function Func() {
      return genericTypeAnnotation(identifier2("Function"));
    }
    const isArrayFrom = buildMatchMemberExpression2("Array.from");
    const isObjectKeys = buildMatchMemberExpression2("Object.keys");
    const isObjectValues = buildMatchMemberExpression2("Object.values");
    const isObjectEntries = buildMatchMemberExpression2("Object.entries");
    function CallExpression() {
      const {
        callee
      } = this.node;
      if (isObjectKeys(callee)) {
        return arrayTypeAnnotation(stringTypeAnnotation());
      } else if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, {
        name: "Array"
      })) {
        return arrayTypeAnnotation(anyTypeAnnotation());
      } else if (isObjectEntries(callee)) {
        return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
      }
      return resolveCall(this.get("callee"));
    }
    function TaggedTemplateExpression() {
      return resolveCall(this.get("tag"));
    }
    function resolveCall(callee) {
      callee = callee.resolve();
      if (callee.isFunction()) {
        const {
          node: node2
        } = callee;
        if (node2.async) {
          if (node2.generator) {
            return genericTypeAnnotation(identifier2("AsyncIterator"));
          } else {
            return genericTypeAnnotation(identifier2("Promise"));
          }
        } else {
          if (node2.generator) {
            return genericTypeAnnotation(identifier2("Iterator"));
          } else if (callee.node.returnType) {
            return callee.node.returnType;
          } else ;
        }
      }
    }
  })(inferers);
  return inferers;
}
var hasRequiredInference;
function requireInference() {
  if (hasRequiredInference) return inference;
  hasRequiredInference = 1;
  Object.defineProperty(inference, "__esModule", {
    value: true
  });
  inference._getTypeAnnotation = _getTypeAnnotation;
  inference.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
  inference.couldBeBaseType = couldBeBaseType;
  inference.getTypeAnnotation = getTypeAnnotation;
  inference.isBaseType = isBaseType;
  inference.isGenericType = isGenericType;
  var inferers2 = requireInferers();
  var _t2 = requireLib$b();
  const {
    anyTypeAnnotation,
    isAnyTypeAnnotation,
    isArrayTypeAnnotation,
    isBooleanTypeAnnotation,
    isEmptyTypeAnnotation,
    isFlowBaseAnnotation,
    isGenericTypeAnnotation,
    isIdentifier,
    isMixedTypeAnnotation,
    isNumberTypeAnnotation,
    isStringTypeAnnotation,
    isTSArrayType,
    isTSTypeAnnotation,
    isTSTypeReference,
    isTupleTypeAnnotation,
    isTypeAnnotation,
    isUnionTypeAnnotation,
    isVoidTypeAnnotation,
    stringTypeAnnotation,
    voidTypeAnnotation
  } = _t2;
  function getTypeAnnotation() {
    let type = this.getData("typeAnnotation");
    if (type != null) {
      return type;
    }
    type = _getTypeAnnotation.call(this) || anyTypeAnnotation();
    if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {
      type = type.typeAnnotation;
    }
    this.setData("typeAnnotation", type);
    return type;
  }
  const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
  function _getTypeAnnotation() {
    const node2 = this.node;
    if (!node2) {
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        const declar = this.parentPath.parentPath;
        const declarParent = declar.parentPath;
        if (declar.key === "left" && declarParent.isForInStatement()) {
          return stringTypeAnnotation();
        }
        if (declar.key === "left" && declarParent.isForOfStatement()) {
          return anyTypeAnnotation();
        }
        return voidTypeAnnotation();
      } else {
        return;
      }
    }
    if (node2.typeAnnotation) {
      return node2.typeAnnotation;
    }
    if (typeAnnotationInferringNodes.has(node2)) {
      return;
    }
    typeAnnotationInferringNodes.add(node2);
    try {
      var _inferer;
      let inferer = inferers2[node2.type];
      if (inferer) {
        return inferer.call(this, node2);
      }
      inferer = inferers2[this.parentPath.type];
      if ((_inferer = inferer) != null && _inferer.validParent) {
        return this.parentPath.getTypeAnnotation();
      }
    } finally {
      typeAnnotationInferringNodes.delete(node2);
    }
  }
  function isBaseType(baseName, soft) {
    return _isBaseType(baseName, this.getTypeAnnotation(), soft);
  }
  function _isBaseType(baseName, type, soft) {
    if (baseName === "string") {
      return isStringTypeAnnotation(type);
    } else if (baseName === "number") {
      return isNumberTypeAnnotation(type);
    } else if (baseName === "boolean") {
      return isBooleanTypeAnnotation(type);
    } else if (baseName === "any") {
      return isAnyTypeAnnotation(type);
    } else if (baseName === "mixed") {
      return isMixedTypeAnnotation(type);
    } else if (baseName === "empty") {
      return isEmptyTypeAnnotation(type);
    } else if (baseName === "void") {
      return isVoidTypeAnnotation(type);
    } else {
      if (soft) {
        return false;
      } else {
        throw new Error(`Unknown base type ${baseName}`);
      }
    }
  }
  function couldBeBaseType(name) {
    const type = this.getTypeAnnotation();
    if (isAnyTypeAnnotation(type)) return true;
    if (isUnionTypeAnnotation(type)) {
      for (const type2 of type.types) {
        if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
          return true;
        }
      }
      return false;
    } else {
      return _isBaseType(name, type, true);
    }
  }
  function baseTypeStrictlyMatches(rightArg) {
    const left = this.getTypeAnnotation();
    const right = rightArg.getTypeAnnotation();
    if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {
      return right.type === left.type;
    }
    return false;
  }
  function isGenericType(genericName) {
    const type = this.getTypeAnnotation();
    if (genericName === "Array") {
      if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {
        return true;
      }
    }
    return isGenericTypeAnnotation(type) && isIdentifier(type.id, {
      name: genericName
    }) || isTSTypeReference(type) && isIdentifier(type.typeName, {
      name: genericName
    });
  }
  return inference;
}
var replacement = {};
var modification = {};
var removal = {};
var removalHooks = {};
var hasRequiredRemovalHooks;
function requireRemovalHooks() {
  if (hasRequiredRemovalHooks) return removalHooks;
  hasRequiredRemovalHooks = 1;
  Object.defineProperty(removalHooks, "__esModule", {
    value: true
  });
  removalHooks.hooks = void 0;
  removalHooks.hooks = [function(self2, parent) {
    const removeParent = self2.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self2.key === "declaration" && parent.isExportDeclaration() || self2.key === "body" && parent.isLabeledStatement() || self2.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self2.key === "expression" && parent.isExpressionStatement();
    if (removeParent) {
      parent.remove();
      return true;
    }
  }, function(self2, parent) {
    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
      parent.replaceWith(parent.node.expressions[0]);
      return true;
    }
  }, function(self2, parent) {
    if (parent.isBinary()) {
      if (self2.key === "left") {
        parent.replaceWith(parent.node.right);
      } else {
        parent.replaceWith(parent.node.left);
      }
      return true;
    }
  }, function(self2, parent) {
    if (parent.isIfStatement() && self2.key === "consequent" || self2.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
      self2.replaceWith({
        type: "BlockStatement",
        body: []
      });
      return true;
    }
  }];
  return removalHooks;
}
var hasRequiredRemoval;
function requireRemoval() {
  if (hasRequiredRemoval) return removal;
  hasRequiredRemoval = 1;
  Object.defineProperty(removal, "__esModule", {
    value: true
  });
  removal._assertUnremoved = _assertUnremoved;
  removal._callRemovalHooks = _callRemovalHooks;
  removal._markRemoved = _markRemoved;
  removal._remove = _remove;
  removal._removeFromScope = _removeFromScope;
  removal.remove = remove;
  var _removalHooks = requireRemovalHooks();
  var _cache = requireCache();
  var _replacement = requireReplacement();
  var _index = requirePath();
  var _t2 = requireLib$b();
  var _modification = requireModification();
  var _context = requireContext();
  const {
    getBindingIdentifiers: getBindingIdentifiers2
  } = _t2;
  function remove() {
    var _this$opts;
    _assertUnremoved.call(this);
    _context.resync.call(this);
    if (_callRemovalHooks.call(this)) {
      _markRemoved.call(this);
      return;
    }
    if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
      _removeFromScope.call(this);
    }
    this.shareCommentsWithSiblings();
    _remove.call(this);
    _markRemoved.call(this);
  }
  function _removeFromScope() {
    const bindings = getBindingIdentifiers2(this.node, false, false, true);
    Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
  }
  function _callRemovalHooks() {
    if (this.parentPath) {
      for (const fn2 of _removalHooks.hooks) {
        if (fn2(this, this.parentPath)) return true;
      }
    }
  }
  function _remove() {
    if (Array.isArray(this.container)) {
      this.container.splice(this.key, 1);
      _modification.updateSiblingKeys.call(this, this.key, -1);
    } else {
      _replacement._replaceWith.call(this, null);
    }
  }
  function _markRemoved() {
    this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;
    if (this.parent) {
      var _getCachedPaths;
      (_getCachedPaths = (0, _cache.getCachedPaths)(this)) == null || _getCachedPaths.delete(this.node);
    }
    this.node = null;
  }
  function _assertUnremoved() {
    if (this.removed) {
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
    }
  }
  return removal;
}
var hoister = {};
var hasRequiredHoister;
function requireHoister() {
  if (hasRequiredHoister) return hoister;
  hasRequiredHoister = 1;
  Object.defineProperty(hoister, "__esModule", {
    value: true
  });
  hoister.default = void 0;
  var _t2 = requireLib$b();
  var _t22 = _t2;
  const {
    react
  } = _t2;
  const {
    cloneNode: cloneNode2,
    jsxExpressionContainer,
    variableDeclaration,
    variableDeclarator
  } = _t22;
  const referenceVisitor = {
    ReferencedIdentifier(path2, state) {
      if (path2.isJSXIdentifier() && react.isCompatTag(path2.node.name) && !path2.parentPath.isJSXMemberExpression()) {
        return;
      }
      if (path2.node.name === "this") {
        let scope2 = path2.scope;
        do {
          if (scope2.path.isFunction() && !scope2.path.isArrowFunctionExpression()) {
            break;
          }
        } while (scope2 = scope2.parent);
        if (scope2) state.breakOnScopePaths.push(scope2.path);
      }
      const binding2 = path2.scope.getBinding(path2.node.name);
      if (!binding2) return;
      for (const violation of binding2.constantViolations) {
        if (violation.scope !== binding2.path.scope) {
          state.mutableBinding = true;
          path2.stop();
          return;
        }
      }
      if (binding2 !== state.scope.getBinding(path2.node.name)) return;
      state.bindings[path2.node.name] = binding2;
    }
  };
  class PathHoister {
    constructor(path2, scope2) {
      this.breakOnScopePaths = void 0;
      this.bindings = void 0;
      this.mutableBinding = void 0;
      this.scopes = void 0;
      this.scope = void 0;
      this.path = void 0;
      this.attachAfter = void 0;
      this.breakOnScopePaths = [];
      this.bindings = {};
      this.mutableBinding = false;
      this.scopes = [];
      this.scope = scope2;
      this.path = path2;
      this.attachAfter = false;
    }
    isCompatibleScope(scope2) {
      for (const key of Object.keys(this.bindings)) {
        const binding2 = this.bindings[key];
        if (!scope2.bindingIdentifierEquals(key, binding2.identifier)) {
          return false;
        }
      }
      return true;
    }
    getCompatibleScopes() {
      let scope2 = this.path.scope;
      do {
        if (this.isCompatibleScope(scope2)) {
          this.scopes.push(scope2);
        } else {
          break;
        }
        if (this.breakOnScopePaths.includes(scope2.path)) {
          break;
        }
      } while (scope2 = scope2.parent);
    }
    getAttachmentPath() {
      let path2 = this._getAttachmentPath();
      if (!path2) return;
      let targetScope = path2.scope;
      if (targetScope.path === path2) {
        targetScope = path2.scope.parent;
      }
      if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
        for (const name of Object.keys(this.bindings)) {
          if (!targetScope.hasOwnBinding(name)) continue;
          const binding2 = this.bindings[name];
          if (binding2.kind === "param" || binding2.path.parentKey === "params") {
            continue;
          }
          const bindingParentPath = this.getAttachmentParentForPath(binding2.path);
          if (bindingParentPath.key >= path2.key) {
            this.attachAfter = true;
            path2 = binding2.path;
            for (const violationPath of binding2.constantViolations) {
              if (this.getAttachmentParentForPath(violationPath).key > path2.key) {
                path2 = violationPath;
              }
            }
          }
        }
      }
      return path2;
    }
    _getAttachmentPath() {
      const scopes = this.scopes;
      const scope2 = scopes.pop();
      if (!scope2) return;
      if (scope2.path.isFunction()) {
        if (this.hasOwnParamBindings(scope2)) {
          if (this.scope === scope2) return;
          const bodies = scope2.path.get("body").get("body");
          for (let i = 0; i < bodies.length; i++) {
            if (bodies[i].node._blockHoist) continue;
            return bodies[i];
          }
        } else {
          return this.getNextScopeAttachmentParent();
        }
      } else if (scope2.path.isProgram()) {
        return this.getNextScopeAttachmentParent();
      }
    }
    getNextScopeAttachmentParent() {
      const scope2 = this.scopes.pop();
      if (scope2) return this.getAttachmentParentForPath(scope2.path);
    }
    getAttachmentParentForPath(path2) {
      do {
        if (!path2.parentPath || Array.isArray(path2.container) && path2.isStatement()) {
          return path2;
        }
      } while (path2 = path2.parentPath);
    }
    hasOwnParamBindings(scope2) {
      for (const name of Object.keys(this.bindings)) {
        if (!scope2.hasOwnBinding(name)) continue;
        const binding2 = this.bindings[name];
        if (binding2.kind === "param" && binding2.constant) return true;
      }
      return false;
    }
    run() {
      this.path.traverse(referenceVisitor, this);
      if (this.mutableBinding) return;
      this.getCompatibleScopes();
      const attachTo = this.getAttachmentPath();
      if (!attachTo) return;
      if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
      let uid = attachTo.scope.generateUidIdentifier("ref");
      const declarator = variableDeclarator(uid, this.path.node);
      const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
      const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]);
      const parent = this.path.parentPath;
      if (parent.isJSXElement() && this.path.container === parent.node.children) {
        uid = jsxExpressionContainer(uid);
      }
      this.path.replaceWith(cloneNode2(uid));
      return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
    }
  }
  hoister.default = PathHoister;
  return hoister;
}
var hasRequiredModification;
function requireModification() {
  if (hasRequiredModification) return modification;
  hasRequiredModification = 1;
  Object.defineProperty(modification, "__esModule", {
    value: true
  });
  modification._containerInsert = _containerInsert;
  modification._containerInsertAfter = _containerInsertAfter;
  modification._containerInsertBefore = _containerInsertBefore;
  modification._verifyNodeList = _verifyNodeList;
  modification.insertAfter = insertAfter;
  modification.insertBefore = insertBefore;
  modification.pushContainer = pushContainer;
  modification.unshiftContainer = unshiftContainer;
  modification.updateSiblingKeys = updateSiblingKeys;
  var _cache = requireCache();
  var _index = requirePath();
  var _context = requireContext();
  var _removal = requireRemoval();
  var _t2 = requireLib$b();
  var _hoister = requireHoister();
  const {
    arrowFunctionExpression,
    assertExpression,
    assignmentExpression,
    blockStatement,
    callExpression,
    cloneNode: cloneNode2,
    expressionStatement,
    isAssignmentExpression,
    isCallExpression,
    isExportNamedDeclaration,
    isExpression,
    isIdentifier,
    isSequenceExpression,
    isSuper,
    thisExpression
  } = _t2;
  function insertBefore(nodes_) {
    _removal._assertUnremoved.call(this);
    const nodes = _verifyNodeList.call(this, nodes_);
    const {
      parentPath,
      parent
    } = this;
    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
      return parentPath.insertBefore(nodes);
    } else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
      if (this.node) nodes.push(this.node);
      return this.replaceExpressionWithStatements(nodes);
    } else if (Array.isArray(this.container)) {
      return _containerInsertBefore.call(this, nodes);
    } else if (this.isStatementOrBlock()) {
      const node2 = this.node;
      const shouldInsertCurrentNode = node2 && (!this.isExpressionStatement() || node2.expression != null);
      this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node2] : []));
      return this.unshiftContainer("body", nodes);
    } else {
      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
  }
  function _containerInsert(from, nodes) {
    updateSiblingKeys.call(this, from, nodes.length);
    const paths = [];
    this.container.splice(from, 0, ...nodes);
    for (let i = 0; i < nodes.length; i++) {
      var _this$context;
      const to2 = from + i;
      const path2 = this.getSibling(to2);
      paths.push(path2);
      if ((_this$context = this.context) != null && _this$context.queue) {
        _context.pushContext.call(path2, this.context);
      }
    }
    const contexts = _context._getQueueContexts.call(this);
    for (const path2 of paths) {
      _context.setScope.call(path2);
      path2.debug("Inserted.");
      for (const context2 of contexts) {
        context2.maybeQueue(path2, true);
      }
    }
    return paths;
  }
  function _containerInsertBefore(nodes) {
    return _containerInsert.call(this, this.key, nodes);
  }
  function _containerInsertAfter(nodes) {
    return _containerInsert.call(this, this.key + 1, nodes);
  }
  const last = (arr) => arr[arr.length - 1];
  function isHiddenInSequenceExpression(path2) {
    return isSequenceExpression(path2.parent) && (last(path2.parent.expressions) !== path2.node || isHiddenInSequenceExpression(path2.parentPath));
  }
  function isAlmostConstantAssignment(node2, scope2) {
    if (!isAssignmentExpression(node2) || !isIdentifier(node2.left)) {
      return false;
    }
    const blockScope = scope2.getBlockParent();
    return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
  }
  function insertAfter(nodes_) {
    _removal._assertUnremoved.call(this);
    if (this.isSequenceExpression()) {
      return last(this.get("expressions")).insertAfter(nodes_);
    }
    const nodes = _verifyNodeList.call(this, nodes_);
    const {
      parentPath,
      parent
    } = this;
    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
      return parentPath.insertAfter(nodes.map((node2) => {
        return isExpression(node2) ? expressionStatement(node2) : node2;
      }));
    } else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
      const self2 = this;
      if (self2.node) {
        const node2 = self2.node;
        let {
          scope: scope2
        } = this;
        if (scope2.path.isPattern()) {
          assertExpression(node2);
          self2.replaceWith(callExpression(arrowFunctionExpression([], node2), []));
          self2.get("callee.body").insertAfter(nodes);
          return [self2];
        }
        if (isHiddenInSequenceExpression(self2)) {
          nodes.unshift(node2);
        } else if (isCallExpression(node2) && isSuper(node2.callee)) {
          nodes.unshift(node2);
          nodes.push(thisExpression());
        } else if (isAlmostConstantAssignment(node2, scope2)) {
          nodes.unshift(node2);
          nodes.push(cloneNode2(node2.left));
        } else if (scope2.isPure(node2, true)) {
          nodes.push(node2);
        } else {
          if (parentPath.isMethod({
            computed: true,
            key: node2
          })) {
            scope2 = scope2.parent;
          }
          const temp = scope2.generateDeclaredUidIdentifier();
          nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode2(temp), node2)));
          nodes.push(expressionStatement(cloneNode2(temp)));
        }
      }
      return this.replaceExpressionWithStatements(nodes);
    } else if (Array.isArray(this.container)) {
      return _containerInsertAfter.call(this, nodes);
    } else if (this.isStatementOrBlock()) {
      const node2 = this.node;
      const shouldInsertCurrentNode = node2 && (!this.isExpressionStatement() || node2.expression != null);
      this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node2] : []));
      return this.pushContainer("body", nodes);
    } else {
      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
    }
  }
  function updateSiblingKeys(fromIndex, incrementBy) {
    if (!this.parent) return;
    const paths = (0, _cache.getCachedPaths)(this);
    if (!paths) return;
    for (const [, path2] of paths) {
      if (typeof path2.key === "number" && path2.container === this.container && path2.key >= fromIndex) {
        path2.key += incrementBy;
      }
    }
  }
  function _verifyNodeList(nodes) {
    if (!nodes) {
      return [];
    }
    if (!Array.isArray(nodes)) {
      nodes = [nodes];
    }
    for (let i = 0; i < nodes.length; i++) {
      const node2 = nodes[i];
      let msg;
      if (!node2) {
        msg = "has falsy node";
      } else if (typeof node2 !== "object") {
        msg = "contains a non-object node";
      } else if (!node2.type) {
        msg = "without a type";
      } else if (node2 instanceof _index.default) {
        msg = "has a NodePath when it expected a raw object";
      }
      if (msg) {
        const type = Array.isArray(node2) ? "array" : typeof node2;
        throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
      }
    }
    return nodes;
  }
  function unshiftContainer(listKey, nodes) {
    _removal._assertUnremoved.call(this);
    nodes = _verifyNodeList.call(this, nodes);
    const path2 = _index.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[listKey],
      listKey,
      key: 0
    }).setContext(this.context);
    return _containerInsertBefore.call(path2, nodes);
  }
  function pushContainer(listKey, nodes) {
    _removal._assertUnremoved.call(this);
    const verifiedNodes = _verifyNodeList.call(this, nodes);
    const container = this.node[listKey];
    const path2 = _index.default.get({
      parentPath: this,
      parent: this.node,
      container,
      listKey,
      key: container.length
    }).setContext(this.context);
    return path2.replaceWithMultiple(verifiedNodes);
  }
  {
    modification.hoist = function hoist(scope2 = this.scope) {
      const hoister2 = new _hoister.default(this, scope2);
      return hoister2.run();
    };
  }
  return modification;
}
var hasRequiredReplacement;
function requireReplacement() {
  if (hasRequiredReplacement) return replacement;
  hasRequiredReplacement = 1;
  Object.defineProperty(replacement, "__esModule", {
    value: true
  });
  replacement._replaceWith = _replaceWith;
  replacement.replaceExpressionWithStatements = replaceExpressionWithStatements;
  replacement.replaceInline = replaceInline;
  replacement.replaceWith = replaceWith;
  replacement.replaceWithMultiple = replaceWithMultiple;
  replacement.replaceWithSourceString = replaceWithSourceString;
  var _codeFrame = requireLib$9();
  var _index = requireLib$5();
  var _index2 = requirePath();
  var _cache = requireCache();
  var _modification = requireModification();
  var _parser = requireLib$a();
  var _t2 = requireLib$b();
  var _context = requireContext();
  const {
    FUNCTION_TYPES,
    arrowFunctionExpression,
    assignmentExpression,
    awaitExpression,
    blockStatement,
    buildUndefinedNode,
    callExpression,
    cloneNode: cloneNode2,
    conditionalExpression,
    expressionStatement,
    getBindingIdentifiers: getBindingIdentifiers2,
    identifier: identifier2,
    inheritLeadingComments: inheritLeadingComments2,
    inheritTrailingComments: inheritTrailingComments2,
    inheritsComments: inheritsComments2,
    isBlockStatement,
    isEmptyStatement,
    isExpression,
    isExpressionStatement,
    isIfStatement,
    isProgram,
    isStatement,
    isVariableDeclaration,
    removeComments: removeComments2,
    returnStatement,
    sequenceExpression,
    validate: validate2,
    yieldExpression
  } = _t2;
  function replaceWithMultiple(nodes) {
    var _getCachedPaths;
    _context.resync.call(this);
    nodes = _modification._verifyNodeList.call(this, nodes);
    inheritLeadingComments2(nodes[0], this.node);
    inheritTrailingComments2(nodes[nodes.length - 1], this.node);
    (_getCachedPaths = (0, _cache.getCachedPaths)(this)) == null || _getCachedPaths.delete(this.node);
    this.node = this.container[this.key] = null;
    const paths = this.insertAfter(nodes);
    if (this.node) {
      this.requeue();
    } else {
      this.remove();
    }
    return paths;
  }
  function replaceWithSourceString(replacement2) {
    _context.resync.call(this);
    let ast;
    try {
      replacement2 = `(${replacement2})`;
      ast = (0, _parser.parse)(replacement2);
    } catch (err) {
      const loc = err.loc;
      if (loc) {
        err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement2, {
          start: {
            line: loc.line,
            column: loc.column + 1
          }
        });
        err.code = "BABEL_REPLACE_SOURCE_ERROR";
      }
      throw err;
    }
    const expressionAST = ast.program.body[0].expression;
    _index.default.removeProperties(expressionAST);
    return this.replaceWith(expressionAST);
  }
  function replaceWith(replacementPath) {
    _context.resync.call(this);
    if (this.removed) {
      throw new Error("You can't replace this node, we've already removed it");
    }
    let replacement2 = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
    if (!replacement2) {
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    }
    if (this.node === replacement2) {
      return [this];
    }
    if (this.isProgram() && !isProgram(replacement2)) {
      throw new Error("You can only replace a Program root node with another Program node");
    }
    if (Array.isArray(replacement2)) {
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    }
    if (typeof replacement2 === "string") {
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    }
    let nodePath = "";
    if (this.isNodeType("Statement") && isExpression(replacement2)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement2) && !this.parentPath.isExportDefaultDeclaration()) {
        replacement2 = expressionStatement(replacement2);
        nodePath = "expression";
      }
    }
    if (this.isNodeType("Expression") && isStatement(replacement2)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement2)) {
        return this.replaceExpressionWithStatements([replacement2]);
      }
    }
    const oldNode = this.node;
    if (oldNode) {
      inheritsComments2(replacement2, oldNode);
      removeComments2(oldNode);
    }
    _replaceWith.call(this, replacement2);
    this.type = replacement2.type;
    _context.setScope.call(this);
    this.requeue();
    return [nodePath ? this.get(nodePath) : this];
  }
  function _replaceWith(node2) {
    var _getCachedPaths2;
    if (!this.container) {
      throw new ReferenceError("Container is falsy");
    }
    if (this.inList) {
      validate2(this.parent, this.key, [node2]);
    } else {
      validate2(this.parent, this.key, node2);
    }
    this.debug(`Replace with ${node2 == null ? void 0 : node2.type}`);
    (_getCachedPaths2 = (0, _cache.getCachedPaths)(this)) == null || _getCachedPaths2.set(node2, this).delete(this.node);
    this.node = this.container[this.key] = node2;
  }
  function replaceExpressionWithStatements(nodes) {
    _context.resync.call(this);
    const declars = [];
    const nodesAsSingleExpression = gatherSequenceExpressions2(nodes, declars);
    if (nodesAsSingleExpression) {
      for (const id of declars) this.scope.push({
        id
      });
      return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
    }
    const functionParent = this.getFunctionParent();
    const isParentAsync = functionParent == null ? void 0 : functionParent.node.async;
    const isParentGenerator = functionParent == null ? void 0 : functionParent.node.generator;
    const container = arrowFunctionExpression([], blockStatement(nodes));
    this.replaceWith(callExpression(container, []));
    const callee = this.get("callee");
    callee.get("body").scope.hoistVariables((id) => this.scope.push({
      id
    }));
    const completionRecords = callee.getCompletionRecords();
    for (const path2 of completionRecords) {
      if (!path2.isExpressionStatement()) continue;
      const loop = path2.findParent((path3) => path3.isLoop());
      if (loop) {
        let uid = loop.getData("expressionReplacementReturnUid");
        if (!uid) {
          uid = callee.scope.generateDeclaredUidIdentifier("ret");
          callee.get("body").pushContainer("body", returnStatement(cloneNode2(uid)));
          loop.setData("expressionReplacementReturnUid", uid);
        } else {
          uid = identifier2(uid.name);
        }
        path2.get("expression").replaceWith(assignmentExpression("=", cloneNode2(uid), path2.node.expression));
      } else {
        path2.replaceWith(returnStatement(path2.node.expression));
      }
    }
    callee.arrowFunctionToExpression();
    const newCallee = callee;
    const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);
    const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
    if (needToAwaitFunction) {
      newCallee.set("async", true);
      if (!needToYieldFunction) {
        this.replaceWith(awaitExpression(this.node));
      }
    }
    if (needToYieldFunction) {
      newCallee.set("generator", true);
      this.replaceWith(yieldExpression(this.node, true));
    }
    return newCallee.get("body.body");
  }
  function gatherSequenceExpressions2(nodes, declars) {
    const exprs = [];
    let ensureLastUndefined = true;
    for (const node2 of nodes) {
      if (!isEmptyStatement(node2)) {
        ensureLastUndefined = false;
      }
      if (isExpression(node2)) {
        exprs.push(node2);
      } else if (isExpressionStatement(node2)) {
        exprs.push(node2.expression);
      } else if (isVariableDeclaration(node2)) {
        if (node2.kind !== "var") return;
        for (const declar of node2.declarations) {
          const bindings = getBindingIdentifiers2(declar);
          for (const key of Object.keys(bindings)) {
            declars.push(cloneNode2(bindings[key]));
          }
          if (declar.init) {
            exprs.push(assignmentExpression("=", declar.id, declar.init));
          }
        }
        ensureLastUndefined = true;
      } else if (isIfStatement(node2)) {
        const consequent = node2.consequent ? gatherSequenceExpressions2([node2.consequent], declars) : buildUndefinedNode();
        const alternate = node2.alternate ? gatherSequenceExpressions2([node2.alternate], declars) : buildUndefinedNode();
        if (!consequent || !alternate) return;
        exprs.push(conditionalExpression(node2.test, consequent, alternate));
      } else if (isBlockStatement(node2)) {
        const body = gatherSequenceExpressions2(node2.body, declars);
        if (!body) return;
        exprs.push(body);
      } else if (isEmptyStatement(node2)) {
        if (nodes.indexOf(node2) === 0) {
          ensureLastUndefined = true;
        }
      } else {
        return;
      }
    }
    if (ensureLastUndefined) exprs.push(buildUndefinedNode());
    if (exprs.length === 1) {
      return exprs[0];
    } else {
      return sequenceExpression(exprs);
    }
  }
  function replaceInline(nodes) {
    _context.resync.call(this);
    if (Array.isArray(nodes)) {
      if (Array.isArray(this.container)) {
        nodes = _modification._verifyNodeList.call(this, nodes);
        const paths = _modification._containerInsertAfter.call(this, nodes);
        this.remove();
        return paths;
      } else {
        return this.replaceWithMultiple(nodes);
      }
    } else {
      return this.replaceWith(nodes);
    }
  }
  return replacement;
}
var evaluation = {};
var hasRequiredEvaluation;
function requireEvaluation() {
  if (hasRequiredEvaluation) return evaluation;
  hasRequiredEvaluation = 1;
  Object.defineProperty(evaluation, "__esModule", {
    value: true
  });
  evaluation.evaluate = evaluate;
  evaluation.evaluateTruthy = evaluateTruthy;
  const VALID_OBJECT_CALLEES = ["Number", "String", "Math"];
  const VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null];
  const INVALID_METHODS = ["random"];
  function isValidObjectCallee(val) {
    return VALID_OBJECT_CALLEES.includes(val);
  }
  function isValidIdentifierCallee(val) {
    return VALID_IDENTIFIER_CALLEES.includes(val);
  }
  function isInvalidMethod(val) {
    return INVALID_METHODS.includes(val);
  }
  function evaluateTruthy() {
    const res = this.evaluate();
    if (res.confident) return !!res.value;
  }
  function deopt(path2, state) {
    if (!state.confident) return;
    state.deoptPath = path2;
    state.confident = false;
  }
  const Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", Infinity], ["NaN", NaN]]);
  function evaluateCached(path2, state) {
    const {
      node: node2
    } = path2;
    const {
      seen
    } = state;
    if (seen.has(node2)) {
      const existing = seen.get(node2);
      if (existing.resolved) {
        return existing.value;
      } else {
        deopt(path2, state);
        return;
      }
    } else {
      const item2 = {
        resolved: false
      };
      seen.set(node2, item2);
      const val = _evaluate(path2, state);
      if (state.confident) {
        item2.resolved = true;
        item2.value = val;
      }
      return val;
    }
  }
  function _evaluate(path2, state) {
    if (!state.confident) return;
    if (path2.isSequenceExpression()) {
      const exprs = path2.get("expressions");
      return evaluateCached(exprs[exprs.length - 1], state);
    }
    if (path2.isStringLiteral() || path2.isNumericLiteral() || path2.isBooleanLiteral()) {
      return path2.node.value;
    }
    if (path2.isNullLiteral()) {
      return null;
    }
    if (path2.isTemplateLiteral()) {
      return evaluateQuasis(path2, path2.node.quasis, state);
    }
    if (path2.isTaggedTemplateExpression() && path2.get("tag").isMemberExpression()) {
      const object = path2.get("tag.object");
      const {
        node: {
          name
        }
      } = object;
      const property = path2.get("tag.property");
      if (object.isIdentifier() && name === "String" && !path2.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") {
        return evaluateQuasis(path2, path2.node.quasi.quasis, state, true);
      }
    }
    if (path2.isConditionalExpression()) {
      const testResult = evaluateCached(path2.get("test"), state);
      if (!state.confident) return;
      if (testResult) {
        return evaluateCached(path2.get("consequent"), state);
      } else {
        return evaluateCached(path2.get("alternate"), state);
      }
    }
    if (path2.isExpressionWrapper()) {
      return evaluateCached(path2.get("expression"), state);
    }
    if (path2.isMemberExpression() && !path2.parentPath.isCallExpression({
      callee: path2.node
    })) {
      const property = path2.get("property");
      const object = path2.get("object");
      if (object.isLiteral()) {
        const value2 = object.node.value;
        const type = typeof value2;
        let key = null;
        if (path2.node.computed) {
          key = evaluateCached(property, state);
          if (!state.confident) return;
        } else if (property.isIdentifier()) {
          key = property.node.name;
        }
        if ((type === "number" || type === "string") && key != null && (typeof key === "number" || typeof key === "string")) {
          return value2[key];
        }
      }
    }
    if (path2.isReferencedIdentifier()) {
      const binding2 = path2.scope.getBinding(path2.node.name);
      if (binding2) {
        if (binding2.constantViolations.length > 0 || path2.node.start < binding2.path.node.end) {
          deopt(binding2.path, state);
          return;
        }
        const bindingPathScope = binding2.path.scope;
        if (binding2.kind === "var" && bindingPathScope !== binding2.scope) {
          let hasUnsafeBlock = !bindingPathScope.path.parentPath.isBlockStatement();
          for (let scope2 = bindingPathScope.parent; scope2; scope2 = scope2.parent) {
            var _scope$path$parentPat;
            if (scope2 === path2.scope) {
              if (hasUnsafeBlock) {
                deopt(binding2.path, state);
                return;
              }
              break;
            }
            if ((_scope$path$parentPat = scope2.path.parentPath) != null && _scope$path$parentPat.isBlockStatement()) {
              hasUnsafeBlock = true;
            }
          }
        }
        if (binding2.hasValue) {
          return binding2.value;
        }
      }
      const name = path2.node.name;
      if (Globals.has(name)) {
        if (!binding2) {
          return Globals.get(name);
        }
        deopt(binding2.path, state);
        return;
      }
      const resolved = path2.resolve();
      if (resolved === path2) {
        deopt(path2, state);
        return;
      }
      const value2 = evaluateCached(resolved, state);
      if (typeof value2 === "object" && value2 !== null && binding2.references > 1) {
        deopt(resolved, state);
        return;
      }
      return value2;
    }
    if (path2.isUnaryExpression({
      prefix: true
    })) {
      if (path2.node.operator === "void") {
        return void 0;
      }
      const argument = path2.get("argument");
      if (path2.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
        return "function";
      }
      const arg = evaluateCached(argument, state);
      if (!state.confident) return;
      switch (path2.node.operator) {
        case "!":
          return !arg;
        case "+":
          return +arg;
        case "-":
          return -arg;
        case "~":
          return ~arg;
        case "typeof":
          return typeof arg;
      }
    }
    if (path2.isArrayExpression()) {
      const arr = [];
      const elems = path2.get("elements");
      for (const elem of elems) {
        const elemValue = elem.evaluate();
        if (elemValue.confident) {
          arr.push(elemValue.value);
        } else {
          deopt(elemValue.deopt, state);
          return;
        }
      }
      return arr;
    }
    if (path2.isObjectExpression()) {
      const obj = {};
      const props = path2.get("properties");
      for (const prop of props) {
        if (prop.isObjectMethod() || prop.isSpreadElement()) {
          deopt(prop, state);
          return;
        }
        const keyPath = prop.get("key");
        let key;
        if (prop.node.computed) {
          key = keyPath.evaluate();
          if (!key.confident) {
            deopt(key.deopt, state);
            return;
          }
          key = key.value;
        } else if (keyPath.isIdentifier()) {
          key = keyPath.node.name;
        } else {
          key = keyPath.node.value;
        }
        const valuePath = prop.get("value");
        let value2 = valuePath.evaluate();
        if (!value2.confident) {
          deopt(value2.deopt, state);
          return;
        }
        value2 = value2.value;
        obj[key] = value2;
      }
      return obj;
    }
    if (path2.isLogicalExpression()) {
      const wasConfident = state.confident;
      const left = evaluateCached(path2.get("left"), state);
      const leftConfident = state.confident;
      state.confident = wasConfident;
      const right = evaluateCached(path2.get("right"), state);
      const rightConfident = state.confident;
      switch (path2.node.operator) {
        case "||":
          state.confident = leftConfident && (!!left || rightConfident);
          if (!state.confident) return;
          return left || right;
        case "&&":
          state.confident = leftConfident && (!left || rightConfident);
          if (!state.confident) return;
          return left && right;
        case "??":
          state.confident = leftConfident && (left != null || rightConfident);
          if (!state.confident) return;
          return left != null ? left : right;
      }
    }
    if (path2.isBinaryExpression()) {
      const left = evaluateCached(path2.get("left"), state);
      if (!state.confident) return;
      const right = evaluateCached(path2.get("right"), state);
      if (!state.confident) return;
      switch (path2.node.operator) {
        case "-":
          return left - right;
        case "+":
          return left + right;
        case "/":
          return left / right;
        case "*":
          return left * right;
        case "%":
          return left % right;
        case "**":
          return Math.pow(left, right);
        case "<":
          return left < right;
        case ">":
          return left > right;
        case "<=":
          return left <= right;
        case ">=":
          return left >= right;
        case "==":
          return left == right;
        case "!=":
          return left != right;
        case "===":
          return left === right;
        case "!==":
          return left !== right;
        case "|":
          return left | right;
        case "&":
          return left & right;
        case "^":
          return left ^ right;
        case "<<":
          return left << right;
        case ">>":
          return left >> right;
        case ">>>":
          return left >>> right;
      }
    }
    if (path2.isCallExpression()) {
      const callee = path2.get("callee");
      let context2;
      let func;
      if (callee.isIdentifier() && !path2.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || isValidIdentifierCallee(callee.node.name))) {
        func = commonjsGlobal[callee.node.name];
      }
      if (callee.isMemberExpression()) {
        const object = callee.get("object");
        const property = callee.get("property");
        if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !isInvalidMethod(property.node.name)) {
          context2 = commonjsGlobal[object.node.name];
          const key = property.node.name;
          if (hasOwnProperty.call(context2, key)) {
            func = context2[key];
          }
        }
        if (object.isLiteral() && property.isIdentifier()) {
          const type = typeof object.node.value;
          if (type === "string" || type === "number") {
            context2 = object.node.value;
            func = context2[property.node.name];
          }
        }
      }
      if (func) {
        const args = path2.get("arguments").map((arg) => evaluateCached(arg, state));
        if (!state.confident) return;
        return func.apply(context2, args);
      }
    }
    deopt(path2, state);
  }
  function evaluateQuasis(path2, quasis, state, raw = false) {
    let str = "";
    let i = 0;
    const exprs = path2.isTemplateLiteral() ? path2.get("expressions") : path2.get("quasi.expressions");
    for (const elem of quasis) {
      if (!state.confident) break;
      str += raw ? elem.value.raw : elem.value.cooked;
      const expr = exprs[i++];
      if (expr) str += String(evaluateCached(expr, state));
    }
    if (!state.confident) return;
    return str;
  }
  function evaluate() {
    const state = {
      confident: true,
      deoptPath: null,
      seen: /* @__PURE__ */ new Map()
    };
    let value2 = evaluateCached(this, state);
    if (!state.confident) value2 = void 0;
    return {
      confident: state.confident,
      deopt: state.deoptPath,
      value: value2
    };
  }
  return evaluation;
}
var conversion = {};
var hasRequiredConversion;
function requireConversion() {
  if (hasRequiredConversion) return conversion;
  hasRequiredConversion = 1;
  Object.defineProperty(conversion, "__esModule", {
    value: true
  });
  conversion.arrowFunctionToExpression = arrowFunctionToExpression;
  conversion.ensureBlock = ensureBlock2;
  conversion.ensureFunctionName = ensureFunctionName;
  conversion.splitExportDeclaration = splitExportDeclaration;
  conversion.toComputedKey = toComputedKey2;
  conversion.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
  var _t2 = requireLib$b();
  var _template = requireLib$8();
  var _visitors = requireVisitors();
  var _context = requireContext();
  const {
    arrowFunctionExpression,
    assignmentExpression,
    binaryExpression,
    blockStatement,
    callExpression,
    conditionalExpression,
    expressionStatement,
    identifier: identifier2,
    isIdentifier,
    jsxIdentifier,
    logicalExpression,
    LOGICAL_OPERATORS,
    memberExpression,
    metaProperty,
    numericLiteral,
    objectExpression,
    restElement,
    returnStatement,
    sequenceExpression,
    spreadElement,
    stringLiteral,
    super: _super,
    thisExpression,
    toExpression: toExpression2,
    unaryExpression,
    toBindingIdentifierName: toBindingIdentifierName2,
    isFunction,
    isAssignmentPattern,
    isRestElement,
    getFunctionName: getFunctionName2,
    cloneNode: cloneNode2,
    variableDeclaration,
    variableDeclarator,
    exportNamedDeclaration,
    exportSpecifier,
    inherits: inherits2
  } = _t2;
  function toComputedKey2() {
    let key;
    if (this.isMemberExpression()) {
      key = this.node.property;
    } else if (this.isProperty() || this.isMethod()) {
      key = this.node.key;
    } else {
      throw new ReferenceError("todo");
    }
    if (!this.node.computed) {
      if (isIdentifier(key)) key = stringLiteral(key.name);
    }
    return key;
  }
  function ensureBlock2() {
    const body = this.get("body");
    const bodyNode = body.node;
    if (Array.isArray(body)) {
      throw new Error("Can't convert array path to a block statement");
    }
    if (!bodyNode) {
      throw new Error("Can't convert node without a body");
    }
    if (body.isBlockStatement()) {
      return bodyNode;
    }
    const statements2 = [];
    let stringPath = "body";
    let key;
    let listKey;
    if (body.isStatement()) {
      listKey = "body";
      key = 0;
      statements2.push(body.node);
    } else {
      stringPath += ".body.0";
      if (this.isFunction()) {
        key = "argument";
        statements2.push(returnStatement(body.node));
      } else {
        key = "expression";
        statements2.push(expressionStatement(body.node));
      }
    }
    this.node.body = blockStatement(statements2);
    const parentPath = this.get(stringPath);
    _context.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);
    return this.node;
  }
  {
    conversion.arrowFunctionToShadowed = function() {
      if (!this.isArrowFunctionExpression()) return;
      this.arrowFunctionToExpression();
    };
  }
  function unwrapFunctionEnvironment() {
    if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {
      throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
    }
    hoistFunctionEnvironment(this);
  }
  function setType(path2, type) {
    path2.node.type = type;
  }
  function arrowFunctionToExpression({
    allowInsertArrow = true,
    allowInsertArrowWithRest = allowInsertArrow,
    noNewArrows = !((_arguments$) => (_arguments$ = arguments[0]) == null ? void 0 : _arguments$.specCompliant)()
  } = {}) {
    if (!this.isArrowFunctionExpression()) {
      throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
    }
    let self2 = this;
    if (!noNewArrows) {
      var _self$ensureFunctionN;
      self2 = (_self$ensureFunctionN = self2.ensureFunctionName(false)) != null ? _self$ensureFunctionN : self2;
    }
    const {
      thisBinding,
      fnPath: fn2
    } = hoistFunctionEnvironment(self2, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
    fn2.ensureBlock();
    setType(fn2, "FunctionExpression");
    if (!noNewArrows) {
      const checkBinding = thisBinding ? null : fn2.scope.generateUidIdentifier("arrowCheckId");
      if (checkBinding) {
        fn2.parentPath.scope.push({
          id: checkBinding,
          init: objectExpression([])
        });
      }
      fn2.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), checkBinding ? identifier2(checkBinding.name) : identifier2(thisBinding)])));
      fn2.replaceWith(callExpression(memberExpression(fn2.node, identifier2("bind")), [checkBinding ? identifier2(checkBinding.name) : thisExpression()]));
      return fn2.get("callee.object");
    }
    return fn2;
  }
  const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({
    CallExpression(child, {
      allSuperCalls
    }) {
      if (!child.get("callee").isSuper()) return;
      allSuperCalls.push(child);
    }
  });
  function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
    let arrowParent;
    let thisEnvFn = fnPath.findParent((p) => {
      if (p.isArrowFunctionExpression()) {
        arrowParent != null ? arrowParent : arrowParent = p;
        return false;
      }
      return p.isFunction() || p.isProgram() || p.isClassProperty({
        static: false
      }) || p.isClassPrivateProperty({
        static: false
      });
    });
    const inConstructor = thisEnvFn.isClassMethod({
      kind: "constructor"
    });
    if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {
      if (arrowParent) {
        thisEnvFn = arrowParent;
      } else if (allowInsertArrow) {
        fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression2(fnPath.node)), []));
        thisEnvFn = fnPath.get("callee");
        fnPath = thisEnvFn.get("body");
      } else {
        throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
      }
    }
    const {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    } = getScopeInformation(fnPath);
    if (inConstructor && superCalls.length > 0) {
      if (!allowInsertArrow) {
        throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      if (!allowInsertArrowWithRest) {
        throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      const allSuperCalls = [];
      thisEnvFn.traverse(getSuperCallsVisitor, {
        allSuperCalls
      });
      const superBinding = getSuperBinding(thisEnvFn);
      allSuperCalls.forEach((superCall) => {
        const callee = identifier2(superBinding);
        callee.loc = superCall.node.callee.loc;
        superCall.get("callee").replaceWith(callee);
      });
    }
    if (argumentsPaths.length > 0) {
      const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
        const args = () => identifier2("arguments");
        if (thisEnvFn.scope.path.isProgram()) {
          return conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());
        } else {
          return args();
        }
      });
      argumentsPaths.forEach((argumentsChild) => {
        const argsRef = identifier2(argumentsBinding);
        argsRef.loc = argumentsChild.node.loc;
        argumentsChild.replaceWith(argsRef);
      });
    }
    if (newTargetPaths.length > 0) {
      const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier2("new"), identifier2("target")));
      newTargetPaths.forEach((targetChild) => {
        const targetRef = identifier2(newTargetBinding);
        targetRef.loc = targetChild.node.loc;
        targetChild.replaceWith(targetRef);
      });
    }
    if (superProps.length > 0) {
      if (!allowInsertArrow) {
        throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
      flatSuperProps.forEach((superProp) => {
        const key = superProp.node.computed ? "" : superProp.get("property").node.name;
        const superParentPath = superProp.parentPath;
        const isAssignment = superParentPath.isAssignmentExpression({
          left: superProp.node
        });
        const isCall = superParentPath.isCallExpression({
          callee: superProp.node
        });
        const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({
          tag: superProp.node
        });
        const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);
        const args = [];
        if (superProp.node.computed) {
          args.push(superProp.get("property").node);
        }
        if (isAssignment) {
          const value2 = superParentPath.node.right;
          args.push(value2);
        }
        const call = callExpression(identifier2(superBinding), args);
        if (isCall) {
          superParentPath.unshiftContainer("arguments", thisExpression());
          superProp.replaceWith(memberExpression(call, identifier2("call")));
          thisPaths.push(superParentPath.get("arguments.0"));
        } else if (isAssignment) {
          superParentPath.replaceWith(call);
        } else if (isTaggedTemplate) {
          superProp.replaceWith(callExpression(memberExpression(call, identifier2("bind"), false), [thisExpression()]));
          thisPaths.push(superProp.get("arguments.0"));
        } else {
          superProp.replaceWith(call);
        }
      });
    }
    let thisBinding;
    if (thisPaths.length > 0 || !noNewArrows) {
      thisBinding = getThisBinding(thisEnvFn, inConstructor);
      if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
        thisPaths.forEach((thisChild) => {
          const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier2(thisBinding);
          thisRef.loc = thisChild.node.loc;
          thisChild.replaceWith(thisRef);
        });
        if (!noNewArrows) thisBinding = null;
      }
    }
    return {
      thisBinding,
      fnPath
    };
  }
  function isLogicalOp(op) {
    return LOGICAL_OPERATORS.includes(op);
  }
  function standardizeSuperProperty(superProp) {
    if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {
      const assignmentPath = superProp.parentPath;
      const op = assignmentPath.node.operator.slice(0, -1);
      const value2 = assignmentPath.node.right;
      const isLogicalAssignment = isLogicalOp(op);
      if (superProp.node.computed) {
        const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
        const object = superProp.node.object;
        const property = superProp.node.property;
        assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true));
        assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier2(tmp.name), true), value2));
      } else {
        const object = superProp.node.object;
        const property = superProp.node.property;
        assignmentPath.get("left").replaceWith(memberExpression(object, property));
        assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier2(property.name)), value2));
      }
      if (isLogicalAssignment) {
        assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));
      } else {
        assignmentPath.node.operator = "=";
      }
      return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
    } else if (superProp.parentPath.isUpdateExpression()) {
      const updateExpr = superProp.parentPath;
      const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
      const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;
      const parts = [assignmentExpression("=", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression("=", memberExpression(superProp.node.object, computedKey ? identifier2(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier2(tmp.name), numericLiteral(1)))];
      if (!superProp.parentPath.node.prefix) {
        parts.push(identifier2(tmp.name));
      }
      updateExpr.replaceWith(sequenceExpression(parts));
      const left = updateExpr.get("expressions.0.right");
      const right = updateExpr.get("expressions.1.left");
      return [left, right];
    }
    return [superProp];
    function rightExpression(op, left, right) {
      if (op === "=") {
        return assignmentExpression("=", left, right);
      } else {
        return binaryExpression(op, left, right);
      }
    }
  }
  function hasSuperClass(thisEnvFn) {
    return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
  }
  const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({
    CallExpression(child, {
      supers,
      thisBinding
    }) {
      if (!child.get("callee").isSuper()) return;
      if (supers.has(child.node)) return;
      supers.add(child.node);
      child.replaceWithMultiple([child.node, assignmentExpression("=", identifier2(thisBinding), identifier2("this"))]);
    }
  });
  function getThisBinding(thisEnvFn, inConstructor) {
    return getBinding(thisEnvFn, "this", (thisBinding) => {
      if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();
      thisEnvFn.traverse(assignSuperThisVisitor, {
        supers: /* @__PURE__ */ new WeakSet(),
        thisBinding
      });
    });
  }
  function getSuperBinding(thisEnvFn) {
    return getBinding(thisEnvFn, "supercall", () => {
      const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
      return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier2(argsBinding.name))]));
    });
  }
  function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
    const op = isAssignment ? "set" : "get";
    return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {
      const argsList = [];
      let fnBody;
      if (propName) {
        fnBody = memberExpression(_super(), identifier2(propName));
      } else {
        const method = thisEnvFn.scope.generateUidIdentifier("prop");
        argsList.unshift(method);
        fnBody = memberExpression(_super(), identifier2(method.name), true);
      }
      if (isAssignment) {
        const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
        argsList.push(valueIdent);
        fnBody = assignmentExpression("=", fnBody, identifier2(valueIdent.name));
      }
      return arrowFunctionExpression(argsList, fnBody);
    });
  }
  function getBinding(thisEnvFn, key, init) {
    const cacheKey = "binding:" + key;
    let data = thisEnvFn.getData(cacheKey);
    if (!data) {
      const id = thisEnvFn.scope.generateUidIdentifier(key);
      data = id.name;
      thisEnvFn.setData(cacheKey, data);
      thisEnvFn.scope.push({
        id,
        init: init(data)
      });
    }
    return data;
  }
  const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({
    ThisExpression(child, {
      thisPaths
    }) {
      thisPaths.push(child);
    },
    JSXIdentifier(child, {
      thisPaths
    }) {
      if (child.node.name !== "this") return;
      if (!child.parentPath.isJSXMemberExpression({
        object: child.node
      }) && !child.parentPath.isJSXOpeningElement({
        name: child.node
      })) {
        return;
      }
      thisPaths.push(child);
    },
    CallExpression(child, {
      superCalls
    }) {
      if (child.get("callee").isSuper()) superCalls.push(child);
    },
    MemberExpression(child, {
      superProps
    }) {
      if (child.get("object").isSuper()) superProps.push(child);
    },
    Identifier(child, {
      argumentsPaths
    }) {
      if (!child.isReferencedIdentifier({
        name: "arguments"
      })) return;
      let curr = child.scope;
      do {
        if (curr.hasOwnBinding("arguments")) {
          curr.rename("arguments");
          return;
        }
        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {
          break;
        }
      } while (curr = curr.parent);
      argumentsPaths.push(child);
    },
    MetaProperty(child, {
      newTargetPaths
    }) {
      if (!child.get("meta").isIdentifier({
        name: "new"
      })) return;
      if (!child.get("property").isIdentifier({
        name: "target"
      })) return;
      newTargetPaths.push(child);
    }
  });
  function getScopeInformation(fnPath) {
    const thisPaths = [];
    const argumentsPaths = [];
    const newTargetPaths = [];
    const superProps = [];
    const superCalls = [];
    fnPath.traverse(getScopeInformationVisitor, {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    });
    return {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    };
  }
  function splitExportDeclaration() {
    if (!this.isExportDeclaration() || this.isExportAllDeclaration()) {
      throw new Error("Only default and named export declarations can be split.");
    }
    if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) {
      throw new Error("It doesn't make sense to split exported specifiers.");
    }
    const declaration = this.get("declaration");
    if (this.isExportDefaultDeclaration()) {
      const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration();
      const exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression();
      const scope2 = declaration.isScope() ? declaration.scope.parent : declaration.scope;
      let id = declaration.node.id;
      let needBindingRegistration = false;
      if (!id) {
        needBindingRegistration = true;
        id = scope2.generateUidIdentifier("default");
        if (standaloneDeclaration || exportExpr) {
          declaration.node.id = cloneNode2(id);
        }
      } else if (exportExpr && scope2.hasBinding(id.name)) {
        needBindingRegistration = true;
        id = scope2.generateUidIdentifier(id.name);
      }
      const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode2(id), declaration.node)]);
      const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode2(id), identifier2("default"))]);
      this.insertAfter(updatedExportDeclaration);
      this.replaceWith(updatedDeclaration);
      if (needBindingRegistration) {
        scope2.registerDeclaration(this);
      }
      return this;
    } else if (this.get("specifiers").length > 0) {
      throw new Error("It doesn't make sense to split exported specifiers.");
    }
    const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
    const specifiers = Object.keys(bindingIdentifiers).map((name) => {
      return exportSpecifier(identifier2(name), identifier2(name));
    });
    const aliasDeclar = exportNamedDeclaration(null, specifiers);
    this.insertAfter(aliasDeclar);
    this.replaceWith(declaration.node);
    return this;
  }
  const refersOuterBindingVisitor = {
    "ReferencedIdentifier|BindingIdentifier"(path2, state) {
      if (path2.node.name !== state.name) return;
      state.needsRename = true;
      path2.stop();
    },
    Scope(path2, state) {
      if (path2.scope.hasOwnBinding(state.name)) {
        path2.skip();
      }
    }
  };
  function ensureFunctionName(supportUnicodeId) {
    if (this.node.id) return this;
    const res = getFunctionName2(this.node, this.parent);
    if (res == null) return this;
    let {
      name
    } = res;
    if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name)) {
      return null;
    }
    if (name.startsWith("get ") || name.startsWith("set ")) {
      return null;
    }
    name = toBindingIdentifierName2(name.replace(/[/ ]/g, "_"));
    const id = identifier2(name);
    inherits2(id, res.originalNode);
    const state = {
      needsRename: false,
      name
    };
    const {
      scope: scope2
    } = this;
    const binding2 = scope2.getOwnBinding(name);
    if (binding2) {
      if (binding2.kind === "param") {
        state.needsRename = true;
      }
    } else if (scope2.parent.hasBinding(name) || scope2.hasGlobal(name)) {
      this.traverse(refersOuterBindingVisitor, state);
    }
    if (!state.needsRename) {
      this.node.id = id;
      {
        scope2.getProgramParent().references[id.name] = true;
      }
      return this;
    }
    if (scope2.hasBinding(id.name) && !scope2.hasGlobal(id.name)) {
      scope2.rename(id.name);
      this.node.id = id;
      {
        scope2.getProgramParent().references[id.name] = true;
      }
      return this;
    }
    if (!isFunction(this.node)) return null;
    const key = scope2.generateUidIdentifier(id.name);
    const params = [];
    for (let i = 0, len = getFunctionArity(this.node); i < len; i++) {
      params.push(scope2.generateUidIdentifier("x"));
    }
    const call = _template.default.expression.ast`
    (function (${key}) {
      function ${id}(${params}) {
        return ${cloneNode2(key)}.apply(this, arguments);
      }

      ${cloneNode2(id)}.toString = function () {
        return ${cloneNode2(key)}.toString();
      }

      return ${cloneNode2(id)};
    })(${toExpression2(this.node)})
  `;
    return this.replaceWith(call)[0].get("arguments.0");
  }
  function getFunctionArity(node2) {
    const count = node2.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
    return count === -1 ? node2.params.length : count;
  }
  return conversion;
}
var introspection = {};
var hasRequiredIntrospection;
function requireIntrospection() {
  if (hasRequiredIntrospection) return introspection;
  hasRequiredIntrospection = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
    exports2._resolve = _resolve;
    exports2.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
    exports2.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
    exports2.getSource = getSource;
    exports2.isCompletionRecord = isCompletionRecord;
    exports2.isConstantExpression = isConstantExpression;
    exports2.isInStrictMode = isInStrictMode;
    exports2.isNodeType = isNodeType;
    exports2.isStatementOrBlock = isStatementOrBlock;
    exports2.isStatic = isStatic;
    exports2.matchesPattern = matchesPattern2;
    exports2.referencesImport = referencesImport;
    exports2.resolve = resolve;
    exports2.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
    var _t2 = requireLib$b();
    const {
      STATEMENT_OR_BLOCK_KEYS,
      VISITOR_KEYS,
      isBlockStatement,
      isExpression,
      isIdentifier,
      isLiteral,
      isStringLiteral,
      isType: isType2,
      matchesPattern: _matchesPattern
    } = _t2;
    function matchesPattern2(pattern, allowPartial) {
      return _matchesPattern(this.node, pattern, allowPartial);
    }
    {
      exports2.has = function has(key) {
        var _this$node;
        const val = (_this$node = this.node) == null ? void 0 : _this$node[key];
        if (val && Array.isArray(val)) {
          return !!val.length;
        } else {
          return !!val;
        }
      };
    }
    function isStatic() {
      return this.scope.isStatic(this.node);
    }
    {
      exports2.is = exports2.has;
      exports2.isnt = function isnt(key) {
        return !this.has(key);
      };
      exports2.equals = function equals(key, value2) {
        return this.node[key] === value2;
      };
    }
    function isNodeType(type) {
      return isType2(this.type, type);
    }
    function canHaveVariableDeclarationOrExpression() {
      return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
    }
    function canSwapBetweenExpressionAndStatement(replacement2) {
      if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
        return false;
      }
      if (this.isExpression()) {
        return isBlockStatement(replacement2);
      } else if (this.isBlockStatement()) {
        return isExpression(replacement2);
      }
      return false;
    }
    function isCompletionRecord(allowInsideFunction) {
      let path2 = this;
      let first = true;
      do {
        const {
          type,
          container
        } = path2;
        if (!first && (path2.isFunction() || type === "StaticBlock")) {
          return !!allowInsideFunction;
        }
        first = false;
        if (Array.isArray(container) && path2.key !== container.length - 1) {
          return false;
        }
      } while ((path2 = path2.parentPath) && !path2.isProgram() && !path2.isDoExpression());
      return true;
    }
    function isStatementOrBlock() {
      if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {
        return false;
      } else {
        return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
      }
    }
    function referencesImport(moduleSource, importName) {
      if (!this.isReferencedIdentifier()) {
        if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {
          value: importName
        }) : this.node.property.name === importName)) {
          const object = this.get("object");
          return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
        }
        return false;
      }
      const binding2 = this.scope.getBinding(this.node.name);
      if (!binding2 || binding2.kind !== "module") return false;
      const path2 = binding2.path;
      const parent = path2.parentPath;
      if (!parent.isImportDeclaration()) return false;
      if (parent.node.source.value === moduleSource) {
        if (!importName) return true;
      } else {
        return false;
      }
      if (path2.isImportDefaultSpecifier() && importName === "default") {
        return true;
      }
      if (path2.isImportNamespaceSpecifier() && importName === "*") {
        return true;
      }
      if (path2.isImportSpecifier() && isIdentifier(path2.node.imported, {
        name: importName
      })) {
        return true;
      }
      return false;
    }
    function getSource() {
      const node2 = this.node;
      if (node2.end) {
        const code = this.hub.getCode();
        if (code) return code.slice(node2.start, node2.end);
      }
      return "";
    }
    function willIMaybeExecuteBefore(target) {
      return this._guessExecutionStatusRelativeTo(target) !== "after";
    }
    function getOuterFunction(path2) {
      return path2.isProgram() ? path2 : (path2.parentPath.scope.getFunctionParent() || path2.parentPath.scope.getProgramParent()).path;
    }
    function isExecutionUncertain(type, key) {
      switch (type) {
        case "LogicalExpression":
          return key === "right";
        case "ConditionalExpression":
        case "IfStatement":
          return key === "consequent" || key === "alternate";
        case "WhileStatement":
        case "DoWhileStatement":
        case "ForInStatement":
        case "ForOfStatement":
          return key === "body";
        case "ForStatement":
          return key === "body" || key === "update";
        case "SwitchStatement":
          return key === "cases";
        case "TryStatement":
          return key === "handler";
        case "AssignmentPattern":
          return key === "right";
        case "OptionalMemberExpression":
          return key === "property";
        case "OptionalCallExpression":
          return key === "arguments";
        default:
          return false;
      }
    }
    function isExecutionUncertainInList(paths, maxIndex) {
      for (let i = 0; i < maxIndex; i++) {
        const path2 = paths[i];
        if (isExecutionUncertain(path2.parent.type, path2.parentKey)) {
          return true;
        }
      }
      return false;
    }
    const SYMBOL_CHECKING = Symbol();
    function _guessExecutionStatusRelativeTo(target) {
      return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
    }
    function _guessExecutionStatusRelativeToCached(base2, target, cache2) {
      const funcParent = {
        this: getOuterFunction(base2),
        target: getOuterFunction(target)
      };
      if (funcParent.target.node !== funcParent.this.node) {
        return _guessExecutionStatusRelativeToDifferentFunctionsCached(base2, funcParent.target, cache2);
      }
      const paths = {
        target: target.getAncestry(),
        this: base2.getAncestry()
      };
      if (paths.target.includes(base2)) return "after";
      if (paths.this.includes(target)) return "before";
      let commonPath;
      const commonIndex = {
        target: 0,
        this: 0
      };
      while (!commonPath && commonIndex.this < paths.this.length) {
        const path2 = paths.this[commonIndex.this];
        commonIndex.target = paths.target.indexOf(path2);
        if (commonIndex.target >= 0) {
          commonPath = path2;
        } else {
          commonIndex.this++;
        }
      }
      if (!commonPath) {
        throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
      }
      if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {
        return "unknown";
      }
      const divergence = {
        this: paths.this[commonIndex.this - 1],
        target: paths.target[commonIndex.target - 1]
      };
      if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {
        return divergence.target.key > divergence.this.key ? "before" : "after";
      }
      const keys = VISITOR_KEYS[commonPath.type];
      const keyPosition = {
        this: keys.indexOf(divergence.this.parentKey),
        target: keys.indexOf(divergence.target.parentKey)
      };
      return keyPosition.target > keyPosition.this ? "before" : "after";
    }
    function _guessExecutionStatusRelativeToDifferentFunctionsInternal(base2, target, cache2) {
      if (!target.isFunctionDeclaration()) {
        if (_guessExecutionStatusRelativeToCached(base2, target, cache2) === "before") {
          return "before";
        }
        return "unknown";
      } else if (target.parentPath.isExportDeclaration()) {
        return "unknown";
      }
      const binding2 = target.scope.getBinding(target.node.id.name);
      if (!binding2.references) return "before";
      const referencePaths = binding2.referencePaths;
      let allStatus;
      for (const path2 of referencePaths) {
        const childOfFunction = !!path2.find((path3) => path3.node === target.node);
        if (childOfFunction) continue;
        if (path2.key !== "callee" || !path2.parentPath.isCallExpression()) {
          return "unknown";
        }
        const status = _guessExecutionStatusRelativeToCached(base2, path2, cache2);
        if (allStatus && allStatus !== status) {
          return "unknown";
        } else {
          allStatus = status;
        }
      }
      return allStatus;
    }
    function _guessExecutionStatusRelativeToDifferentFunctionsCached(base2, target, cache2) {
      let nodeMap = cache2.get(base2.node);
      let cached;
      if (!nodeMap) {
        cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
      } else if (cached = nodeMap.get(target.node)) {
        if (cached === SYMBOL_CHECKING) {
          return "unknown";
        }
        return cached;
      }
      nodeMap.set(target.node, SYMBOL_CHECKING);
      const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base2, target, cache2);
      nodeMap.set(target.node, result);
      return result;
    }
    function resolve(dangerous, resolved) {
      return _resolve.call(this, dangerous, resolved) || this;
    }
    function _resolve(dangerous, resolved) {
      var _resolved;
      if ((_resolved = resolved) != null && _resolved.includes(this)) return;
      resolved = resolved || [];
      resolved.push(this);
      if (this.isVariableDeclarator()) {
        if (this.get("id").isIdentifier()) {
          return this.get("init").resolve(dangerous, resolved);
        }
      } else if (this.isReferencedIdentifier()) {
        const binding2 = this.scope.getBinding(this.node.name);
        if (!binding2) return;
        if (!binding2.constant) return;
        if (binding2.kind === "module") return;
        if (binding2.path !== this) {
          const ret = binding2.path.resolve(dangerous, resolved);
          if (this.find((parent) => parent.node === ret.node)) return;
          return ret;
        }
      } else if (this.isTypeCastExpression()) {
        return this.get("expression").resolve(dangerous, resolved);
      } else if (dangerous && this.isMemberExpression()) {
        const targetKey = this.toComputedKey();
        if (!isLiteral(targetKey)) return;
        const targetName = targetKey.value;
        const target = this.get("object").resolve(dangerous, resolved);
        if (target.isObjectExpression()) {
          const props = target.get("properties");
          for (const prop of props) {
            if (!prop.isProperty()) continue;
            const key = prop.get("key");
            let match = prop.isnt("computed") && key.isIdentifier({
              name: targetName
            });
            match = match || key.isLiteral({
              value: targetName
            });
            if (match) return prop.get("value").resolve(dangerous, resolved);
          }
        } else if (target.isArrayExpression() && !isNaN(+targetName)) {
          const elems = target.get("elements");
          const elem = elems[targetName];
          if (elem) return elem.resolve(dangerous, resolved);
        }
      }
    }
    function isConstantExpression() {
      if (this.isIdentifier()) {
        const binding2 = this.scope.getBinding(this.node.name);
        if (!binding2) return false;
        return binding2.constant;
      }
      if (this.isLiteral()) {
        if (this.isRegExpLiteral()) {
          return false;
        }
        if (this.isTemplateLiteral()) {
          return this.get("expressions").every((expression) => expression.isConstantExpression());
        }
        return true;
      }
      if (this.isUnaryExpression()) {
        if (this.node.operator !== "void") {
          return false;
        }
        return this.get("argument").isConstantExpression();
      }
      if (this.isBinaryExpression()) {
        const {
          operator
        } = this.node;
        return operator !== "in" && operator !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
      }
      if (this.isMemberExpression()) {
        return !this.node.computed && this.get("object").isIdentifier({
          name: "Symbol"
        }) && !this.scope.hasBinding("Symbol", {
          noGlobals: true
        });
      }
      if (this.isCallExpression()) {
        return this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", {
          noGlobals: true
        }) && this.get("arguments")[0].isStringLiteral();
      }
      return false;
    }
    function isInStrictMode() {
      const start = this.isProgram() ? this : this.parentPath;
      const strictParent = start.find((path2) => {
        if (path2.isProgram({
          sourceType: "module"
        })) return true;
        if (path2.isClass()) return true;
        if (path2.isArrowFunctionExpression() && !path2.get("body").isBlockStatement()) {
          return false;
        }
        let body;
        if (path2.isFunction()) {
          body = path2.node.body;
        } else if (path2.isProgram()) {
          body = path2.node;
        } else {
          return false;
        }
        for (const directive of body.directives) {
          if (directive.value.value === "use strict") {
            return true;
          }
        }
      });
      return !!strictParent;
    }
  })(introspection);
  return introspection;
}
var family = {};
var hasRequiredFamily;
function requireFamily() {
  if (hasRequiredFamily) return family;
  hasRequiredFamily = 1;
  Object.defineProperty(family, "__esModule", {
    value: true
  });
  family._getKey = _getKey;
  family._getPattern = _getPattern;
  family.get = get;
  family.getAllNextSiblings = getAllNextSiblings;
  family.getAllPrevSiblings = getAllPrevSiblings;
  family.getAssignmentIdentifiers = getAssignmentIdentifiers2;
  family.getBindingIdentifierPaths = getBindingIdentifierPaths;
  family.getBindingIdentifiers = getBindingIdentifiers2;
  family.getCompletionRecords = getCompletionRecords;
  family.getNextSibling = getNextSibling;
  family.getOpposite = getOpposite;
  family.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
  family.getOuterBindingIdentifiers = getOuterBindingIdentifiers2;
  family.getPrevSibling = getPrevSibling;
  family.getSibling = getSibling;
  var _index = requirePath();
  var _t2 = requireLib$b();
  const {
    getAssignmentIdentifiers: _getAssignmentIdentifiers,
    getBindingIdentifiers: _getBindingIdentifiers,
    getOuterBindingIdentifiers: _getOuterBindingIdentifiers,
    numericLiteral,
    unaryExpression
  } = _t2;
  const NORMAL_COMPLETION = 0;
  const BREAK_COMPLETION = 1;
  function NormalCompletion(path2) {
    return {
      type: NORMAL_COMPLETION,
      path: path2
    };
  }
  function BreakCompletion(path2) {
    return {
      type: BREAK_COMPLETION,
      path: path2
    };
  }
  function getOpposite() {
    if (this.key === "left") {
      return this.getSibling("right");
    } else if (this.key === "right") {
      return this.getSibling("left");
    }
    return null;
  }
  function addCompletionRecords(path2, records, context2) {
    if (path2) {
      records.push(..._getCompletionRecords(path2, context2));
    }
    return records;
  }
  function completionRecordForSwitch(cases, records, context2) {
    let lastNormalCompletions = [];
    for (let i = 0; i < cases.length; i++) {
      const casePath = cases[i];
      const caseCompletions = _getCompletionRecords(casePath, context2);
      const normalCompletions = [];
      const breakCompletions = [];
      for (const c of caseCompletions) {
        if (c.type === NORMAL_COMPLETION) {
          normalCompletions.push(c);
        }
        if (c.type === BREAK_COMPLETION) {
          breakCompletions.push(c);
        }
      }
      if (normalCompletions.length) {
        lastNormalCompletions = normalCompletions;
      }
      records.push(...breakCompletions);
    }
    records.push(...lastNormalCompletions);
    return records;
  }
  function normalCompletionToBreak(completions) {
    completions.forEach((c) => {
      c.type = BREAK_COMPLETION;
    });
  }
  function replaceBreakStatementInBreakCompletion(completions, reachable) {
    completions.forEach((c) => {
      if (c.path.isBreakStatement({
        label: null
      })) {
        if (reachable) {
          c.path.replaceWith(unaryExpression("void", numericLiteral(0)));
        } else {
          c.path.remove();
        }
      }
    });
  }
  function getStatementListCompletion(paths, context2) {
    const completions = [];
    if (context2.canHaveBreak) {
      let lastNormalCompletions = [];
      for (let i = 0; i < paths.length; i++) {
        const path2 = paths[i];
        const newContext = Object.assign({}, context2, {
          inCaseClause: false
        });
        if (path2.isBlockStatement() && (context2.inCaseClause || context2.shouldPopulateBreak)) {
          newContext.shouldPopulateBreak = true;
        } else {
          newContext.shouldPopulateBreak = false;
        }
        const statementCompletions = _getCompletionRecords(path2, newContext);
        if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
          if (lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({
            label: null
          }))) {
            normalCompletionToBreak(lastNormalCompletions);
            completions.push(...lastNormalCompletions);
            if (lastNormalCompletions.some((c) => c.path.isDeclaration())) {
              completions.push(...statementCompletions);
              if (!context2.shouldPreserveBreak) {
                replaceBreakStatementInBreakCompletion(statementCompletions, true);
              }
            }
            if (!context2.shouldPreserveBreak) {
              replaceBreakStatementInBreakCompletion(statementCompletions, false);
            }
          } else {
            completions.push(...statementCompletions);
            if (!context2.shouldPopulateBreak && !context2.shouldPreserveBreak) {
              replaceBreakStatementInBreakCompletion(statementCompletions, true);
            }
          }
          break;
        }
        if (i === paths.length - 1) {
          completions.push(...statementCompletions);
        } else {
          lastNormalCompletions = [];
          for (let i2 = 0; i2 < statementCompletions.length; i2++) {
            const c = statementCompletions[i2];
            if (c.type === BREAK_COMPLETION) {
              completions.push(c);
            }
            if (c.type === NORMAL_COMPLETION) {
              lastNormalCompletions.push(c);
            }
          }
        }
      }
    } else if (paths.length) {
      for (let i = paths.length - 1; i >= 0; i--) {
        const pathCompletions = _getCompletionRecords(paths[i], context2);
        if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration() && !pathCompletions[0].path.isEmptyStatement()) {
          completions.push(...pathCompletions);
          break;
        }
      }
    }
    return completions;
  }
  function _getCompletionRecords(path2, context2) {
    let records = [];
    if (path2.isIfStatement()) {
      records = addCompletionRecords(path2.get("consequent"), records, context2);
      records = addCompletionRecords(path2.get("alternate"), records, context2);
    } else if (path2.isDoExpression() || path2.isFor() || path2.isWhile() || path2.isLabeledStatement()) {
      return addCompletionRecords(path2.get("body"), records, context2);
    } else if (path2.isProgram() || path2.isBlockStatement()) {
      return getStatementListCompletion(path2.get("body"), context2);
    } else if (path2.isFunction()) {
      return _getCompletionRecords(path2.get("body"), context2);
    } else if (path2.isTryStatement()) {
      records = addCompletionRecords(path2.get("block"), records, context2);
      records = addCompletionRecords(path2.get("handler"), records, context2);
    } else if (path2.isCatchClause()) {
      return addCompletionRecords(path2.get("body"), records, context2);
    } else if (path2.isSwitchStatement()) {
      return completionRecordForSwitch(path2.get("cases"), records, context2);
    } else if (path2.isSwitchCase()) {
      return getStatementListCompletion(path2.get("consequent"), {
        canHaveBreak: true,
        shouldPopulateBreak: false,
        inCaseClause: true,
        shouldPreserveBreak: context2.shouldPreserveBreak
      });
    } else if (path2.isBreakStatement()) {
      records.push(BreakCompletion(path2));
    } else {
      records.push(NormalCompletion(path2));
    }
    return records;
  }
  function getCompletionRecords(shouldPreserveBreak = false) {
    const records = _getCompletionRecords(this, {
      canHaveBreak: false,
      shouldPopulateBreak: false,
      inCaseClause: false,
      shouldPreserveBreak
    });
    return records.map((r) => r.path);
  }
  function getSibling(key) {
    return _index.default.get({
      parentPath: this.parentPath,
      parent: this.parent,
      container: this.container,
      listKey: this.listKey,
      key
    }).setContext(this.context);
  }
  function getPrevSibling() {
    return this.getSibling(this.key - 1);
  }
  function getNextSibling() {
    return this.getSibling(this.key + 1);
  }
  function getAllNextSiblings() {
    let _key = this.key;
    let sibling = this.getSibling(++_key);
    const siblings = [];
    while (sibling.node) {
      siblings.push(sibling);
      sibling = this.getSibling(++_key);
    }
    return siblings;
  }
  function getAllPrevSiblings() {
    let _key = this.key;
    let sibling = this.getSibling(--_key);
    const siblings = [];
    while (sibling.node) {
      siblings.push(sibling);
      sibling = this.getSibling(--_key);
    }
    return siblings;
  }
  function get(key, context2 = true) {
    if (context2 === true) context2 = this.context;
    const parts = key.split(".");
    if (parts.length === 1) {
      return _getKey.call(this, key, context2);
    } else {
      return _getPattern.call(this, parts, context2);
    }
  }
  function _getKey(key, context2) {
    const node2 = this.node;
    const container = node2[key];
    if (Array.isArray(container)) {
      return container.map((_2, i) => {
        return _index.default.get({
          listKey: key,
          parentPath: this,
          parent: node2,
          container,
          key: i
        }).setContext(context2);
      });
    } else {
      return _index.default.get({
        parentPath: this,
        parent: node2,
        container: node2,
        key
      }).setContext(context2);
    }
  }
  function _getPattern(parts, context2) {
    let path2 = this;
    for (const part of parts) {
      if (part === ".") {
        path2 = path2.parentPath;
      } else {
        if (Array.isArray(path2)) {
          path2 = path2[part];
        } else {
          path2 = path2.get(part, context2);
        }
      }
    }
    return path2;
  }
  function getAssignmentIdentifiers2() {
    return _getAssignmentIdentifiers(this.node);
  }
  function getBindingIdentifiers2(duplicates) {
    return _getBindingIdentifiers(this.node, duplicates);
  }
  function getOuterBindingIdentifiers2(duplicates) {
    return _getOuterBindingIdentifiers(this.node, duplicates);
  }
  function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
    const path2 = this;
    const search = [path2];
    const ids = /* @__PURE__ */ Object.create(null);
    while (search.length) {
      const id = search.shift();
      if (!id) continue;
      if (!id.node) continue;
      const keys = _getBindingIdentifiers.keys[id.node.type];
      if (id.isIdentifier()) {
        if (duplicates) {
          const _ids = ids[id.node.name] = ids[id.node.name] || [];
          _ids.push(id);
        } else {
          ids[id.node.name] = id;
        }
        continue;
      }
      if (id.isExportDeclaration()) {
        const declaration = id.get("declaration");
        if (declaration.isDeclaration()) {
          search.push(declaration);
        }
        continue;
      }
      if (outerOnly) {
        if (id.isFunctionDeclaration()) {
          search.push(id.get("id"));
          continue;
        }
        if (id.isFunctionExpression()) {
          continue;
        }
      }
      if (keys) {
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const child = id.get(key);
          if (Array.isArray(child)) {
            search.push(...child);
          } else if (child.node) {
            search.push(child);
          }
        }
      }
    }
    return ids;
  }
  function getOuterBindingIdentifierPaths(duplicates = false) {
    return this.getBindingIdentifierPaths(duplicates, true);
  }
  return family;
}
var comments = {};
var hasRequiredComments;
function requireComments() {
  if (hasRequiredComments) return comments;
  hasRequiredComments = 1;
  Object.defineProperty(comments, "__esModule", {
    value: true
  });
  comments.addComment = addComment2;
  comments.addComments = addComments2;
  comments.shareCommentsWithSiblings = shareCommentsWithSiblings;
  var _t2 = requireLib$b();
  const {
    addComment: _addComment,
    addComments: _addComments
  } = _t2;
  function shareCommentsWithSiblings() {
    if (typeof this.key === "string") return;
    const node2 = this.node;
    if (!node2) return;
    const trailing = node2.trailingComments;
    const leading = node2.leadingComments;
    if (!trailing && !leading) return;
    const prev = this.getSibling(this.key - 1);
    const next = this.getSibling(this.key + 1);
    const hasPrev = Boolean(prev.node);
    const hasNext = Boolean(next.node);
    if (hasPrev) {
      if (leading) {
        prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments));
      }
      if (trailing && !hasNext) prev.addComments("trailing", trailing);
    }
    if (hasNext) {
      if (trailing) {
        next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments));
      }
      if (leading && !hasPrev) next.addComments("leading", leading);
    }
  }
  function removeIfExisting(list, toRemove) {
    if (!(toRemove != null && toRemove.length)) return list;
    const set = new Set(toRemove);
    return list.filter((el) => {
      return !set.has(el);
    });
  }
  function addComment2(type, content, line) {
    _addComment(this.node, type, content, line);
  }
  function addComments2(type, comments2) {
    _addComments(this.node, type, comments2);
  }
  return comments;
}
var hasRequiredPath;
function requirePath() {
  if (hasRequiredPath) return path;
  hasRequiredPath = 1;
  Object.defineProperty(path, "__esModule", {
    value: true
  });
  path.default = path.SHOULD_STOP = path.SHOULD_SKIP = path.REMOVED = void 0;
  var virtualTypes2 = requireVirtualTypes();
  var _debug = requireBrowser$1();
  var _index = requireLib$5();
  var _index2 = requireScope();
  var _t2 = requireLib$b();
  var t = _t2;
  var cache2 = requireCache();
  var _generator = requireLib$6();
  var NodePath_ancestry = requireAncestry();
  var NodePath_inference = requireInference();
  var NodePath_replacement = requireReplacement();
  var NodePath_evaluation = requireEvaluation();
  var NodePath_conversion = requireConversion();
  var NodePath_introspection = requireIntrospection();
  var _context = requireContext();
  var NodePath_context = _context;
  var NodePath_removal = requireRemoval();
  var NodePath_modification = requireModification();
  var NodePath_family = requireFamily();
  var NodePath_comments = requireComments();
  var NodePath_virtual_types_validator = requireVirtualTypesValidator();
  const {
    validate: validate2
  } = _t2;
  const debug2 = _debug("babel");
  path.REMOVED = 1 << 0;
  path.SHOULD_STOP = 1 << 1;
  path.SHOULD_SKIP = 1 << 2;
  const NodePath_Final = path.default = class NodePath {
    constructor(hub2, parent) {
      this.contexts = [];
      this.state = null;
      this.opts = null;
      this._traverseFlags = 0;
      this.skipKeys = null;
      this.parentPath = null;
      this.container = null;
      this.listKey = null;
      this.key = null;
      this.node = null;
      this.type = null;
      this._store = null;
      this.parent = parent;
      this.hub = hub2;
      this.data = null;
      this.context = null;
      this.scope = null;
    }
    get removed() {
      return (this._traverseFlags & 1) > 0;
    }
    set removed(v) {
      if (v) this._traverseFlags |= 1;
      else this._traverseFlags &= -2;
    }
    get shouldStop() {
      return (this._traverseFlags & 2) > 0;
    }
    set shouldStop(v) {
      if (v) this._traverseFlags |= 2;
      else this._traverseFlags &= -3;
    }
    get shouldSkip() {
      return (this._traverseFlags & 4) > 0;
    }
    set shouldSkip(v) {
      if (v) this._traverseFlags |= 4;
      else this._traverseFlags &= -5;
    }
    static get({
      hub: hub2,
      parentPath,
      parent,
      container,
      listKey,
      key
    }) {
      if (!hub2 && parentPath) {
        hub2 = parentPath.hub;
      }
      if (!parent) {
        throw new Error("To get a node path the parent needs to exist");
      }
      const targetNode = container[key];
      const paths = cache2.getOrCreateCachedPaths(parent, parentPath);
      let path2 = paths.get(targetNode);
      if (!path2) {
        path2 = new NodePath(hub2, parent);
        if (targetNode) paths.set(targetNode, path2);
      }
      _context.setup.call(path2, parentPath, container, listKey, key);
      return path2;
    }
    getScope(scope2) {
      return this.isScope() ? new _index2.default(this) : scope2;
    }
    setData(key, val) {
      if (this.data == null) {
        this.data = /* @__PURE__ */ Object.create(null);
      }
      return this.data[key] = val;
    }
    getData(key, def) {
      if (this.data == null) {
        this.data = /* @__PURE__ */ Object.create(null);
      }
      let val = this.data[key];
      if (val === void 0 && def !== void 0) val = this.data[key] = def;
      return val;
    }
    hasNode() {
      return this.node != null;
    }
    buildCodeFrameError(msg, Error2 = SyntaxError) {
      return this.hub.buildError(this.node, msg, Error2);
    }
    traverse(visitor, state) {
      (0, _index.default)(this.node, visitor, this.scope, state, this);
    }
    set(key, node2) {
      validate2(this.node, key, node2);
      this.node[key] = node2;
    }
    getPathLocation() {
      const parts = [];
      let path2 = this;
      do {
        let key = path2.key;
        if (path2.inList) key = `${path2.listKey}[${key}]`;
        parts.unshift(key);
      } while (path2 = path2.parentPath);
      return parts.join(".");
    }
    debug(message) {
      if (!debug2.enabled) return;
      debug2(`${this.getPathLocation()} ${this.type}: ${message}`);
    }
    toString() {
      return (0, _generator.default)(this.node).code;
    }
    get inList() {
      return !!this.listKey;
    }
    set inList(inList) {
      if (!inList) {
        this.listKey = null;
      }
    }
    get parentKey() {
      return this.listKey || this.key;
    }
  };
  const methods2 = {
    findParent: NodePath_ancestry.findParent,
    find: NodePath_ancestry.find,
    getFunctionParent: NodePath_ancestry.getFunctionParent,
    getStatementParent: NodePath_ancestry.getStatementParent,
    getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom,
    getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,
    getAncestry: NodePath_ancestry.getAncestry,
    isAncestor: NodePath_ancestry.isAncestor,
    isDescendant: NodePath_ancestry.isDescendant,
    inType: NodePath_ancestry.inType,
    getTypeAnnotation: NodePath_inference.getTypeAnnotation,
    isBaseType: NodePath_inference.isBaseType,
    couldBeBaseType: NodePath_inference.couldBeBaseType,
    baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,
    isGenericType: NodePath_inference.isGenericType,
    replaceWithMultiple: NodePath_replacement.replaceWithMultiple,
    replaceWithSourceString: NodePath_replacement.replaceWithSourceString,
    replaceWith: NodePath_replacement.replaceWith,
    replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements,
    replaceInline: NodePath_replacement.replaceInline,
    evaluateTruthy: NodePath_evaluation.evaluateTruthy,
    evaluate: NodePath_evaluation.evaluate,
    toComputedKey: NodePath_conversion.toComputedKey,
    ensureBlock: NodePath_conversion.ensureBlock,
    unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,
    arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,
    splitExportDeclaration: NodePath_conversion.splitExportDeclaration,
    ensureFunctionName: NodePath_conversion.ensureFunctionName,
    matchesPattern: NodePath_introspection.matchesPattern,
    isStatic: NodePath_introspection.isStatic,
    isNodeType: NodePath_introspection.isNodeType,
    canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression,
    canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement,
    isCompletionRecord: NodePath_introspection.isCompletionRecord,
    isStatementOrBlock: NodePath_introspection.isStatementOrBlock,
    referencesImport: NodePath_introspection.referencesImport,
    getSource: NodePath_introspection.getSource,
    willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,
    _guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo,
    resolve: NodePath_introspection.resolve,
    isConstantExpression: NodePath_introspection.isConstantExpression,
    isInStrictMode: NodePath_introspection.isInStrictMode,
    isDenylisted: NodePath_context.isDenylisted,
    visit: NodePath_context.visit,
    skip: NodePath_context.skip,
    skipKey: NodePath_context.skipKey,
    stop: NodePath_context.stop,
    setContext: NodePath_context.setContext,
    requeue: NodePath_context.requeue,
    requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators,
    remove: NodePath_removal.remove,
    insertBefore: NodePath_modification.insertBefore,
    insertAfter: NodePath_modification.insertAfter,
    unshiftContainer: NodePath_modification.unshiftContainer,
    pushContainer: NodePath_modification.pushContainer,
    getOpposite: NodePath_family.getOpposite,
    getCompletionRecords: NodePath_family.getCompletionRecords,
    getSibling: NodePath_family.getSibling,
    getPrevSibling: NodePath_family.getPrevSibling,
    getNextSibling: NodePath_family.getNextSibling,
    getAllNextSiblings: NodePath_family.getAllNextSiblings,
    getAllPrevSiblings: NodePath_family.getAllPrevSiblings,
    get: NodePath_family.get,
    getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers,
    getBindingIdentifiers: NodePath_family.getBindingIdentifiers,
    getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,
    getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,
    getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths,
    shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,
    addComment: NodePath_comments.addComment,
    addComments: NodePath_comments.addComments
  };
  Object.assign(NodePath_Final.prototype, methods2);
  {
    NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")];
    Object.assign(NodePath_Final.prototype, {
      has: NodePath_introspection[String("has")],
      is: NodePath_introspection[String("is")],
      isnt: NodePath_introspection[String("isnt")],
      equals: NodePath_introspection[String("equals")],
      hoist: NodePath_modification[String("hoist")],
      updateSiblingKeys: NodePath_modification.updateSiblingKeys,
      call: NodePath_context.call,
      isBlacklisted: NodePath_context[String("isBlacklisted")],
      setScope: NodePath_context.setScope,
      resync: NodePath_context.resync,
      popContext: NodePath_context.popContext,
      pushContext: NodePath_context.pushContext,
      setup: NodePath_context.setup,
      setKey: NodePath_context.setKey
    });
  }
  {
    NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
    NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
    Object.assign(NodePath_Final.prototype, {
      _getTypeAnnotation: NodePath_inference._getTypeAnnotation,
      _replaceWith: NodePath_replacement._replaceWith,
      _resolve: NodePath_introspection._resolve,
      _call: NodePath_context._call,
      _resyncParent: NodePath_context._resyncParent,
      _resyncKey: NodePath_context._resyncKey,
      _resyncList: NodePath_context._resyncList,
      _resyncRemoved: NodePath_context._resyncRemoved,
      _getQueueContexts: NodePath_context._getQueueContexts,
      _removeFromScope: NodePath_removal._removeFromScope,
      _callRemovalHooks: NodePath_removal._callRemovalHooks,
      _remove: NodePath_removal._remove,
      _markRemoved: NodePath_removal._markRemoved,
      _assertUnremoved: NodePath_removal._assertUnremoved,
      _containerInsert: NodePath_modification._containerInsert,
      _containerInsertBefore: NodePath_modification._containerInsertBefore,
      _containerInsertAfter: NodePath_modification._containerInsertAfter,
      _verifyNodeList: NodePath_modification._verifyNodeList,
      _getKey: NodePath_family._getKey,
      _getPattern: NodePath_family._getPattern
    });
  }
  for (const type of t.TYPES) {
    const typeKey = `is${type}`;
    const fn2 = t[typeKey];
    NodePath_Final.prototype[typeKey] = function(opts) {
      return fn2(this.node, opts);
    };
    NodePath_Final.prototype[`assert${type}`] = function(opts) {
      if (!fn2(this.node, opts)) {
        throw new TypeError(`Expected node path of type ${type}`);
      }
    };
  }
  Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
  for (const type of Object.keys(virtualTypes2)) {
    if (type[0] === "_") continue;
    if (!t.TYPES.includes(type)) t.TYPES.push(type);
  }
  return path;
}
var hasRequiredContext$1;
function requireContext$1() {
  if (hasRequiredContext$1) return context;
  hasRequiredContext$1 = 1;
  Object.defineProperty(context, "__esModule", {
    value: true
  });
  context.default = void 0;
  var _index = requirePath();
  var _t2 = requireLib$b();
  var _context = requireContext();
  const {
    VISITOR_KEYS
  } = _t2;
  class TraversalContext {
    constructor(scope2, opts, state, parentPath) {
      this.queue = null;
      this.priorityQueue = null;
      this.parentPath = parentPath;
      this.scope = scope2;
      this.state = state;
      this.opts = opts;
    }
    shouldVisit(node2) {
      const opts = this.opts;
      if (opts.enter || opts.exit) return true;
      if (opts[node2.type]) return true;
      const keys = VISITOR_KEYS[node2.type];
      if (!(keys != null && keys.length)) return false;
      for (const key of keys) {
        if (node2[key]) {
          return true;
        }
      }
      return false;
    }
    create(node2, container, key, listKey) {
      return _index.default.get({
        parentPath: this.parentPath,
        parent: node2,
        container,
        key,
        listKey
      });
    }
    maybeQueue(path2, notPriority) {
      if (this.queue) {
        if (notPriority) {
          this.queue.push(path2);
        } else {
          this.priorityQueue.push(path2);
        }
      }
    }
    visitMultiple(container, parent, listKey) {
      if (container.length === 0) return false;
      const queue = [];
      for (let key = 0; key < container.length; key++) {
        const node2 = container[key];
        if (node2 && this.shouldVisit(node2)) {
          queue.push(this.create(parent, container, key, listKey));
        }
      }
      return this.visitQueue(queue);
    }
    visitSingle(node2, key) {
      if (this.shouldVisit(node2[key])) {
        return this.visitQueue([this.create(node2, node2, key)]);
      } else {
        return false;
      }
    }
    visitQueue(queue) {
      this.queue = queue;
      this.priorityQueue = [];
      const visited = /* @__PURE__ */ new WeakSet();
      let stop = false;
      let visitIndex = 0;
      for (; visitIndex < queue.length; ) {
        const path2 = queue[visitIndex];
        visitIndex++;
        _context.resync.call(path2);
        if (path2.contexts.length === 0 || path2.contexts[path2.contexts.length - 1] !== this) {
          _context.pushContext.call(path2, this);
        }
        if (path2.key === null) continue;
        const {
          node: node2
        } = path2;
        if (visited.has(node2)) continue;
        if (node2) visited.add(node2);
        if (path2.visit()) {
          stop = true;
          break;
        }
        if (this.priorityQueue.length) {
          stop = this.visitQueue(this.priorityQueue);
          this.priorityQueue = [];
          this.queue = queue;
          if (stop) break;
        }
      }
      for (let i = 0; i < visitIndex; i++) {
        _context.popContext.call(queue[i]);
      }
      this.queue = null;
      return stop;
    }
    visit(node2, key) {
      const nodes = node2[key];
      if (!nodes) return false;
      if (Array.isArray(nodes)) {
        return this.visitMultiple(nodes, node2, key);
      } else {
        return this.visitSingle(node2, key);
      }
    }
  }
  context.default = TraversalContext;
  return context;
}
var hasRequiredTraverseNode;
function requireTraverseNode() {
  if (hasRequiredTraverseNode) return traverseNode;
  hasRequiredTraverseNode = 1;
  Object.defineProperty(traverseNode, "__esModule", {
    value: true
  });
  traverseNode.traverseNode = traverseNode$1;
  var _context = requireContext$1();
  requirePath();
  var _t2 = requireLib$b();
  requireContext();
  const {
    VISITOR_KEYS
  } = _t2;
  function traverseNode$1(node2, opts, scope2, state, path2, skipKeys, visitSelf) {
    const keys = VISITOR_KEYS[node2.type];
    if (!keys) return false;
    const context2 = new _context.default(scope2, opts, state, path2);
    if (visitSelf) {
      if (skipKeys != null && skipKeys[path2.parentKey]) return false;
      return context2.visitQueue([path2]);
    }
    for (const key of keys) {
      if (skipKeys != null && skipKeys[key]) continue;
      if (context2.visit(node2, key)) {
        return true;
      }
    }
    return false;
  }
  return traverseNode;
}
var hasRequiredContext;
function requireContext() {
  if (hasRequiredContext) return context$1;
  hasRequiredContext = 1;
  Object.defineProperty(context$1, "__esModule", {
    value: true
  });
  context$1._call = _call;
  context$1._getQueueContexts = _getQueueContexts;
  context$1._resyncKey = _resyncKey;
  context$1._resyncList = _resyncList;
  context$1._resyncParent = _resyncParent;
  context$1._resyncRemoved = _resyncRemoved;
  context$1.call = call;
  context$1.isDenylisted = isDenylisted;
  context$1.popContext = popContext;
  context$1.pushContext = pushContext;
  context$1.requeue = requeue;
  context$1.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;
  context$1.resync = resync;
  context$1.setContext = setContext;
  context$1.setKey = setKey;
  context$1.setScope = setScope;
  context$1.setup = setup;
  context$1.skip = skip;
  context$1.skipKey = skipKey;
  context$1.stop = stop;
  context$1.visit = visit;
  var _traverseNode = requireTraverseNode();
  var _index = requirePath();
  var _removal = requireRemoval();
  var t = requireLib$b();
  function call(key) {
    const opts = this.opts;
    this.debug(key);
    if (this.node) {
      if (_call.call(this, opts[key])) return true;
    }
    if (this.node) {
      var _opts$this$node$type;
      return _call.call(this, (_opts$this$node$type = opts[this.node.type]) == null ? void 0 : _opts$this$node$type[key]);
    }
    return false;
  }
  function _call(fns) {
    if (!fns) return false;
    for (const fn2 of fns) {
      if (!fn2) continue;
      const node2 = this.node;
      if (!node2) return true;
      const ret = fn2.call(this.state, this, this.state);
      if (ret && typeof ret === "object" && typeof ret.then === "function") {
        throw new Error(`You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
      }
      if (ret) {
        throw new Error(`Unexpected return value from visitor method ${fn2}`);
      }
      if (this.node !== node2) return true;
      if (this._traverseFlags > 0) return true;
    }
    return false;
  }
  function isDenylisted() {
    var _this$opts$denylist;
    const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
    return denylist == null ? void 0 : denylist.includes(this.node.type);
  }
  {
    context$1.isBlacklisted = isDenylisted;
  }
  function restoreContext(path2, context2) {
    if (path2.context !== context2) {
      path2.context = context2;
      path2.state = context2.state;
      path2.opts = context2.opts;
    }
  }
  function visit() {
    var _this$opts$shouldSkip, _this$opts;
    if (!this.node) {
      return false;
    }
    if (this.isDenylisted()) {
      return false;
    }
    if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this)) {
      return false;
    }
    const currentContext = this.context;
    if (this.shouldSkip || call.call(this, "enter")) {
      this.debug("Skip...");
      return this.shouldStop;
    }
    restoreContext(this, currentContext);
    this.debug("Recursing into...");
    this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
    restoreContext(this, currentContext);
    call.call(this, "exit");
    return this.shouldStop;
  }
  function skip() {
    this.shouldSkip = true;
  }
  function skipKey(key) {
    if (this.skipKeys == null) {
      this.skipKeys = {};
    }
    this.skipKeys[key] = true;
  }
  function stop() {
    this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
  }
  function setScope() {
    var _this$opts2, _this$scope;
    if ((_this$opts2 = this.opts) != null && _this$opts2.noScope) return;
    let path2 = this.parentPath;
    if ((this.key === "key" || this.listKey === "decorators") && path2.isMethod() || this.key === "discriminant" && path2.isSwitchStatement()) {
      path2 = path2.parentPath;
    }
    let target;
    while (path2 && !target) {
      var _path$opts;
      if ((_path$opts = path2.opts) != null && _path$opts.noScope) return;
      target = path2.scope;
      path2 = path2.parentPath;
    }
    this.scope = this.getScope(target);
    (_this$scope = this.scope) == null || _this$scope.init();
  }
  function setContext(context2) {
    if (this.skipKeys != null) {
      this.skipKeys = {};
    }
    this._traverseFlags = 0;
    if (context2) {
      this.context = context2;
      this.state = context2.state;
      this.opts = context2.opts;
    }
    setScope.call(this);
    return this;
  }
  function resync() {
    if (this.removed) return;
    _resyncParent.call(this);
    _resyncList.call(this);
    _resyncKey.call(this);
  }
  function _resyncParent() {
    if (this.parentPath) {
      this.parent = this.parentPath.node;
    }
  }
  function _resyncKey() {
    if (!this.container) return;
    if (this.node === this.container[this.key]) {
      return;
    }
    if (Array.isArray(this.container)) {
      for (let i = 0; i < this.container.length; i++) {
        if (this.container[i] === this.node) {
          setKey.call(this, i);
          return;
        }
      }
    } else {
      for (const key of Object.keys(this.container)) {
        if (this.container[key] === this.node) {
          setKey.call(this, key);
          return;
        }
      }
    }
    this.key = null;
  }
  function _resyncList() {
    if (!this.parent || !this.inList) return;
    const newContainer = this.parent[this.listKey];
    if (this.container === newContainer) return;
    this.container = newContainer || null;
  }
  function _resyncRemoved() {
    if (this.key == null || !this.container || this.container[this.key] !== this.node) {
      _removal._markRemoved.call(this);
    }
  }
  function popContext() {
    this.contexts.pop();
    if (this.contexts.length > 0) {
      this.setContext(this.contexts[this.contexts.length - 1]);
    } else {
      this.setContext(void 0);
    }
  }
  function pushContext(context2) {
    this.contexts.push(context2);
    this.setContext(context2);
  }
  function setup(parentPath, container, listKey, key) {
    this.listKey = listKey;
    this.container = container;
    this.parentPath = parentPath || this.parentPath;
    setKey.call(this, key);
  }
  function setKey(key) {
    var _this$node;
    this.key = key;
    this.node = this.container[this.key];
    this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
  }
  function requeue(pathToQueue = this) {
    if (pathToQueue.removed) return;
    const contexts = this.contexts;
    for (const context2 of contexts) {
      context2.maybeQueue(pathToQueue);
    }
  }
  function requeueComputedKeyAndDecorators() {
    const {
      context: context2,
      node: node2
    } = this;
    if (!t.isPrivate(node2) && node2.computed) {
      context2.maybeQueue(this.get("key"));
    }
    if (node2.decorators) {
      for (const decorator of this.get("decorators")) {
        context2.maybeQueue(decorator);
      }
    }
  }
  function _getQueueContexts() {
    let path2 = this;
    let contexts = this.contexts;
    while (!contexts.length) {
      path2 = path2.parentPath;
      if (!path2) break;
      contexts = path2.contexts;
    }
    return contexts;
  }
  return context$1;
}
var hub = {};
var hasRequiredHub;
function requireHub() {
  if (hasRequiredHub) return hub;
  hasRequiredHub = 1;
  Object.defineProperty(hub, "__esModule", {
    value: true
  });
  hub.default = void 0;
  class Hub {
    getCode() {
    }
    getScope() {
    }
    addHelper() {
      throw new Error("Helpers are not supported by the default hub.");
    }
    buildError(node2, msg, Error2 = TypeError) {
      return new Error2(msg);
    }
  }
  hub.default = Hub;
  return hub;
}
var hasRequiredLib$5;
function requireLib$5() {
  if (hasRequiredLib$5) return lib$5;
  hasRequiredLib$5 = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "Hub", {
      enumerable: true,
      get: function() {
        return _hub.default;
      }
    });
    Object.defineProperty(exports2, "NodePath", {
      enumerable: true,
      get: function() {
        return _index.default;
      }
    });
    Object.defineProperty(exports2, "Scope", {
      enumerable: true,
      get: function() {
        return _index2.default;
      }
    });
    exports2.visitors = exports2.default = void 0;
    requireContext();
    var visitors2 = requireVisitors();
    exports2.visitors = visitors2;
    var _t2 = requireLib$b();
    var cache2 = requireCache();
    var _traverseNode = requireTraverseNode();
    var _index = requirePath();
    var _index2 = requireScope();
    var _hub = requireHub();
    const {
      VISITOR_KEYS,
      removeProperties: removeProperties2,
      traverseFast: traverseFast2
    } = _t2;
    function traverse2(parent, opts = {}, scope2, state, parentPath, visitSelf) {
      if (!parent) return;
      if (!opts.noScope && !scope2) {
        if (parent.type !== "Program" && parent.type !== "File") {
          throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
        }
      }
      if (!parentPath && visitSelf) {
        throw new Error("visitSelf can only be used when providing a NodePath.");
      }
      if (!VISITOR_KEYS[parent.type]) {
        return;
      }
      visitors2.explode(opts);
      (0, _traverseNode.traverseNode)(parent, opts, scope2, state, parentPath, null, visitSelf);
    }
    exports2.default = traverse2;
    traverse2.visitors = visitors2;
    traverse2.verify = visitors2.verify;
    traverse2.explode = visitors2.explode;
    traverse2.cheap = function(node2, enter) {
      traverseFast2(node2, enter);
      return;
    };
    traverse2.node = function(node2, opts, scope2, state, path2, skipKeys) {
      (0, _traverseNode.traverseNode)(node2, opts, scope2, state, path2, skipKeys);
    };
    traverse2.clearNode = function(node2, opts) {
      removeProperties2(node2, opts);
    };
    traverse2.removeProperties = function(tree, opts) {
      traverseFast2(tree, traverse2.clearNode, opts);
      return tree;
    };
    traverse2.hasType = function(tree, type, denylistTypes) {
      if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;
      if (tree.type === type) return true;
      return traverseFast2(tree, function(node2) {
        if (denylistTypes != null && denylistTypes.includes(node2.type)) {
          return traverseFast2.skip;
        }
        if (node2.type === type) {
          return traverseFast2.stop;
        }
      });
    };
    traverse2.cache = cache2;
  })(lib$5);
  return lib$5;
}
var semver = { exports: {} };
var hasRequiredSemver;
function requireSemver() {
  if (hasRequiredSemver) return semver.exports;
  hasRequiredSemver = 1;
  (function(module2, exports2) {
    exports2 = module2.exports = SemVer;
    var debug2;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug2 = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug2 = function() {
      };
    }
    exports2.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var re2 = exports2.re = [];
    var safeRe = exports2.safeRe = [];
    var src = exports2.src = [];
    var t = exports2.tokens = {};
    var R2 = 0;
    function tok(n) {
      t[n] = R2++;
    }
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    function makeSafeRe(value2) {
      for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
        var token = safeRegexReplacements[i2][0];
        var max = safeRegexReplacements[i2][1];
        value2 = value2.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
      }
      return value2;
    }
    tok("NUMERICIDENTIFIER");
    src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    tok("NUMERICIDENTIFIERLOOSE");
    src[t.NUMERICIDENTIFIERLOOSE] = "\\d+";
    tok("NONNUMERICIDENTIFIER");
    src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";
    tok("MAINVERSION");
    src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")";
    tok("MAINVERSIONLOOSE");
    src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";
    tok("PRERELEASEIDENTIFIER");
    src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASEIDENTIFIERLOOSE");
    src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASE");
    src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
    tok("PRERELEASELOOSE");
    src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";
    tok("BUILDIDENTIFIER");
    src[t.BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";
    tok("BUILD");
    src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";
    tok("FULL");
    tok("FULLPLAIN");
    src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
    src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";
    tok("LOOSEPLAIN");
    src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
    tok("LOOSE");
    src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
    tok("GTLT");
    src[t.GTLT] = "((?:<|>)?=?)";
    tok("XRANGEIDENTIFIERLOOSE");
    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    tok("XRANGEIDENTIFIER");
    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
    tok("XRANGEPLAIN");
    src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGEPLAINLOOSE");
    src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGE");
    src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
    tok("XRANGELOOSE");
    src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COERCE");
    src[t.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    tok("COERCERTL");
    re2[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
    safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g");
    tok("LONETILDE");
    src[t.LONETILDE] = "(?:~>?)";
    tok("TILDETRIM");
    src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
    re2[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
    safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
    var tildeTrimReplace = "$1~";
    tok("TILDE");
    src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
    tok("TILDELOOSE");
    src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("LONECARET");
    src[t.LONECARET] = "(?:\\^)";
    tok("CARETTRIM");
    src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
    re2[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
    safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
    var caretTrimReplace = "$1^";
    tok("CARET");
    src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
    tok("CARETLOOSE");
    src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COMPARATORLOOSE");
    src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
    tok("COMPARATOR");
    src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";
    tok("COMPARATORTRIM");
    src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";
    re2[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
    safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
    var comparatorTrimReplace = "$1$2$3";
    tok("HYPHENRANGE");
    src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$";
    tok("HYPHENRANGELOOSE");
    src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$";
    tok("STAR");
    src[t.STAR] = "(<|>)?=?\\s*\\*";
    for (var i = 0; i < R2; i++) {
      debug2(i, src[i]);
      if (!re2[i]) {
        re2[i] = new RegExp(src[i]);
        safeRe[i] = new RegExp(makeSafeRe(src[i]));
      }
    }
    exports2.parse = parse2;
    function parse2(version, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options2.loose ? safeRe[t.LOOSE] : safeRe[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options2);
      } catch (er2) {
        return null;
      }
    }
    exports2.valid = valid;
    function valid(version, options2) {
      var v = parse2(version, options2);
      return v ? v.version : null;
    }
    exports2.clean = clean;
    function clean(version, options2) {
      var s = parse2(version.trim().replace(/^[=v]+/, ""), options2);
      return s ? s.version : null;
    }
    exports2.SemVer = SemVer;
    function SemVer(version, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options2.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options2);
      }
      debug2("SemVer", version, options2);
      this.options = options2;
      this.loose = !!options2.loose;
      var m = version.trim().match(options2.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug2("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug2("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a = this.build[i2];
        var b = other.build[i2];
        debug2("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier2) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier2);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier2);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier2);
          this.inc("pre", identifier2);
          break;
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier2);
          }
          this.inc("pre", identifier2);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        // This probably shouldn't be used publicly.
        // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier2) {
            if (this.prerelease[0] === identifier2) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier2, 0];
              }
            } else {
              this.prerelease = [identifier2, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports2.inc = inc;
    function inc(version, release, loose, identifier2) {
      if (typeof loose === "string") {
        identifier2 = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier2).version;
      } catch (er2) {
        return null;
      }
    }
    exports2.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse2(version1);
        var v2 = parse2(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports2.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports2.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports2.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports2.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports2.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports2.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports2.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports2.compareBuild = compareBuild;
    function compareBuild(a, b, loose) {
      var versionA = new SemVer(a, loose);
      var versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports2.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports2.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports2.compareBuild(a, b, loose);
      });
    }
    exports2.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports2.compareBuild(b, a, loose);
      });
    }
    exports2.gt = gt2;
    function gt2(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports2.lt = lt2;
    function lt2(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports2.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports2.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports2.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports2.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports2.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt2(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt2(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports2.Comparator = Comparator;
    function Comparator(comp, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options2.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options2);
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug2("comparator", comp, options2);
      this.options = options2;
      this.loose = !!options2.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug2("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1] !== void 0 ? m[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug2("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er2) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options2) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        rangeTmp = new Range(comp.value, options2);
        return satisfies(this.value, rangeTmp, options2);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        rangeTmp = new Range(this.value, options2);
        return satisfies(comp.semver, rangeTmp, options2);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options2) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options2) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports2.Range = Range;
    function Range(range, options2) {
      if (!options2 || typeof options2 !== "object") {
        options2 = {
          loose: !!options2,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options2.loose && range.includePrerelease === !!options2.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options2);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options2);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options2);
      }
      this.options = options2;
      this.loose = !!options2.loose;
      this.includePrerelease = !!options2.includePrerelease;
      this.raw = range.trim().split(/\s+/).join(" ");
      this.set = this.raw.split("||").map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + this.raw);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      var hr2 = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
      range = range.replace(hr2, hyphenReplace);
      debug2("hyphen replace", range);
      range = range.replace(safeRe[t.COMPARATORTRIM], comparatorTrimReplace);
      debug2("comparator trim", range, safeRe[t.COMPARATORTRIM]);
      range = range.replace(safeRe[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(safeRe[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options2) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options2) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options2) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options2);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options2) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options2);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports2.toComparators = toComparators;
    function toComparators(range, options2) {
      return new Range(range, options2).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options2) {
      debug2("comp", comp, options2);
      comp = replaceCarets(comp, options2);
      debug2("caret", comp);
      comp = replaceTildes(comp, options2);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options2);
      debug2("xrange", comp);
      comp = replaceStars(comp, options2);
      debug2("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options2) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options2);
      }).join(" ");
    }
    function replaceTilde(comp, options2) {
      var r = options2.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
      return comp.replace(r, function(_2, M2, m, p, pr2) {
        debug2("tilde", comp, _2, M2, m, p, pr2);
        var ret;
        if (isX(M2)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M2 + ".0.0 <" + (+M2 + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M2 + "." + m + ".0 <" + M2 + "." + (+m + 1) + ".0";
        } else if (pr2) {
          debug2("replaceTilde pr", pr2);
          ret = ">=" + M2 + "." + m + "." + p + "-" + pr2 + " <" + M2 + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M2 + "." + m + "." + p + " <" + M2 + "." + (+m + 1) + ".0";
        }
        debug2("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options2) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options2);
      }).join(" ");
    }
    function replaceCaret(comp, options2) {
      debug2("caret", comp, options2);
      var r = options2.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
      return comp.replace(r, function(_2, M2, m, p, pr2) {
        debug2("caret", comp, _2, M2, m, p, pr2);
        var ret;
        if (isX(M2)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M2 + ".0.0 <" + (+M2 + 1) + ".0.0";
        } else if (isX(p)) {
          if (M2 === "0") {
            ret = ">=" + M2 + "." + m + ".0 <" + M2 + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M2 + "." + m + ".0 <" + (+M2 + 1) + ".0.0";
          }
        } else if (pr2) {
          debug2("replaceCaret pr", pr2);
          if (M2 === "0") {
            if (m === "0") {
              ret = ">=" + M2 + "." + m + "." + p + "-" + pr2 + " <" + M2 + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M2 + "." + m + "." + p + "-" + pr2 + " <" + M2 + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M2 + "." + m + "." + p + "-" + pr2 + " <" + (+M2 + 1) + ".0.0";
          }
        } else {
          debug2("no pr");
          if (M2 === "0") {
            if (m === "0") {
              ret = ">=" + M2 + "." + m + "." + p + " <" + M2 + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M2 + "." + m + "." + p + " <" + M2 + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M2 + "." + m + "." + p + " <" + (+M2 + 1) + ".0.0";
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options2) {
      debug2("replaceXRanges", comp, options2);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options2);
      }).join(" ");
    }
    function replaceXRange(comp, options2) {
      comp = comp.trim();
      var r = options2.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
      return comp.replace(r, function(ret, gtlt, M2, m, p, pr2) {
        debug2("xRange", comp, ret, gtlt, M2, m, p, pr2);
        var xM = isX(M2);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr2 = options2.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M2 = +M2 + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M2 = +M2 + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M2 + "." + m + "." + p + pr2;
        } else if (xm) {
          ret = ">=" + M2 + ".0.0" + pr2 + " <" + (+M2 + 1) + ".0.0" + pr2;
        } else if (xp) {
          ret = ">=" + M2 + "." + m + ".0" + pr2 + " <" + M2 + "." + (+m + 1) + ".0" + pr2;
        }
        debug2("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options2) {
      debug2("replaceStars", comp, options2);
      return comp.trim().replace(safeRe[t.STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to2, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to2 = "";
      } else if (isX(tm)) {
        to2 = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to2 = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to2 = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to2 = "<=" + to2;
      }
      return (from + " " + to2).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er2) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options2) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options2.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug2(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports2.satisfies = satisfies;
    function satisfies(version, range, options2) {
      try {
        range = new Range(range, options2);
      } catch (er2) {
        return false;
      }
      return range.test(version);
    }
    exports2.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions2, range, options2) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options2);
      } catch (er2) {
        return null;
      }
      versions2.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options2);
          }
        }
      });
      return max;
    }
    exports2.minSatisfying = minSatisfying;
    function minSatisfying(versions2, range, options2) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options2);
      } catch (er2) {
        return null;
      }
      versions2.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options2);
          }
        }
      });
      return min;
    }
    exports2.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!minver || gt2(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports2.validRange = validRange;
    function validRange(range, options2) {
      try {
        return new Range(range, options2).range || "*";
      } catch (er2) {
        return null;
      }
    }
    exports2.ltr = ltr;
    function ltr(version, range, options2) {
      return outside(version, range, "<", options2);
    }
    exports2.gtr = gtr;
    function gtr(version, range, options2) {
      return outside(version, range, ">", options2);
    }
    exports2.outside = outside;
    function outside(version, range, hilo, options2) {
      version = new SemVer(version, options2);
      range = new Range(range, options2);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt2;
          ltefn = lte;
          ltfn = lt2;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt2;
          ltefn = gte;
          ltfn = gt2;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options2)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options2)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options2)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports2.prerelease = prerelease;
    function prerelease(version, options2) {
      var parsed = parse2(version, options2);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports2.intersects = intersects;
    function intersects(r1, r2, options2) {
      r1 = new Range(r1, options2);
      r2 = new Range(r2, options2);
      return r1.intersects(r2);
    }
    exports2.coerce = coerce;
    function coerce(version, options2) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options2 = options2 || {};
      var match = null;
      if (!options2.rtl) {
        match = version.match(safeRe[t.COERCE]);
      } else {
        var next;
        while ((next = safeRe[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        safeRe[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options2);
    }
  })(semver, semver.exports);
  return semver.exports;
}
var babel7Helpers = {};
var lib$3 = {};
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var lib$2 = {};
var importInjector = {};
var importBuilder = {};
var hasRequiredImportBuilder;
function requireImportBuilder() {
  if (hasRequiredImportBuilder) return importBuilder;
  hasRequiredImportBuilder = 1;
  Object.defineProperty(importBuilder, "__esModule", {
    value: true
  });
  importBuilder.default = void 0;
  var _assert = require$$1;
  var _t2 = requireLib$b();
  const {
    callExpression,
    cloneNode: cloneNode2,
    expressionStatement,
    identifier: identifier2,
    importDeclaration,
    importDefaultSpecifier,
    importNamespaceSpecifier,
    importSpecifier,
    memberExpression,
    stringLiteral,
    variableDeclaration,
    variableDeclarator
  } = _t2;
  class ImportBuilder {
    constructor(importedSource, scope2, hub2) {
      this._statements = [];
      this._resultName = null;
      this._importedSource = void 0;
      this._scope = scope2;
      this._hub = hub2;
      this._importedSource = importedSource;
    }
    done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
    import() {
      this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));
      return this;
    }
    require() {
      this._statements.push(expressionStatement(callExpression(identifier2("require"), [stringLiteral(this._importedSource)])));
      return this;
    }
    namespace(name = "namespace") {
      const local = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importNamespaceSpecifier(local)];
      this._resultName = cloneNode2(local);
      return this;
    }
    default(name) {
      const id = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importDefaultSpecifier(id)];
      this._resultName = cloneNode2(id);
      return this;
    }
    named(name, importName) {
      if (importName === "default") return this.default(name);
      const id = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importSpecifier(id, identifier2(importName))];
      this._resultName = cloneNode2(id);
      return this;
    }
    var(name) {
      const id = this._scope.generateUidIdentifier(name);
      let statement = this._statements[this._statements.length - 1];
      if (statement.type !== "ExpressionStatement") {
        _assert(this._resultName);
        statement = expressionStatement(this._resultName);
        this._statements.push(statement);
      }
      this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]);
      this._resultName = cloneNode2(id);
      return this;
    }
    defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
    wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
    _interop(callee) {
      const statement = this._statements[this._statements.length - 1];
      if (statement.type === "ExpressionStatement") {
        statement.expression = callExpression(callee, [statement.expression]);
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);
        statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);
      } else {
        _assert.fail("Unexpected type.");
      }
      return this;
    }
    prop(name) {
      const statement = this._statements[this._statements.length - 1];
      if (statement.type === "ExpressionStatement") {
        statement.expression = memberExpression(statement.expression, identifier2(name));
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);
        statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier2(name));
      } else {
        _assert.fail("Unexpected type:" + statement.type);
      }
      return this;
    }
    read(name) {
      this._resultName = memberExpression(this._resultName, identifier2(name));
    }
  }
  importBuilder.default = ImportBuilder;
  return importBuilder;
}
var isModule = {};
var hasRequiredIsModule;
function requireIsModule() {
  if (hasRequiredIsModule) return isModule;
  hasRequiredIsModule = 1;
  Object.defineProperty(isModule, "__esModule", {
    value: true
  });
  isModule.default = isModule$1;
  function isModule$1(path2) {
    return path2.node.sourceType === "module";
  }
  return isModule;
}
var hasRequiredImportInjector;
function requireImportInjector() {
  if (hasRequiredImportInjector) return importInjector;
  hasRequiredImportInjector = 1;
  Object.defineProperty(importInjector, "__esModule", {
    value: true
  });
  importInjector.default = void 0;
  var _assert = require$$1;
  var _t2 = requireLib$b();
  var _importBuilder = requireImportBuilder();
  var _isModule = requireIsModule();
  const {
    identifier: identifier2,
    importSpecifier,
    numericLiteral,
    sequenceExpression,
    isImportDeclaration
  } = _t2;
  class ImportInjector {
    constructor(path2, importedSource, opts) {
      this._defaultOpts = {
        importedSource: null,
        importedType: "commonjs",
        importedInterop: "babel",
        importingInterop: "babel",
        ensureLiveReference: false,
        ensureNoContext: false,
        importPosition: "before"
      };
      const programPath = path2.find((p) => p.isProgram());
      this._programPath = programPath;
      this._programScope = programPath.scope;
      this._hub = programPath.hub;
      this._defaultOpts = this._applyDefaults(importedSource, opts, true);
    }
    addDefault(importedSourceIn, opts) {
      return this.addNamed("default", importedSourceIn, opts);
    }
    addNamed(importName, importedSourceIn, opts) {
      _assert(typeof importName === "string");
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
    }
    addNamespace(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
    }
    addSideEffect(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
    }
    _applyDefaults(importedSource, opts, isInit = false) {
      let newOpts;
      if (typeof importedSource === "string") {
        newOpts = Object.assign({}, this._defaultOpts, {
          importedSource
        }, opts);
      } else {
        _assert(!opts, "Unexpected secondary arguments.");
        newOpts = Object.assign({}, this._defaultOpts, importedSource);
      }
      if (!isInit && opts) {
        if (opts.nameHint !== void 0) newOpts.nameHint = opts.nameHint;
        if (opts.blockHoist !== void 0) newOpts.blockHoist = opts.blockHoist;
      }
      return newOpts;
    }
    _generateImport(opts, importName) {
      const isDefault = importName === "default";
      const isNamed = !!importName && !isDefault;
      const isNamespace = importName === null;
      const {
        importedSource,
        importedType,
        importedInterop,
        importingInterop,
        ensureLiveReference,
        ensureNoContext,
        nameHint,
        importPosition,
        blockHoist
      } = opts;
      let name = nameHint || importName;
      const isMod = (0, _isModule.default)(this._programPath);
      const isModuleForNode = isMod && importingInterop === "node";
      const isModuleForBabel = isMod && importingInterop === "babel";
      if (importPosition === "after" && !isMod) {
        throw new Error(`"importPosition": "after" is only supported in modules`);
      }
      const builder2 = new _importBuilder.default(importedSource, this._programScope, this._hub);
      if (importedType === "es6") {
        if (!isModuleForNode && !isModuleForBabel) {
          throw new Error("Cannot import an ES6 module from CommonJS");
        }
        builder2.import();
        if (isNamespace) {
          builder2.namespace(nameHint || importedSource);
        } else if (isDefault || isNamed) {
          builder2.named(name, importName);
        }
      } else if (importedType !== "commonjs") {
        throw new Error(`Unexpected interopType "${importedType}"`);
      } else if (importedInterop === "babel") {
        if (isModuleForNode) {
          name = name !== "default" ? name : importedSource;
          const es6Default = `${importedSource}$es6Default`;
          builder2.import();
          if (isNamespace) {
            builder2.default(es6Default).var(name || importedSource).wildcardInterop();
          } else if (isDefault) {
            if (ensureLiveReference) {
              builder2.default(es6Default).var(name || importedSource).defaultInterop().read("default");
            } else {
              builder2.default(es6Default).var(name).defaultInterop().prop(importName);
            }
          } else if (isNamed) {
            builder2.default(es6Default).read(importName);
          }
        } else if (isModuleForBabel) {
          builder2.import();
          if (isNamespace) {
            builder2.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder2.named(name, importName);
          }
        } else {
          builder2.require();
          if (isNamespace) {
            builder2.var(name || importedSource).wildcardInterop();
          } else if ((isDefault || isNamed) && ensureLiveReference) {
            if (isDefault) {
              name = name !== "default" ? name : importedSource;
              builder2.var(name).read(importName);
              builder2.defaultInterop();
            } else {
              builder2.var(importedSource).read(importName);
            }
          } else if (isDefault) {
            builder2.var(name).defaultInterop().prop(importName);
          } else if (isNamed) {
            builder2.var(name).prop(importName);
          }
        }
      } else if (importedInterop === "compiled") {
        if (isModuleForNode) {
          builder2.import();
          if (isNamespace) {
            builder2.default(name || importedSource);
          } else if (isDefault || isNamed) {
            builder2.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder2.import();
          if (isNamespace) {
            builder2.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder2.named(name, importName);
          }
        } else {
          builder2.require();
          if (isNamespace) {
            builder2.var(name || importedSource);
          } else if (isDefault || isNamed) {
            if (ensureLiveReference) {
              builder2.var(importedSource).read(name);
            } else {
              builder2.prop(importName).var(name);
            }
          }
        }
      } else if (importedInterop === "uncompiled") {
        if (isDefault && ensureLiveReference) {
          throw new Error("No live reference for commonjs default");
        }
        if (isModuleForNode) {
          builder2.import();
          if (isNamespace) {
            builder2.default(name || importedSource);
          } else if (isDefault) {
            builder2.default(name);
          } else if (isNamed) {
            builder2.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder2.import();
          if (isNamespace) {
            builder2.default(name || importedSource);
          } else if (isDefault) {
            builder2.default(name);
          } else if (isNamed) {
            builder2.named(name, importName);
          }
        } else {
          builder2.require();
          if (isNamespace) {
            builder2.var(name || importedSource);
          } else if (isDefault) {
            builder2.var(name);
          } else if (isNamed) {
            if (ensureLiveReference) {
              builder2.var(importedSource).read(name);
            } else {
              builder2.var(name).prop(importName);
            }
          }
        }
      } else {
        throw new Error(`Unknown importedInterop "${importedInterop}".`);
      }
      const {
        statements: statements2,
        resultName
      } = builder2.done();
      this._insertStatements(statements2, importPosition, blockHoist);
      if ((isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier") {
        return sequenceExpression([numericLiteral(0), resultName]);
      }
      return resultName;
    }
    _insertStatements(statements2, importPosition = "before", blockHoist = 3) {
      if (importPosition === "after") {
        if (this._insertStatementsAfter(statements2)) return;
      } else {
        if (this._insertStatementsBefore(statements2, blockHoist)) return;
      }
      this._programPath.unshiftContainer("body", statements2);
    }
    _insertStatementsBefore(statements2, blockHoist) {
      if (statements2.length === 1 && isImportDeclaration(statements2[0]) && isValueImport(statements2[0])) {
        const firstImportDecl = this._programPath.get("body").find((p) => {
          return p.isImportDeclaration() && isValueImport(p.node);
        });
        if ((firstImportDecl == null ? void 0 : firstImportDecl.node.source.value) === statements2[0].source.value && maybeAppendImportSpecifiers(firstImportDecl.node, statements2[0])) {
          return true;
        }
      }
      statements2.forEach((node2) => {
        node2._blockHoist = blockHoist;
      });
      const targetPath = this._programPath.get("body").find((p) => {
        const val = p.node._blockHoist;
        return Number.isFinite(val) && val < 4;
      });
      if (targetPath) {
        targetPath.insertBefore(statements2);
        return true;
      }
      return false;
    }
    _insertStatementsAfter(statements2) {
      const statementsSet = new Set(statements2);
      const importDeclarations = /* @__PURE__ */ new Map();
      for (const statement of statements2) {
        if (isImportDeclaration(statement) && isValueImport(statement)) {
          const source = statement.source.value;
          if (!importDeclarations.has(source)) importDeclarations.set(source, []);
          importDeclarations.get(source).push(statement);
        }
      }
      let lastImportPath = null;
      for (const bodyStmt of this._programPath.get("body")) {
        if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {
          lastImportPath = bodyStmt;
          const source = bodyStmt.node.source.value;
          const newImports = importDeclarations.get(source);
          if (!newImports) continue;
          for (const decl of newImports) {
            if (!statementsSet.has(decl)) continue;
            if (maybeAppendImportSpecifiers(bodyStmt.node, decl)) {
              statementsSet.delete(decl);
            }
          }
        }
      }
      if (statementsSet.size === 0) return true;
      if (lastImportPath) lastImportPath.insertAfter(Array.from(statementsSet));
      return !!lastImportPath;
    }
  }
  importInjector.default = ImportInjector;
  function isValueImport(node2) {
    return node2.importKind !== "type" && node2.importKind !== "typeof";
  }
  function hasNamespaceImport(node2) {
    return node2.specifiers.length === 1 && node2.specifiers[0].type === "ImportNamespaceSpecifier" || node2.specifiers.length === 2 && node2.specifiers[1].type === "ImportNamespaceSpecifier";
  }
  function hasDefaultImport(node2) {
    return node2.specifiers.length > 0 && node2.specifiers[0].type === "ImportDefaultSpecifier";
  }
  function maybeAppendImportSpecifiers(target, source) {
    if (!target.specifiers.length) {
      target.specifiers = source.specifiers;
      return true;
    }
    if (!source.specifiers.length) return true;
    if (hasNamespaceImport(target) || hasNamespaceImport(source)) return false;
    if (hasDefaultImport(source)) {
      if (hasDefaultImport(target)) {
        source.specifiers[0] = importSpecifier(source.specifiers[0].local, identifier2("default"));
      } else {
        target.specifiers.unshift(source.specifiers.shift());
      }
    }
    target.specifiers.push(...source.specifiers);
    return true;
  }
  return importInjector;
}
var hasRequiredLib$4;
function requireLib$4() {
  if (hasRequiredLib$4) return lib$2;
  hasRequiredLib$4 = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "ImportInjector", {
      enumerable: true,
      get: function() {
        return _importInjector.default;
      }
    });
    exports2.addDefault = addDefault;
    exports2.addNamed = addNamed;
    exports2.addNamespace = addNamespace;
    exports2.addSideEffect = addSideEffect;
    Object.defineProperty(exports2, "isModule", {
      enumerable: true,
      get: function() {
        return _isModule.default;
      }
    });
    var _importInjector = requireImportInjector();
    var _isModule = requireIsModule();
    function addDefault(path2, importedSource, opts) {
      return new _importInjector.default(path2).addDefault(importedSource, opts);
    }
    function addNamed(path2, name, importedSource, opts) {
      return new _importInjector.default(path2).addNamed(name, importedSource, opts);
    }
    function addNamespace(path2, importedSource, opts) {
      return new _importInjector.default(path2).addNamespace(importedSource, opts);
    }
    function addSideEffect(path2, importedSource, opts) {
      return new _importInjector.default(path2).addSideEffect(importedSource, opts);
    }
  })(lib$2);
  return lib$2;
}
var rewriteThis = {};
var hasRequiredRewriteThis;
function requireRewriteThis() {
  if (hasRequiredRewriteThis) return rewriteThis;
  hasRequiredRewriteThis = 1;
  Object.defineProperty(rewriteThis, "__esModule", {
    value: true
  });
  rewriteThis.default = rewriteThis$1;
  var _core = requireLib();
  var _traverse = requireLib$5();
  let rewriteThisVisitor;
  function rewriteThis$1(programPath) {
    if (!rewriteThisVisitor) {
      rewriteThisVisitor = _traverse.visitors.environmentVisitor({
        ThisExpression(path2) {
          path2.replaceWith(_core.types.unaryExpression("void", _core.types.numericLiteral(0), true));
        }
      });
      rewriteThisVisitor.noScope = true;
    }
    (0, _traverse.default)(programPath.node, rewriteThisVisitor);
  }
  return rewriteThis;
}
var rewriteLiveReferences = {};
var hasRequiredRewriteLiveReferences;
function requireRewriteLiveReferences() {
  if (hasRequiredRewriteLiveReferences) return rewriteLiveReferences;
  hasRequiredRewriteLiveReferences = 1;
  Object.defineProperty(rewriteLiveReferences, "__esModule", {
    value: true
  });
  rewriteLiveReferences.default = rewriteLiveReferences$1;
  var _core = requireLib();
  function isInType(path2) {
    do {
      switch (path2.parent.type) {
        case "TSTypeAnnotation":
        case "TSTypeAliasDeclaration":
        case "TSTypeReference":
        case "TypeAnnotation":
        case "TypeAlias":
          return true;
        case "ExportSpecifier":
          return path2.parentPath.parent.exportKind === "type";
        default:
          if (path2.parentPath.isStatement() || path2.parentPath.isExpression()) {
            return false;
          }
      }
    } while (path2 = path2.parentPath);
  }
  function rewriteLiveReferences$1(programPath, metadata, wrapReference) {
    const imported = /* @__PURE__ */ new Map();
    const exported = /* @__PURE__ */ new Map();
    const requeueInParent = (path2) => {
      programPath.requeue(path2);
    };
    for (const [source, data] of metadata.source) {
      for (const [localName, importName] of data.imports) {
        imported.set(localName, [source, importName, null]);
      }
      for (const localName of data.importsNamespace) {
        imported.set(localName, [source, null, localName]);
      }
    }
    for (const [local, data] of metadata.local) {
      let exportMeta = exported.get(local);
      if (!exportMeta) {
        exportMeta = [];
        exported.set(local, exportMeta);
      }
      exportMeta.push(...data.names);
    }
    const rewriteBindingInitVisitorState = {
      metadata,
      requeueInParent,
      scope: programPath.scope,
      exported
    };
    programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
    const rewriteReferencesVisitorState = {
      seen: /* @__PURE__ */ new WeakSet(),
      metadata,
      requeueInParent,
      scope: programPath.scope,
      imported,
      exported,
      buildImportReference([source, importName, localName], identNode) {
        const meta = metadata.source.get(source);
        meta.referenced = true;
        if (localName) {
          if (meta.wrap) {
            var _wrapReference;
            identNode = (_wrapReference = wrapReference(identNode, meta.wrap)) != null ? _wrapReference : identNode;
          }
          return identNode;
        }
        let namespace = _core.types.identifier(meta.name);
        if (meta.wrap) {
          var _wrapReference2;
          namespace = (_wrapReference2 = wrapReference(namespace, meta.wrap)) != null ? _wrapReference2 : namespace;
        }
        if (importName === "default" && meta.interop === "node-default") {
          return namespace;
        }
        const computed = metadata.stringSpecifiers.has(importName);
        return _core.types.memberExpression(namespace, computed ? _core.types.stringLiteral(importName) : _core.types.identifier(importName), computed);
      }
    };
    programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
  }
  const rewriteBindingInitVisitor = {
    Scope(path2) {
      path2.skip();
    },
    ClassDeclaration(path2) {
      const {
        requeueInParent,
        exported,
        metadata
      } = this;
      const {
        id
      } = path2.node;
      if (!id) throw new Error("Expected class to have a name");
      const localName = id.name;
      const exportNames = exported.get(localName) || [];
      if (exportNames.length > 0) {
        const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, _core.types.identifier(localName), path2.scope));
        statement._blockHoist = path2.node._blockHoist;
        requeueInParent(path2.insertAfter(statement)[0]);
      }
    },
    VariableDeclaration(path2) {
      const {
        requeueInParent,
        exported,
        metadata
      } = this;
      const isVar2 = path2.node.kind === "var";
      for (const decl of path2.get("declarations")) {
        const {
          id
        } = decl.node;
        let {
          init
        } = decl.node;
        if (_core.types.isIdentifier(id) && exported.has(id.name) && !_core.types.isArrowFunctionExpression(init) && (!_core.types.isFunctionExpression(init) || init.id) && (!_core.types.isClassExpression(init) || init.id)) {
          if (!init) {
            if (isVar2) {
              continue;
            } else {
              init = path2.scope.buildUndefinedNode();
            }
          }
          decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path2.scope);
          requeueInParent(decl.get("init"));
        } else {
          for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) {
            if (exported.has(localName)) {
              const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), _core.types.identifier(localName), path2.scope));
              statement._blockHoist = path2.node._blockHoist;
              requeueInParent(path2.insertAfter(statement)[0]);
            }
          }
        }
      }
    }
  };
  const buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope2) => {
    const exportsObjectName = metadata.exportName;
    for (let currentScope = scope2; currentScope != null; currentScope = currentScope.parent) {
      if (currentScope.hasOwnBinding(exportsObjectName)) {
        currentScope.rename(exportsObjectName);
      }
    }
    return (exportNames || []).reduce((expr, exportName) => {
      const {
        stringSpecifiers
      } = metadata;
      const computed = stringSpecifiers.has(exportName);
      return _core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.identifier(exportsObjectName), computed ? _core.types.stringLiteral(exportName) : _core.types.identifier(exportName), computed), expr);
    }, localExpr);
  };
  const buildImportThrow = (localName) => {
    return _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `;
  };
  const rewriteReferencesVisitor = {
    ReferencedIdentifier(path2) {
      const {
        seen,
        buildImportReference,
        scope: scope2,
        imported,
        requeueInParent
      } = this;
      if (seen.has(path2.node)) return;
      seen.add(path2.node);
      const localName = path2.node.name;
      const importData = imported.get(localName);
      if (importData) {
        if (isInType(path2)) {
          throw path2.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
        }
        const localBinding = path2.scope.getBinding(localName);
        const rootBinding = scope2.getBinding(localName);
        if (rootBinding !== localBinding) return;
        const ref = buildImportReference(importData, path2.node);
        ref.loc = path2.node.loc;
        if ((path2.parentPath.isCallExpression({
          callee: path2.node
        }) || path2.parentPath.isOptionalCallExpression({
          callee: path2.node
        }) || path2.parentPath.isTaggedTemplateExpression({
          tag: path2.node
        })) && _core.types.isMemberExpression(ref)) {
          path2.replaceWith(_core.types.sequenceExpression([_core.types.numericLiteral(0), ref]));
        } else if (path2.isJSXIdentifier() && _core.types.isMemberExpression(ref)) {
          const {
            object,
            property
          } = ref;
          path2.replaceWith(_core.types.jsxMemberExpression(_core.types.jsxIdentifier(object.name), _core.types.jsxIdentifier(property.name)));
        } else {
          path2.replaceWith(ref);
        }
        requeueInParent(path2);
        path2.skip();
      }
    },
    UpdateExpression(path2) {
      const {
        scope: scope2,
        seen,
        imported,
        exported,
        requeueInParent,
        buildImportReference
      } = this;
      if (seen.has(path2.node)) return;
      seen.add(path2.node);
      const arg = path2.get("argument");
      if (arg.isMemberExpression()) return;
      const update = path2.node;
      if (arg.isIdentifier()) {
        const localName = arg.node.name;
        if (scope2.getBinding(localName) !== path2.scope.getBinding(localName)) {
          return;
        }
        const exportedNames = exported.get(localName);
        const importData = imported.get(localName);
        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
          if (importData) {
            path2.replaceWith(_core.types.assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
          } else if (update.prefix) {
            path2.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.cloneNode(update), path2.scope));
          } else {
            const ref = scope2.generateDeclaredUidIdentifier(localName);
            path2.replaceWith(_core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(ref), _core.types.cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path2.scope), _core.types.cloneNode(ref)]));
          }
        }
      }
      requeueInParent(path2);
      path2.skip();
    },
    AssignmentExpression: {
      exit(path2) {
        const {
          scope: scope2,
          seen,
          imported,
          exported,
          requeueInParent,
          buildImportReference
        } = this;
        if (seen.has(path2.node)) return;
        seen.add(path2.node);
        const left = path2.get("left");
        if (left.isMemberExpression()) return;
        if (left.isIdentifier()) {
          const localName = left.node.name;
          if (scope2.getBinding(localName) !== path2.scope.getBinding(localName)) {
            return;
          }
          const exportedNames = exported.get(localName);
          const importData = imported.get(localName);
          if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
            const assignment = path2.node;
            if (importData) {
              assignment.left = buildImportReference(importData, left.node);
              assignment.right = _core.types.sequenceExpression([assignment.right, buildImportThrow(localName)]);
            }
            const {
              operator
            } = assignment;
            let newExpr;
            if (operator === "=") {
              newExpr = assignment;
            } else if (operator === "&&=" || operator === "||=" || operator === "??=") {
              newExpr = _core.types.assignmentExpression("=", assignment.left, _core.types.logicalExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right));
            } else {
              newExpr = _core.types.assignmentExpression("=", assignment.left, _core.types.binaryExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right));
            }
            path2.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, newExpr, path2.scope));
            requeueInParent(path2);
            path2.skip();
          }
        } else {
          const ids = left.getOuterBindingIdentifiers();
          const programScopeIds = Object.keys(ids).filter((localName) => scope2.getBinding(localName) === path2.scope.getBinding(localName));
          const id = programScopeIds.find((localName) => imported.has(localName));
          if (id) {
            path2.node.right = _core.types.sequenceExpression([path2.node.right, buildImportThrow(id)]);
          }
          const items = [];
          programScopeIds.forEach((localName) => {
            const exportedNames = exported.get(localName) || [];
            if (exportedNames.length > 0) {
              items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path2.scope));
            }
          });
          if (items.length > 0) {
            let node2 = _core.types.sequenceExpression(items);
            if (path2.parentPath.isExpressionStatement()) {
              node2 = _core.types.expressionStatement(node2);
              node2._blockHoist = path2.parentPath.node._blockHoist;
            }
            const statement = path2.insertAfter(node2)[0];
            requeueInParent(statement);
          }
        }
      }
    },
    ForXStatement(path2) {
      const {
        scope: scope2,
        node: node2
      } = path2;
      const {
        left
      } = node2;
      const {
        exported,
        imported,
        scope: programScope
      } = this;
      if (!_core.types.isVariableDeclaration(left)) {
        let didTransformExport = false, importConstViolationName;
        const loopBodyScope = path2.get("body").scope;
        for (const name of Object.keys(_core.types.getOuterBindingIdentifiers(left))) {
          if (programScope.getBinding(name) === scope2.getBinding(name)) {
            if (exported.has(name)) {
              didTransformExport = true;
              if (loopBodyScope.hasOwnBinding(name)) {
                loopBodyScope.rename(name);
              }
            }
            if (imported.has(name) && !importConstViolationName) {
              importConstViolationName = name;
            }
          }
        }
        if (!didTransformExport && !importConstViolationName) {
          return;
        }
        path2.ensureBlock();
        const bodyPath = path2.get("body");
        const newLoopId = scope2.generateUidIdentifierBasedOnNode(left);
        path2.get("left").replaceWith(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(newLoopId))]));
        scope2.registerDeclaration(path2.get("left"));
        if (didTransformExport) {
          bodyPath.unshiftContainer("body", _core.types.expressionStatement(_core.types.assignmentExpression("=", left, newLoopId)));
        }
        if (importConstViolationName) {
          bodyPath.unshiftContainer("body", _core.types.expressionStatement(buildImportThrow(importConstViolationName)));
        }
      }
    }
  };
  return rewriteLiveReferences;
}
var normalizeAndLoadMetadata = {};
var hasRequiredNormalizeAndLoadMetadata;
function requireNormalizeAndLoadMetadata() {
  if (hasRequiredNormalizeAndLoadMetadata) return normalizeAndLoadMetadata;
  hasRequiredNormalizeAndLoadMetadata = 1;
  Object.defineProperty(normalizeAndLoadMetadata, "__esModule", {
    value: true
  });
  normalizeAndLoadMetadata.default = normalizeModuleAndLoadMetadata;
  normalizeAndLoadMetadata.hasExports = hasExports;
  normalizeAndLoadMetadata.isSideEffectImport = isSideEffectImport;
  normalizeAndLoadMetadata.validateImportInteropOption = validateImportInteropOption;
  var _path = require$$1;
  var _helperValidatorIdentifier = requireLib$d();
  function hasExports(metadata) {
    return metadata.hasExports;
  }
  function isSideEffectImport(source) {
    return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;
  }
  function validateImportInteropOption(importInterop) {
    if (typeof importInterop !== "function" && importInterop !== "none" && importInterop !== "babel" && importInterop !== "node") {
      throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
    }
    return importInterop;
  }
  function resolveImportInterop(importInterop, source, filename) {
    if (typeof importInterop === "function") {
      return validateImportInteropOption(importInterop(source, filename));
    }
    return importInterop;
  }
  function normalizeModuleAndLoadMetadata(programPath, exportName, {
    importInterop,
    initializeReexports = false,
    getWrapperPayload,
    esNamespaceOnly = false,
    filename
  }) {
    if (!exportName) {
      exportName = programPath.scope.generateUidIdentifier("exports").name;
    }
    const stringSpecifiers = /* @__PURE__ */ new Set();
    nameAnonymousExports(programPath);
    const {
      local,
      sources,
      hasExports: hasExports2
    } = getModuleMetadata(programPath, {
      initializeReexports,
      getWrapperPayload
    }, stringSpecifiers);
    removeImportExportDeclarations(programPath);
    for (const [source, metadata] of sources) {
      const {
        importsNamespace,
        imports
      } = metadata;
      if (importsNamespace.size > 0 && imports.size === 0) {
        const [nameOfnamespace] = importsNamespace;
        metadata.name = nameOfnamespace;
      }
      const resolvedInterop = resolveImportInterop(importInterop, source, filename);
      if (resolvedInterop === "none") {
        metadata.interop = "none";
      } else if (resolvedInterop === "node" && metadata.interop === "namespace") {
        metadata.interop = "node-namespace";
      } else if (resolvedInterop === "node" && metadata.interop === "default") {
        metadata.interop = "node-default";
      } else if (esNamespaceOnly && metadata.interop === "namespace") {
        metadata.interop = "default";
      }
    }
    return {
      exportName,
      exportNameListName: null,
      hasExports: hasExports2,
      local,
      source: sources,
      stringSpecifiers
    };
  }
  function getExportSpecifierName(path2, stringSpecifiers) {
    if (path2.isIdentifier()) {
      return path2.node.name;
    } else if (path2.isStringLiteral()) {
      const stringValue = path2.node.value;
      if (!(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)) {
        stringSpecifiers.add(stringValue);
      }
      return stringValue;
    } else {
      throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path2.node.type}`);
    }
  }
  function assertExportSpecifier(path2) {
    if (path2.isExportSpecifier()) {
      return;
    } else if (path2.isExportNamespaceSpecifier()) {
      throw path2.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.");
    } else {
      throw path2.buildCodeFrameError("Unexpected export specifier type");
    }
  }
  function getModuleMetadata(programPath, {
    getWrapperPayload,
    initializeReexports
  }, stringSpecifiers) {
    const localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);
    const importNodes = /* @__PURE__ */ new Map();
    const sourceData = /* @__PURE__ */ new Map();
    const getData = (sourceNode, node2) => {
      const source = sourceNode.value;
      let data = sourceData.get(source);
      if (!data) {
        data = {
          name: programPath.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name,
          interop: "none",
          loc: null,
          imports: /* @__PURE__ */ new Map(),
          importsNamespace: /* @__PURE__ */ new Set(),
          reexports: /* @__PURE__ */ new Map(),
          reexportNamespace: /* @__PURE__ */ new Set(),
          reexportAll: null,
          wrap: null,
          get lazy() {
            return this.wrap === "lazy";
          },
          referenced: false
        };
        sourceData.set(source, data);
        importNodes.set(source, [node2]);
      } else {
        importNodes.get(source).push(node2);
      }
      return data;
    };
    let hasExports2 = false;
    programPath.get("body").forEach((child) => {
      if (child.isImportDeclaration()) {
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        child.get("specifiers").forEach((spec) => {
          if (spec.isImportDefaultSpecifier()) {
            const localName = spec.get("local").node.name;
            data.imports.set(localName, "default");
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach((name) => {
                data.reexports.set(name, "default");
              });
              data.referenced = true;
            }
          } else if (spec.isImportNamespaceSpecifier()) {
            const localName = spec.get("local").node.name;
            data.importsNamespace.add(localName);
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach((name) => {
                data.reexportNamespace.add(name);
              });
              data.referenced = true;
            }
          } else if (spec.isImportSpecifier()) {
            const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers);
            const localName = spec.get("local").node.name;
            data.imports.set(localName, importName);
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach((name) => {
                data.reexports.set(name, importName);
              });
              data.referenced = true;
            }
          }
        });
      } else if (child.isExportAllDeclaration()) {
        hasExports2 = true;
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        data.reexportAll = {
          loc: child.node.loc
        };
        data.referenced = true;
      } else if (child.isExportNamedDeclaration() && child.node.source) {
        hasExports2 = true;
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        child.get("specifiers").forEach((spec) => {
          assertExportSpecifier(spec);
          const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers);
          const exportName = getExportSpecifierName(spec.get("exported"), stringSpecifiers);
          data.reexports.set(exportName, importName);
          data.referenced = true;
          if (exportName === "__esModule") {
            throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
          }
        });
      } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {
        hasExports2 = true;
      }
    });
    for (const metadata of sourceData.values()) {
      let needsDefault = false;
      let needsNamed = false;
      if (metadata.importsNamespace.size > 0) {
        needsDefault = true;
        needsNamed = true;
      }
      if (metadata.reexportAll) {
        needsNamed = true;
      }
      for (const importName of metadata.imports.values()) {
        if (importName === "default") needsDefault = true;
        else needsNamed = true;
      }
      for (const importName of metadata.reexports.values()) {
        if (importName === "default") needsDefault = true;
        else needsNamed = true;
      }
      if (needsDefault && needsNamed) {
        metadata.interop = "namespace";
      } else if (needsDefault) {
        metadata.interop = "default";
      }
    }
    if (getWrapperPayload) {
      for (const [source, metadata] of sourceData) {
        metadata.wrap = getWrapperPayload(source, metadata, importNodes.get(source));
      }
    }
    return {
      hasExports: hasExports2,
      local: localData,
      sources: sourceData
    };
  }
  function getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {
    const bindingKindLookup = /* @__PURE__ */ new Map();
    const programScope = programPath.scope;
    const programChildren = programPath.get("body");
    programChildren.forEach((child) => {
      let kind;
      if (child.isImportDeclaration()) {
        kind = "import";
      } else {
        if (child.isExportDefaultDeclaration()) {
          child = child.get("declaration");
        }
        if (child.isExportNamedDeclaration()) {
          if (child.node.declaration) {
            child = child.get("declaration");
          } else if (initializeReexports && child.node.source && child.get("source").isStringLiteral()) {
            child.get("specifiers").forEach((spec) => {
              assertExportSpecifier(spec);
              bindingKindLookup.set(spec.get("local").node.name, "block");
            });
            return;
          }
        }
        if (child.isFunctionDeclaration()) {
          kind = "hoisted";
        } else if (child.isClassDeclaration()) {
          kind = "block";
        } else if (child.isVariableDeclaration({
          kind: "var"
        })) {
          kind = "var";
        } else if (child.isVariableDeclaration()) {
          kind = "block";
        } else {
          return;
        }
      }
      Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
        bindingKindLookup.set(name, kind);
      });
    });
    const localMetadata = /* @__PURE__ */ new Map();
    const getLocalMetadata = (idPath) => {
      const localName = idPath.node.name;
      let metadata = localMetadata.get(localName);
      if (!metadata) {
        var _bindingKindLookup$ge, _programScope$getBind;
        const kind = (_bindingKindLookup$ge = bindingKindLookup.get(localName)) != null ? _bindingKindLookup$ge : (_programScope$getBind = programScope.getBinding(localName)) == null ? void 0 : _programScope$getBind.kind;
        if (kind === void 0) {
          throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
        }
        metadata = {
          names: [],
          kind
        };
        localMetadata.set(localName, metadata);
      }
      return metadata;
    };
    programChildren.forEach((child) => {
      if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {
        if (child.node.declaration) {
          const declaration = child.get("declaration");
          const ids = declaration.getOuterBindingIdentifierPaths();
          Object.keys(ids).forEach((name) => {
            if (name === "__esModule") {
              throw declaration.buildCodeFrameError('Illegal export "__esModule".');
            }
            getLocalMetadata(ids[name]).names.push(name);
          });
        } else {
          child.get("specifiers").forEach((spec) => {
            const local = spec.get("local");
            const exported = spec.get("exported");
            const localMetadata2 = getLocalMetadata(local);
            const exportName = getExportSpecifierName(exported, stringSpecifiers);
            if (exportName === "__esModule") {
              throw exported.buildCodeFrameError('Illegal export "__esModule".');
            }
            localMetadata2.names.push(exportName);
          });
        }
      } else if (child.isExportDefaultDeclaration()) {
        const declaration = child.get("declaration");
        if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
          getLocalMetadata(declaration.get("id")).names.push("default");
        } else {
          throw declaration.buildCodeFrameError("Unexpected default expression export.");
        }
      }
    });
    return localMetadata;
  }
  function nameAnonymousExports(programPath) {
    programPath.get("body").forEach((child) => {
      if (!child.isExportDefaultDeclaration()) return;
      {
        var _child$splitExportDec;
        (_child$splitExportDec = child.splitExportDeclaration) != null ? _child$splitExportDec : child.splitExportDeclaration = requireLib$5().NodePath.prototype.splitExportDeclaration;
      }
      child.splitExportDeclaration();
    });
  }
  function removeImportExportDeclarations(programPath) {
    programPath.get("body").forEach((child) => {
      if (child.isImportDeclaration()) {
        child.remove();
      } else if (child.isExportNamedDeclaration()) {
        if (child.node.declaration) {
          child.node.declaration._blockHoist = child.node._blockHoist;
          child.replaceWith(child.node.declaration);
        } else {
          child.remove();
        }
      } else if (child.isExportDefaultDeclaration()) {
        const declaration = child.get("declaration");
        if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
          declaration._blockHoist = child.node._blockHoist;
          child.replaceWith(declaration);
        } else {
          throw declaration.buildCodeFrameError("Unexpected default expression export.");
        }
      } else if (child.isExportAllDeclaration()) {
        child.remove();
      }
    });
  }
  return normalizeAndLoadMetadata;
}
var lazyModules = {};
var hasRequiredLazyModules;
function requireLazyModules() {
  if (hasRequiredLazyModules) return lazyModules;
  hasRequiredLazyModules = 1;
  Object.defineProperty(lazyModules, "__esModule", {
    value: true
  });
  lazyModules.toGetWrapperPayload = toGetWrapperPayload;
  lazyModules.wrapReference = wrapReference;
  var _core = requireLib();
  var _normalizeAndLoadMetadata = requireNormalizeAndLoadMetadata();
  function toGetWrapperPayload(lazy) {
    return (source, metadata) => {
      if (lazy === false) return null;
      if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
      if (lazy === true) {
        return source.includes(".") ? null : "lazy";
      }
      if (Array.isArray(lazy)) {
        return !lazy.includes(source) ? null : "lazy";
      }
      if (typeof lazy === "function") {
        return lazy(source) ? "lazy" : null;
      }
      throw new Error(`.lazy must be a boolean, string array, or function`);
    };
  }
  function wrapReference(ref, payload) {
    if (payload === "lazy") return _core.types.callExpression(ref, []);
    return null;
  }
  return lazyModules;
}
var dynamicImport = {};
var hasRequiredDynamicImport;
function requireDynamicImport() {
  if (hasRequiredDynamicImport) return dynamicImport;
  hasRequiredDynamicImport = 1;
  Object.defineProperty(dynamicImport, "__esModule", {
    value: true
  });
  dynamicImport.buildDynamicImport = buildDynamicImport;
  var _core = requireLib();
  {
    dynamicImport.getDynamicImportSource = function getDynamicImportSource(node2) {
      const [source] = node2.arguments;
      return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
    };
  }
  function buildDynamicImport(node2, deferToThen, wrapWithPromise, builder2) {
    const specifier = _core.types.isCallExpression(node2) ? node2.arguments[0] : node2.source;
    if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && specifier.quasis.length === 0) {
      if (deferToThen) {
        return _core.template.expression.ast`
        Promise.resolve().then(() => ${builder2(specifier)})
      `;
      } else return builder2(specifier);
    }
    const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({
      raw: ""
    }), _core.types.templateElement({
      raw: ""
    })], [_core.types.identifier("specifier")]);
    if (deferToThen) {
      return _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder2(_core.types.identifier("s"))})
      )(${specifier})
    `;
    } else if (wrapWithPromise) {
      return _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder2(specifierToString)}))
      )(${specifier})
    `;
    } else {
      return _core.template.expression.ast`
      (specifier => ${builder2(specifierToString)})(${specifier})
    `;
    }
  }
  return dynamicImport;
}
var getModuleName = {};
var hasRequiredGetModuleName;
function requireGetModuleName() {
  if (hasRequiredGetModuleName) return getModuleName;
  hasRequiredGetModuleName = 1;
  Object.defineProperty(getModuleName, "__esModule", {
    value: true
  });
  getModuleName.default = getModuleName$1;
  {
    const originalGetModuleName = getModuleName$1;
    getModuleName.default = getModuleName$1 = function getModuleName2(rootOpts, pluginOpts) {
      var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
      return originalGetModuleName(rootOpts, {
        moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,
        moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,
        getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,
        moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot
      });
    };
  }
  function getModuleName$1(rootOpts, pluginOpts) {
    const {
      filename,
      filenameRelative = filename,
      sourceRoot = pluginOpts.moduleRoot
    } = rootOpts;
    const {
      moduleId,
      moduleIds = !!moduleId,
      getModuleId,
      moduleRoot = sourceRoot
    } = pluginOpts;
    if (!moduleIds) return null;
    if (moduleId != null && !getModuleId) {
      return moduleId;
    }
    let moduleName = moduleRoot != null ? moduleRoot + "/" : "";
    if (filenameRelative) {
      const sourceRootReplacer = sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
      moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.\w*$/, "");
    }
    moduleName = moduleName.replace(/\\/g, "/");
    if (getModuleId) {
      return getModuleId(moduleName) || moduleName;
    } else {
      return moduleName;
    }
  }
  return getModuleName;
}
var hasRequiredLib$3;
function requireLib$3() {
  if (hasRequiredLib$3) return lib$3;
  hasRequiredLib$3 = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "buildDynamicImport", {
      enumerable: true,
      get: function() {
        return _dynamicImport.buildDynamicImport;
      }
    });
    exports2.buildNamespaceInitStatements = buildNamespaceInitStatements;
    exports2.ensureStatementsHoisted = ensureStatementsHoisted;
    Object.defineProperty(exports2, "getModuleName", {
      enumerable: true,
      get: function() {
        return _getModuleName.default;
      }
    });
    Object.defineProperty(exports2, "hasExports", {
      enumerable: true,
      get: function() {
        return _normalizeAndLoadMetadata.hasExports;
      }
    });
    Object.defineProperty(exports2, "isModule", {
      enumerable: true,
      get: function() {
        return _helperModuleImports.isModule;
      }
    });
    Object.defineProperty(exports2, "isSideEffectImport", {
      enumerable: true,
      get: function() {
        return _normalizeAndLoadMetadata.isSideEffectImport;
      }
    });
    exports2.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
    Object.defineProperty(exports2, "rewriteThis", {
      enumerable: true,
      get: function() {
        return _rewriteThis.default;
      }
    });
    exports2.wrapInterop = wrapInterop;
    var _assert = require$$1;
    var _core = requireLib();
    var _helperModuleImports = requireLib$4();
    var _rewriteThis = requireRewriteThis();
    var _rewriteLiveReferences = requireRewriteLiveReferences();
    var _normalizeAndLoadMetadata = requireNormalizeAndLoadMetadata();
    var Lazy = requireLazyModules();
    var _dynamicImport = requireDynamicImport();
    var _getModuleName = requireGetModuleName();
    {
      exports2.getDynamicImportSource = requireDynamicImport().getDynamicImportSource;
    }
    function rewriteModuleStatementsAndPrepareHeader(path2, {
      exportName,
      strict,
      allowTopLevelThis,
      strictMode,
      noInterop,
      importInterop = noInterop ? "none" : "babel",
      lazy,
      getWrapperPayload = Lazy.toGetWrapperPayload(lazy != null ? lazy : false),
      wrapReference = Lazy.wrapReference,
      esNamespaceOnly,
      filename,
      constantReexports = arguments[1].loose,
      enumerableModuleMeta = arguments[1].loose,
      noIncompleteNsImportDetection
    }) {
      (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);
      _assert((0, _helperModuleImports.isModule)(path2), "Cannot process module statements in a script");
      path2.node.sourceType = "script";
      const meta = (0, _normalizeAndLoadMetadata.default)(path2, exportName, {
        importInterop,
        initializeReexports: constantReexports,
        getWrapperPayload,
        esNamespaceOnly,
        filename
      });
      if (!allowTopLevelThis) {
        (0, _rewriteThis.default)(path2);
      }
      (0, _rewriteLiveReferences.default)(path2, meta, wrapReference);
      if (strictMode !== false) {
        const hasStrict = path2.node.directives.some((directive) => {
          return directive.value.value === "use strict";
        });
        if (!hasStrict) {
          path2.unshiftContainer("directives", _core.types.directive(_core.types.directiveLiteral("use strict")));
        }
      }
      const headers = [];
      if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
        headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
      }
      const nameList = buildExportNameListDeclaration(path2, meta);
      if (nameList) {
        meta.exportNameListName = nameList.name;
        headers.push(nameList.statement);
      }
      headers.push(...buildExportInitializationStatements(path2, meta, wrapReference, constantReexports, noIncompleteNsImportDetection));
      return {
        meta,
        headers
      };
    }
    function ensureStatementsHoisted(statements2) {
      statements2.forEach((header) => {
        header._blockHoist = 3;
      });
    }
    function wrapInterop(programPath, expr, type) {
      if (type === "none") {
        return null;
      }
      if (type === "node-namespace") {
        return _core.types.callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, _core.types.booleanLiteral(true)]);
      } else if (type === "node-default") {
        return null;
      }
      let helper;
      if (type === "default") {
        helper = "interopRequireDefault";
      } else if (type === "namespace") {
        helper = "interopRequireWildcard";
      } else {
        throw new Error(`Unknown interop: ${type}`);
      }
      return _core.types.callExpression(programPath.hub.addHelper(helper), [expr]);
    }
    function buildNamespaceInitStatements(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
      var _wrapReference;
      const statements2 = [];
      const srcNamespaceId = _core.types.identifier(sourceMetadata.name);
      for (const localName of sourceMetadata.importsNamespace) {
        if (localName === sourceMetadata.name) continue;
        statements2.push(_core.template.statement`var NAME = SOURCE;`({
          NAME: localName,
          SOURCE: _core.types.cloneNode(srcNamespaceId)
        }));
      }
      const srcNamespace = (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) != null ? _wrapReference : srcNamespaceId;
      if (constantReexports) {
        statements2.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
      }
      for (const exportName of sourceMetadata.reexportNamespace) {
        statements2.push((!_core.types.isIdentifier(srcNamespace) ? _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _core.template.statement`EXPORTS.NAME = NAMESPACE;`)({
          EXPORTS: metadata.exportName,
          NAME: exportName,
          NAMESPACE: _core.types.cloneNode(srcNamespace)
        }));
      }
      if (sourceMetadata.reexportAll) {
        const statement = buildNamespaceReexport(metadata, _core.types.cloneNode(srcNamespace), constantReexports);
        statement.loc = sourceMetadata.reexportAll.loc;
        statements2.push(statement);
      }
      return statements2;
    }
    const ReexportTemplate = {
      constant: ({
        exports: exports3,
        exportName,
        namespaceImport
      }) => _core.template.statement.ast`
      ${exports3}.${exportName} = ${namespaceImport};
    `,
      constantComputed: ({
        exports: exports3,
        exportName,
        namespaceImport
      }) => _core.template.statement.ast`
      ${exports3}["${exportName}"] = ${namespaceImport};
    `,
      spec: ({
        exports: exports3,
        exportName,
        namespaceImport
      }) => _core.template.statement.ast`
      Object.defineProperty(${exports3}, "${exportName}", {
        enumerable: true,
        get: function() {
          return ${namespaceImport};
        },
      });
    `
    };
    function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
      var _wrapReference2;
      let namespace = _core.types.identifier(metadata.name);
      namespace = (_wrapReference2 = wrapReference(namespace, metadata.wrap)) != null ? _wrapReference2 : namespace;
      const {
        stringSpecifiers
      } = meta;
      return Array.from(metadata.reexports, ([exportName, importName]) => {
        let namespaceImport = _core.types.cloneNode(namespace);
        if (importName === "default" && metadata.interop === "node-default") ;
        else if (stringSpecifiers.has(importName)) {
          namespaceImport = _core.types.memberExpression(namespaceImport, _core.types.stringLiteral(importName), true);
        } else {
          namespaceImport = _core.types.memberExpression(namespaceImport, _core.types.identifier(importName));
        }
        const astNodes = {
          exports: meta.exportName,
          exportName,
          namespaceImport
        };
        if (constantReexports || _core.types.isIdentifier(namespaceImport)) {
          if (stringSpecifiers.has(exportName)) {
            return ReexportTemplate.constantComputed(astNodes);
          } else {
            return ReexportTemplate.constant(astNodes);
          }
        } else {
          return ReexportTemplate.spec(astNodes);
        }
      });
    }
    function buildESModuleHeader(metadata, enumerableModuleMeta = false) {
      return (enumerableModuleMeta ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
        EXPORTS: metadata.exportName
      });
    }
    function buildNamespaceReexport(metadata, namespace, constantReexports) {
      return (constantReexports ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
        NAMESPACE: namespace,
        EXPORTS: metadata.exportName,
        VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _core.template)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
          EXPORTS_LIST: metadata.exportNameListName
        }) : null
      });
    }
    function buildExportNameListDeclaration(programPath, metadata) {
      const exportedVars = /* @__PURE__ */ Object.create(null);
      for (const data of metadata.local.values()) {
        for (const name2 of data.names) {
          exportedVars[name2] = true;
        }
      }
      let hasReexport = false;
      for (const data of metadata.source.values()) {
        for (const exportName of data.reexports.keys()) {
          exportedVars[exportName] = true;
        }
        for (const exportName of data.reexportNamespace) {
          exportedVars[exportName] = true;
        }
        hasReexport = hasReexport || !!data.reexportAll;
      }
      if (!hasReexport || Object.keys(exportedVars).length === 0) return null;
      const name = programPath.scope.generateUidIdentifier("exportNames");
      delete exportedVars.default;
      return {
        name: name.name,
        statement: _core.types.variableDeclaration("var", [_core.types.variableDeclarator(name, _core.types.valueToNode(exportedVars))])
      };
    }
    function buildExportInitializationStatements(programPath, metadata, wrapReference, constantReexports = false, noIncompleteNsImportDetection = false) {
      const initStatements = [];
      for (const [localName, data] of metadata.local) {
        if (data.kind === "import") ;
        else if (data.kind === "hoisted") {
          initStatements.push([data.names[0], buildInitStatement(metadata, data.names, _core.types.identifier(localName))]);
        } else if (!noIncompleteNsImportDetection) {
          for (const exportName of data.names) {
            initStatements.push([exportName, null]);
          }
        }
      }
      for (const data of metadata.source.values()) {
        if (!constantReexports) {
          const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference);
          const reexports = [...data.reexports.keys()];
          for (let i = 0; i < reexportsStatements.length; i++) {
            initStatements.push([reexports[i], reexportsStatements[i]]);
          }
        }
        if (!noIncompleteNsImportDetection) {
          for (const exportName of data.reexportNamespace) {
            initStatements.push([exportName, null]);
          }
        }
      }
      initStatements.sort(([a], [b]) => {
        if (a < b) return -1;
        if (b < a) return 1;
        return 0;
      });
      const results = [];
      if (noIncompleteNsImportDetection) {
        for (const [, initStatement] of initStatements) {
          results.push(initStatement);
        }
      } else {
        const chunkSize = 100;
        for (let i = 0; i < initStatements.length; i += chunkSize) {
          let uninitializedExportNames = [];
          for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
            const [exportName, initStatement] = initStatements[i + j];
            if (initStatement !== null) {
              if (uninitializedExportNames.length > 0) {
                results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
                uninitializedExportNames = [];
              }
              results.push(initStatement);
            } else {
              uninitializedExportNames.push(exportName);
            }
          }
          if (uninitializedExportNames.length > 0) {
            results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
          }
        }
      }
      return results;
    }
    const InitTemplate = {
      computed: ({
        exports: exports3,
        name,
        value: value2
      }) => _core.template.expression.ast`${exports3}["${name}"] = ${value2}`,
      default: ({
        exports: exports3,
        name,
        value: value2
      }) => _core.template.expression.ast`${exports3}.${name} = ${value2}`,
      define: ({
        exports: exports3,
        name,
        value: value2
      }) => _core.template.expression.ast`
      Object.defineProperty(${exports3}, "${name}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${name}"] = ${value2}`
    };
    function buildInitStatement(metadata, exportNames, initExpr) {
      const {
        stringSpecifiers,
        exportName: exports3
      } = metadata;
      return _core.types.expressionStatement(exportNames.reduce((value2, name) => {
        const params = {
          exports: exports3,
          name,
          value: value2
        };
        if (name === "__proto__") {
          return InitTemplate.define(params);
        }
        if (stringSpecifiers.has(name)) {
          return InitTemplate.computed(params);
        }
        return InitTemplate.default(params);
      }, initExpr));
    }
  })(lib$3);
  return lib$3;
}
var hasRequiredBabel7Helpers;
function requireBabel7Helpers() {
  if (hasRequiredBabel7Helpers) return babel7Helpers;
  hasRequiredBabel7Helpers = 1;
  {
    babel7Helpers.getModuleName = () => requireLib$3().getModuleName;
  }
  return babel7Helpers;
}
var hasRequiredFile;
function requireFile() {
  if (hasRequiredFile) return file;
  hasRequiredFile = 1;
  Object.defineProperty(file, "__esModule", {
    value: true
  });
  file.default = void 0;
  function helpers() {
    const data = requireLib$7();
    helpers = function() {
      return data;
    };
    return data;
  }
  function _traverse() {
    const data = requireLib$5();
    _traverse = function() {
      return data;
    };
    return data;
  }
  function _codeFrame() {
    const data = requireLib$9();
    _codeFrame = function() {
      return data;
    };
    return data;
  }
  function _t2() {
    const data = requireLib$b();
    _t2 = function() {
      return data;
    };
    return data;
  }
  function _semver() {
    const data = requireSemver();
    _semver = function() {
      return data;
    };
    return data;
  }
  var _babel7Helpers = requireBabel7Helpers();
  const {
    cloneNode: cloneNode2,
    interpreterDirective
  } = _t2();
  const errorVisitor = {
    enter(path2, state) {
      const loc = path2.node.loc;
      if (loc) {
        state.loc = loc;
        path2.stop();
      }
    }
  };
  class File {
    constructor(options2, {
      code,
      ast,
      inputMap
    }) {
      this._map = /* @__PURE__ */ new Map();
      this.opts = void 0;
      this.declarations = {};
      this.path = void 0;
      this.ast = void 0;
      this.scope = void 0;
      this.metadata = {};
      this.code = "";
      this.inputMap = void 0;
      this.hub = {
        file: this,
        getCode: () => this.code,
        getScope: () => this.scope,
        addHelper: this.addHelper.bind(this),
        buildError: this.buildCodeFrameError.bind(this)
      };
      this.opts = options2;
      this.code = code;
      this.ast = ast;
      this.inputMap = inputMap;
      this.path = _traverse().NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: this.ast,
        container: this.ast,
        key: "program"
      }).setContext();
      this.scope = this.path.scope;
    }
    get shebang() {
      const {
        interpreter
      } = this.path.node;
      return interpreter ? interpreter.value : "";
    }
    set shebang(value2) {
      if (value2) {
        this.path.get("interpreter").replaceWith(interpreterDirective(value2));
      } else {
        this.path.get("interpreter").remove();
      }
    }
    set(key, val) {
      {
        if (key === "helpersNamespace") {
          throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
        }
      }
      this._map.set(key, val);
    }
    get(key) {
      return this._map.get(key);
    }
    has(key) {
      return this._map.has(key);
    }
    availableHelper(name, versionRange) {
      if (helpers().isInternal(name)) return false;
      let minVersion;
      try {
        minVersion = helpers().minVersion(name);
      } catch (err) {
        if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
        return false;
      }
      if (typeof versionRange !== "string") return true;
      if (_semver().valid(versionRange)) versionRange = `^${versionRange}`;
      {
        return !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(`>=8.0.0`, versionRange);
      }
    }
    addHelper(name) {
      if (helpers().isInternal(name)) {
        throw new Error("Cannot use internal helper " + name);
      }
      return this._addHelper(name);
    }
    _addHelper(name) {
      const declar = this.declarations[name];
      if (declar) return cloneNode2(declar);
      const generator = this.get("helperGenerator");
      if (generator) {
        const res = generator(name);
        if (res) return res;
      }
      helpers().minVersion(name);
      const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
      const dependencies = {};
      for (const dep of helpers().getDependencies(name)) {
        dependencies[dep] = this._addHelper(dep);
      }
      const {
        nodes,
        globals: globals2
      } = helpers().get(name, (dep) => dependencies[dep], uid.name, Object.keys(this.scope.getAllBindings()));
      globals2.forEach((name2) => {
        if (this.path.scope.hasBinding(name2, true)) {
          this.path.scope.rename(name2);
        }
      });
      nodes.forEach((node2) => {
        node2._compact = true;
      });
      const added = this.path.unshiftContainer("body", nodes);
      for (const path2 of added) {
        if (path2.isVariableDeclaration()) this.scope.registerDeclaration(path2);
      }
      return uid;
    }
    buildCodeFrameError(node2, msg, _Error = SyntaxError) {
      let loc = node2 == null ? void 0 : node2.loc;
      if (!loc && node2) {
        const state = {
          loc: null
        };
        (0, _traverse().default)(node2, errorVisitor, this.scope, state);
        loc = state.loc;
        let txt = "This is an error on an internal node. Probably an internal error.";
        if (loc) txt += " Location has been estimated.";
        msg += ` (${txt})`;
      }
      if (loc) {
        const {
          highlightCode = true
        } = this.opts;
        msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, {
          start: {
            line: loc.start.line,
            column: loc.start.column + 1
          },
          end: loc.end && loc.start.line === loc.end.line ? {
            line: loc.end.line,
            column: loc.end.column + 1
          } : void 0
        }, {
          highlightCode
        });
      }
      return new _Error(msg);
    }
  }
  file.default = File;
  {
    File.prototype.addImport = function addImport() {
      throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
    };
    File.prototype.addTemplateObject = function addTemplateObject() {
      throw new Error("This function has been moved into the template literal transform itself.");
    };
    {
      File.prototype.getModuleName = function getModuleName2() {
        return _babel7Helpers.getModuleName()(this.opts, this.opts);
      };
    }
  }
  return file;
}
var buildExternalHelpers = {};
var hasRequiredBuildExternalHelpers;
function requireBuildExternalHelpers() {
  if (hasRequiredBuildExternalHelpers) return buildExternalHelpers;
  hasRequiredBuildExternalHelpers = 1;
  Object.defineProperty(buildExternalHelpers, "__esModule", {
    value: true
  });
  buildExternalHelpers.default = _default;
  function helpers() {
    const data = requireLib$7();
    helpers = function() {
      return data;
    };
    return data;
  }
  function _generator() {
    const data = requireLib$6();
    _generator = function() {
      return data;
    };
    return data;
  }
  function _template() {
    const data = requireLib$8();
    _template = function() {
      return data;
    };
    return data;
  }
  function _t2() {
    const data = requireLib$b();
    _t2 = function() {
      return data;
    };
    return data;
  }
  const {
    arrayExpression,
    assignmentExpression,
    binaryExpression,
    blockStatement,
    callExpression,
    cloneNode: cloneNode2,
    conditionalExpression,
    exportNamedDeclaration,
    exportSpecifier,
    expressionStatement,
    functionExpression,
    identifier: identifier2,
    memberExpression,
    objectExpression,
    program,
    stringLiteral,
    unaryExpression,
    variableDeclaration,
    variableDeclarator
  } = _t2();
  const buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
  function buildGlobal(allowlist) {
    const namespace = identifier2("babelHelpers");
    const body = [];
    const container = functionExpression(null, [identifier2("global")], blockStatement(body));
    const tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier2("global")), stringLiteral("undefined")), identifier2("self"), identifier2("global"))]))]);
    body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier2("global"), namespace), objectExpression([])))]));
    buildHelpers(body, namespace, allowlist);
    return tree;
  }
  function buildModule(allowlist) {
    const body = [];
    const refs = buildHelpers(body, null, allowlist);
    body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => {
      return exportSpecifier(cloneNode2(refs[name]), identifier2(name));
    })));
    return program(body, [], "module");
  }
  function buildUmd(allowlist) {
    const namespace = identifier2("babelHelpers");
    const body = [];
    body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier2("global"))]));
    buildHelpers(body, namespace, allowlist);
    return program([buildUmdWrapper({
      FACTORY_PARAMETERS: identifier2("global"),
      BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier2("root"), namespace), objectExpression([])),
      COMMON_ARGUMENTS: identifier2("exports"),
      AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]),
      FACTORY_BODY: body,
      UMD_ROOT: identifier2("this")
    })]);
  }
  function buildVar(allowlist) {
    const namespace = identifier2("babelHelpers");
    const body = [];
    body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
    const tree = program(body);
    buildHelpers(body, namespace, allowlist);
    body.push(expressionStatement(namespace));
    return tree;
  }
  function buildHelpers(body, namespace, allowlist) {
    const getHelperReference = (name) => {
      return namespace ? memberExpression(namespace, identifier2(name)) : identifier2(`_${name}`);
    };
    const refs = {};
    helpers().list.forEach(function(name) {
      if (allowlist && !allowlist.includes(name)) return;
      const ref = refs[name] = getHelperReference(name);
      const {
        nodes
      } = helpers().get(name, getHelperReference, namespace ? null : `_${name}`, [], namespace ? (ast, exportName, mapExportBindingAssignments) => {
        mapExportBindingAssignments((node2) => assignmentExpression("=", ref, node2));
        ast.body.push(expressionStatement(assignmentExpression("=", ref, identifier2(exportName))));
      } : null);
      body.push(...nodes);
    });
    return refs;
  }
  function _default(allowlist, outputType = "global") {
    let tree;
    const build = {
      global: buildGlobal,
      module: buildModule,
      umd: buildUmd,
      var: buildVar
    }[outputType];
    if (build) {
      tree = build(allowlist);
    } else {
      throw new Error(`Unsupported output type ${outputType}`);
    }
    return (0, _generator().default)(tree).code;
  }
  return buildExternalHelpers;
}
var indexBrowser = {};
var hasRequiredIndexBrowser;
function requireIndexBrowser() {
  if (hasRequiredIndexBrowser) return indexBrowser;
  hasRequiredIndexBrowser = 1;
  Object.defineProperty(indexBrowser, "__esModule", {
    value: true
  });
  indexBrowser.ROOT_CONFIG_FILENAMES = void 0;
  indexBrowser.findConfigUpwards = findConfigUpwards;
  indexBrowser.findPackageData = findPackageData;
  indexBrowser.findRelativeConfig = findRelativeConfig;
  indexBrowser.findRootConfig = findRootConfig;
  indexBrowser.loadConfig = loadConfig;
  indexBrowser.loadPlugin = loadPlugin;
  indexBrowser.loadPreset = loadPreset;
  indexBrowser.resolvePlugin = resolvePlugin;
  indexBrowser.resolvePreset = resolvePreset;
  indexBrowser.resolveShowConfigPath = resolveShowConfigPath;
  function findConfigUpwards(rootDir) {
    return null;
  }
  function* findPackageData(filepath) {
    return {
      filepath,
      directories: [],
      pkg: null,
      isPackage: false
    };
  }
  function* findRelativeConfig(pkgData, envName, caller) {
    return {
      config: null,
      ignore: null
    };
  }
  function* findRootConfig(dirname, envName, caller) {
    return null;
  }
  function* loadConfig(name, dirname, envName, caller) {
    throw new Error(`Cannot load ${name} relative to ${dirname} in a browser`);
  }
  function* resolveShowConfigPath(dirname) {
    return null;
  }
  indexBrowser.ROOT_CONFIG_FILENAMES = [];
  function resolvePlugin(name, dirname) {
    return null;
  }
  function resolvePreset(name, dirname) {
    return null;
  }
  function loadPlugin(name, dirname) {
    throw new Error(`Cannot load plugin ${name} relative to ${dirname} in a browser`);
  }
  function loadPreset(name, dirname) {
    throw new Error(`Cannot load preset ${name} relative to ${dirname} in a browser`);
  }
  return indexBrowser;
}
var environment = {};
var hasRequiredEnvironment;
function requireEnvironment() {
  if (hasRequiredEnvironment) return environment;
  hasRequiredEnvironment = 1;
  Object.defineProperty(environment, "__esModule", {
    value: true
  });
  environment.getEnv = getEnv;
  function getEnv(defaultValue = "development") {
    return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
  }
  return environment;
}
var config = {};
var gensync;
var hasRequiredGensync;
function requireGensync() {
  if (hasRequiredGensync) return gensync;
  hasRequiredGensync = 1;
  const GENSYNC_START = Symbol.for("gensync:v1:start");
  const GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
  const GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START";
  const GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND";
  const GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
  const GENSYNC_RACE_NONEMPTY = "GENSYNC_RACE_NONEMPTY";
  const GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";
  gensync = Object.assign(
    function gensync2(optsOrFn) {
      let genFn = optsOrFn;
      if (typeof optsOrFn !== "function") {
        genFn = newGenerator(optsOrFn);
      } else {
        genFn = wrapGenerator(optsOrFn);
      }
      return Object.assign(genFn, makeFunctionAPI(genFn));
    },
    {
      all: buildOperation({
        name: "all",
        arity: 1,
        sync: function(args) {
          const items = Array.from(args[0]);
          return items.map((item2) => evaluateSync(item2));
        },
        async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            Promise.resolve().then(() => resolve([]));
            return;
          }
          let count = 0;
          const results = items.map(() => void 0);
          items.forEach((item2, i) => {
            evaluateAsync(
              item2,
              (val) => {
                results[i] = val;
                count += 1;
                if (count === results.length) resolve(results);
              },
              reject
            );
          });
        }
      }),
      race: buildOperation({
        name: "race",
        arity: 1,
        sync: function(args) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
          }
          return evaluateSync(items[0]);
        },
        async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (items.length === 0) {
            throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
          }
          for (const item2 of items) {
            evaluateAsync(item2, resolve, reject);
          }
        }
      })
    }
  );
  function makeFunctionAPI(genFn) {
    const fns = {
      sync: function(...args) {
        return evaluateSync(genFn.apply(this, args));
      },
      async: function(...args) {
        return new Promise((resolve, reject) => {
          evaluateAsync(genFn.apply(this, args), resolve, reject);
        });
      },
      errback: function(...args) {
        const cb = args.pop();
        if (typeof cb !== "function") {
          throw makeError(
            "Asynchronous function called without callback",
            GENSYNC_ERRBACK_NO_CALLBACK
          );
        }
        let gen;
        try {
          gen = genFn.apply(this, args);
        } catch (err) {
          cb(err);
          return;
        }
        evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
      }
    };
    return fns;
  }
  function assertTypeof(type, name, value2, allowUndefined) {
    if (typeof value2 === type || allowUndefined && typeof value2 === "undefined") {
      return;
    }
    let msg;
    if (allowUndefined) {
      msg = `Expected opts.${name} to be either a ${type}, or undefined.`;
    } else {
      msg = `Expected opts.${name} to be a ${type}.`;
    }
    throw makeError(msg, GENSYNC_OPTIONS_ERROR);
  }
  function makeError(msg, code) {
    return Object.assign(new Error(msg), { code });
  }
  function newGenerator({ name, arity, sync, async: async2, errback }) {
    assertTypeof(
      "string",
      "name",
      name,
      true
      /* allowUndefined */
    );
    assertTypeof(
      "number",
      "arity",
      arity,
      true
      /* allowUndefined */
    );
    assertTypeof("function", "sync", sync);
    assertTypeof(
      "function",
      "async",
      async2,
      true
      /* allowUndefined */
    );
    assertTypeof(
      "function",
      "errback",
      errback,
      true
      /* allowUndefined */
    );
    if (async2 && errback) {
      throw makeError(
        "Expected one of either opts.async or opts.errback, but got _both_.",
        GENSYNC_OPTIONS_ERROR
      );
    }
    if (typeof name !== "string") {
      let fnName;
      if (errback && errback.name && errback.name !== "errback") {
        fnName = errback.name;
      }
      if (async2 && async2.name && async2.name !== "async") {
        fnName = async2.name.replace(/Async$/, "");
      }
      if (sync && sync.name && sync.name !== "sync") {
        fnName = sync.name.replace(/Sync$/, "");
      }
      if (typeof fnName === "string") {
        name = fnName;
      }
    }
    if (typeof arity !== "number") {
      arity = sync.length;
    }
    return buildOperation({
      name,
      arity,
      sync: function(args) {
        return sync.apply(this, args);
      },
      async: function(args, resolve, reject) {
        if (async2) {
          async2.apply(this, args).then(resolve, reject);
        } else if (errback) {
          errback.call(this, ...args, (err, value2) => {
            if (err == null) resolve(value2);
            else reject(err);
          });
        } else {
          resolve(sync.apply(this, args));
        }
      }
    });
  }
  function wrapGenerator(genFn) {
    return setFunctionMetadata(genFn.name, genFn.length, function(...args) {
      return genFn.apply(this, args);
    });
  }
  function buildOperation({ name, arity, sync, async: async2 }) {
    return setFunctionMetadata(name, arity, function* (...args) {
      const resume = yield GENSYNC_START;
      if (!resume) {
        const res = sync.call(this, args);
        return res;
      }
      let result;
      try {
        async2.call(
          this,
          args,
          (value2) => {
            if (result) return;
            result = { value: value2 };
            resume();
          },
          (err) => {
            if (result) return;
            result = { err };
            resume();
          }
        );
      } catch (err) {
        result = { err };
        resume();
      }
      yield GENSYNC_SUSPEND;
      if (result.hasOwnProperty("err")) {
        throw result.err;
      }
      return result.value;
    });
  }
  function evaluateSync(gen) {
    let value2;
    while (!({ value: value2 } = gen.next()).done) {
      assertStart(value2, gen);
    }
    return value2;
  }
  function evaluateAsync(gen, resolve, reject) {
    (function step() {
      try {
        let value2;
        while (!({ value: value2 } = gen.next()).done) {
          assertStart(value2, gen);
          let sync = true;
          let didSyncResume = false;
          const out = gen.next(() => {
            if (sync) {
              didSyncResume = true;
            } else {
              step();
            }
          });
          sync = false;
          assertSuspend(out, gen);
          if (!didSyncResume) {
            return;
          }
        }
        return resolve(value2);
      } catch (err) {
        return reject(err);
      }
    })();
  }
  function assertStart(value2, gen) {
    if (value2 === GENSYNC_START) return;
    throwError(
      gen,
      makeError(
        `Got unexpected yielded value in gensync generator: ${JSON.stringify(
          value2
        )}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,
        GENSYNC_EXPECTED_START
      )
    );
  }
  function assertSuspend({ value: value2, done }, gen) {
    if (!done && value2 === GENSYNC_SUSPEND) return;
    throwError(
      gen,
      makeError(
        done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(
          value2
        )}. If you get this, it is probably a gensync bug.`,
        GENSYNC_EXPECTED_SUSPEND
      )
    );
  }
  function throwError(gen, err) {
    if (gen.throw) gen.throw(err);
    throw err;
  }
  function setFunctionMetadata(name, arity, fn2) {
    if (typeof name === "string") {
      const nameDesc = Object.getOwnPropertyDescriptor(fn2, "name");
      if (!nameDesc || nameDesc.configurable) {
        Object.defineProperty(
          fn2,
          "name",
          Object.assign(nameDesc || {}, {
            configurable: true,
            value: name
          })
        );
      }
    }
    if (typeof arity === "number") {
      const lengthDesc = Object.getOwnPropertyDescriptor(fn2, "length");
      if (!lengthDesc || lengthDesc.configurable) {
        Object.defineProperty(
          fn2,
          "length",
          Object.assign(lengthDesc || {}, {
            configurable: true,
            value: arity
          })
        );
      }
    }
    return fn2;
  }
  return gensync;
}
var full = {};
var async = {};
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  Object.defineProperty(async, "__esModule", {
    value: true
  });
  async.forwardAsync = forwardAsync;
  async.isAsync = void 0;
  async.isThenable = isThenable;
  async.maybeAsync = maybeAsync;
  async.waitFor = async.onFirstPause = void 0;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c), u = i.value;
    } catch (n2) {
      return void e(n2);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function() {
      var t = this, e = arguments;
      return new Promise(function(r, o) {
        var a = n.apply(t, e);
        function _next(n2) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
        }
        function _throw(n2) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
        }
        _next(void 0);
      });
    };
  }
  const runGenerator = _gensync()(function* (item2) {
    return yield* item2;
  });
  async.isAsync = _gensync()({
    sync: () => false,
    errback: (cb) => cb(null, true)
  });
  function maybeAsync(fn2, message) {
    return _gensync()({
      sync(...args) {
        const result = fn2.apply(this, args);
        if (isThenable(result)) throw new Error(message);
        return result;
      },
      async(...args) {
        return Promise.resolve(fn2.apply(this, args));
      }
    });
  }
  const withKind = _gensync()({
    sync: (cb) => cb("sync"),
    async: function() {
      var _ref = _asyncToGenerator(function* (cb) {
        return cb("async");
      });
      return function async2(_x) {
        return _ref.apply(this, arguments);
      };
    }()
  });
  function forwardAsync(action, cb) {
    const g = _gensync()(action);
    return withKind((kind) => {
      const adapted = g[kind];
      return cb(adapted);
    });
  }
  async.onFirstPause = _gensync()({
    name: "onFirstPause",
    arity: 2,
    sync: function(item2) {
      return runGenerator.sync(item2);
    },
    errback: function(item2, firstPause, cb) {
      let completed = false;
      runGenerator.errback(item2, (err, value2) => {
        completed = true;
        cb(err, value2);
      });
      if (!completed) {
        firstPause();
      }
    }
  });
  async.waitFor = _gensync()({
    sync: (x2) => x2,
    async: function() {
      var _ref2 = _asyncToGenerator(function* (x2) {
        return x2;
      });
      return function async2(_x2) {
        return _ref2.apply(this, arguments);
      };
    }()
  });
  function isThenable(val) {
    return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
  }
  return async;
}
var util = {};
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util;
  hasRequiredUtil = 1;
  Object.defineProperty(util, "__esModule", {
    value: true
  });
  util.isIterableIterator = isIterableIterator;
  util.mergeOptions = mergeOptions;
  function mergeOptions(target, source) {
    for (const k2 of Object.keys(source)) {
      if ((k2 === "parserOpts" || k2 === "generatorOpts" || k2 === "assumptions") && source[k2]) {
        const parserOpts = source[k2];
        const targetObj = target[k2] || (target[k2] = {});
        mergeDefaultFields(targetObj, parserOpts);
      } else {
        const val = source[k2];
        if (val !== void 0) target[k2] = val;
      }
    }
  }
  function mergeDefaultFields(target, source) {
    for (const k2 of Object.keys(source)) {
      const val = source[k2];
      if (val !== void 0) target[k2] = val;
    }
  }
  function isIterableIterator(value2) {
    return !!value2 && typeof value2.next === "function" && typeof value2[Symbol.iterator] === "function";
  }
  return util;
}
var plugin$1 = {};
var deepArray = {};
var hasRequiredDeepArray;
function requireDeepArray() {
  if (hasRequiredDeepArray) return deepArray;
  hasRequiredDeepArray = 1;
  Object.defineProperty(deepArray, "__esModule", {
    value: true
  });
  deepArray.finalize = finalize;
  deepArray.flattenToSet = flattenToSet;
  function finalize(deepArr) {
    return Object.freeze(deepArr);
  }
  function flattenToSet(arr) {
    const result = /* @__PURE__ */ new Set();
    const stack = [arr];
    while (stack.length > 0) {
      for (const el of stack.pop()) {
        if (Array.isArray(el)) stack.push(el);
        else result.add(el);
      }
    }
    return result;
  }
  return deepArray;
}
var hasRequiredPlugin;
function requirePlugin() {
  if (hasRequiredPlugin) return plugin$1;
  hasRequiredPlugin = 1;
  Object.defineProperty(plugin$1, "__esModule", {
    value: true
  });
  plugin$1.default = void 0;
  var _deepArray = requireDeepArray();
  class Plugin {
    constructor(plugin2, options2, key, externalDependencies = (0, _deepArray.finalize)([])) {
      this.key = void 0;
      this.manipulateOptions = void 0;
      this.post = void 0;
      this.pre = void 0;
      this.visitor = void 0;
      this.parserOverride = void 0;
      this.generatorOverride = void 0;
      this.options = void 0;
      this.externalDependencies = void 0;
      this.key = plugin2.name || key;
      this.manipulateOptions = plugin2.manipulateOptions;
      this.post = plugin2.post;
      this.pre = plugin2.pre;
      this.visitor = plugin2.visitor || {};
      this.parserOverride = plugin2.parserOverride;
      this.generatorOverride = plugin2.generatorOverride;
      this.options = options2;
      this.externalDependencies = externalDependencies;
    }
  }
  plugin$1.default = Plugin;
  return plugin$1;
}
var item = {};
var configDescriptors = {};
var functional = {};
var hasRequiredFunctional;
function requireFunctional() {
  if (hasRequiredFunctional) return functional;
  hasRequiredFunctional = 1;
  Object.defineProperty(functional, "__esModule", {
    value: true
  });
  functional.once = once;
  var _async = requireAsync();
  function once(fn2) {
    let result;
    let resultP;
    let promiseReferenced = false;
    return function* () {
      if (!result) {
        if (resultP) {
          promiseReferenced = true;
          return yield* (0, _async.waitFor)(resultP);
        }
        if (!(yield* (0, _async.isAsync)())) {
          try {
            result = {
              ok: true,
              value: yield* fn2()
            };
          } catch (error2) {
            result = {
              ok: false,
              value: error2
            };
          }
        } else {
          let resolve, reject;
          resultP = new Promise((res, rej) => {
            resolve = res;
            reject = rej;
          });
          try {
            result = {
              ok: true,
              value: yield* fn2()
            };
            resultP = null;
            if (promiseReferenced) resolve(result.value);
          } catch (error2) {
            result = {
              ok: false,
              value: error2
            };
            resultP = null;
            if (promiseReferenced) reject(error2);
          }
        }
      }
      if (result.ok) return result.value;
      else throw result.value;
    };
  }
  return functional;
}
var caching = {};
var hasRequiredCaching;
function requireCaching() {
  if (hasRequiredCaching) return caching;
  hasRequiredCaching = 1;
  Object.defineProperty(caching, "__esModule", {
    value: true
  });
  caching.assertSimpleType = assertSimpleType;
  caching.makeStrongCache = makeStrongCache;
  caching.makeStrongCacheSync = makeStrongCacheSync;
  caching.makeWeakCache = makeWeakCache;
  caching.makeWeakCacheSync = makeWeakCacheSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _async = requireAsync();
  var _util = requireUtil();
  const synchronize = (gen) => {
    return _gensync()(gen).sync;
  };
  function* genTrue() {
    return true;
  }
  function makeWeakCache(handler) {
    return makeCachedFunction(WeakMap, handler);
  }
  function makeWeakCacheSync(handler) {
    return synchronize(makeWeakCache(handler));
  }
  function makeStrongCache(handler) {
    return makeCachedFunction(Map, handler);
  }
  function makeStrongCacheSync(handler) {
    return synchronize(makeStrongCache(handler));
  }
  function makeCachedFunction(CallCache, handler) {
    const callCacheSync = new CallCache();
    const callCacheAsync = new CallCache();
    const futureCache = new CallCache();
    return function* cachedFunction(arg, data) {
      const asyncContext = yield* (0, _async.isAsync)();
      const callCache = asyncContext ? callCacheAsync : callCacheSync;
      const cached = yield* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data);
      if (cached.valid) return cached.value;
      const cache2 = new CacheConfigurator(data);
      const handlerResult = handler(arg, cache2);
      let finishLock;
      let value2;
      if ((0, _util.isIterableIterator)(handlerResult)) {
        value2 = yield* (0, _async.onFirstPause)(handlerResult, () => {
          finishLock = setupAsyncLocks(cache2, futureCache, arg);
        });
      } else {
        value2 = handlerResult;
      }
      updateFunctionCache(callCache, cache2, arg, value2);
      if (finishLock) {
        futureCache.delete(arg);
        finishLock.release(value2);
      }
      return value2;
    };
  }
  function* getCachedValue(cache2, arg, data) {
    const cachedValue = cache2.get(arg);
    if (cachedValue) {
      for (const {
        value: value2,
        valid
      } of cachedValue) {
        if (yield* valid(data)) return {
          valid: true,
          value: value2
        };
      }
    }
    return {
      valid: false,
      value: null
    };
  }
  function* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {
    const cached = yield* getCachedValue(callCache, arg, data);
    if (cached.valid) {
      return cached;
    }
    if (asyncContext) {
      const cached2 = yield* getCachedValue(futureCache, arg, data);
      if (cached2.valid) {
        const value2 = yield* (0, _async.waitFor)(cached2.value.promise);
        return {
          valid: true,
          value: value2
        };
      }
    }
    return {
      valid: false,
      value: null
    };
  }
  function setupAsyncLocks(config2, futureCache, arg) {
    const finishLock = new Lock();
    updateFunctionCache(futureCache, config2, arg, finishLock);
    return finishLock;
  }
  function updateFunctionCache(cache2, config2, arg, value2) {
    if (!config2.configured()) config2.forever();
    let cachedValue = cache2.get(arg);
    config2.deactivate();
    switch (config2.mode()) {
      case "forever":
        cachedValue = [{
          value: value2,
          valid: genTrue
        }];
        cache2.set(arg, cachedValue);
        break;
      case "invalidate":
        cachedValue = [{
          value: value2,
          valid: config2.validator()
        }];
        cache2.set(arg, cachedValue);
        break;
      case "valid":
        if (cachedValue) {
          cachedValue.push({
            value: value2,
            valid: config2.validator()
          });
        } else {
          cachedValue = [{
            value: value2,
            valid: config2.validator()
          }];
          cache2.set(arg, cachedValue);
        }
    }
  }
  class CacheConfigurator {
    constructor(data) {
      this._active = true;
      this._never = false;
      this._forever = false;
      this._invalidate = false;
      this._configured = false;
      this._pairs = [];
      this._data = void 0;
      this._data = data;
    }
    simple() {
      return makeSimpleConfigurator(this);
    }
    mode() {
      if (this._never) return "never";
      if (this._forever) return "forever";
      if (this._invalidate) return "invalidate";
      return "valid";
    }
    forever() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never) {
        throw new Error("Caching has already been configured with .never()");
      }
      this._forever = true;
      this._configured = true;
    }
    never() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._forever) {
        throw new Error("Caching has already been configured with .forever()");
      }
      this._never = true;
      this._configured = true;
    }
    using(handler) {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never || this._forever) {
        throw new Error("Caching has already been configured with .never or .forever()");
      }
      this._configured = true;
      const key = handler(this._data);
      const fn2 = (0, _async.maybeAsync)(handler, `You appear to be using an async cache handler, but Babel has been called synchronously`);
      if ((0, _async.isThenable)(key)) {
        return key.then((key2) => {
          this._pairs.push([key2, fn2]);
          return key2;
        });
      }
      this._pairs.push([key, fn2]);
      return key;
    }
    invalidate(handler) {
      this._invalidate = true;
      return this.using(handler);
    }
    validator() {
      const pairs = this._pairs;
      return function* (data) {
        for (const [key, fn2] of pairs) {
          if (key !== (yield* fn2(data))) return false;
        }
        return true;
      };
    }
    deactivate() {
      this._active = false;
    }
    configured() {
      return this._configured;
    }
  }
  function makeSimpleConfigurator(cache2) {
    function cacheFn(val) {
      if (typeof val === "boolean") {
        if (val) cache2.forever();
        else cache2.never();
        return;
      }
      return cache2.using(() => assertSimpleType(val()));
    }
    cacheFn.forever = () => cache2.forever();
    cacheFn.never = () => cache2.never();
    cacheFn.using = (cb) => cache2.using(() => assertSimpleType(cb()));
    cacheFn.invalidate = (cb) => cache2.invalidate(() => assertSimpleType(cb()));
    return cacheFn;
  }
  function assertSimpleType(value2) {
    if ((0, _async.isThenable)(value2)) {
      throw new Error(`You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.`);
    }
    if (value2 != null && typeof value2 !== "string" && typeof value2 !== "boolean" && typeof value2 !== "number") {
      throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
    }
    return value2;
  }
  class Lock {
    constructor() {
      this.released = false;
      this.promise = void 0;
      this._resolve = void 0;
      this.promise = new Promise((resolve) => {
        this._resolve = resolve;
      });
    }
    release(value2) {
      this.released = true;
      this._resolve(value2);
    }
  }
  return caching;
}
var resolveTargetsBrowser = {};
var lib$1 = {};
const require$$0$2 = /* @__PURE__ */ JSON.parse('[{"name":"nodejs","version":"0.2.0","date":"2011-08-26","lts":false,"security":false,"v8":"2.3.8.0"},{"name":"nodejs","version":"0.3.0","date":"2011-08-26","lts":false,"security":false,"v8":"2.5.1.0"},{"name":"nodejs","version":"0.4.0","date":"2011-08-26","lts":false,"security":false,"v8":"3.1.2.0"},{"name":"nodejs","version":"0.5.0","date":"2011-08-26","lts":false,"security":false,"v8":"3.1.8.25"},{"name":"nodejs","version":"0.6.0","date":"2011-11-04","lts":false,"security":false,"v8":"3.6.6.6"},{"name":"nodejs","version":"0.7.0","date":"2012-01-17","lts":false,"security":false,"v8":"3.8.6.0"},{"name":"nodejs","version":"0.8.0","date":"2012-06-22","lts":false,"security":false,"v8":"3.11.10.10"},{"name":"nodejs","version":"0.9.0","date":"2012-07-20","lts":false,"security":false,"v8":"3.11.10.15"},{"name":"nodejs","version":"0.10.0","date":"2013-03-11","lts":false,"security":false,"v8":"3.14.5.8"},{"name":"nodejs","version":"0.11.0","date":"2013-03-28","lts":false,"security":false,"v8":"3.17.13.0"},{"name":"nodejs","version":"0.12.0","date":"2015-02-06","lts":false,"security":false,"v8":"3.28.73.0"},{"name":"nodejs","version":"4.0.0","date":"2015-09-08","lts":false,"security":false,"v8":"4.5.103.30"},{"name":"nodejs","version":"4.1.0","date":"2015-09-17","lts":false,"security":false,"v8":"4.5.103.33"},{"name":"nodejs","version":"4.2.0","date":"2015-10-12","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.3.0","date":"2016-02-09","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.4.0","date":"2016-03-08","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.5.0","date":"2016-08-16","lts":"Argon","security":false,"v8":"4.5.103.37"},{"name":"nodejs","version":"4.6.0","date":"2016-09-27","lts":"Argon","security":true,"v8":"4.5.103.37"},{"name":"nodejs","version":"4.7.0","date":"2016-12-06","lts":"Argon","security":false,"v8":"4.5.103.43"},{"name":"nodejs","version":"4.8.0","date":"2017-02-21","lts":"Argon","security":false,"v8":"4.5.103.45"},{"name":"nodejs","version":"4.9.0","date":"2018-03-28","lts":"Argon","security":true,"v8":"4.5.103.53"},{"name":"nodejs","version":"5.0.0","date":"2015-10-29","lts":false,"security":false,"v8":"4.6.85.28"},{"name":"nodejs","version":"5.1.0","date":"2015-11-17","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.2.0","date":"2015-12-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.3.0","date":"2015-12-15","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.4.0","date":"2016-01-06","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.5.0","date":"2016-01-21","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.6.0","date":"2016-02-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.7.0","date":"2016-02-23","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.8.0","date":"2016-03-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.9.0","date":"2016-03-16","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.10.0","date":"2016-04-01","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.11.0","date":"2016-04-21","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.12.0","date":"2016-06-23","lts":false,"security":false,"v8":"4.6.85.32"},{"name":"nodejs","version":"6.0.0","date":"2016-04-26","lts":false,"security":false,"v8":"5.0.71.35"},{"name":"nodejs","version":"6.1.0","date":"2016-05-05","lts":false,"security":false,"v8":"5.0.71.35"},{"name":"nodejs","version":"6.2.0","date":"2016-05-17","lts":false,"security":false,"v8":"5.0.71.47"},{"name":"nodejs","version":"6.3.0","date":"2016-07-06","lts":false,"security":false,"v8":"5.0.71.52"},{"name":"nodejs","version":"6.4.0","date":"2016-08-12","lts":false,"security":false,"v8":"5.0.71.60"},{"name":"nodejs","version":"6.5.0","date":"2016-08-26","lts":false,"security":false,"v8":"5.1.281.81"},{"name":"nodejs","version":"6.6.0","date":"2016-09-14","lts":false,"security":false,"v8":"5.1.281.83"},{"name":"nodejs","version":"6.7.0","date":"2016-09-27","lts":false,"security":true,"v8":"5.1.281.83"},{"name":"nodejs","version":"6.8.0","date":"2016-10-12","lts":false,"security":false,"v8":"5.1.281.84"},{"name":"nodejs","version":"6.9.0","date":"2016-10-18","lts":"Boron","security":false,"v8":"5.1.281.84"},{"name":"nodejs","version":"6.10.0","date":"2017-02-21","lts":"Boron","security":false,"v8":"5.1.281.93"},{"name":"nodejs","version":"6.11.0","date":"2017-06-06","lts":"Boron","security":false,"v8":"5.1.281.102"},{"name":"nodejs","version":"6.12.0","date":"2017-11-06","lts":"Boron","security":false,"v8":"5.1.281.108"},{"name":"nodejs","version":"6.13.0","date":"2018-02-10","lts":"Boron","security":false,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.14.0","date":"2018-03-28","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.15.0","date":"2018-11-27","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.16.0","date":"2018-12-26","lts":"Boron","security":false,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.17.0","date":"2019-02-28","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"7.0.0","date":"2016-10-25","lts":false,"security":false,"v8":"5.4.500.36"},{"name":"nodejs","version":"7.1.0","date":"2016-11-08","lts":false,"security":false,"v8":"5.4.500.36"},{"name":"nodejs","version":"7.2.0","date":"2016-11-22","lts":false,"security":false,"v8":"5.4.500.43"},{"name":"nodejs","version":"7.3.0","date":"2016-12-20","lts":false,"security":false,"v8":"5.4.500.45"},{"name":"nodejs","version":"7.4.0","date":"2017-01-04","lts":false,"security":false,"v8":"5.4.500.45"},{"name":"nodejs","version":"7.5.0","date":"2017-01-31","lts":false,"security":false,"v8":"5.4.500.48"},{"name":"nodejs","version":"7.6.0","date":"2017-02-21","lts":false,"security":false,"v8":"5.5.372.40"},{"name":"nodejs","version":"7.7.0","date":"2017-02-28","lts":false,"security":false,"v8":"5.5.372.41"},{"name":"nodejs","version":"7.8.0","date":"2017-03-29","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"7.9.0","date":"2017-04-11","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"7.10.0","date":"2017-05-02","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"8.0.0","date":"2017-05-30","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.1.0","date":"2017-06-08","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.2.0","date":"2017-07-19","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.3.0","date":"2017-08-08","lts":false,"security":false,"v8":"6.0.286.52"},{"name":"nodejs","version":"8.4.0","date":"2017-08-15","lts":false,"security":false,"v8":"6.0.286.52"},{"name":"nodejs","version":"8.5.0","date":"2017-09-12","lts":false,"security":false,"v8":"6.0.287.53"},{"name":"nodejs","version":"8.6.0","date":"2017-09-26","lts":false,"security":false,"v8":"6.0.287.53"},{"name":"nodejs","version":"8.7.0","date":"2017-10-11","lts":false,"security":false,"v8":"6.1.534.42"},{"name":"nodejs","version":"8.8.0","date":"2017-10-24","lts":false,"security":false,"v8":"6.1.534.42"},{"name":"nodejs","version":"8.9.0","date":"2017-10-31","lts":"Carbon","security":false,"v8":"6.1.534.46"},{"name":"nodejs","version":"8.10.0","date":"2018-03-06","lts":"Carbon","security":false,"v8":"6.2.414.50"},{"name":"nodejs","version":"8.11.0","date":"2018-03-28","lts":"Carbon","security":true,"v8":"6.2.414.50"},{"name":"nodejs","version":"8.12.0","date":"2018-09-10","lts":"Carbon","security":false,"v8":"6.2.414.66"},{"name":"nodejs","version":"8.13.0","date":"2018-11-20","lts":"Carbon","security":false,"v8":"6.2.414.72"},{"name":"nodejs","version":"8.14.0","date":"2018-11-27","lts":"Carbon","security":true,"v8":"6.2.414.72"},{"name":"nodejs","version":"8.15.0","date":"2018-12-26","lts":"Carbon","security":false,"v8":"6.2.414.75"},{"name":"nodejs","version":"8.16.0","date":"2019-04-16","lts":"Carbon","security":false,"v8":"6.2.414.77"},{"name":"nodejs","version":"8.17.0","date":"2019-12-17","lts":"Carbon","security":true,"v8":"6.2.414.78"},{"name":"nodejs","version":"9.0.0","date":"2017-10-31","lts":false,"security":false,"v8":"6.2.414.32"},{"name":"nodejs","version":"9.1.0","date":"2017-11-07","lts":false,"security":false,"v8":"6.2.414.32"},{"name":"nodejs","version":"9.2.0","date":"2017-11-14","lts":false,"security":false,"v8":"6.2.414.44"},{"name":"nodejs","version":"9.3.0","date":"2017-12-12","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.4.0","date":"2018-01-10","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.5.0","date":"2018-01-31","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.6.0","date":"2018-02-21","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.7.0","date":"2018-03-01","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.8.0","date":"2018-03-07","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.9.0","date":"2018-03-21","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.10.0","date":"2018-03-28","lts":false,"security":true,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.11.0","date":"2018-04-04","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"10.0.0","date":"2018-04-24","lts":false,"security":false,"v8":"6.6.346.24"},{"name":"nodejs","version":"10.1.0","date":"2018-05-08","lts":false,"security":false,"v8":"6.6.346.27"},{"name":"nodejs","version":"10.2.0","date":"2018-05-23","lts":false,"security":false,"v8":"6.6.346.32"},{"name":"nodejs","version":"10.3.0","date":"2018-05-29","lts":false,"security":false,"v8":"6.6.346.32"},{"name":"nodejs","version":"10.4.0","date":"2018-06-06","lts":false,"security":false,"v8":"6.7.288.43"},{"name":"nodejs","version":"10.5.0","date":"2018-06-20","lts":false,"security":false,"v8":"6.7.288.46"},{"name":"nodejs","version":"10.6.0","date":"2018-07-04","lts":false,"security":false,"v8":"6.7.288.46"},{"name":"nodejs","version":"10.7.0","date":"2018-07-18","lts":false,"security":false,"v8":"6.7.288.49"},{"name":"nodejs","version":"10.8.0","date":"2018-08-01","lts":false,"security":false,"v8":"6.7.288.49"},{"name":"nodejs","version":"10.9.0","date":"2018-08-15","lts":false,"security":false,"v8":"6.8.275.24"},{"name":"nodejs","version":"10.10.0","date":"2018-09-06","lts":false,"security":false,"v8":"6.8.275.30"},{"name":"nodejs","version":"10.11.0","date":"2018-09-19","lts":false,"security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.12.0","date":"2018-10-10","lts":false,"security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.13.0","date":"2018-10-30","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.14.0","date":"2018-11-27","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.15.0","date":"2018-12-26","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.16.0","date":"2019-05-28","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.17.0","date":"2019-10-22","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.18.0","date":"2019-12-17","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.19.0","date":"2020-02-05","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.20.0","date":"2020-03-26","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.21.0","date":"2020-06-02","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.22.0","date":"2020-07-21","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.23.0","date":"2020-10-27","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.24.0","date":"2021-02-23","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"11.0.0","date":"2018-10-23","lts":false,"security":false,"v8":"7.0.276.28"},{"name":"nodejs","version":"11.1.0","date":"2018-10-30","lts":false,"security":false,"v8":"7.0.276.32"},{"name":"nodejs","version":"11.2.0","date":"2018-11-15","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.3.0","date":"2018-11-27","lts":false,"security":true,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.4.0","date":"2018-12-07","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.5.0","date":"2018-12-18","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.6.0","date":"2018-12-26","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.7.0","date":"2019-01-17","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.8.0","date":"2019-01-24","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.9.0","date":"2019-01-30","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.10.0","date":"2019-02-14","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.11.0","date":"2019-03-05","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.12.0","date":"2019-03-14","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.13.0","date":"2019-03-28","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.14.0","date":"2019-04-10","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.15.0","date":"2019-04-30","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"12.0.0","date":"2019-04-23","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.1.0","date":"2019-04-29","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.2.0","date":"2019-05-07","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.3.0","date":"2019-05-21","lts":false,"security":false,"v8":"7.4.288.27"},{"name":"nodejs","version":"12.4.0","date":"2019-06-04","lts":false,"security":false,"v8":"7.4.288.27"},{"name":"nodejs","version":"12.5.0","date":"2019-06-26","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.6.0","date":"2019-07-03","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.7.0","date":"2019-07-23","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.8.0","date":"2019-08-06","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.9.0","date":"2019-08-20","lts":false,"security":false,"v8":"7.6.303.29"},{"name":"nodejs","version":"12.10.0","date":"2019-09-04","lts":false,"security":false,"v8":"7.6.303.29"},{"name":"nodejs","version":"12.11.0","date":"2019-09-25","lts":false,"security":false,"v8":"7.7.299.11"},{"name":"nodejs","version":"12.12.0","date":"2019-10-11","lts":false,"security":false,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.13.0","date":"2019-10-21","lts":"Erbium","security":false,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.14.0","date":"2019-12-17","lts":"Erbium","security":true,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.15.0","date":"2020-02-05","lts":"Erbium","security":true,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.16.0","date":"2020-02-11","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.17.0","date":"2020-05-26","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.18.0","date":"2020-06-02","lts":"Erbium","security":true,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.19.0","date":"2020-10-06","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.20.0","date":"2020-11-24","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.21.0","date":"2021-02-23","lts":"Erbium","security":true,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.22.0","date":"2021-03-30","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"13.0.0","date":"2019-10-22","lts":false,"security":false,"v8":"7.8.279.17"},{"name":"nodejs","version":"13.1.0","date":"2019-11-05","lts":false,"security":false,"v8":"7.8.279.17"},{"name":"nodejs","version":"13.2.0","date":"2019-11-21","lts":false,"security":false,"v8":"7.9.317.23"},{"name":"nodejs","version":"13.3.0","date":"2019-12-03","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.4.0","date":"2019-12-17","lts":false,"security":true,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.5.0","date":"2019-12-18","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.6.0","date":"2020-01-07","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.7.0","date":"2020-01-21","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.8.0","date":"2020-02-05","lts":false,"security":true,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.9.0","date":"2020-02-18","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.10.0","date":"2020-03-04","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.11.0","date":"2020-03-12","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.12.0","date":"2020-03-26","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.13.0","date":"2020-04-14","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.14.0","date":"2020-04-29","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"14.0.0","date":"2020-04-21","lts":false,"security":false,"v8":"8.1.307.30"},{"name":"nodejs","version":"14.1.0","date":"2020-04-29","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.2.0","date":"2020-05-05","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.3.0","date":"2020-05-19","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.4.0","date":"2020-06-02","lts":false,"security":true,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.5.0","date":"2020-06-30","lts":false,"security":false,"v8":"8.3.110.9"},{"name":"nodejs","version":"14.6.0","date":"2020-07-20","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.7.0","date":"2020-07-29","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.8.0","date":"2020-08-11","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.9.0","date":"2020-08-27","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.10.0","date":"2020-09-08","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.11.0","date":"2020-09-15","lts":false,"security":true,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.12.0","date":"2020-09-22","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.13.0","date":"2020-09-29","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.14.0","date":"2020-10-15","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.15.0","date":"2020-10-27","lts":"Fermium","security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.16.0","date":"2021-02-23","lts":"Fermium","security":true,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.17.0","date":"2021-05-11","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.18.0","date":"2021-09-28","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.19.0","date":"2022-02-01","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.20.0","date":"2022-07-07","lts":"Fermium","security":true,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.21.0","date":"2022-11-01","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"15.0.0","date":"2020-10-20","lts":false,"security":false,"v8":"8.6.395.16"},{"name":"nodejs","version":"15.1.0","date":"2020-11-04","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.2.0","date":"2020-11-10","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.3.0","date":"2020-11-24","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.4.0","date":"2020-12-09","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.5.0","date":"2020-12-22","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.6.0","date":"2021-01-14","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.7.0","date":"2021-01-25","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.8.0","date":"2021-02-02","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.9.0","date":"2021-02-18","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.10.0","date":"2021-02-23","lts":false,"security":true,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.11.0","date":"2021-03-03","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.12.0","date":"2021-03-17","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.13.0","date":"2021-03-31","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.14.0","date":"2021-04-06","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"16.0.0","date":"2021-04-20","lts":false,"security":false,"v8":"9.0.257.17"},{"name":"nodejs","version":"16.1.0","date":"2021-05-04","lts":false,"security":false,"v8":"9.0.257.24"},{"name":"nodejs","version":"16.2.0","date":"2021-05-19","lts":false,"security":false,"v8":"9.0.257.25"},{"name":"nodejs","version":"16.3.0","date":"2021-06-03","lts":false,"security":false,"v8":"9.0.257.25"},{"name":"nodejs","version":"16.4.0","date":"2021-06-23","lts":false,"security":false,"v8":"9.1.269.36"},{"name":"nodejs","version":"16.5.0","date":"2021-07-14","lts":false,"security":false,"v8":"9.1.269.38"},{"name":"nodejs","version":"16.6.0","date":"2021-07-29","lts":false,"security":true,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.7.0","date":"2021-08-18","lts":false,"security":false,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.8.0","date":"2021-08-25","lts":false,"security":false,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.9.0","date":"2021-09-07","lts":false,"security":false,"v8":"9.3.345.16"},{"name":"nodejs","version":"16.10.0","date":"2021-09-22","lts":false,"security":false,"v8":"9.3.345.19"},{"name":"nodejs","version":"16.11.0","date":"2021-10-08","lts":false,"security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.12.0","date":"2021-10-20","lts":false,"security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.13.0","date":"2021-10-26","lts":"Gallium","security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.14.0","date":"2022-02-08","lts":"Gallium","security":false,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.15.0","date":"2022-04-26","lts":"Gallium","security":false,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.16.0","date":"2022-07-07","lts":"Gallium","security":true,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.17.0","date":"2022-08-16","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.18.0","date":"2022-10-12","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.19.0","date":"2022-12-13","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.20.0","date":"2023-03-28","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"17.0.0","date":"2021-10-19","lts":false,"security":false,"v8":"9.5.172.21"},{"name":"nodejs","version":"17.1.0","date":"2021-11-09","lts":false,"security":false,"v8":"9.5.172.25"},{"name":"nodejs","version":"17.2.0","date":"2021-11-30","lts":false,"security":false,"v8":"9.6.180.14"},{"name":"nodejs","version":"17.3.0","date":"2021-12-17","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.4.0","date":"2022-01-18","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.5.0","date":"2022-02-10","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.6.0","date":"2022-02-22","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.7.0","date":"2022-03-09","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.8.0","date":"2022-03-22","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.9.0","date":"2022-04-07","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"18.0.0","date":"2022-04-18","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.1.0","date":"2022-05-03","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.2.0","date":"2022-05-17","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.3.0","date":"2022-06-02","lts":false,"security":false,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.4.0","date":"2022-06-16","lts":false,"security":false,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.5.0","date":"2022-07-06","lts":false,"security":true,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.6.0","date":"2022-07-13","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.7.0","date":"2022-07-26","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.8.0","date":"2022-08-24","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.9.0","date":"2022-09-07","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.10.0","date":"2022-09-28","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.11.0","date":"2022-10-13","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.12.0","date":"2022-10-25","lts":"Hydrogen","security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.13.0","date":"2023-01-05","lts":"Hydrogen","security":false,"v8":"10.2.154.23"},{"name":"nodejs","version":"18.14.0","date":"2023-02-01","lts":"Hydrogen","security":false,"v8":"10.2.154.23"},{"name":"nodejs","version":"18.15.0","date":"2023-03-05","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.16.0","date":"2023-04-12","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.17.0","date":"2023-07-18","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.18.0","date":"2023-09-18","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.19.0","date":"2023-11-29","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.20.0","date":"2024-03-26","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"19.0.0","date":"2022-10-17","lts":false,"security":false,"v8":"10.7.193.13"},{"name":"nodejs","version":"19.1.0","date":"2022-11-14","lts":false,"security":false,"v8":"10.7.193.20"},{"name":"nodejs","version":"19.2.0","date":"2022-11-29","lts":false,"security":false,"v8":"10.8.168.20"},{"name":"nodejs","version":"19.3.0","date":"2022-12-14","lts":false,"security":false,"v8":"10.8.168.21"},{"name":"nodejs","version":"19.4.0","date":"2023-01-05","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.5.0","date":"2023-01-24","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.6.0","date":"2023-02-01","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.7.0","date":"2023-02-21","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.8.0","date":"2023-03-14","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.9.0","date":"2023-04-10","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"20.0.0","date":"2023-04-17","lts":false,"security":false,"v8":"11.3.244.4"},{"name":"nodejs","version":"20.1.0","date":"2023-05-03","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.2.0","date":"2023-05-16","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.3.0","date":"2023-06-08","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.4.0","date":"2023-07-04","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.5.0","date":"2023-07-19","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.6.0","date":"2023-08-23","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.7.0","date":"2023-09-18","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.8.0","date":"2023-09-28","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.9.0","date":"2023-10-24","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.10.0","date":"2023-11-22","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.11.0","date":"2024-01-09","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.12.0","date":"2024-03-26","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.13.0","date":"2024-05-07","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.14.0","date":"2024-05-28","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.15.0","date":"2024-06-20","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.16.0","date":"2024-07-24","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.17.0","date":"2024-08-21","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.18.0","date":"2024-10-03","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"21.0.0","date":"2023-10-17","lts":false,"security":false,"v8":"11.8.172.13"},{"name":"nodejs","version":"21.1.0","date":"2023-10-24","lts":false,"security":false,"v8":"11.8.172.15"},{"name":"nodejs","version":"21.2.0","date":"2023-11-14","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.3.0","date":"2023-11-30","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.4.0","date":"2023-12-05","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.5.0","date":"2023-12-19","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.6.0","date":"2024-01-14","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.7.0","date":"2024-03-06","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"22.0.0","date":"2024-04-24","lts":false,"security":false,"v8":"12.4.254.14"},{"name":"nodejs","version":"22.1.0","date":"2024-05-02","lts":false,"security":false,"v8":"12.4.254.14"},{"name":"nodejs","version":"22.2.0","date":"2024-05-15","lts":false,"security":false,"v8":"12.4.254.14"},{"name":"nodejs","version":"22.3.0","date":"2024-06-11","lts":false,"security":false,"v8":"12.4.254.20"},{"name":"nodejs","version":"22.4.0","date":"2024-07-02","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.5.0","date":"2024-07-17","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.6.0","date":"2024-08-06","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.7.0","date":"2024-08-21","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.8.0","date":"2024-09-03","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.9.0","date":"2024-09-17","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.10.0","date":"2024-10-16","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.11.0","date":"2024-10-29","lts":"Jod","security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.12.0","date":"2024-12-02","lts":"Jod","security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"23.0.0","date":"2024-10-16","lts":false,"security":false,"v8":"12.9.202.26"},{"name":"nodejs","version":"23.1.0","date":"2024-10-24","lts":false,"security":false,"v8":"12.9.202.28"},{"name":"nodejs","version":"23.2.0","date":"2024-11-11","lts":false,"security":false,"v8":"12.9.202.28"},{"name":"nodejs","version":"23.3.0","date":"2024-11-20","lts":false,"security":false,"v8":"12.9.202.28"}]');
var agents$1 = {};
var browsers$1 = {};
var browsers;
var hasRequiredBrowsers$1;
function requireBrowsers$1() {
  if (hasRequiredBrowsers$1) return browsers;
  hasRequiredBrowsers$1 = 1;
  browsers = { A: "ie", B: "edge", C: "firefox", D: "chrome", E: "safari", F: "opera", G: "ios_saf", H: "op_mini", I: "android", J: "bb", K: "op_mob", L: "and_chr", M: "and_ff", N: "ie_mob", O: "and_uc", P: "samsung", Q: "and_qq", R: "baidu", S: "kaios" };
  return browsers;
}
var hasRequiredBrowsers;
function requireBrowsers() {
  if (hasRequiredBrowsers) return browsers$1;
  hasRequiredBrowsers = 1;
  browsers$1.browsers = requireBrowsers$1();
  return browsers$1;
}
var browserVersions$1 = {};
var browserVersions;
var hasRequiredBrowserVersions$1;
function requireBrowserVersions$1() {
  if (hasRequiredBrowserVersions$1) return browserVersions;
  hasRequiredBrowserVersions$1 = 1;
  browserVersions = { "0": "117", "1": "20", "2": "21", "3": "22", "4": "23", "5": "24", "6": "25", "7": "26", "8": "27", "9": "28", A: "10", B: "11", C: "12", D: "7", E: "8", F: "9", G: "15", H: "80", I: "137", J: "4", K: "6", L: "13", M: "14", N: "16", O: "17", P: "18", Q: "79", R: "81", S: "83", T: "84", U: "85", V: "86", W: "87", X: "88", Y: "89", Z: "90", a: "91", b: "92", c: "93", d: "94", e: "95", f: "96", g: "97", h: "98", i: "99", j: "100", k: "101", l: "102", m: "103", n: "104", o: "105", p: "106", q: "107", r: "108", s: "109", t: "110", u: "111", v: "112", w: "113", x: "114", y: "115", z: "116", AB: "118", BB: "119", CB: "120", DB: "121", EB: "122", FB: "123", GB: "124", HB: "125", IB: "126", JB: "127", KB: "128", LB: "129", MB: "130", NB: "131", OB: "132", PB: "133", QB: "134", RB: "135", SB: "136", TB: "5", UB: "19", VB: "29", WB: "30", XB: "31", YB: "32", ZB: "33", aB: "34", bB: "35", cB: "36", dB: "37", eB: "38", fB: "39", gB: "40", hB: "41", iB: "42", jB: "43", kB: "44", lB: "45", mB: "46", nB: "47", oB: "48", pB: "49", qB: "50", rB: "51", sB: "52", tB: "53", uB: "54", vB: "55", wB: "56", xB: "57", yB: "58", zB: "60", "0B": "62", "1B": "63", "2B": "64", "3B": "65", "4B": "66", "5B": "67", "6B": "68", "7B": "69", "8B": "70", "9B": "71", AC: "72", BC: "73", CC: "74", DC: "75", EC: "76", FC: "77", GC: "78", HC: "139", IC: "11.1", JC: "12.1", KC: "15.5", LC: "16.0", MC: "17.0", NC: "18.0", OC: "3", PC: "59", QC: "61", RC: "82", SC: "138", TC: "140", UC: "3.2", VC: "10.1", WC: "15.2-15.3", XC: "15.4", YC: "16.1", ZC: "16.2", aC: "16.3", bC: "16.4", cC: "16.5", dC: "17.1", eC: "17.2", fC: "17.3", gC: "17.4", hC: "17.5", iC: "18.1", jC: "18.2", kC: "18.3", lC: "18.4", mC: "18.5", nC: "11.5", oC: "4.2-4.3", pC: "5.5", qC: "2", rC: "141", sC: "142", tC: "3.5", uC: "3.6", vC: "3.1", wC: "5.1", xC: "6.1", yC: "7.1", zC: "9.1", "0C": "13.1", "1C": "14.1", "2C": "15.1", "3C": "15.6", "4C": "16.6", "5C": "17.6", "6C": "TP", "7C": "9.5-9.6", "8C": "10.0-10.1", "9C": "10.5", AD: "10.6", BD: "11.6", CD: "4.0-4.1", DD: "5.0-5.1", ED: "6.0-6.1", FD: "7.0-7.1", GD: "8.1-8.4", HD: "9.0-9.2", ID: "9.3", JD: "10.0-10.2", KD: "10.3", LD: "11.0-11.2", MD: "11.3-11.4", ND: "12.0-12.1", OD: "12.2-12.5", PD: "13.0-13.1", QD: "13.2", RD: "13.3", SD: "13.4-13.7", TD: "14.0-14.4", UD: "14.5-14.8", VD: "15.0-15.1", WD: "15.6-15.8", XD: "16.6-16.7", YD: "17.6-17.7", ZD: "all", aD: "2.1", bD: "2.2", cD: "2.3", dD: "4.1", eD: "4.4", fD: "4.4.3-4.4.4", gD: "5.0-5.4", hD: "6.2-6.4", iD: "7.2-7.4", jD: "8.2", kD: "9.2", lD: "11.1-11.2", mD: "12.0", nD: "13.0", oD: "14.0", pD: "15.0", qD: "19.0", rD: "14.9", sD: "13.52", tD: "2.5", uD: "3.0-3.1" };
  return browserVersions;
}
var hasRequiredBrowserVersions;
function requireBrowserVersions() {
  if (hasRequiredBrowserVersions) return browserVersions$1;
  hasRequiredBrowserVersions = 1;
  browserVersions$1.browserVersions = requireBrowserVersions$1();
  return browserVersions$1;
}
var agents;
var hasRequiredAgents$1;
function requireAgents$1() {
  if (hasRequiredAgents$1) return agents;
  hasRequiredAgents$1 = 1;
  agents = { A: { A: { K: 0, D: 0, E: 0.0495078, F: 0.0330052, A: 0, B: 0.396062, pC: 0 }, B: "mspC", "K", "D", "E", "F", "A", "B", "", "", ""], E: "IE", F: { pC: 962323200, K: 998870400, D: 1161129600, E: 1237420800, F: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { "0": 3545e-6, C: 0, L: 0, M: 0, G: 0, N: 3545e-6, O: 0, P: 0.088625, Q: 0, H: 0, R: 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0, b: 0.010635, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0, o: 0, p: 0, q: 3545e-6, r: 3545e-6, s: 0.046085, t: 3545e-6, u: 3545e-6, v: 709e-5, w: 709e-5, x: 0.010635, y: 3545e-6, z: 3545e-6, AB: 3545e-6, BB: 3545e-6, CB: 0.03545, DB: 0.010635, EB: 0.010635, FB: 709e-5, GB: 709e-5, HB: 709e-5, IB: 0.017725, JB: 0.017725, KB: 0.010635, LB: 0.01418, MB: 0.017725, NB: 0.038995, OB: 0.02127, PB: 0.031905, QB: 0.088625, RB: 0.63101, SB: 3.64071, I: 0.04963 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "C", "L", "M", "G", "N", "O", "P", "Q", "H", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "I", "", "", ""], E: "Edge", F: { "0": 1694649600, C: 1438128e3, L: 1447286400, M: 1470096e3, G: 1491868800, N: 1508198400, O: 1525046400, P: 1542067200, Q: 1579046400, H: 1581033600, R: 1586736e3, S: 1590019200, T: 1594857600, U: 1598486400, V: 1602201600, W: 1605830400, X: 161136e4, Y: 1614816e3, Z: 1618358400, a: 1622073600, b: 1626912e3, c: 1630627200, d: 1632441600, e: 1634774400, f: 1637539200, g: 1641427200, h: 1643932800, i: 1646265600, j: 1649635200, k: 1651190400, l: 1653955200, m: 1655942400, n: 1659657600, o: 1661990400, p: 1664755200, q: 1666915200, r: 1670198400, s: 1673481600, t: 1675900800, u: 1678665600, v: 1680825600, w: 1683158400, x: 1685664e3, y: 1689897600, z: 1692576e3, AB: 1697155200, BB: 1698969600, CB: 1701993600, DB: 1706227200, EB: 1708732800, FB: 1711152e3, GB: 1713398400, HB: 1715990400, IB: 1718841600, JB: 1721865600, KB: 1724371200, LB: 1726704e3, MB: 1729123200, NB: 1731542400, OB: 1737417600, PB: 1740614400, QB: 1741219200, RB: 1743984e3, SB: 1746316800, I: 1748476800 }, D: { C: "ms", L: "ms", M: "ms", G: "ms", N: "ms", O: "ms", P: "ms" } }, C: { A: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, qC: 0, OC: 0, J: 0, TB: 0, K: 0, D: 0, E: 0, F: 0, A: 0, B: 0.067355, C: 0, L: 0, M: 0, G: 0, N: 0, O: 0, P: 0, UB: 0, VB: 0, WB: 0, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0, dB: 0, eB: 0, fB: 0, gB: 0, hB: 0, iB: 0, jB: 0, kB: 0, lB: 0, mB: 0, nB: 0, oB: 0, pB: 0, qB: 0, rB: 0, sB: 0.031905, tB: 0, uB: 0, vB: 0, wB: 0, xB: 0, yB: 0, PC: 709e-5, zB: 0, QC: 0, "0B": 0, "1B": 0, "2B": 0, "3B": 0, "4B": 0, "5B": 0, "6B": 0, "7B": 0, "8B": 0, "9B": 0, AC: 3545e-6, BC: 0, CC: 0, DC: 0, EC: 0, FC: 0, GC: 0.010635, Q: 0, H: 0, R: 0, RC: 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0, b: 0, c: 0, d: 3545e-6, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0, m: 0, n: 0, o: 0, p: 0, q: 0, r: 0, s: 3545e-6, t: 0, u: 0, v: 0, w: 0, x: 0, y: 0.19852, z: 0, AB: 0.095715, BB: 0, CB: 3545e-6, DB: 0, EB: 0, FB: 0, GB: 0, HB: 0.01418, IB: 0, JB: 3545e-6, KB: 0.08508, LB: 0, MB: 0, NB: 0, OB: 709e-5, PB: 0.010635, QB: 709e-5, RB: 0.01418, SB: 0.031905, I: 0.13471, SC: 1.15213, HC: 0.095715, TC: 0, rC: 0, sC: 0, tC: 0, uC: 0 }, B: "moz", C: ["qC", "OC", "tC", "uC", "J", "TB", "K", "D", "E", "F", "A", "B", "C", "L", "M", "G", "N", "O", "P", "UB", "1", "2", "3", "4", "5", "6", "7", "8", "9", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "PC", "zB", "QC", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "7B", "8B", "9B", "AC", "BC", "CC", "DC", "EC", "FC", "GC", "Q", "H", "R", "RC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "I", "SC", "HC", "TC", "rC", "sC"], E: "Firefox", F: { "0": 1693267200, "1": 1361232e3, "2": 1364860800, "3": 1368489600, "4": 1372118400, "5": 1375747200, "6": 1379376e3, "7": 1386633600, "8": 1391472e3, "9": 1395100800, qC: 1161648e3, OC: 1213660800, tC: 124632e4, uC: 1264032e3, J: 1300752e3, TB: 1308614400, K: 1313452800, D: 1317081600, E: 1317081600, F: 1320710400, A: 1324339200, B: 1327968e3, C: 1331596800, L: 1335225600, M: 1338854400, G: 1342483200, N: 1346112e3, O: 1349740800, P: 1353628800, UB: 1357603200, VB: 1398729600, WB: 1402358400, XB: 1405987200, YB: 1409616e3, ZB: 1413244800, aB: 1417392e3, bB: 1421107200, cB: 1424736e3, dB: 1428278400, eB: 1431475200, fB: 1435881600, gB: 1439251200, hB: 144288e4, iB: 1446508800, jB: 1450137600, kB: 1453852800, lB: 1457395200, mB: 1461628800, nB: 1465257600, oB: 1470096e3, pB: 1474329600, qB: 1479168e3, rB: 1485216e3, sB: 1488844800, tB: 149256e4, uB: 1497312e3, vB: 1502150400, wB: 1506556800, xB: 1510617600, yB: 1516665600, PC: 1520985600, zB: 1525824e3, QC: 1529971200, "0B": 1536105600, "1B": 1540252800, "2B": 1544486400, "3B": 154872e4, "4B": 1552953600, "5B": 1558396800, "6B": 1562630400, "7B": 1567468800, "8B": 1571788800, "9B": 1575331200, AC: 1578355200, BC: 1581379200, CC: 1583798400, DC: 1586304e3, EC: 1588636800, FC: 1591056e3, GC: 1593475200, Q: 1595894400, H: 1598313600, R: 1600732800, RC: 1603152e3, S: 1605571200, T: 1607990400, U: 1611619200, V: 1614038400, W: 1616457600, X: 1618790400, Y: 1622505600, Z: 1626134400, a: 1628553600, b: 1630972800, c: 1633392e3, d: 1635811200, e: 1638835200, f: 1641859200, g: 1644364800, h: 1646697600, i: 1649116800, j: 1651536e3, k: 1653955200, l: 1656374400, m: 1658793600, n: 1661212800, o: 1663632e3, p: 1666051200, q: 1668470400, r: 1670889600, s: 1673913600, t: 1676332800, u: 1678752e3, v: 1681171200, w: 1683590400, x: 1686009600, y: 1688428800, z: 1690848e3, AB: 1695686400, BB: 1698105600, CB: 1700524800, DB: 1702944e3, EB: 1705968e3, FB: 1708387200, GB: 1710806400, HB: 1713225600, IB: 1715644800, JB: 1718064e3, KB: 1720483200, LB: 1722902400, MB: 1725321600, NB: 1727740800, OB: 173016e4, PB: 1732579200, QB: 1736208e3, RB: 1738627200, SB: 1741046400, I: 1743465600, SC: 1745884800, HC: 1748304e3, TC: null, rC: null, sC: null } }, D: { A: { "0": 0.07799, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, J: 0, TB: 0, K: 0, D: 0, E: 0, F: 0, A: 0, B: 0, C: 0, L: 0, M: 0, G: 0, N: 0, O: 0, P: 0, UB: 0, VB: 0, WB: 0, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0, dB: 0, eB: 3545e-6, fB: 0.010635, gB: 0.010635, hB: 0.010635, iB: 0.010635, jB: 0.010635, kB: 0.010635, lB: 0.010635, mB: 0.010635, nB: 0.01418, oB: 0.02127, pB: 0.02127, qB: 0.01418, rB: 0.010635, sB: 0.01418, tB: 0.01418, uB: 0.010635, vB: 0.010635, wB: 0.02127, xB: 0.010635, yB: 0.01418, PC: 0.010635, zB: 0.010635, QC: 3545e-6, "0B": 0, "1B": 0, "2B": 0, "3B": 0, "4B": 0.02127, "5B": 0, "6B": 3545e-6, "7B": 0.01418, "8B": 709e-5, "9B": 0, AC: 0, BC: 709e-5, CC: 709e-5, DC: 709e-5, EC: 3545e-6, FC: 0.010635, GC: 0.01418, Q: 0.08508, H: 0.010635, R: 0.02127, S: 0.053175, T: 3545e-6, U: 709e-5, V: 0.017725, W: 0.04254, X: 0.010635, Y: 709e-5, Z: 709e-5, a: 0.03545, b: 0.010635, c: 0.01418, d: 0.01418, e: 3545e-6, f: 0.010635, g: 0.01418, h: 0.031905, i: 0.02127, j: 0.01418, k: 0.017725, l: 0.01418, m: 0.07799, n: 0.060265, o: 0.010635, p: 0.017725, q: 0.02127, r: 0.038995, s: 0.840165, t: 0.02127, u: 0.03545, v: 0.04963, w: 0.095715, x: 0.04963, y: 0.02127, z: 0.07799, AB: 0.06381, BB: 0.04254, CB: 0.074445, DB: 0.10635, EB: 0.07799, FB: 0.159525, GB: 0.095715, HB: 0.116985, IB: 0.1418, JB: 0.046085, KB: 0.102805, LB: 0.07799, MB: 0.124075, NB: 0.825985, OB: 0.400585, PB: 0.421855, QB: 0.52466, RB: 3.94204, SB: 10.5287, I: 0.379315, SC: 0.01418, HC: 0, TC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "J", "TB", "K", "D", "E", "F", "A", "B", "C", "L", "M", "G", "N", "O", "P", "UB", "1", "2", "3", "4", "5", "6", "7", "8", "9", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "PC", "zB", "QC", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "7B", "8B", "9B", "AC", "BC", "CC", "DC", "EC", "FC", "GC", "Q", "H", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "I", "SC", "HC", "TC"], E: "Chrome", F: { "0": 1694476800, "1": 133704e4, "2": 1340668800, "3": 1343692800, "4": 1348531200, "5": 1352246400, "6": 1357862400, "7": 1361404800, "8": 1364428800, "9": 1369094400, J: 1264377600, TB: 1274745600, K: 1283385600, D: 1287619200, E: 1291248e3, F: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800, L: 1312243200, M: 1316131200, G: 1316131200, N: 1319500800, O: 1323734400, P: 1328659200, UB: 1332892800, VB: 1374105600, WB: 1376956800, XB: 1384214400, YB: 1389657600, ZB: 1392940800, aB: 1397001600, bB: 1400544e3, cB: 1405468800, dB: 1409011200, eB: 141264e4, fB: 1416268800, gB: 1421798400, hB: 1425513600, iB: 1429401600, jB: 143208e4, kB: 1437523200, lB: 1441152e3, mB: 1444780800, nB: 1449014400, oB: 1453248e3, pB: 1456963200, qB: 1460592e3, rB: 1464134400, sB: 1469059200, tB: 1472601600, uB: 1476230400, vB: 1480550400, wB: 1485302400, xB: 1489017600, yB: 149256e4, PC: 1496707200, zB: 1500940800, QC: 1504569600, "0B": 1508198400, "1B": 1512518400, "2B": 1516752e3, "3B": 1520294400, "4B": 1523923200, "5B": 1527552e3, "6B": 1532390400, "7B": 1536019200, "8B": 1539648e3, "9B": 1543968e3, AC: 154872e4, BC: 1552348800, CC: 1555977600, DC: 1559606400, EC: 1564444800, FC: 1568073600, GC: 1571702400, Q: 1575936e3, H: 1580860800, R: 1586304e3, S: 1589846400, T: 1594684800, U: 1598313600, V: 1601942400, W: 1605571200, X: 1611014400, Y: 1614556800, Z: 1618272e3, a: 1621987200, b: 1626739200, c: 1630368e3, d: 1632268800, e: 1634601600, f: 1637020800, g: 1641340800, h: 1643673600, i: 1646092800, j: 1648512e3, k: 1650931200, l: 1653350400, m: 1655769600, n: 1659398400, o: 1661817600, p: 1664236800, q: 1666656e3, r: 166968e4, s: 1673308800, t: 1675728e3, u: 1678147200, v: 1680566400, w: 1682985600, x: 1685404800, y: 1689724800, z: 1692057600, AB: 1696896e3, BB: 1698710400, CB: 1701993600, DB: 1705968e3, EB: 1708387200, FB: 1710806400, GB: 1713225600, HB: 1715644800, IB: 1718064e3, JB: 1721174400, KB: 1724112e3, LB: 1726531200, MB: 1728950400, NB: 1731369600, OB: 1736812800, PB: 1738627200, QB: 1741046400, RB: 1743465600, SB: 1745884800, I: 1748304e3, SC: null, HC: null, TC: null } }, E: { A: { J: 0, TB: 0, K: 0, D: 0, E: 0, F: 0, A: 0, B: 0, C: 0, L: 0, M: 0.01418, G: 0, vC: 0, UC: 0, wC: 0, xC: 0, yC: 0, zC: 0, VC: 0, IC: 709e-5, JC: 709e-5, "0C": 0.02836, "1C": 0.03545, "2C": 0.017725, WC: 3545e-6, XC: 0.010635, KC: 0.010635, "3C": 0.12762, LC: 0.024815, YC: 0.017725, ZC: 0.01418, aC: 0.031905, bC: 0.010635, cC: 0.02127, "4C": 0.18434, MC: 0.010635, dC: 0.11344, eC: 0.017725, fC: 0.017725, gC: 0.038995, hC: 0.067355, "5C": 0.209155, NC: 0.024815, iC: 0.060265, jC: 0.031905, kC: 0.23397, lC: 0.97133, mC: 0.33323, "6C": 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "vC", "UC", "J", "TB", "wC", "K", "xC", "D", "yC", "E", "F", "zC", "A", "VC", "B", "IC", "C", "JC", "L", "0C", "M", "1C", "G", "2C", "WC", "XC", "KC", "3C", "LC", "YC", "ZC", "aC", "bC", "cC", "4C", "MC", "dC", "eC", "fC", "gC", "hC", "5C", "NC", "iC", "jC", "kC", "lC", "mC", "6C", "", ""], E: "Safari", F: { vC: 1205798400, UC: 1226534400, J: 1244419200, TB: 1275868800, wC: 131112e4, K: 1343174400, xC: 13824e5, D: 13824e5, yC: 1410998400, E: 1413417600, F: 1443657600, zC: 1458518400, A: 1474329600, VC: 1490572800, B: 1505779200, IC: 1522281600, C: 1537142400, JC: 1553472e3, L: 1568851200, "0C": 1585008e3, M: 1600214400, "1C": 1619395200, G: 1632096e3, "2C": 1635292800, WC: 1639353600, XC: 1647216e3, KC: 1652745600, "3C": 1658275200, LC: 1662940800, YC: 1666569600, ZC: 1670889600, aC: 1674432e3, bC: 1679875200, cC: 1684368e3, "4C": 1690156800, MC: 1695686400, dC: 1698192e3, eC: 1702252800, fC: 1705881600, gC: 1709596800, hC: 1715558400, "5C": 1722211200, NC: 1726444800, iC: 1730073600, jC: 1733875200, kC: 1737936e3, lC: 1743379200, mC: 1747008e3, "6C": null } }, F: { A: { "0": 0.02127, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, F: 0, B: 0, C: 0, G: 0, N: 0, O: 0, P: 0, UB: 0, VB: 0, WB: 0, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0, dB: 0, eB: 0, fB: 0, gB: 3545e-6, hB: 0, iB: 0, jB: 0, kB: 0, lB: 0, mB: 709e-5, nB: 0, oB: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0, uB: 0, vB: 0, wB: 0, xB: 0, yB: 0, zB: 0, "0B": 0, "1B": 0, "2B": 0, "3B": 0, "4B": 0, "5B": 0, "6B": 0, "7B": 0, "8B": 0, "9B": 0, AC: 0, BC: 0, CC: 0, DC: 0, EC: 0, FC: 0, GC: 0, Q: 0, H: 0, R: 0, RC: 0, S: 0, T: 0, U: 0, V: 0, W: 0, X: 3545e-6, Y: 0.038995, Z: 0, a: 0, b: 0, c: 0, d: 0, e: 0.031905, f: 0, g: 0, h: 0, i: 0, j: 0, k: 0, l: 0.010635, m: 0, n: 0, o: 0, p: 0, q: 0, r: 0, s: 0, t: 0, u: 0, v: 0, w: 0, x: 0, y: 0, z: 0, "7C": 0, "8C": 0, "9C": 0, AD: 0, IC: 0, nC: 0, BD: 0, JC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "F", "7C", "8C", "9C", "AD", "B", "IC", "nC", "BD", "C", "JC", "G", "N", "O", "P", "UB", "1", "2", "3", "4", "5", "6", "7", "8", "9", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "7B", "8B", "9B", "AC", "BC", "CC", "DC", "EC", "FC", "GC", "Q", "H", "R", "RC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "", "", ""], E: "Opera", F: { "0": 1739404800, "1": 1393891200, "2": 1399334400, "3": 1401753600, "4": 1405987200, "5": 1409616e3, "6": 1413331200, "7": 1417132800, "8": 1422316800, "9": 1425945600, F: 1150761600, "7C": 1223424e3, "8C": 1251763200, "9C": 1267488e3, AD: 1277942400, B: 1292457600, IC: 1302566400, nC: 1309219200, BD: 1323129600, C: 1323129600, JC: 1352073600, G: 1372723200, N: 1377561600, O: 1381104e3, P: 1386288e3, UB: 1390867200, VB: 1430179200, WB: 1433808e3, XB: 1438646400, YB: 1442448e3, ZB: 1445904e3, aB: 1449100800, bB: 1454371200, cB: 1457308800, dB: 146232e4, eB: 1465344e3, fB: 1470096e3, gB: 1474329600, hB: 1477267200, iB: 1481587200, jB: 1486425600, kB: 1490054400, lB: 1494374400, mB: 1498003200, nB: 1502236800, oB: 1506470400, pB: 1510099200, qB: 1515024e3, rB: 1517961600, sB: 1521676800, tB: 1525910400, uB: 1530144e3, vB: 1534982400, wB: 1537833600, xB: 1543363200, yB: 1548201600, zB: 1554768e3, "0B": 1561593600, "1B": 1566259200, "2B": 1570406400, "3B": 1573689600, "4B": 1578441600, "5B": 1583971200, "6B": 1587513600, "7B": 1592956800, "8B": 1595894400, "9B": 1600128e3, AC: 1603238400, BC: 161352e4, CC: 1612224e3, DC: 1616544e3, EC: 1619568e3, FC: 1623715200, GC: 1627948800, Q: 1631577600, H: 1633392e3, R: 1635984e3, RC: 1638403200, S: 1642550400, T: 1644969600, U: 1647993600, V: 1650412800, W: 1652745600, X: 1654646400, Y: 1657152e3, Z: 1660780800, a: 1663113600, b: 1668816e3, c: 1668643200, d: 1671062400, e: 1675209600, f: 1677024e3, g: 1679529600, h: 1681948800, i: 1684195200, j: 1687219200, k: 1690329600, l: 1692748800, m: 1696204800, n: 169992e4, o: 169992e4, p: 1702944e3, q: 1707264e3, r: 1710115200, s: 1711497600, t: 1716336e3, u: 1719273600, v: 1721088e3, w: 1724284800, x: 1727222400, y: 1732665600, z: 1736294400 }, D: { F: "o", B: "o", C: "o", "7C": "o", "8C": "o", "9C": "o", AD: "o", IC: "o", nC: "o", BD: "o", JC: "o" } }, G: { A: { E: 0, UC: 0, CD: 0, oC: 284924e-8, DD: 0, ED: 569847e-8, FD: 569847e-8, GD: 0, HD: 284924e-8, ID: 0.0170954, JD: 142462e-8, KD: 0.0270678, LD: 0.239336, MD: 997233e-8, ND: 284924e-8, OD: 0.102573, PD: 142462e-8, QD: 427386e-8, RD: 427386e-8, SD: 0.0170954, TD: 0.108271, UD: 0.0427386, VD: 0.0270678, WC: 0.0270678, XC: 0.0313416, KC: 0.0370401, WD: 0.444481, LC: 0.0612586, YC: 0.131065, ZC: 0.0669571, aC: 0.116819, bC: 0.0270678, cC: 0.0470124, XD: 0.557026, MC: 0.0341908, dC: 0.0569847, eC: 0.0427386, fC: 0.0641078, gC: 0.131065, hC: 0.245034, YD: 0.678118, NC: 0.173803, iC: 0.423112, jC: 0.212268, kC: 1.56138, lC: 6.62448, mC: 1.82351 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "UC", "CD", "oC", "DD", "ED", "FD", "E", "GD", "HD", "ID", "JD", "KD", "LD", "MD", "ND", "OD", "PD", "QD", "RD", "SD", "TD", "UD", "VD", "WC", "XC", "KC", "WD", "LC", "YC", "ZC", "aC", "bC", "cC", "XD", "MC", "dC", "eC", "fC", "gC", "hC", "YD", "NC", "iC", "jC", "kC", "lC", "mC", "", "", ""], E: "Safari on iOS", F: { UC: 1270252800, CD: 1283904e3, oC: 1299628800, DD: 1331078400, ED: 1359331200, FD: 1394409600, E: 1410912e3, GD: 1413763200, HD: 1442361600, ID: 1458518400, JD: 1473724800, KD: 1490572800, LD: 1505779200, MD: 1522281600, ND: 1537142400, OD: 1553472e3, PD: 1568851200, QD: 1572220800, RD: 1580169600, SD: 1585008e3, TD: 1600214400, UD: 1619395200, VD: 1632096e3, WC: 1639353600, XC: 1647216e3, KC: 1652659200, WD: 1658275200, LC: 1662940800, YC: 1666569600, ZC: 1670889600, aC: 1674432e3, bC: 1679875200, cC: 1684368e3, XD: 1690156800, MC: 1694995200, dC: 1698192e3, eC: 1702252800, fC: 1705881600, gC: 1709596800, hC: 1715558400, YD: 1722211200, NC: 1726444800, iC: 1730073600, jC: 1733875200, kC: 1737936e3, lC: 1743379200, mC: 1747008e3 } }, H: { A: { ZD: 0.05 }, B: "opera Mini", F: { ZD: 1426464e3 } }, I: { A: { OC: 0, J: 0, I: 0.799139, aD: 0, bD: 0, cD: 0, dD: 0, oC: 160084e-9, eD: 0, fD: 640336e-9 }, B: "webkitaD", "bD", "cD", "OC", "J", "dD", "oC", "eD", "fD", "I", "", "", ""], E: "Android Browser", F: { aD: 1256515200, bD: 1274313600, cD: 1291593600, OC: 1298332800, J: 1318896e3, dD: 1341792e3, oC: 1374624e3, eD: 1386547200, fD: 1401667200, I: 1748304e3 } }, J: { A: { D: 0, A: 0 }, B: "webkitlackberry Browser", F: { D: 1325376e3, A: 1359504e3 } }, K: { A: { A: 0, B: 0, C: 0, H: 0.89243, IC: 0, nC: 0, JC: 0 }, B: "onC", "C", "JC", "H", "", "", ""], E: "Opera Mobile", F: { A: 1287100800, B: 1300752e3, IC: 1314835200, nC: 1318291200, C: 1330300800, JC: 1349740800, H: 1709769600 }, D: { H: "webkit" } }, L: { A: { I: 46.4714 }, B: "webkithrome for Android", F: { I: 1748304e3 } }, M: { A: { HC: 0.316295 }, B: "mozirefox for Android", F: { HC: 1748304e3 } }, N: { A: { A: 0, B: 0 }, B: "msobile", F: { A: 1340150400, B: 1353456e3 } }, O: { A: { KC: 0.80042 }, B: "webkitrowser for Android", F: { KC: 1710115200 }, D: { KC: "webkit" } }, P: { A: { "1": 0, "2": 0.0219536, "3": 0.0219536, "4": 0.0329303, "5": 0.0329303, "6": 0.0439071, "7": 0.0658607, "8": 0.406141, "9": 1.5148, J: 0, gD: 0, hD: 0, iD: 0.0109768, jD: 0, kD: 0, VC: 0, lD: 0, mD: 0, nD: 0, oD: 0, pD: 0, LC: 0, MC: 0.0109768, NC: 0, qD: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "J", "gD", "hD", "iD", "jD", "kD", "VC", "lD", "mD", "nD", "oD", "pD", "LC", "MC", "NC", "qD", "1", "2", "3", "4", "5", "6", "7", "8", "9", "", "", ""], E: "Samsung Internet", F: { "1": 1677369600, "2": 1684454400, "3": 1689292800, "4": 1697587200, "5": 1711497600, "6": 1715126400, "7": 1717718400, "8": 1725667200, "9": 1746057600, J: 1461024e3, gD: 1481846400, hD: 1509408e3, iD: 1528329600, jD: 1546128e3, kD: 1554163200, VC: 1567900800, lD: 1582588800, mD: 1593475200, nD: 1605657600, oD: 1618531200, pD: 1629072e3, LC: 1640736e3, MC: 1651708800, NC: 1659657600, qD: 1667260800 } }, Q: { A: { rD: 0.20656 }, B: "webkitrD", "", "", ""], E: "QQ Browser", F: { rD: 1710288e3 } }, R: { A: { sD: 0 }, B: "webkitsD", "", "", ""], E: "Baidu Browser", F: { sD: 1710201600 } }, S: { A: { tD: 0.01291, uD: 0 }, B: "moztD", "uD", "", "", ""], E: "KaiOS Browser", F: { tD: 1527811200, uD: 1631664e3 } } };
  return agents;
}
var hasRequiredAgents;
function requireAgents() {
  if (hasRequiredAgents) return agents$1;
  hasRequiredAgents = 1;
  const browsers2 = requireBrowsers().browsers;
  const versions2 = requireBrowserVersions().browserVersions;
  const agentsData = requireAgents$1();
  function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version) => {
      usage[versions2[version]] = versionsData[version];
      return usage;
    }, {});
  }
  agents$1.agents = Object.keys(agentsData).reduce((map, key) => {
    let versionsData = agentsData[key];
    map[browsers2[key]] = Object.keys(versionsData).reduce((data, entry) => {
      if (entry === "A") {
        data.usage_global = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "C") {
        data.versions = versionsData[entry].reduce((list, version) => {
          if (version === "") {
            list.push(null);
          } else {
            list.push(versions2[version]);
          }
          return list;
        }, []);
      } else if (entry === "D") {
        data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "E") {
        data.browser = versionsData[entry];
      } else if (entry === "F") {
        data.release_date = Object.keys(versionsData[entry]).reduce(
          (map2, key2) => {
            map2[versions2[key2]] = versionsData[entry][key2];
            return map2;
          },
          {}
        );
      } else {
        data.prefix = versionsData[entry];
      }
      return data;
    }, {});
    return map;
  }, {});
  return agents$1;
}
var versions;
var hasRequiredVersions;
function requireVersions() {
  if (hasRequiredVersions) return versions;
  hasRequiredVersions = 1;
  versions = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "24.5": "112",
    "24.6": "112",
    "24.7": "112",
    "24.8": "112",
    "25.0": "114",
    "25.1": "114",
    "25.2": "114",
    "25.3": "114",
    "25.4": "114",
    "25.5": "114",
    "25.6": "114",
    "25.7": "114",
    "25.8": "114",
    "25.9": "114",
    "26.0": "116",
    "26.1": "116",
    "26.2": "116",
    "26.3": "116",
    "26.4": "116",
    "26.5": "116",
    "26.6": "116",
    "27.0": "118",
    "27.1": "118",
    "27.2": "118",
    "27.3": "118",
    "28.0": "120",
    "28.1": "120",
    "28.2": "120",
    "28.3": "120",
    "29.0": "122",
    "29.1": "122",
    "29.2": "122",
    "29.3": "122",
    "29.4": "122",
    "30.0": "124",
    "30.1": "124",
    "30.2": "124",
    "30.3": "124",
    "30.4": "124",
    "30.5": "124",
    "31.0": "126",
    "31.1": "126",
    "31.2": "126",
    "31.3": "126",
    "31.4": "126",
    "31.5": "126",
    "31.6": "126",
    "31.7": "126",
    "32.0": "128",
    "32.1": "128",
    "32.2": "128",
    "32.3": "128",
    "33.0": "130",
    "33.1": "130",
    "33.2": "130",
    "33.3": "130",
    "33.4": "130",
    "34.0": "132",
    "34.1": "132",
    "34.2": "132",
    "34.3": "132",
    "34.4": "132",
    "34.5": "132",
    "35.0": "134",
    "35.1": "134",
    "35.2": "134",
    "35.3": "134",
    "35.4": "134",
    "35.5": "134",
    "36.0": "136",
    "36.1": "136",
    "36.2": "136",
    "36.3": "136",
    "36.4": "136",
    "37.0": "138"
  };
  return versions;
}
const v4 = { "start": "2015-09-08", "lts": "2015-10-12", "maintenance": "2017-04-01", "end": "2018-04-30", "codename": "Argon" };
const v5 = { "start": "2015-10-29", "maintenance": "2016-04-30", "end": "2016-06-30" };
const v6 = { "start": "2016-04-26", "lts": "2016-10-18", "maintenance": "2018-04-30", "end": "2019-04-30", "codename": "Boron" };
const v7 = { "start": "2016-10-25", "maintenance": "2017-04-30", "end": "2017-06-30" };
const v8 = { "start": "2017-05-30", "lts": "2017-10-31", "maintenance": "2019-01-01", "end": "2019-12-31", "codename": "Carbon" };
const v9 = { "start": "2017-10-01", "maintenance": "2018-04-01", "end": "2018-06-30" };
const v10 = { "start": "2018-04-24", "lts": "2018-10-30", "maintenance": "2020-05-19", "end": "2021-04-30", "codename": "Dubnium" };
const v11 = { "start": "2018-10-23", "maintenance": "2019-04-22", "end": "2019-06-01" };
const v12 = { "start": "2019-04-23", "lts": "2019-10-21", "maintenance": "2020-11-30", "end": "2022-04-30", "codename": "Erbium" };
const v13 = { "start": "2019-10-22", "maintenance": "2020-04-01", "end": "2020-06-01" };
const v14 = { "start": "2020-04-21", "lts": "2020-10-27", "maintenance": "2021-10-19", "end": "2023-04-30", "codename": "Fermium" };
const v15 = { "start": "2020-10-20", "maintenance": "2021-04-01", "end": "2021-06-01" };
const v16 = { "start": "2021-04-20", "lts": "2021-10-26", "maintenance": "2022-10-18", "end": "2023-09-11", "codename": "Gallium" };
const v17 = { "start": "2021-10-19", "maintenance": "2022-04-01", "end": "2022-06-01" };
const v18 = { "start": "2022-04-19", "lts": "2022-10-25", "maintenance": "2023-10-18", "end": "2025-04-30", "codename": "Hydrogen" };
const v19 = { "start": "2022-10-18", "maintenance": "2023-04-01", "end": "2023-06-01" };
const v20 = { "start": "2023-04-18", "lts": "2023-10-24", "maintenance": "2024-10-22", "end": "2026-04-30", "codename": "Iron" };
const v21 = { "start": "2023-10-17", "maintenance": "2024-04-01", "end": "2024-06-01" };
const v22 = { "start": "2024-04-24", "lts": "2024-10-29", "maintenance": "2025-10-21", "end": "2027-04-30", "codename": "Jod" };
const v23 = { "start": "2024-10-16", "maintenance": "2025-04-01", "end": "2025-06-01" };
const v24 = { "start": "2025-04-22", "lts": "2025-10-28", "maintenance": "2026-10-20", "end": "2028-04-30", "codename": "" };
const require$$3 = {
  "v0.8": { "start": "2012-06-25", "end": "2014-07-31" },
  "v0.10": { "start": "2013-03-11", "end": "2016-10-31" },
  "v0.12": { "start": "2015-02-06", "end": "2016-12-31" },
  v4,
  v5,
  v6,
  v7,
  v8,
  v9,
  v10,
  v11,
  v12,
  v13,
  v14,
  v15,
  v16,
  v17,
  v18,
  v19,
  v20,
  v21,
  v22,
  v23,
  v24
};
var error;
var hasRequiredError;
function requireError() {
  if (hasRequiredError) return error;
  hasRequiredError = 1;
  function BrowserslistError(message) {
    this.name = "BrowserslistError";
    this.message = message;
    this.browserslist = true;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, BrowserslistError);
    }
  }
  BrowserslistError.prototype = Error.prototype;
  error = BrowserslistError;
  return error;
}
var browser;
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser;
  hasRequiredBrowser = 1;
  var BrowserslistError = requireError();
  function noop() {
  }
  browser = {
    loadQueries: function loadQueries() {
      throw new BrowserslistError(
        "Sharable configs are not supported in client-side build of Browserslist"
      );
    },
    getStat: function getStat(opts) {
      return opts.stats;
    },
    loadConfig: function loadConfig(opts) {
      if (opts.config) {
        throw new BrowserslistError(
          "Browserslist config are not supported in client-side build"
        );
      }
    },
    loadCountry: function loadCountry() {
      throw new BrowserslistError(
        "Country statistics are not supported in client-side build of Browserslist"
      );
    },
    loadFeature: function loadFeature() {
      throw new BrowserslistError(
        "Supports queries are not available in client-side build of Browserslist"
      );
    },
    currentNode: function currentNode(resolve, context2) {
      return resolve(["maintained node versions"], context2)[0];
    },
    parseConfig: noop,
    readConfig: noop,
    findConfig: noop,
    findConfigFile: noop,
    clearCaches: noop,
    oldDataWarning: noop,
    env: {}
  };
  return browser;
}
var parse$2;
var hasRequiredParse$1;
function requireParse$1() {
  if (hasRequiredParse$1) return parse$2;
  hasRequiredParse$1 = 1;
  var AND_REGEXP = /^\s+and\s+(.*)/i;
  var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
  function flatten(array) {
    if (!Array.isArray(array)) return [array];
    return array.reduce(function(a, b) {
      return a.concat(flatten(b));
    }, []);
  }
  function find(string2, predicate) {
    for (var max = string2.length, n = 1; n <= max; n++) {
      var parsed = string2.substr(-n, n);
      if (predicate(parsed, n, max)) {
        return string2.slice(0, -n);
      }
    }
    return "";
  }
  function matchQuery(all, query) {
    var node2 = { query };
    if (query.indexOf("not ") === 0) {
      node2.not = true;
      query = query.slice(4);
    }
    for (var name in all) {
      var type = all[name];
      var match = query.match(type.regexp);
      if (match) {
        node2.type = name;
        for (var i = 0; i < type.matches.length; i++) {
          node2[type.matches[i]] = match[i + 1];
        }
        return node2;
      }
    }
    node2.type = "unknown";
    return node2;
  }
  function matchBlock(all, string2, qs) {
    var node2;
    return find(string2, function(parsed, n, max) {
      if (AND_REGEXP.test(parsed)) {
        node2 = matchQuery(all, parsed.match(AND_REGEXP)[1]);
        node2.compose = "and";
        qs.unshift(node2);
        return true;
      } else if (OR_REGEXP.test(parsed)) {
        node2 = matchQuery(all, parsed.match(OR_REGEXP)[1]);
        node2.compose = "or";
        qs.unshift(node2);
        return true;
      } else if (n === max) {
        node2 = matchQuery(all, parsed.trim());
        node2.compose = "or";
        qs.unshift(node2);
        return true;
      }
      return false;
    });
  }
  parse$2 = function parse2(all, queries) {
    if (!Array.isArray(queries)) queries = [queries];
    return flatten(
      queries.map(function(block) {
        var qs = [];
        do {
          block = matchBlock(all, block, qs);
        } while (block);
        return qs;
      })
    );
  };
  return parse$2;
}
var browserslist_1;
var hasRequiredBrowserslist;
function requireBrowserslist() {
  if (hasRequiredBrowserslist) return browserslist_1;
  hasRequiredBrowserslist = 1;
  var jsReleases = require$$0$2;
  var agents2 = requireAgents().agents;
  var e2c = requireVersions();
  var jsEOL = require$$3;
  var path2 = require$$1;
  var BrowserslistError = requireError();
  var env = requireBrowser();
  var parseWithoutCache = requireParse$1();
  var YEAR = 365.259641 * 24 * 60 * 60 * 1e3;
  var ANDROID_EVERGREEN_FIRST = "37";
  var OP_MOB_BLINK_FIRST = 14;
  function isVersionsMatch(versionA, versionB) {
    return (versionA + ".").indexOf(versionB + ".") === 0;
  }
  function isEolReleased(name) {
    var version = name.slice(1);
    return browserslist.nodeVersions.some(function(i) {
      return isVersionsMatch(i, version);
    });
  }
  function normalize(versions2) {
    return versions2.filter(function(version) {
      return typeof version === "string";
    });
  }
  function normalizeElectron(version) {
    var versionToUse = version;
    if (version.split(".").length === 3) {
      versionToUse = version.split(".").slice(0, -1).join(".");
    }
    return versionToUse;
  }
  function nameMapper(name) {
    return function mapName(version) {
      return name + " " + version;
    };
  }
  function getMajor(version) {
    return parseInt(version.split(".")[0]);
  }
  function getMajorVersions(released, number) {
    if (released.length === 0) return [];
    var majorVersions = uniq(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number];
    if (!minimum) {
      return released;
    }
    var selected = [];
    for (var i = released.length - 1; i >= 0; i--) {
      if (minimum > getMajor(released[i])) break;
      selected.unshift(released[i]);
    }
    return selected;
  }
  function uniq(array) {
    var filtered = [];
    for (var i = 0; i < array.length; i++) {
      if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
    }
    return filtered;
  }
  function fillUsage(result, name, data) {
    for (var i in data) {
      result[name + " " + i] = data[i];
    }
  }
  function generateFilter(sign, version) {
    version = parseFloat(version);
    if (sign === ">") {
      return function(v) {
        return parseLatestFloat(v) > version;
      };
    } else if (sign === ">=") {
      return function(v) {
        return parseLatestFloat(v) >= version;
      };
    } else if (sign === "<") {
      return function(v) {
        return parseFloat(v) < version;
      };
    } else {
      return function(v) {
        return parseFloat(v) <= version;
      };
    }
    function parseLatestFloat(v) {
      return parseFloat(v.split("-")[1] || v);
    }
  }
  function generateSemverFilter(sign, version) {
    version = version.split(".").map(parseSimpleInt);
    version[1] = version[1] || 0;
    version[2] = version[2] || 0;
    if (sign === ">") {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version) > 0;
      };
    } else if (sign === ">=") {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version) >= 0;
      };
    } else if (sign === "<") {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version, v) > 0;
      };
    } else {
      return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version, v) >= 0;
      };
    }
  }
  function parseSimpleInt(x2) {
    return parseInt(x2);
  }
  function compare(a, b) {
    if (a < b) return -1;
    if (a > b) return 1;
    return 0;
  }
  function compareSemver(a, b) {
    return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || "0"), parseInt(b[1] || "0")) || compare(parseInt(a[2] || "0"), parseInt(b[2] || "0"));
  }
  function semverFilterLoose(operator, range) {
    range = range.split(".").map(parseSimpleInt);
    if (typeof range[1] === "undefined") {
      range[1] = "x";
    }
    switch (operator) {
      case "<=":
        return function(version) {
          version = version.split(".").map(parseSimpleInt);
          return compareSemverLoose(version, range) <= 0;
        };
      case ">=":
      default:
        return function(version) {
          version = version.split(".").map(parseSimpleInt);
          return compareSemverLoose(version, range) >= 0;
        };
    }
  }
  function compareSemverLoose(version, range) {
    if (version[0] !== range[0]) {
      return version[0] < range[0] ? -1 : 1;
    }
    if (range[1] === "x") {
      return 0;
    }
    if (version[1] !== range[1]) {
      return version[1] < range[1] ? -1 : 1;
    }
    return 0;
  }
  function resolveVersion(data, version) {
    if (data.versions.indexOf(version) !== -1) {
      return version;
    } else if (browserslist.versionAliases[data.name][version]) {
      return browserslist.versionAliases[data.name][version];
    } else {
      return false;
    }
  }
  function normalizeVersion(data, version) {
    var resolved = resolveVersion(data, version);
    if (resolved) {
      return resolved;
    } else if (data.versions.length === 1) {
      return data.versions[0];
    } else {
      return false;
    }
  }
  function filterByYear(since, context2) {
    since = since / 1e3;
    return Object.keys(agents2).reduce(function(selected, name) {
      var data = byName(name, context2);
      if (!data) return selected;
      var versions2 = Object.keys(data.releaseDate).filter(function(v) {
        var date = data.releaseDate[v];
        return date !== null && date >= since;
      });
      return selected.concat(versions2.map(nameMapper(data.name)));
    }, []);
  }
  function cloneData(data) {
    return {
      name: data.name,
      versions: data.versions,
      released: data.released,
      releaseDate: data.releaseDate
    };
  }
  function byName(name, context2) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context2.mobileToDesktop && browserslist.desktopNames[name]) {
      var desktop = browserslist.data[browserslist.desktopNames[name]];
      if (name === "android") {
        return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
      } else {
        var cloned = cloneData(desktop);
        cloned.name = name;
        return cloned;
      }
    }
    return browserslist.data[name];
  }
  function normalizeAndroidVersions(androidVersions, chromeVersions) {
    var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
    return androidVersions.filter(function(version) {
      return /^(?:[2-4]\.|[34]$)/.test(version);
    }).concat(chromeVersions.slice(iFirstEvergreen));
  }
  function copyObject(obj) {
    var copy = {};
    for (var key in obj) {
      copy[key] = obj[key];
    }
    return copy;
  }
  function normalizeAndroidData(android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    android.releaseDate = copyObject(android.releaseDate);
    android.released.forEach(function(v) {
      if (android.releaseDate[v] === void 0) {
        android.releaseDate[v] = chrome.releaseDate[v];
      }
    });
    return android;
  }
  function checkName(name, context2) {
    var data = byName(name, context2);
    if (!data) throw new BrowserslistError("Unknown browser " + name);
    return data;
  }
  function unknownQuery(query) {
    return new BrowserslistError(
      "Unknown browser query `" + query + "`. Maybe you are using old Browserslist or made typo in query."
    );
  }
  function filterJumps(list, name, nVersions, context2) {
    var jump = 1;
    switch (name) {
      case "android":
        if (context2.mobileToDesktop) return list;
        var released = browserslist.data.chrome.released;
        jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
        break;
      case "op_mob":
        var latest = browserslist.data.op_mob.released.slice(-1)[0];
        jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;
        break;
      default:
        return list;
    }
    if (nVersions <= jump) {
      return list.slice(-1);
    }
    return list.slice(jump - 1 - nVersions);
  }
  function isSupported(flags, withPartial) {
    return typeof flags === "string" && (flags.indexOf("y") >= 0 || withPartial && flags.indexOf("a") >= 0);
  }
  function resolve(queries, context2) {
    return parseQueries(queries).reduce(function(result, node2, index) {
      if (node2.not && index === 0) {
        throw new BrowserslistError(
          "Write any browsers query (for instance, `defaults`) before `" + node2.query + "`"
        );
      }
      var type = QUERIES[node2.type];
      var array = type.select.call(browserslist, context2, node2).map(function(j) {
        var parts = j.split(" ");
        if (parts[1] === "0") {
          return parts[0] + " " + byName(parts[0], context2).versions[0];
        } else {
          return j;
        }
      });
      if (node2.compose === "and") {
        if (node2.not) {
          return result.filter(function(j) {
            return array.indexOf(j) === -1;
          });
        } else {
          return result.filter(function(j) {
            return array.indexOf(j) !== -1;
          });
        }
      } else {
        if (node2.not) {
          var filter = {};
          array.forEach(function(j) {
            filter[j] = true;
          });
          return result.filter(function(j) {
            return !filter[j];
          });
        }
        return result.concat(array);
      }
    }, []);
  }
  function prepareOpts(opts) {
    if (typeof opts === "undefined") opts = {};
    if (typeof opts.path === "undefined") {
      opts.path = path2.resolve ? path2.resolve(".") : ".";
    }
    return opts;
  }
  function prepareQueries(queries, opts) {
    if (typeof queries === "undefined" || queries === null) {
      var config2 = browserslist.loadConfig(opts);
      if (config2) {
        queries = config2;
      } else {
        queries = browserslist.defaults;
      }
    }
    return queries;
  }
  function checkQueries(queries) {
    if (!(typeof queries === "string" || Array.isArray(queries))) {
      throw new BrowserslistError(
        "Browser queries must be an array or string. Got " + typeof queries + "."
      );
    }
  }
  var cache2 = {};
  var parseCache = {};
  function browserslist(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    var needsPath = parseQueries(queries).some(function(node2) {
      return QUERIES[node2.type].needsPath;
    });
    var context2 = {
      ignoreUnknownVersions: opts.ignoreUnknownVersions,
      dangerousExtend: opts.dangerousExtend,
      mobileToDesktop: opts.mobileToDesktop,
      env: opts.env
    };
    if (needsPath) {
      context2.path = opts.path;
    }
    env.oldDataWarning(browserslist.data);
    var stats = env.getStat(opts, browserslist.data);
    if (stats) {
      context2.customUsage = {};
      for (var browser2 in stats) {
        fillUsage(context2.customUsage, browser2, stats[browser2]);
      }
    }
    var cacheKey = JSON.stringify([queries, context2]);
    if (cache2[cacheKey]) return cache2[cacheKey];
    var result = uniq(resolve(queries, context2)).sort(function(name1, name2) {
      name1 = name1.split(" ");
      name2 = name2.split(" ");
      if (name1[0] === name2[0]) {
        var version1 = name1[1].split("-")[0];
        var version2 = name2[1].split("-")[0];
        return compareSemver(version2.split("."), version1.split("."));
      } else {
        return compare(name1[0], name2[0]);
      }
    });
    if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
      cache2[cacheKey] = result;
    }
    return result;
  }
  function parseQueries(queries) {
    var cacheKey = JSON.stringify(queries);
    if (cacheKey in parseCache) return parseCache[cacheKey];
    var result = parseWithoutCache(QUERIES, queries);
    if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
      parseCache[cacheKey] = result;
    }
    return result;
  }
  function loadCustomUsage(context2, config2) {
    var stats = env.loadStat(context2, config2, browserslist.data);
    if (stats) {
      context2.customUsage = {};
      for (var browser2 in stats) {
        fillUsage(context2.customUsage, browser2, stats[browser2]);
      }
    }
    if (!context2.customUsage) {
      throw new BrowserslistError("Custom usage statistics was not provided");
    }
    return context2.customUsage;
  }
  browserslist.parse = function(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    return parseQueries(queries);
  };
  browserslist.cache = {};
  browserslist.data = {};
  browserslist.usage = {
    global: {},
    custom: null
  };
  browserslist.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];
  browserslist.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
  };
  browserslist.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    android: "chrome"
    // has extra processing logic
  };
  browserslist.versionAliases = {};
  browserslist.clearCaches = env.clearCaches;
  browserslist.parseConfig = env.parseConfig;
  browserslist.readConfig = env.readConfig;
  browserslist.findConfigFile = env.findConfigFile;
  browserslist.findConfig = env.findConfig;
  browserslist.loadConfig = env.loadConfig;
  browserslist.coverage = function(browsers2, stats) {
    var data;
    if (typeof stats === "undefined") {
      data = browserslist.usage.global;
    } else if (stats === "my stats") {
      var opts = {};
      opts.path = path2.resolve ? path2.resolve(".") : ".";
      var customStats = env.getStat(opts);
      if (!customStats) {
        throw new BrowserslistError("Custom usage statistics was not provided");
      }
      data = {};
      for (var browser2 in customStats) {
        fillUsage(data, browser2, customStats[browser2]);
      }
    } else if (typeof stats === "string") {
      if (stats.length > 2) {
        stats = stats.toLowerCase();
      } else {
        stats = stats.toUpperCase();
      }
      env.loadCountry(browserslist.usage, stats, browserslist.data);
      data = browserslist.usage[stats];
    } else {
      if ("dataByBrowser" in stats) {
        stats = stats.dataByBrowser;
      }
      data = {};
      for (var name in stats) {
        for (var version in stats[name]) {
          data[name + " " + version] = stats[name][version];
        }
      }
    }
    return browsers2.reduce(function(all, i) {
      var usage = data[i];
      if (usage === void 0) {
        usage = data[i.replace(/ \S+$/, " 0")];
      }
      return all + (usage || 0);
    }, 0);
  };
  function nodeQuery(context2, node2) {
    var matched = browserslist.nodeVersions.filter(function(i) {
      return isVersionsMatch(i, node2.version);
    });
    if (matched.length === 0) {
      if (context2.ignoreUnknownVersions) {
        return [];
      } else {
        throw new BrowserslistError(
          "Unknown version " + node2.version + " of Node.js"
        );
      }
    }
    return ["node " + matched[matched.length - 1]];
  }
  function sinceQuery(context2, node2) {
    var year = parseInt(node2.year);
    var month = parseInt(node2.month || "01") - 1;
    var day = parseInt(node2.day || "01");
    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context2);
  }
  function coverQuery(context2, node2) {
    var coverage = parseFloat(node2.coverage);
    var usage = browserslist.usage.global;
    if (node2.place) {
      if (node2.place.match(/^my\s+stats$/i)) {
        if (!context2.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        usage = context2.customUsage;
      } else {
        var place;
        if (node2.place.length === 2) {
          place = node2.place.toUpperCase();
        } else {
          place = node2.place.toLowerCase();
        }
        env.loadCountry(browserslist.usage, place, browserslist.data);
        usage = browserslist.usage[place];
      }
    } else if (node2.config) {
      usage = loadCustomUsage(context2, node2.config);
    }
    var versions2 = Object.keys(usage).sort(function(a, b) {
      return usage[b] - usage[a];
    });
    var covered = 0;
    var result = [];
    var version;
    for (var i = 0; i < versions2.length; i++) {
      version = versions2[i];
      if (usage[version] === 0) break;
      covered += usage[version];
      result.push(version);
      if (covered >= coverage) break;
    }
    return result;
  }
  var QUERIES = {
    last_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: function(context2, node2) {
        return Object.keys(agents2).reduce(function(selected, name) {
          var data = byName(name, context2);
          if (!data) return selected;
          var list = getMajorVersions(data.released, node2.versions);
          list = list.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node2.versions, context2);
          return selected.concat(list);
        }, []);
      }
    },
    last_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: function(context2, node2) {
        return Object.keys(agents2).reduce(function(selected, name) {
          var data = byName(name, context2);
          if (!data) return selected;
          var list = data.released.slice(-node2.versions);
          list = list.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node2.versions, context2);
          return selected.concat(list);
        }, []);
      }
    },
    last_electron_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: function(context2, node2) {
        var validVersions = getMajorVersions(Object.keys(e2c), node2.versions);
        return validVersions.map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    last_node_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
      select: function(context2, node2) {
        return getMajorVersions(browserslist.nodeVersions, node2.versions).map(
          function(version) {
            return "node " + version;
          }
        );
      }
    },
    last_browser_major_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        var validVersions = getMajorVersions(data.released, node2.versions);
        var list = validVersions.map(nameMapper(data.name));
        list = filterJumps(list, data.name, node2.versions, context2);
        return list;
      }
    },
    last_electron_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: function(context2, node2) {
        return Object.keys(e2c).slice(-node2.versions).map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    last_node_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
      select: function(context2, node2) {
        return browserslist.nodeVersions.slice(-node2.versions).map(function(version) {
          return "node " + version;
        });
      }
    },
    last_browser_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        var list = data.released.slice(-node2.versions).map(nameMapper(data.name));
        list = filterJumps(list, data.name, node2.versions, context2);
        return list;
      }
    },
    unreleased_versions: {
      matches: [],
      regexp: /^unreleased\s+versions$/i,
      select: function(context2) {
        return Object.keys(agents2).reduce(function(selected, name) {
          var data = byName(name, context2);
          if (!data) return selected;
          var list = data.versions.filter(function(v) {
            return data.released.indexOf(v) === -1;
          });
          list = list.map(nameMapper(data.name));
          return selected.concat(list);
        }, []);
      }
    },
    unreleased_electron_versions: {
      matches: [],
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: function() {
        return [];
      }
    },
    unreleased_browser_versions: {
      matches: ["browser"],
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        return data.versions.filter(function(v) {
          return data.released.indexOf(v) === -1;
        }).map(nameMapper(data.name));
      }
    },
    last_years: {
      matches: ["years"],
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: function(context2, node2) {
        return filterByYear(Date.now() - YEAR * node2.years, context2);
      }
    },
    since_y: {
      matches: ["year"],
      regexp: /^since (\d+)$/i,
      select: sinceQuery
    },
    since_y_m: {
      matches: ["year", "month"],
      regexp: /^since (\d+)-(\d+)$/i,
      select: sinceQuery
    },
    since_y_m_d: {
      matches: ["year", "month", "day"],
      regexp: /^since (\d+)-(\d+)-(\d+)$/i,
      select: sinceQuery
    },
    popularity: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        var usage = browserslist.usage.global;
        return Object.keys(usage).reduce(function(result, version) {
          if (node2.sign === ">") {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<") {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<=") {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    popularity_in_my_stats: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        if (!context2.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        var usage = context2.customUsage;
        return Object.keys(usage).reduce(function(result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result;
          }
          if (node2.sign === ">") {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<") {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    popularity_in_config_stats: {
      matches: ["sign", "popularity", "config"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        var usage = loadCustomUsage(context2, node2.config);
        return Object.keys(usage).reduce(function(result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result;
          }
          if (node2.sign === ">") {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<") {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    popularity_in_place: {
      matches: ["sign", "popularity", "place"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: function(context2, node2) {
        var popularity = parseFloat(node2.popularity);
        var place = node2.place;
        if (place.length === 2) {
          place = place.toUpperCase();
        } else {
          place = place.toLowerCase();
        }
        env.loadCountry(browserslist.usage, place, browserslist.data);
        var usage = browserslist.usage[place];
        return Object.keys(usage).reduce(function(result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result;
          }
          if (node2.sign === ">") {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<") {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node2.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    cover: {
      matches: ["coverage"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
      select: coverQuery
    },
    cover_in: {
      matches: ["coverage", "place"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
      select: coverQuery
    },
    cover_config: {
      matches: ["coverage", "config"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/i,
      select: coverQuery
    },
    supports: {
      matches: ["supportType", "feature"],
      regexp: /^(?:(fully|partially)\s+)?supports\s+([\w-]+)$/,
      select: function(context2, node2) {
        env.loadFeature(browserslist.cache, node2.feature);
        var withPartial = node2.supportType !== "fully";
        var features = browserslist.cache[node2.feature];
        var result = [];
        for (var name in features) {
          var data = byName(name, context2);
          var iMax = data.released.length - 1;
          while (iMax >= 0) {
            if (data.released[iMax] in features[name]) break;
            iMax--;
          }
          var checkDesktop = context2.mobileToDesktop && name in browserslist.desktopNames && isSupported(features[name][data.released[iMax]], withPartial);
          data.versions.forEach(function(version) {
            var flags = features[name][version];
            if (flags === void 0 && checkDesktop) {
              flags = features[browserslist.desktopNames[name]][version];
            }
            if (isSupported(flags, withPartial)) {
              result.push(name + " " + version);
            }
          });
        }
        return result;
      }
    },
    electron_range: {
      matches: ["from", "to"],
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function(context2, node2) {
        var fromToUse = normalizeElectron(node2.from);
        var toToUse = normalizeElectron(node2.to);
        var from = parseFloat(node2.from);
        var to2 = parseFloat(node2.to);
        if (!e2c[fromToUse]) {
          throw new BrowserslistError("Unknown version " + from + " of electron");
        }
        if (!e2c[toToUse]) {
          throw new BrowserslistError("Unknown version " + to2 + " of electron");
        }
        return Object.keys(e2c).filter(function(i) {
          var parsed = parseFloat(i);
          return parsed >= from && parsed <= to2;
        }).map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    node_range: {
      matches: ["from", "to"],
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function(context2, node2) {
        return browserslist.nodeVersions.filter(semverFilterLoose(">=", node2.from)).filter(semverFilterLoose("<=", node2.to)).map(function(v) {
          return "node " + v;
        });
      }
    },
    browser_range: {
      matches: ["browser", "from", "to"],
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function(context2, node2) {
        var data = checkName(node2.browser, context2);
        var from = parseFloat(normalizeVersion(data, node2.from) || node2.from);
        var to2 = parseFloat(normalizeVersion(data, node2.to) || node2.to);
        function filter(v) {
          var parsed = parseFloat(v);
          return parsed >= from && parsed <= to2;
        }
        return data.released.filter(filter).map(nameMapper(data.name));
      }
    },
    electron_ray: {
      matches: ["sign", "version"],
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function(context2, node2) {
        var versionToUse = normalizeElectron(node2.version);
        return Object.keys(e2c).filter(generateFilter(node2.sign, versionToUse)).map(function(i) {
          return "chrome " + e2c[i];
        });
      }
    },
    node_ray: {
      matches: ["sign", "version"],
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function(context2, node2) {
        return browserslist.nodeVersions.filter(generateSemverFilter(node2.sign, node2.version)).map(function(v) {
          return "node " + v;
        });
      }
    },
    browser_ray: {
      matches: ["browser", "sign", "version"],
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: function(context2, node2) {
        var version = node2.version;
        var data = checkName(node2.browser, context2);
        var alias = browserslist.versionAliases[data.name][version];
        if (alias) version = alias;
        return data.released.filter(generateFilter(node2.sign, version)).map(function(v) {
          return data.name + " " + v;
        });
      }
    },
    firefox_esr: {
      matches: [],
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: function() {
        return ["firefox 128"];
      }
    },
    opera_mini_all: {
      matches: [],
      regexp: /(operamini|op_mini)\s+all/i,
      select: function() {
        return ["op_mini all"];
      }
    },
    electron_version: {
      matches: ["version"],
      regexp: /^electron\s+([\d.]+)$/i,
      select: function(context2, node2) {
        var versionToUse = normalizeElectron(node2.version);
        var chrome = e2c[versionToUse];
        if (!chrome) {
          throw new BrowserslistError(
            "Unknown version " + node2.version + " of electron"
          );
        }
        return ["chrome " + chrome];
      }
    },
    node_major_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+)$/i,
      select: nodeQuery
    },
    node_minor_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+)$/i,
      select: nodeQuery
    },
    node_patch_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
      select: nodeQuery
    },
    current_node: {
      matches: [],
      regexp: /^current\s+node$/i,
      select: function(context2) {
        return [env.currentNode(resolve, context2)];
      }
    },
    maintained_node: {
      matches: [],
      regexp: /^maintained\s+node\s+versions$/i,
      select: function(context2) {
        var now = Date.now();
        var queries = Object.keys(jsEOL).filter(function(key) {
          return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
        }).map(function(key) {
          return "node " + key.slice(1);
        });
        return resolve(queries, context2);
      }
    },
    phantomjs_1_9: {
      matches: [],
      regexp: /^phantomjs\s+1.9$/i,
      select: function() {
        return ["safari 5"];
      }
    },
    phantomjs_2_1: {
      matches: [],
      regexp: /^phantomjs\s+2.1$/i,
      select: function() {
        return ["safari 6"];
      }
    },
    browser_version: {
      matches: ["browser", "version"],
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: function(context2, node2) {
        var version = node2.version;
        if (/^tp$/i.test(version)) version = "TP";
        var data = checkName(node2.browser, context2);
        var alias = normalizeVersion(data, version);
        if (alias) {
          version = alias;
        } else {
          if (version.indexOf(".") === -1) {
            alias = version + ".0";
          } else {
            alias = version.replace(/\.0$/, "");
          }
          alias = normalizeVersion(data, alias);
          if (alias) {
            version = alias;
          } else if (context2.ignoreUnknownVersions) {
            return [];
          } else {
            throw new BrowserslistError(
              "Unknown version " + version + " of " + node2.browser
            );
          }
        }
        return [data.name + " " + version];
      }
    },
    browserslist_config: {
      matches: [],
      regexp: /^browserslist config$/i,
      needsPath: true,
      select: function(context2) {
        return browserslist(void 0, context2);
      }
    },
    extends: {
      matches: ["config"],
      regexp: /^extends (.+)$/i,
      needsPath: true,
      select: function(context2, node2) {
        return resolve(env.loadQueries(context2, node2.config), context2);
      }
    },
    defaults: {
      matches: [],
      regexp: /^defaults$/i,
      select: function(context2) {
        return resolve(browserslist.defaults, context2);
      }
    },
    dead: {
      matches: [],
      regexp: /^dead$/i,
      select: function(context2) {
        var dead = [
          "Baidu >= 0",
          "ie <= 11",
          "ie_mob <= 11",
          "bb <= 10",
          "op_mob <= 12.1",
          "samsung 4"
        ];
        return resolve(dead, context2);
      }
    },
    unknown: {
      matches: [],
      regexp: /^(\w+)$/i,
      select: function(context2, node2) {
        if (byName(node2.query, context2)) {
          throw new BrowserslistError(
            "Specify versions in Browserslist query for browser " + node2.query
          );
        } else {
          throw unknownQuery(node2.query);
        }
      }
    }
  };
  (function() {
    for (var name in agents2) {
      var browser2 = agents2[name];
      browserslist.data[name] = {
        name,
        versions: normalize(agents2[name].versions),
        released: normalize(agents2[name].versions.slice(0, -3)),
        releaseDate: agents2[name].release_date
      };
      fillUsage(browserslist.usage.global, name, browser2.usage_global);
      browserslist.versionAliases[name] = {};
      for (var i = 0; i < browser2.versions.length; i++) {
        var full2 = browser2.versions[i];
        if (!full2) continue;
        if (full2.indexOf("-") !== -1) {
          var interval = full2.split("-");
          for (var j = 0; j < interval.length; j++) {
            browserslist.versionAliases[name][interval[j]] = full2;
          }
        }
      }
    }
    browserslist.nodeVersions = jsReleases.map(function(release) {
      return release.version;
    });
  })();
  browserslist_1 = browserslist;
  return browserslist_1;
}
var lib = {};
var validator = {};
var findSuggestion = {};
var hasRequiredFindSuggestion;
function requireFindSuggestion() {
  if (hasRequiredFindSuggestion) return findSuggestion;
  hasRequiredFindSuggestion = 1;
  Object.defineProperty(findSuggestion, "__esModule", {
    value: true
  });
  findSuggestion.findSuggestion = findSuggestion$1;
  const {
    min
  } = Math;
  function levenshtein(a, b) {
    let t = [], u = [], i, j;
    const m = a.length, n = b.length;
    if (!m) {
      return n;
    }
    if (!n) {
      return m;
    }
    for (j = 0; j <= n; j++) {
      t[j] = j;
    }
    for (i = 1; i <= m; i++) {
      for (u = [i], j = 1; j <= n; j++) {
        u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
      }
      t = u;
    }
    return u[n];
  }
  function findSuggestion$1(str, arr) {
    const distances = arr.map((el) => levenshtein(el, str));
    return arr[distances.indexOf(min(...distances))];
  }
  return findSuggestion;
}
var hasRequiredValidator;
function requireValidator() {
  if (hasRequiredValidator) return validator;
  hasRequiredValidator = 1;
  Object.defineProperty(validator, "__esModule", {
    value: true
  });
  validator.OptionValidator = void 0;
  var _findSuggestion = requireFindSuggestion();
  class OptionValidator {
    constructor(descriptor) {
      this.descriptor = descriptor;
    }
    validateTopLevelOptions(options2, TopLevelOptionShape) {
      const validOptionNames = Object.keys(TopLevelOptionShape);
      for (const option of Object.keys(options2)) {
        if (!validOptionNames.includes(option)) {
          throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
        }
      }
    }
    validateBooleanOption(name, value2, defaultValue) {
      if (value2 === void 0) {
        return defaultValue;
      } else {
        this.invariant(typeof value2 === "boolean", `'${name}' option must be a boolean.`);
      }
      return value2;
    }
    validateStringOption(name, value2, defaultValue) {
      if (value2 === void 0) {
        return defaultValue;
      } else {
        this.invariant(typeof value2 === "string", `'${name}' option must be a string.`);
      }
      return value2;
    }
    invariant(condition, message) {
      if (!condition) {
        throw new Error(this.formatMessage(message));
      }
    }
    formatMessage(message) {
      return `${this.descriptor}: ${message}`;
    }
  }
  validator.OptionValidator = OptionValidator;
  return validator;
}
var hasRequiredLib$2;
function requireLib$2() {
  if (hasRequiredLib$2) return lib;
  hasRequiredLib$2 = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "OptionValidator", {
      enumerable: true,
      get: function() {
        return _validator.OptionValidator;
      }
    });
    Object.defineProperty(exports2, "findSuggestion", {
      enumerable: true,
      get: function() {
        return _findSuggestion.findSuggestion;
      }
    });
    var _validator = requireValidator();
    var _findSuggestion = requireFindSuggestion();
  })(lib);
  return lib;
}
var iterator;
var hasRequiredIterator;
function requireIterator() {
  if (hasRequiredIterator) return iterator;
  hasRequiredIterator = 1;
  iterator = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value;
      }
    };
  };
  return iterator;
}
var yallist;
var hasRequiredYallist;
function requireYallist() {
  if (hasRequiredYallist) return yallist;
  hasRequiredYallist = 1;
  yallist = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (!(self2 instanceof Yallist)) {
      self2 = new Yallist();
    }
    self2.tail = null;
    self2.head = null;
    self2.length = 0;
    if (list && typeof list.forEach === "function") {
      list.forEach(function(item2) {
        self2.push(item2);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self2.push(arguments[i]);
      }
    }
    return self2;
  }
  Yallist.prototype.removeNode = function(node2) {
    if (node2.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node2.next;
    var prev = node2.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node2 === this.head) {
      this.head = next;
    }
    if (node2 === this.tail) {
      this.tail = prev;
    }
    node2.list.length--;
    node2.next = null;
    node2.prev = null;
    node2.list = null;
    return next;
  };
  Yallist.prototype.unshiftNode = function(node2) {
    if (node2 === this.head) {
      return;
    }
    if (node2.list) {
      node2.list.removeNode(node2);
    }
    var head = this.head;
    node2.list = this;
    node2.next = head;
    if (head) {
      head.prev = node2;
    }
    this.head = node2;
    if (!this.tail) {
      this.tail = node2;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node2) {
    if (node2 === this.tail) {
      return;
    }
    if (node2.list) {
      node2.list.removeNode(node2);
    }
    var tail = this.tail;
    node2.list = this;
    node2.prev = tail;
    if (tail) {
      tail.next = node2;
    }
    this.tail = node2;
    if (!this.head) {
      this.head = node2;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail) {
      return void 0;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head) {
      return void 0;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn2, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn2.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn2, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn2.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn2, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn2.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn2, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn2.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn2, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn2(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn2, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn2(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to2) {
    to2 = to2 || this.length;
    if (to2 < 0) {
      to2 += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to2 < from || to2 < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to2 > this.length) {
      to2 = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to2; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to2) {
    to2 = to2 || this.length;
    if (to2 < 0) {
      to2 += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to2 < from || to2 < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to2 > this.length) {
      to2 = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to2; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount) {
    if (start > this.length) {
      start = this.length - 1;
    }
    if (start < 0) {
      start = this.length + start;
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next;
    }
    var ret = [];
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value);
      walker = this.removeNode(walker);
    }
    if (walker === null) {
      walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev;
    }
    for (var i = 2; i < arguments.length; i++) {
      walker = insert(this, walker, arguments[i]);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function insert(self2, node2, value2) {
    var inserted = node2 === self2.head ? new Node(value2, null, node2, self2) : new Node(value2, node2, node2.next, self2);
    if (inserted.next === null) {
      self2.tail = inserted;
    }
    if (inserted.prev === null) {
      self2.head = inserted;
    }
    self2.length++;
    return inserted;
  }
  function push(self2, item2) {
    self2.tail = new Node(item2, self2.tail, null, self2);
    if (!self2.head) {
      self2.head = self2.tail;
    }
    self2.length++;
  }
  function unshift(self2, item2) {
    self2.head = new Node(item2, null, self2.head, self2);
    if (!self2.tail) {
      self2.tail = self2.head;
    }
    self2.length++;
  }
  function Node(value2, prev, next, list) {
    if (!(this instanceof Node)) {
      return new Node(value2, prev, next, list);
    }
    this.list = list;
    this.value = value2;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  try {
    requireIterator()(Yallist);
  } catch (er2) {
  }
  return yallist;
}
var lruCache;
var hasRequiredLruCache;
function requireLruCache() {
  if (hasRequiredLruCache) return lruCache;
  hasRequiredLruCache = 1;
  const Yallist = requireYallist();
  const MAX = Symbol("max");
  const LENGTH = Symbol("length");
  const LENGTH_CALCULATOR = Symbol("lengthCalculator");
  const ALLOW_STALE = Symbol("allowStale");
  const MAX_AGE = Symbol("maxAge");
  const DISPOSE = Symbol("dispose");
  const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
  const LRU_LIST = Symbol("lruList");
  const CACHE = Symbol("cache");
  const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
  const naiveLength = () => 1;
  class LRUCache {
    constructor(options2) {
      if (typeof options2 === "number")
        options2 = { max: options2 };
      if (!options2)
        options2 = {};
      if (options2.max && (typeof options2.max !== "number" || options2.max < 0))
        throw new TypeError("max must be a non-negative number");
      this[MAX] = options2.max || Infinity;
      const lc = options2.length || naiveLength;
      this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
      this[ALLOW_STALE] = options2.stale || false;
      if (options2.maxAge && typeof options2.maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options2.maxAge || 0;
      this[DISPOSE] = options2.dispose;
      this[NO_DISPOSE_ON_SET] = options2.noDisposeOnSet || false;
      this[UPDATE_AGE_ON_GET] = options2.updateAgeOnGet || false;
      this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
      if (typeof mL !== "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity;
      trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA !== "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA;
      trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
      if (typeof lC !== "function")
        lC = naiveLength;
      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach((hit) => {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
          this[LENGTH] += hit.length;
        });
      }
      trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn2, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        const prev = walker.prev;
        forEachStep(this, fn2, walker, thisp);
        walker = prev;
      }
    }
    forEach(fn2, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        const next = walker.next;
        forEachStep(this, fn2, walker, thisp);
        walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k2) => k2.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k2) => k2.value);
    }
    reset() {
      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
      }
      this[CACHE] = /* @__PURE__ */ new Map();
      this[LRU_LIST] = new Yallist();
      this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value2, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== "number")
        throw new TypeError("maxAge must be a number");
      const now = maxAge ? Date.now() : 0;
      const len = this[LENGTH_CALCULATOR](value2, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX]) {
          del(this, this[CACHE].get(key));
          return false;
        }
        const node2 = this[CACHE].get(key);
        const item2 = node2.value;
        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET])
            this[DISPOSE](key, item2.value);
        }
        item2.now = now;
        item2.maxAge = maxAge;
        item2.value = value2;
        this[LENGTH] += len - item2.length;
        item2.length = len;
        this.get(key);
        trim(this);
        return true;
      }
      const hit = new Entry(key, value2, len, now, maxAge);
      if (hit.length > this[MAX]) {
        if (this[DISPOSE])
          this[DISPOSE](key, value2);
        return false;
      }
      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key, this[LRU_LIST].head);
      trim(this);
      return true;
    }
    has(key) {
      if (!this[CACHE].has(key)) return false;
      const hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, true);
    }
    peek(key) {
      return get(this, key, false);
    }
    pop() {
      const node2 = this[LRU_LIST].tail;
      if (!node2)
        return null;
      del(this, node2);
      return node2.value;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      this.reset();
      const now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        const hit = arr[l];
        const expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          const maxAge = expiresAt - now;
          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
    prune() {
      this[CACHE].forEach((value2, key) => get(this, key, false));
    }
  }
  const get = (self2, key, doUse) => {
    const node2 = self2[CACHE].get(key);
    if (node2) {
      const hit = node2.value;
      if (isStale(self2, hit)) {
        del(self2, node2);
        if (!self2[ALLOW_STALE])
          return void 0;
      } else {
        if (doUse) {
          if (self2[UPDATE_AGE_ON_GET])
            node2.value.now = Date.now();
          self2[LRU_LIST].unshiftNode(node2);
        }
      }
      return hit.value;
    }
  };
  const isStale = (self2, hit) => {
    if (!hit || !hit.maxAge && !self2[MAX_AGE])
      return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
  };
  const trim = (self2) => {
    if (self2[LENGTH] > self2[MAX]) {
      for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        const prev = walker.prev;
        del(self2, walker);
        walker = prev;
      }
    }
  };
  const del = (self2, node2) => {
    if (node2) {
      const hit = node2.value;
      if (self2[DISPOSE])
        self2[DISPOSE](hit.key, hit.value);
      self2[LENGTH] -= hit.length;
      self2[CACHE].delete(hit.key);
      self2[LRU_LIST].removeNode(node2);
    }
  };
  class Entry {
    constructor(key, value2, length, now, maxAge) {
      this.key = key;
      this.value = value2;
      this.length = length;
      this.now = now;
      this.maxAge = maxAge || 0;
    }
  }
  const forEachStep = (self2, fn2, node2, thisp) => {
    let hit = node2.value;
    if (isStale(self2, hit)) {
      del(self2, node2);
      if (!self2[ALLOW_STALE])
        hit = void 0;
    }
    if (hit)
      fn2.call(thisp, hit.value, hit.key, self2);
  };
  lruCache = LRUCache;
  return lruCache;
}
var utils = {};
var targets = {};
var hasRequiredTargets;
function requireTargets() {
  if (hasRequiredTargets) return targets;
  hasRequiredTargets = 1;
  Object.defineProperty(targets, "__esModule", {
    value: true
  });
  targets.unreleasedLabels = targets.browserNameMap = void 0;
  targets.unreleasedLabels = {
    safari: "tp"
  };
  targets.browserNameMap = {
    and_chr: "chrome",
    and_ff: "firefox",
    android: "android",
    chrome: "chrome",
    edge: "edge",
    firefox: "firefox",
    ie: "ie",
    ie_mob: "ie",
    ios_saf: "ios",
    node: "node",
    deno: "deno",
    op_mob: "opera_mobile",
    opera: "opera",
    safari: "safari",
    samsung: "samsung"
  };
  return targets;
}
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  Object.defineProperty(utils, "__esModule", {
    value: true
  });
  utils.getHighestUnreleased = getHighestUnreleased;
  utils.getLowestImplementedVersion = getLowestImplementedVersion;
  utils.getLowestUnreleased = getLowestUnreleased;
  utils.isUnreleasedVersion = isUnreleasedVersion;
  utils.semverMin = semverMin;
  utils.semverify = semverify;
  var _semver = requireSemver();
  var _helperValidatorOption = requireLib$2();
  var _targets = requireTargets();
  const versionRegExp = /^(?:\d+|\d(?:\d?[^\d\n\r\u2028\u2029]\d+|\d{2,}(?:[^\d\n\r\u2028\u2029]\d+)?))$/;
  const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");
  function semverMin(first, second) {
    return first && _semver.lt(first, second) ? first : second;
  }
  function semverify(version) {
    if (typeof version === "string" && _semver.valid(version)) {
      return version;
    }
    v.invariant(typeof version === "number" || typeof version === "string" && versionRegExp.test(version), `'${version}' is not a valid version`);
    version = version.toString();
    let pos = 0;
    let num = 0;
    while ((pos = version.indexOf(".", pos + 1)) > 0) {
      num++;
    }
    return version + ".0".repeat(2 - num);
  }
  function isUnreleasedVersion(version, env) {
    const unreleasedLabel = _targets.unreleasedLabels[env];
    return !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase();
  }
  function getLowestUnreleased(a, b, env) {
    const unreleasedLabel = _targets.unreleasedLabels[env];
    if (a === unreleasedLabel) {
      return b;
    }
    if (b === unreleasedLabel) {
      return a;
    }
    return semverMin(a, b);
  }
  function getHighestUnreleased(a, b, env) {
    return getLowestUnreleased(a, b, env) === a ? b : a;
  }
  function getLowestImplementedVersion(plugin2, environment2) {
    const result = plugin2[environment2];
    if (!result && environment2 === "android") {
      return plugin2.chrome;
    }
    return result;
  }
  return utils;
}
var options$1 = {};
var hasRequiredOptions$1;
function requireOptions$1() {
  if (hasRequiredOptions$1) return options$1;
  hasRequiredOptions$1 = 1;
  Object.defineProperty(options$1, "__esModule", {
    value: true
  });
  options$1.TargetNames = void 0;
  options$1.TargetNames = {
    node: "node",
    deno: "deno",
    chrome: "chrome",
    opera: "opera",
    edge: "edge",
    firefox: "firefox",
    safari: "safari",
    ie: "ie",
    ios: "ios",
    android: "android",
    electron: "electron",
    samsung: "samsung",
    rhino: "rhino",
    opera_mobile: "opera_mobile"
  };
  return options$1;
}
var pretty = {};
var hasRequiredPretty;
function requirePretty() {
  if (hasRequiredPretty) return pretty;
  hasRequiredPretty = 1;
  Object.defineProperty(pretty, "__esModule", {
    value: true
  });
  pretty.prettifyTargets = prettifyTargets;
  pretty.prettifyVersion = prettifyVersion;
  var _semver = requireSemver();
  var _targets = requireTargets();
  function prettifyVersion(version) {
    if (typeof version !== "string") {
      return version;
    }
    const {
      major,
      minor,
      patch
    } = _semver.parse(version);
    const parts = [major];
    if (minor || patch) {
      parts.push(minor);
    }
    if (patch) {
      parts.push(patch);
    }
    return parts.join(".");
  }
  function prettifyTargets(targets2) {
    return Object.keys(targets2).reduce((results, target) => {
      let value2 = targets2[target];
      const unreleasedLabel = _targets.unreleasedLabels[target];
      if (typeof value2 === "string" && unreleasedLabel !== value2) {
        value2 = prettifyVersion(value2);
      }
      results[target] = value2;
      return results;
    }, {});
  }
  return pretty;
}
var debug = {};
var hasRequiredDebug;
function requireDebug() {
  if (hasRequiredDebug) return debug;
  hasRequiredDebug = 1;
  Object.defineProperty(debug, "__esModule", {
    value: true
  });
  debug.getInclusionReasons = getInclusionReasons;
  var _semver = requireSemver();
  var _pretty = requirePretty();
  var _utils = requireUtils();
  function getInclusionReasons(item2, targetVersions, list) {
    const minVersions = list[item2] || {};
    return Object.keys(targetVersions).reduce((result, env) => {
      const minVersion = (0, _utils.getLowestImplementedVersion)(minVersions, env);
      const targetVersion = targetVersions[env];
      if (!minVersion) {
        result[env] = (0, _pretty.prettifyVersion)(targetVersion);
      } else {
        const minIsUnreleased = (0, _utils.isUnreleasedVersion)(minVersion, env);
        const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(targetVersion, env);
        if (!targetIsUnreleased && (minIsUnreleased || _semver.lt(targetVersion.toString(), (0, _utils.semverify)(minVersion)))) {
          result[env] = (0, _pretty.prettifyVersion)(targetVersion);
        }
      }
      return result;
    }, {});
  }
  return debug;
}
var filterItems = {};
const require$$0$1 = {
  "transform-duplicate-named-capturing-groups-regex": { "chrome": "126", "opera": "112", "edge": "126", "firefox": "129", "safari": "17.4", "node": "23", "ios": "17.4", "electron": "31.0" },
  "transform-regexp-modifiers": { "chrome": "125", "opera": "111", "edge": "125", "firefox": "132", "node": "23", "samsung": "27", "electron": "31.0" },
  "transform-unicode-sets-regex": { "chrome": "112", "opera": "98", "edge": "112", "firefox": "116", "safari": "17", "node": "20", "deno": "1.32", "ios": "17", "samsung": "23", "opera_mobile": "75", "electron": "24.0" },
  "bugfix/transform-v8-static-class-fields-redefine-readonly": { "chrome": "98", "opera": "84", "edge": "98", "firefox": "75", "safari": "15", "node": "12", "deno": "1.18", "ios": "15", "samsung": "11", "opera_mobile": "52", "electron": "17.0" },
  "bugfix/transform-firefox-class-in-computed-class-key": { "chrome": "74", "opera": "62", "edge": "79", "firefox": "126", "safari": "16", "node": "12", "deno": "1", "ios": "16", "samsung": "11", "opera_mobile": "53", "electron": "6.0" },
  "bugfix/transform-safari-class-field-initializer-scope": { "chrome": "74", "opera": "62", "edge": "79", "firefox": "69", "safari": "16", "node": "12", "deno": "1", "ios": "16", "samsung": "11", "opera_mobile": "53", "electron": "6.0" },
  "transform-class-static-block": { "chrome": "94", "opera": "80", "edge": "94", "firefox": "93", "safari": "16.4", "node": "16.11", "deno": "1.14", "ios": "16.4", "samsung": "17", "opera_mobile": "66", "electron": "15.0" },
  "proposal-class-static-block": { "chrome": "94", "opera": "80", "edge": "94", "firefox": "93", "safari": "16.4", "node": "16.11", "deno": "1.14", "ios": "16.4", "samsung": "17", "opera_mobile": "66", "electron": "15.0" },
  "transform-private-property-in-object": { "chrome": "91", "opera": "77", "edge": "91", "firefox": "90", "safari": "15", "node": "16.9", "deno": "1.9", "ios": "15", "samsung": "16", "opera_mobile": "64", "electron": "13.0" },
  "proposal-private-property-in-object": { "chrome": "91", "opera": "77", "edge": "91", "firefox": "90", "safari": "15", "node": "16.9", "deno": "1.9", "ios": "15", "samsung": "16", "opera_mobile": "64", "electron": "13.0" },
  "transform-class-properties": { "chrome": "74", "opera": "62", "edge": "79", "firefox": "90", "safari": "14.1", "node": "12", "deno": "1", "ios": "14.5", "samsung": "11", "opera_mobile": "53", "electron": "6.0" },
  "proposal-class-properties": { "chrome": "74", "opera": "62", "edge": "79", "firefox": "90", "safari": "14.1", "node": "12", "deno": "1", "ios": "14.5", "samsung": "11", "opera_mobile": "53", "electron": "6.0" },
  "transform-private-methods": { "chrome": "84", "opera": "70", "edge": "84", "firefox": "90", "safari": "15", "node": "14.6", "deno": "1", "ios": "15", "samsung": "14", "opera_mobile": "60", "electron": "10.0" },
  "proposal-private-methods": { "chrome": "84", "opera": "70", "edge": "84", "firefox": "90", "safari": "15", "node": "14.6", "deno": "1", "ios": "15", "samsung": "14", "opera_mobile": "60", "electron": "10.0" },
  "transform-numeric-separator": { "chrome": "75", "opera": "62", "edge": "79", "firefox": "70", "safari": "13", "node": "12.5", "deno": "1", "ios": "13", "samsung": "11", "rhino": "1.7.14", "opera_mobile": "54", "electron": "6.0" },
  "proposal-numeric-separator": { "chrome": "75", "opera": "62", "edge": "79", "firefox": "70", "safari": "13", "node": "12.5", "deno": "1", "ios": "13", "samsung": "11", "rhino": "1.7.14", "opera_mobile": "54", "electron": "6.0" },
  "transform-logical-assignment-operators": { "chrome": "85", "opera": "71", "edge": "85", "firefox": "79", "safari": "14", "node": "15", "deno": "1.2", "ios": "14", "samsung": "14", "opera_mobile": "60", "electron": "10.0" },
  "proposal-logical-assignment-operators": { "chrome": "85", "opera": "71", "edge": "85", "firefox": "79", "safari": "14", "node": "15", "deno": "1.2", "ios": "14", "samsung": "14", "opera_mobile": "60", "electron": "10.0" },
  "transform-nullish-coalescing-operator": { "chrome": "80", "opera": "67", "edge": "80", "firefox": "72", "safari": "13.1", "node": "14", "deno": "1", "ios": "13.4", "samsung": "13", "rhino": "1.8", "opera_mobile": "57", "electron": "8.0" },
  "proposal-nullish-coalescing-operator": { "chrome": "80", "opera": "67", "edge": "80", "firefox": "72", "safari": "13.1", "node": "14", "deno": "1", "ios": "13.4", "samsung": "13", "rhino": "1.8", "opera_mobile": "57", "electron": "8.0" },
  "transform-optional-chaining": { "chrome": "91", "opera": "77", "edge": "91", "firefox": "74", "safari": "13.1", "node": "16.9", "deno": "1.9", "ios": "13.4", "samsung": "16", "opera_mobile": "64", "electron": "13.0" },
  "proposal-optional-chaining": { "chrome": "91", "opera": "77", "edge": "91", "firefox": "74", "safari": "13.1", "node": "16.9", "deno": "1.9", "ios": "13.4", "samsung": "16", "opera_mobile": "64", "electron": "13.0" },
  "transform-json-strings": { "chrome": "66", "opera": "53", "edge": "79", "firefox": "62", "safari": "12", "node": "10", "deno": "1", "ios": "12", "samsung": "9", "rhino": "1.7.14", "opera_mobile": "47", "electron": "3.0" },
  "proposal-json-strings": { "chrome": "66", "opera": "53", "edge": "79", "firefox": "62", "safari": "12", "node": "10", "deno": "1", "ios": "12", "samsung": "9", "rhino": "1.7.14", "opera_mobile": "47", "electron": "3.0" },
  "transform-optional-catch-binding": { "chrome": "66", "opera": "53", "edge": "79", "firefox": "58", "safari": "11.1", "node": "10", "deno": "1", "ios": "11.3", "samsung": "9", "opera_mobile": "47", "electron": "3.0" },
  "proposal-optional-catch-binding": { "chrome": "66", "opera": "53", "edge": "79", "firefox": "58", "safari": "11.1", "node": "10", "deno": "1", "ios": "11.3", "samsung": "9", "opera_mobile": "47", "electron": "3.0" },
  "transform-parameters": { "chrome": "49", "opera": "36", "edge": "18", "firefox": "52", "safari": "16.3", "node": "6", "deno": "1", "ios": "16.3", "samsung": "5", "opera_mobile": "36", "electron": "0.37" },
  "transform-async-generator-functions": { "chrome": "63", "opera": "50", "edge": "79", "firefox": "57", "safari": "12", "node": "10", "deno": "1", "ios": "12", "samsung": "8", "opera_mobile": "46", "electron": "3.0" },
  "proposal-async-generator-functions": { "chrome": "63", "opera": "50", "edge": "79", "firefox": "57", "safari": "12", "node": "10", "deno": "1", "ios": "12", "samsung": "8", "opera_mobile": "46", "electron": "3.0" },
  "transform-object-rest-spread": { "chrome": "60", "opera": "47", "edge": "79", "firefox": "55", "safari": "11.1", "node": "8.3", "deno": "1", "ios": "11.3", "samsung": "8", "opera_mobile": "44", "electron": "2.0" },
  "proposal-object-rest-spread": { "chrome": "60", "opera": "47", "edge": "79", "firefox": "55", "safari": "11.1", "node": "8.3", "deno": "1", "ios": "11.3", "samsung": "8", "opera_mobile": "44", "electron": "2.0" },
  "transform-dotall-regex": { "chrome": "62", "opera": "49", "edge": "79", "firefox": "78", "safari": "11.1", "node": "8.10", "deno": "1", "ios": "11.3", "samsung": "8", "rhino": "1.7.15", "opera_mobile": "46", "electron": "3.0" },
  "transform-unicode-property-regex": { "chrome": "64", "opera": "51", "edge": "79", "firefox": "78", "safari": "11.1", "node": "10", "deno": "1", "ios": "11.3", "samsung": "9", "opera_mobile": "47", "electron": "3.0" },
  "proposal-unicode-property-regex": { "chrome": "64", "opera": "51", "edge": "79", "firefox": "78", "safari": "11.1", "node": "10", "deno": "1", "ios": "11.3", "samsung": "9", "opera_mobile": "47", "electron": "3.0" },
  "transform-named-capturing-groups-regex": { "chrome": "64", "opera": "51", "edge": "79", "firefox": "78", "safari": "11.1", "node": "10", "deno": "1", "ios": "11.3", "samsung": "9", "opera_mobile": "47", "electron": "3.0" },
  "transform-async-to-generator": { "chrome": "55", "opera": "42", "edge": "15", "firefox": "52", "safari": "11", "node": "7.6", "deno": "1", "ios": "11", "samsung": "6", "opera_mobile": "42", "electron": "1.6" },
  "transform-exponentiation-operator": { "chrome": "52", "opera": "39", "edge": "14", "firefox": "52", "safari": "10.1", "node": "7", "deno": "1", "ios": "10.3", "samsung": "6", "rhino": "1.7.14", "opera_mobile": "41", "electron": "1.3" },
  "transform-template-literals": { "chrome": "41", "opera": "28", "edge": "13", "firefox": "34", "safari": "13", "node": "4", "deno": "1", "ios": "13", "samsung": "3.4", "opera_mobile": "28", "electron": "0.21" },
  "transform-literals": { "chrome": "44", "opera": "31", "edge": "12", "firefox": "53", "safari": "9", "node": "4", "deno": "1", "ios": "9", "samsung": "4", "rhino": "1.7.15", "opera_mobile": "32", "electron": "0.30" },
  "transform-function-name": { "chrome": "51", "opera": "38", "edge": "79", "firefox": "53", "safari": "10", "node": "6.5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "41", "electron": "1.2" },
  "transform-arrow-functions": { "chrome": "47", "opera": "34", "edge": "13", "firefox": "43", "safari": "10", "node": "6", "deno": "1", "ios": "10", "samsung": "5", "rhino": "1.7.13", "opera_mobile": "34", "electron": "0.36" },
  "transform-block-scoped-functions": { "chrome": "41", "opera": "28", "edge": "12", "firefox": "46", "safari": "10", "node": "4", "deno": "1", "ie": "11", "ios": "10", "samsung": "3.4", "opera_mobile": "28", "electron": "0.21" },
  "transform-classes": { "chrome": "46", "opera": "33", "edge": "13", "firefox": "45", "safari": "10", "node": "5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "33", "electron": "0.36" },
  "transform-object-super": { "chrome": "46", "opera": "33", "edge": "13", "firefox": "45", "safari": "10", "node": "5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "33", "electron": "0.36" },
  "transform-shorthand-properties": { "chrome": "43", "opera": "30", "edge": "12", "firefox": "33", "safari": "9", "node": "4", "deno": "1", "ios": "9", "samsung": "4", "rhino": "1.7.14", "opera_mobile": "30", "electron": "0.27" },
  "transform-duplicate-keys": { "chrome": "42", "opera": "29", "edge": "12", "firefox": "34", "safari": "9", "node": "4", "deno": "1", "ios": "9", "samsung": "3.4", "opera_mobile": "29", "electron": "0.25" },
  "transform-computed-properties": { "chrome": "44", "opera": "31", "edge": "12", "firefox": "34", "safari": "7.1", "node": "4", "deno": "1", "ios": "8", "samsung": "4", "rhino": "1.8", "opera_mobile": "32", "electron": "0.30" },
  "transform-for-of": { "chrome": "51", "opera": "38", "edge": "15", "firefox": "53", "safari": "10", "node": "6.5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "41", "electron": "1.2" },
  "transform-sticky-regex": { "chrome": "49", "opera": "36", "edge": "13", "firefox": "3", "safari": "10", "node": "6", "deno": "1", "ios": "10", "samsung": "5", "rhino": "1.7.15", "opera_mobile": "36", "electron": "0.37" },
  "transform-unicode-escapes": { "chrome": "44", "opera": "31", "edge": "12", "firefox": "53", "safari": "9", "node": "4", "deno": "1", "ios": "9", "samsung": "4", "rhino": "1.7.15", "opera_mobile": "32", "electron": "0.30" },
  "transform-unicode-regex": { "chrome": "50", "opera": "37", "edge": "13", "firefox": "46", "safari": "12", "node": "6", "deno": "1", "ios": "12", "samsung": "5", "opera_mobile": "37", "electron": "1.1" },
  "transform-spread": { "chrome": "46", "opera": "33", "edge": "13", "firefox": "45", "safari": "10", "node": "5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "33", "electron": "0.36" },
  "transform-destructuring": { "chrome": "51", "opera": "38", "edge": "15", "firefox": "53", "safari": "10", "node": "6.5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "41", "electron": "1.2" },
  "transform-block-scoping": { "chrome": "50", "opera": "37", "edge": "14", "firefox": "53", "safari": "11", "node": "6", "deno": "1", "ios": "11", "samsung": "5", "opera_mobile": "37", "electron": "1.1" },
  "transform-typeof-symbol": { "chrome": "48", "opera": "35", "edge": "12", "firefox": "36", "safari": "9", "node": "6", "deno": "1", "ios": "9", "samsung": "5", "rhino": "1.8", "opera_mobile": "35", "electron": "0.37" },
  "transform-new-target": { "chrome": "46", "opera": "33", "edge": "14", "firefox": "41", "safari": "10", "node": "5", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "33", "electron": "0.36" },
  "transform-regenerator": { "chrome": "50", "opera": "37", "edge": "13", "firefox": "53", "safari": "10", "node": "6", "deno": "1", "ios": "10", "samsung": "5", "opera_mobile": "37", "electron": "1.1" },
  "transform-member-expression-literals": { "chrome": "7", "opera": "12", "edge": "12", "firefox": "2", "safari": "5.1", "node": "0.4", "deno": "1", "ie": "9", "android": "4", "ios": "6", "phantom": "1.9", "samsung": "1", "rhino": "1.7.13", "opera_mobile": "12", "electron": "0.20" },
  "transform-property-literals": { "chrome": "7", "opera": "12", "edge": "12", "firefox": "2", "safari": "5.1", "node": "0.4", "deno": "1", "ie": "9", "android": "4", "ios": "6", "phantom": "1.9", "samsung": "1", "rhino": "1.7.13", "opera_mobile": "12", "electron": "0.20" },
  "transform-reserved-words": { "chrome": "13", "opera": "10.50", "edge": "12", "firefox": "2", "safari": "3.1", "node": "0.6", "deno": "1", "ie": "9", "android": "4.4", "ios": "6", "phantom": "1.9", "samsung": "1", "rhino": "1.7.13", "opera_mobile": "10.1", "electron": "0.20" },
  "transform-export-namespace-from": { "chrome": "72", "deno": "1.0", "edge": "79", "firefox": "80", "node": "13.2.0", "opera": "60", "opera_mobile": "51", "safari": "14.1", "ios": "14.5", "samsung": "11.0", "android": "72", "electron": "5.0" },
  "proposal-export-namespace-from": { "chrome": "72", "deno": "1.0", "edge": "79", "firefox": "80", "node": "13.2.0", "opera": "60", "opera_mobile": "51", "safari": "14.1", "ios": "14.5", "samsung": "11.0", "android": "72", "electron": "5.0" }
};
var plugins$1;
var hasRequiredPlugins$1;
function requirePlugins$1() {
  if (hasRequiredPlugins$1) return plugins$1;
  hasRequiredPlugins$1 = 1;
  plugins$1 = require$$0$1;
  return plugins$1;
}
var hasRequiredFilterItems;
function requireFilterItems() {
  if (hasRequiredFilterItems) return filterItems;
  hasRequiredFilterItems = 1;
  Object.defineProperty(filterItems, "__esModule", {
    value: true
  });
  filterItems.default = filterItems$1;
  filterItems.isRequired = isRequired;
  filterItems.targetsSupported = targetsSupported;
  var _semver = requireSemver();
  var _utils = requireUtils();
  const pluginsCompatData = requirePlugins$1();
  function targetsSupported(target, support) {
    const targetEnvironments = Object.keys(target);
    if (targetEnvironments.length === 0) {
      return false;
    }
    const unsupportedEnvironments = targetEnvironments.filter((environment2) => {
      const lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment2);
      if (!lowestImplementedVersion) {
        return true;
      }
      const lowestTargetedVersion = target[environment2];
      if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment2)) {
        return false;
      }
      if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment2)) {
        return true;
      }
      if (!_semver.valid(lowestTargetedVersion.toString())) {
        throw new Error(`Invalid version passed for target "${environment2}": "${lowestTargetedVersion}". Versions must be in semver format (major.minor.patch)`);
      }
      return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());
    });
    return unsupportedEnvironments.length === 0;
  }
  function isRequired(name, targets2, {
    compatData = pluginsCompatData,
    includes,
    excludes
  } = {}) {
    if (excludes != null && excludes.has(name)) return false;
    if (includes != null && includes.has(name)) return true;
    return !targetsSupported(targets2, compatData[name]);
  }
  function filterItems$1(list, includes, excludes, targets2, defaultIncludes, defaultExcludes, pluginSyntaxMap) {
    const result = /* @__PURE__ */ new Set();
    const options2 = {
      compatData: list,
      includes,
      excludes
    };
    for (const item2 in list) {
      if (isRequired(item2, targets2, options2)) {
        result.add(item2);
      } else if (pluginSyntaxMap) {
        const shippedProposalsSyntax = pluginSyntaxMap.get(item2);
        if (shippedProposalsSyntax) {
          result.add(shippedProposalsSyntax);
        }
      }
    }
    defaultIncludes == null || defaultIncludes.forEach((item2) => !excludes.has(item2) && result.add(item2));
    defaultExcludes == null || defaultExcludes.forEach((item2) => !includes.has(item2) && result.delete(item2));
    return result;
  }
  return filterItems;
}
const require$$0 = {
  "es6.module": { "chrome": "61", "and_chr": "61", "edge": "16", "firefox": "60", "and_ff": "60", "node": "13.2.0", "opera": "48", "op_mob": "45", "safari": "10.1", "ios": "10.3", "samsung": "8.2", "android": "61", "electron": "2.0", "ios_saf": "10.3" }
};
var nativeModules;
var hasRequiredNativeModules;
function requireNativeModules() {
  if (hasRequiredNativeModules) return nativeModules;
  hasRequiredNativeModules = 1;
  nativeModules = require$$0;
  return nativeModules;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib$1;
  hasRequiredLib$1 = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "TargetNames", {
      enumerable: true,
      get: function() {
        return _options.TargetNames;
      }
    });
    exports2.default = getTargets;
    Object.defineProperty(exports2, "filterItems", {
      enumerable: true,
      get: function() {
        return _filterItems.default;
      }
    });
    Object.defineProperty(exports2, "getInclusionReasons", {
      enumerable: true,
      get: function() {
        return _debug.getInclusionReasons;
      }
    });
    exports2.isBrowsersQueryValid = isBrowsersQueryValid;
    Object.defineProperty(exports2, "isRequired", {
      enumerable: true,
      get: function() {
        return _filterItems.isRequired;
      }
    });
    Object.defineProperty(exports2, "prettifyTargets", {
      enumerable: true,
      get: function() {
        return _pretty.prettifyTargets;
      }
    });
    Object.defineProperty(exports2, "unreleasedLabels", {
      enumerable: true,
      get: function() {
        return _targets.unreleasedLabels;
      }
    });
    var _browserslist = requireBrowserslist();
    var _helperValidatorOption = requireLib$2();
    var _lruCache = requireLruCache();
    var _utils = requireUtils();
    var _targets = requireTargets();
    var _options = requireOptions$1();
    var _pretty = requirePretty();
    var _debug = requireDebug();
    var _filterItems = requireFilterItems();
    const browserModulesData = requireNativeModules();
    const ESM_SUPPORT = browserModulesData["es6.module"];
    const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");
    function validateTargetNames(targets2) {
      const validTargets = Object.keys(_options.TargetNames);
      for (const target of Object.keys(targets2)) {
        if (!(target in _options.TargetNames)) {
          throw new Error(v.formatMessage(`'${target}' is not a valid target
- Did you mean '${(0, _helperValidatorOption.findSuggestion)(target, validTargets)}'?`));
        }
      }
      return targets2;
    }
    function isBrowsersQueryValid(browsers2) {
      return typeof browsers2 === "string" || Array.isArray(browsers2) && browsers2.every((b) => typeof b === "string");
    }
    function validateBrowsers(browsers2) {
      v.invariant(browsers2 === void 0 || isBrowsersQueryValid(browsers2), `'${String(browsers2)}' is not a valid browserslist query`);
      return browsers2;
    }
    function getLowestVersions(browsers2) {
      return browsers2.reduce((all, browser2) => {
        const [browserName, browserVersion] = browser2.split(" ");
        const target = _targets.browserNameMap[browserName];
        if (!target) {
          return all;
        }
        try {
          const splitVersion = browserVersion.split("-")[0].toLowerCase();
          const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, target);
          if (!all[target]) {
            all[target] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);
            return all;
          }
          const version = all[target];
          const isUnreleased = (0, _utils.isUnreleasedVersion)(version, target);
          if (isUnreleased && isSplitUnreleased) {
            all[target] = (0, _utils.getLowestUnreleased)(version, splitVersion, target);
          } else if (isUnreleased) {
            all[target] = (0, _utils.semverify)(splitVersion);
          } else if (!isUnreleased && !isSplitUnreleased) {
            const parsedBrowserVersion = (0, _utils.semverify)(splitVersion);
            all[target] = (0, _utils.semverMin)(version, parsedBrowserVersion);
          }
        } catch (_2) {
        }
        return all;
      }, {});
    }
    function outputDecimalWarning(decimalTargets) {
      if (!decimalTargets.length) {
        return;
      }
      console.warn("Warning, the following targets are using a decimal version:\n");
      decimalTargets.forEach(({
        target,
        value: value2
      }) => console.warn(`  ${target}: ${value2}`));
      console.warn(`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
`);
    }
    function semverifyTarget(target, value2) {
      try {
        return (0, _utils.semverify)(value2);
      } catch (_2) {
        throw new Error(v.formatMessage(`'${value2}' is not a valid value for 'targets.${target}'.`));
      }
    }
    function nodeTargetParser(value2) {
      const parsed = value2 === true || value2 === "current" ? process.versions.node.split("-")[0] : semverifyTarget("node", value2);
      return ["node", parsed];
    }
    function defaultTargetParser(target, value2) {
      const version = (0, _utils.isUnreleasedVersion)(value2, target) ? value2.toLowerCase() : semverifyTarget(target, value2);
      return [target, version];
    }
    function generateTargets(inputTargets) {
      const input = Object.assign({}, inputTargets);
      delete input.esmodules;
      delete input.browsers;
      return input;
    }
    function resolveTargets(queries, env) {
      const resolved = _browserslist(queries, {
        mobileToDesktop: true,
        env
      });
      return getLowestVersions(resolved);
    }
    const targetsCache = new _lruCache({
      max: 64
    });
    function resolveTargetsCached(queries, env) {
      const cacheKey = typeof queries === "string" ? queries : queries.join() + env;
      let cached = targetsCache.get(cacheKey);
      if (!cached) {
        cached = resolveTargets(queries, env);
        targetsCache.set(cacheKey, cached);
      }
      return Object.assign({}, cached);
    }
    function getTargets(inputTargets = {}, options2 = {}) {
      var _browsers, _browsers2;
      let {
        browsers: browsers2,
        esmodules
      } = inputTargets;
      const {
        configPath = ".",
        onBrowserslistConfigFound
      } = options2;
      validateBrowsers(browsers2);
      const input = generateTargets(inputTargets);
      let targets2 = validateTargetNames(input);
      const shouldParseBrowsers = !!browsers2;
      const hasTargets = shouldParseBrowsers || Object.keys(targets2).length > 0;
      const shouldSearchForConfig = !options2.ignoreBrowserslistConfig && !hasTargets;
      if (!browsers2 && shouldSearchForConfig) {
        browsers2 = process.env.BROWSERSLIST;
        if (!browsers2) {
          const configFile = options2.configFile || process.env.BROWSERSLIST_CONFIG || _browserslist.findConfigFile(configPath);
          if (configFile != null) {
            onBrowserslistConfigFound == null || onBrowserslistConfigFound(configFile);
            browsers2 = _browserslist.loadConfig({
              config: configFile,
              env: options2.browserslistEnv
            });
          }
        }
        if (browsers2 == null) {
          {
            browsers2 = [];
          }
        }
      }
      if (esmodules && (esmodules !== "intersect" || !((_browsers = browsers2) != null && _browsers.length))) {
        browsers2 = Object.keys(ESM_SUPPORT).map((browser2) => `${browser2} >= ${ESM_SUPPORT[browser2]}`).join(", ");
        esmodules = false;
      }
      if ((_browsers2 = browsers2) != null && _browsers2.length) {
        const queryBrowsers = resolveTargetsCached(browsers2, options2.browserslistEnv);
        if (esmodules === "intersect") {
          for (const browser2 of Object.keys(queryBrowsers)) {
            if (browser2 !== "deno" && browser2 !== "ie") {
              const esmSupportVersion = ESM_SUPPORT[browser2 === "opera_mobile" ? "op_mob" : browser2];
              if (esmSupportVersion) {
                const version = queryBrowsers[browser2];
                queryBrowsers[browser2] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(esmSupportVersion), browser2);
              } else {
                delete queryBrowsers[browser2];
              }
            } else {
              delete queryBrowsers[browser2];
            }
          }
        }
        targets2 = Object.assign(queryBrowsers, targets2);
      }
      const result = {};
      const decimalWarnings = [];
      for (const target of Object.keys(targets2).sort()) {
        const value2 = targets2[target];
        if (typeof value2 === "number" && value2 % 1 !== 0) {
          decimalWarnings.push({
            target,
            value: value2
          });
        }
        const [parsedTarget, parsedValue] = target === "node" ? nodeTargetParser(value2) : defaultTargetParser(target, value2);
        if (parsedValue) {
          result[parsedTarget] = parsedValue;
        }
      }
      outputDecimalWarning(decimalWarnings);
      return result;
    }
  })(lib$1);
  return lib$1;
}
var hasRequiredResolveTargetsBrowser;
function requireResolveTargetsBrowser() {
  if (hasRequiredResolveTargetsBrowser) return resolveTargetsBrowser;
  hasRequiredResolveTargetsBrowser = 1;
  Object.defineProperty(resolveTargetsBrowser, "__esModule", {
    value: true
  });
  resolveTargetsBrowser.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
  resolveTargetsBrowser.resolveTargets = resolveTargets;
  function _helperCompilationTargets() {
    const data = requireLib$1();
    _helperCompilationTargets = function() {
      return data;
    };
    return data;
  }
  function resolveBrowserslistConfigFile(browserslistConfigFile, configFilePath) {
    return void 0;
  }
  function resolveTargets(options2, root) {
    const optTargets = options2.targets;
    let targets2;
    if (typeof optTargets === "string" || Array.isArray(optTargets)) {
      targets2 = {
        browsers: optTargets
      };
    } else if (optTargets) {
      if ("esmodules" in optTargets) {
        targets2 = Object.assign({}, optTargets, {
          esmodules: "intersect"
        });
      } else {
        targets2 = optTargets;
      }
    }
    return (0, _helperCompilationTargets().default)(targets2, {
      ignoreBrowserslistConfig: true,
      browserslistEnv: options2.browserslistEnv
    });
  }
  return resolveTargetsBrowser;
}
var hasRequiredConfigDescriptors;
function requireConfigDescriptors() {
  if (hasRequiredConfigDescriptors) return configDescriptors;
  hasRequiredConfigDescriptors = 1;
  Object.defineProperty(configDescriptors, "__esModule", {
    value: true
  });
  configDescriptors.createCachedDescriptors = createCachedDescriptors;
  configDescriptors.createDescriptor = createDescriptor;
  configDescriptors.createUncachedDescriptors = createUncachedDescriptors;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _functional = requireFunctional();
  var _index = requireIndexBrowser();
  var _item = requireItem();
  var _caching = requireCaching();
  var _resolveTargets = requireResolveTargetsBrowser();
  function isEqualDescriptor(a, b) {
    var _a$file, _b$file, _a$file2, _b$file2;
    return a.name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && ((_a$file = a.file) == null ? void 0 : _a$file.request) === ((_b$file = b.file) == null ? void 0 : _b$file.request) && ((_a$file2 = a.file) == null ? void 0 : _a$file2.resolved) === ((_b$file2 = b.file) == null ? void 0 : _b$file2.resolved);
  }
  function* handlerOf(value2) {
    return value2;
  }
  function optionsWithResolvedBrowserslistConfigFile(options2, dirname) {
    if (typeof options2.browserslistConfigFile === "string") {
      options2.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options2.browserslistConfigFile, dirname);
    }
    return options2;
  }
  function createCachedDescriptors(dirname, options2, alias) {
    const {
      plugins: plugins2,
      presets,
      passPerPreset
    } = options2;
    return {
      options: optionsWithResolvedBrowserslistConfigFile(options2, dirname),
      plugins: plugins2 ? () => createCachedPluginDescriptors(plugins2, dirname)(alias) : () => handlerOf([]),
      presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([])
    };
  }
  function createUncachedDescriptors(dirname, options2, alias) {
    return {
      options: optionsWithResolvedBrowserslistConfigFile(options2, dirname),
      plugins: (0, _functional.once)(() => createPluginDescriptors(options2.plugins || [], dirname, alias)),
      presets: (0, _functional.once)(() => createPresetDescriptors(options2.presets || [], dirname, alias, !!options2.passPerPreset))
    };
  }
  const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap();
  const createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache2) => {
    const dirname = cache2.using((dir) => dir);
    return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
      const descriptors = yield* createPresetDescriptors(items, dirname, alias, passPerPreset);
      return descriptors.map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
    }));
  });
  const PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap();
  const createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache2) => {
    const dirname = cache2.using((dir) => dir);
    return (0, _caching.makeStrongCache)(function* (alias) {
      const descriptors = yield* createPluginDescriptors(items, dirname, alias);
      return descriptors.map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
    });
  });
  const DEFAULT_OPTIONS = {};
  function loadCachedDescriptor(cache2, desc) {
    const {
      value: value2,
      options: options2 = DEFAULT_OPTIONS
    } = desc;
    if (options2 === false) return desc;
    let cacheByOptions = cache2.get(value2);
    if (!cacheByOptions) {
      cacheByOptions = /* @__PURE__ */ new WeakMap();
      cache2.set(value2, cacheByOptions);
    }
    let possibilities = cacheByOptions.get(options2);
    if (!possibilities) {
      possibilities = [];
      cacheByOptions.set(options2, possibilities);
    }
    if (!possibilities.includes(desc)) {
      const matches = possibilities.filter((possibility) => isEqualDescriptor(possibility, desc));
      if (matches.length > 0) {
        return matches[0];
      }
      possibilities.push(desc);
    }
    return desc;
  }
  function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
    return yield* createDescriptors("preset", items, dirname, alias, passPerPreset);
  }
  function* createPluginDescriptors(items, dirname, alias) {
    return yield* createDescriptors("plugin", items, dirname, alias);
  }
  function* createDescriptors(type, items, dirname, alias, ownPass) {
    const descriptors = yield* _gensync().all(items.map((item2, index) => createDescriptor(item2, dirname, {
      type,
      alias: `${alias}$${index}`,
      ownPass: !!ownPass
    })));
    assertNoDuplicates(descriptors);
    return descriptors;
  }
  function* createDescriptor(pair, dirname, {
    type,
    alias,
    ownPass
  }) {
    const desc = (0, _item.getItemDescriptor)(pair);
    if (desc) {
      return desc;
    }
    let name;
    let options2;
    let value2 = pair;
    if (Array.isArray(value2)) {
      if (value2.length === 3) {
        [value2, options2, name] = value2;
      } else {
        [value2, options2] = value2;
      }
    }
    let file2 = void 0;
    let filepath = null;
    if (typeof value2 === "string") {
      if (typeof type !== "string") {
        throw new Error("To resolve a string-based item, the type of item must be given");
      }
      const resolver = type === "plugin" ? _index.loadPlugin : _index.loadPreset;
      const request = value2;
      ({
        filepath,
        value: value2
      } = yield* resolver(value2, dirname));
      file2 = {
        request,
        resolved: filepath
      };
    }
    if (!value2) {
      throw new Error(`Unexpected falsy value: ${String(value2)}`);
    }
    if (typeof value2 === "object" && value2.__esModule) {
      if (value2.default) {
        value2 = value2.default;
      } else {
        throw new Error("Must export a default export when using ES6 modules.");
      }
    }
    if (typeof value2 !== "object" && typeof value2 !== "function") {
      throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
    }
    if (filepath !== null && typeof value2 === "object" && value2) {
      throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
    }
    return {
      name,
      alias: filepath || alias,
      value: value2,
      options: options2,
      dirname,
      ownPass,
      file: file2
    };
  }
  function assertNoDuplicates(items) {
    const map = /* @__PURE__ */ new Map();
    for (const item2 of items) {
      if (typeof item2.value !== "function") continue;
      let nameMap = map.get(item2.value);
      if (!nameMap) {
        nameMap = /* @__PURE__ */ new Set();
        map.set(item2.value, nameMap);
      }
      if (nameMap.has(item2.name)) {
        const conflicts = items.filter((i) => i.value === item2.value);
        throw new Error([`Duplicate plugin/preset detected.`, `If you'd like to use two separate instances of a plugin,`, `they need separate names, e.g.`, ``, `  plugins: [`, `    ['some-plugin', {}],`, `    ['some-plugin', {}, 'some unique name'],`, `  ]`, ``, `Duplicates detected are:`, `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
      }
      nameMap.add(item2.name);
    }
  }
  return configDescriptors;
}
var hasRequiredItem;
function requireItem() {
  if (hasRequiredItem) return item;
  hasRequiredItem = 1;
  Object.defineProperty(item, "__esModule", {
    value: true
  });
  item.createConfigItem = createConfigItem;
  item.createItemFromDescriptor = createItemFromDescriptor;
  item.getItemDescriptor = getItemDescriptor;
  function _path() {
    const data = require$$1;
    _path = function() {
      return data;
    };
    return data;
  }
  var _configDescriptors = requireConfigDescriptors();
  function createItemFromDescriptor(desc) {
    return new ConfigItem(desc);
  }
  function* createConfigItem(value2, {
    dirname = ".",
    type
  } = {}) {
    const descriptor = yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname), {
      type,
      alias: "programmatic item"
    });
    return createItemFromDescriptor(descriptor);
  }
  const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
  function getItemDescriptor(item2) {
    if (item2 != null && item2[CONFIG_ITEM_BRAND]) {
      return item2._descriptor;
    }
    return void 0;
  }
  class ConfigItem {
    constructor(descriptor) {
      this._descriptor = void 0;
      this[CONFIG_ITEM_BRAND] = true;
      this.value = void 0;
      this.options = void 0;
      this.dirname = void 0;
      this.name = void 0;
      this.file = void 0;
      this._descriptor = descriptor;
      Object.defineProperty(this, "_descriptor", {
        enumerable: false
      });
      Object.defineProperty(this, CONFIG_ITEM_BRAND, {
        enumerable: false
      });
      this.value = this._descriptor.value;
      this.options = this._descriptor.options;
      this.dirname = this._descriptor.dirname;
      this.name = this._descriptor.name;
      this.file = this._descriptor.file ? {
        request: this._descriptor.file.request,
        resolved: this._descriptor.file.resolved
      } : void 0;
      Object.freeze(this);
    }
  }
  Object.freeze(ConfigItem.prototype);
  return item;
}
var configChain = {};
var options = {};
var removed = {};
var hasRequiredRemoved;
function requireRemoved() {
  if (hasRequiredRemoved) return removed;
  hasRequiredRemoved = 1;
  Object.defineProperty(removed, "__esModule", {
    value: true
  });
  removed.default = void 0;
  removed.default = {
    auxiliaryComment: {
      message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
    },
    blacklist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    breakConfig: {
      message: "This is not a necessary option in Babel 6"
    },
    experimental: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    externalHelpers: {
      message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
    },
    extra: {
      message: ""
    },
    jsxPragma: {
      message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
    },
    loose: {
      message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
    },
    metadataUsedHelpers: {
      message: "Not required anymore as this is enabled by default"
    },
    modules: {
      message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
    },
    nonStandard: {
      message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
    },
    optional: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    sourceMapName: {
      message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
    },
    stage: {
      message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
    },
    whitelist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    resolveModuleSource: {
      version: 6,
      message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
    },
    metadata: {
      version: 6,
      message: "Generated plugin metadata is always included in the output result"
    },
    sourceMapTarget: {
      version: 6,
      message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
    }
  };
  return removed;
}
var optionAssertions = {};
var hasRequiredOptionAssertions;
function requireOptionAssertions() {
  if (hasRequiredOptionAssertions) return optionAssertions;
  hasRequiredOptionAssertions = 1;
  Object.defineProperty(optionAssertions, "__esModule", {
    value: true
  });
  optionAssertions.access = access;
  optionAssertions.assertArray = assertArray;
  optionAssertions.assertAssumptions = assertAssumptions;
  optionAssertions.assertBabelrcSearch = assertBabelrcSearch;
  optionAssertions.assertBoolean = assertBoolean;
  optionAssertions.assertCallerMetadata = assertCallerMetadata;
  optionAssertions.assertCompact = assertCompact;
  optionAssertions.assertConfigApplicableTest = assertConfigApplicableTest;
  optionAssertions.assertConfigFileSearch = assertConfigFileSearch;
  optionAssertions.assertFunction = assertFunction;
  optionAssertions.assertIgnoreList = assertIgnoreList;
  optionAssertions.assertInputSourceMap = assertInputSourceMap;
  optionAssertions.assertObject = assertObject;
  optionAssertions.assertPluginList = assertPluginList;
  optionAssertions.assertRootMode = assertRootMode;
  optionAssertions.assertSourceMaps = assertSourceMaps;
  optionAssertions.assertSourceType = assertSourceType;
  optionAssertions.assertString = assertString;
  optionAssertions.assertTargets = assertTargets;
  optionAssertions.msg = msg;
  function _helperCompilationTargets() {
    const data = requireLib$1();
    _helperCompilationTargets = function() {
      return data;
    };
    return data;
  }
  var _options = requireOptions();
  function msg(loc) {
    switch (loc.type) {
      case "root":
        return ``;
      case "env":
        return `${msg(loc.parent)}.env["${loc.name}"]`;
      case "overrides":
        return `${msg(loc.parent)}.overrides[${loc.index}]`;
      case "option":
        return `${msg(loc.parent)}.${loc.name}`;
      case "access":
        return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
      default:
        throw new Error(`Assertion failure: Unknown type ${loc.type}`);
    }
  }
  function access(loc, name) {
    return {
      type: "access",
      name,
      parent: loc
    };
  }
  function assertRootMode(loc, value2) {
    if (value2 !== void 0 && value2 !== "root" && value2 !== "upward" && value2 !== "upward-optional") {
      throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
    }
    return value2;
  }
  function assertSourceMaps(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && value2 !== "inline" && value2 !== "both") {
      throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
    }
    return value2;
  }
  function assertCompact(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && value2 !== "auto") {
      throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
    }
    return value2;
  }
  function assertSourceType(loc, value2) {
    if (value2 !== void 0 && value2 !== "module" && value2 !== "script" && value2 !== "unambiguous") {
      throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
    }
    return value2;
  }
  function assertCallerMetadata(loc, value2) {
    const obj = assertObject(loc, value2);
    if (obj) {
      if (typeof obj.name !== "string") {
        throw new Error(`${msg(loc)} set but does not contain "name" property string`);
      }
      for (const prop of Object.keys(obj)) {
        const propLoc = access(loc, prop);
        const value3 = obj[prop];
        if (value3 != null && typeof value3 !== "boolean" && typeof value3 !== "string" && typeof value3 !== "number") {
          throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
        }
      }
    }
    return value2;
  }
  function assertInputSourceMap(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && (typeof value2 !== "object" || !value2)) {
      throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
    }
    return value2;
  }
  function assertString(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "string") {
      throw new Error(`${msg(loc)} must be a string, or undefined`);
    }
    return value2;
  }
  function assertFunction(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "function") {
      throw new Error(`${msg(loc)} must be a function, or undefined`);
    }
    return value2;
  }
  function assertBoolean(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean") {
      throw new Error(`${msg(loc)} must be a boolean, or undefined`);
    }
    return value2;
  }
  function assertObject(loc, value2) {
    if (value2 !== void 0 && (typeof value2 !== "object" || Array.isArray(value2) || !value2)) {
      throw new Error(`${msg(loc)} must be an object, or undefined`);
    }
    return value2;
  }
  function assertArray(loc, value2) {
    if (value2 != null && !Array.isArray(value2)) {
      throw new Error(`${msg(loc)} must be an array, or undefined`);
    }
    return value2;
  }
  function assertIgnoreList(loc, value2) {
    const arr = assertArray(loc, value2);
    arr == null || arr.forEach((item2, i) => assertIgnoreItem(access(loc, i), item2));
    return arr;
  }
  function assertIgnoreItem(loc, value2) {
    if (typeof value2 !== "string" && typeof value2 !== "function" && !(value2 instanceof RegExp)) {
      throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);
    }
    return value2;
  }
  function assertConfigApplicableTest(loc, value2) {
    if (value2 === void 0) {
      return value2;
    }
    if (Array.isArray(value2)) {
      value2.forEach((item2, i) => {
        if (!checkValidTest(item2)) {
          throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
        }
      });
    } else if (!checkValidTest(value2)) {
      throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
    }
    return value2;
  }
  function checkValidTest(value2) {
    return typeof value2 === "string" || typeof value2 === "function" || value2 instanceof RegExp;
  }
  function assertConfigFileSearch(loc, value2) {
    if (value2 !== void 0 && typeof value2 !== "boolean" && typeof value2 !== "string") {
      throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
    }
    return value2;
  }
  function assertBabelrcSearch(loc, value2) {
    if (value2 === void 0 || typeof value2 === "boolean") {
      return value2;
    }
    if (Array.isArray(value2)) {
      value2.forEach((item2, i) => {
        if (!checkValidTest(item2)) {
          throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
        }
      });
    } else if (!checkValidTest(value2)) {
      throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
    }
    return value2;
  }
  function assertPluginList(loc, value2) {
    const arr = assertArray(loc, value2);
    if (arr) {
      arr.forEach((item2, i) => assertPluginItem(access(loc, i), item2));
    }
    return arr;
  }
  function assertPluginItem(loc, value2) {
    if (Array.isArray(value2)) {
      if (value2.length === 0) {
        throw new Error(`${msg(loc)} must include an object`);
      }
      if (value2.length > 3) {
        throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);
      }
      assertPluginTarget(access(loc, 0), value2[0]);
      if (value2.length > 1) {
        const opts = value2[1];
        if (opts !== void 0 && opts !== false && (typeof opts !== "object" || Array.isArray(opts) || opts === null)) {
          throw new Error(`${msg(access(loc, 1))} must be an object, false, or undefined`);
        }
      }
      if (value2.length === 3) {
        const name = value2[2];
        if (name !== void 0 && typeof name !== "string") {
          throw new Error(`${msg(access(loc, 2))} must be a string, or undefined`);
        }
      }
    } else {
      assertPluginTarget(loc, value2);
    }
    return value2;
  }
  function assertPluginTarget(loc, value2) {
    if ((typeof value2 !== "object" || !value2) && typeof value2 !== "string" && typeof value2 !== "function") {
      throw new Error(`${msg(loc)} must be a string, object, function`);
    }
    return value2;
  }
  function assertTargets(loc, value2) {
    if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) return value2;
    if (typeof value2 !== "object" || !value2 || Array.isArray(value2)) {
      throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
    }
    const browsersLoc = access(loc, "browsers");
    const esmodulesLoc = access(loc, "esmodules");
    assertBrowsersList(browsersLoc, value2.browsers);
    assertBoolean(esmodulesLoc, value2.esmodules);
    for (const key of Object.keys(value2)) {
      const val = value2[key];
      const subLoc = access(loc, key);
      if (key === "esmodules") assertBoolean(subLoc, val);
      else if (key === "browsers") assertBrowsersList(subLoc, val);
      else if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
        const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
        throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
      } else assertBrowserVersion(subLoc, val);
    }
    return value2;
  }
  function assertBrowsersList(loc, value2) {
    if (value2 !== void 0 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) {
      throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
    }
  }
  function assertBrowserVersion(loc, value2) {
    if (typeof value2 === "number" && Math.round(value2) === value2) return;
    if (typeof value2 === "string") return;
    throw new Error(`${msg(loc)} must be a string or an integer number`);
  }
  function assertAssumptions(loc, value2) {
    if (value2 === void 0) return;
    if (typeof value2 !== "object" || value2 === null) {
      throw new Error(`${msg(loc)} must be an object or undefined.`);
    }
    let root = loc;
    do {
      root = root.parent;
    } while (root.type !== "root");
    const inPreset = root.source === "preset";
    for (const name of Object.keys(value2)) {
      const subLoc = access(loc, name);
      if (!_options.assumptionsNames.has(name)) {
        throw new Error(`${msg(subLoc)} is not a supported assumption.`);
      }
      if (typeof value2[name] !== "boolean") {
        throw new Error(`${msg(subLoc)} must be a boolean.`);
      }
      if (inPreset && value2[name] === false) {
        throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
      }
    }
    return value2;
  }
  return optionAssertions;
}
var configError = {};
var rewriteStackTrace = {};
var hasRequiredRewriteStackTrace;
function requireRewriteStackTrace() {
  if (hasRequiredRewriteStackTrace) return rewriteStackTrace;
  hasRequiredRewriteStackTrace = 1;
  Object.defineProperty(rewriteStackTrace, "__esModule", {
    value: true
  });
  rewriteStackTrace.beginHiddenCallStack = beginHiddenCallStack;
  rewriteStackTrace.endHiddenCallStack = endHiddenCallStack;
  rewriteStackTrace.expectedError = expectedError;
  rewriteStackTrace.injectVirtualStackFrame = injectVirtualStackFrame;
  var _Object$getOwnPropert;
  const ErrorToString = Function.call.bind(Error.prototype.toString);
  const SUPPORTED = !!Error.captureStackTrace && ((_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) == null ? void 0 : _Object$getOwnPropert.writable) === true;
  const START_HIDING = "startHiding - secret - don't use this - v1";
  const STOP_HIDING = "stopHiding - secret - don't use this - v1";
  const expectedErrors = /* @__PURE__ */ new WeakSet();
  const virtualFrames = /* @__PURE__ */ new WeakMap();
  function CallSite(filename) {
    return /* @__PURE__ */ Object.create({
      isNative: () => false,
      isConstructor: () => false,
      isToplevel: () => true,
      getFileName: () => filename,
      getLineNumber: () => void 0,
      getColumnNumber: () => void 0,
      getFunctionName: () => void 0,
      getMethodName: () => void 0,
      getTypeName: () => void 0,
      toString: () => filename
    });
  }
  function injectVirtualStackFrame(error2, filename) {
    if (!SUPPORTED) return;
    let frames = virtualFrames.get(error2);
    if (!frames) virtualFrames.set(error2, frames = []);
    frames.push(CallSite(filename));
    return error2;
  }
  function expectedError(error2) {
    if (!SUPPORTED) return;
    expectedErrors.add(error2);
    return error2;
  }
  function beginHiddenCallStack(fn2) {
    if (!SUPPORTED) return fn2;
    return Object.defineProperty(function(...args) {
      setupPrepareStackTrace();
      return fn2(...args);
    }, "name", {
      value: STOP_HIDING
    });
  }
  function endHiddenCallStack(fn2) {
    if (!SUPPORTED) return fn2;
    return Object.defineProperty(function(...args) {
      return fn2(...args);
    }, "name", {
      value: START_HIDING
    });
  }
  function setupPrepareStackTrace() {
    setupPrepareStackTrace = () => {
    };
    const {
      prepareStackTrace = defaultPrepareStackTrace
    } = Error;
    const MIN_STACK_TRACE_LIMIT = 50;
    Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, MIN_STACK_TRACE_LIMIT));
    Error.prepareStackTrace = function stackTraceRewriter(err, trace) {
      let newTrace = [];
      const isExpected = expectedErrors.has(err);
      let status = isExpected ? "hiding" : "unknown";
      for (let i = 0; i < trace.length; i++) {
        const name = trace[i].getFunctionName();
        if (name === START_HIDING) {
          status = "hiding";
        } else if (name === STOP_HIDING) {
          if (status === "hiding") {
            status = "showing";
            if (virtualFrames.has(err)) {
              newTrace.unshift(...virtualFrames.get(err));
            }
          } else if (status === "unknown") {
            newTrace = trace;
            break;
          }
        } else if (status !== "hiding") {
          newTrace.push(trace[i]);
        }
      }
      return prepareStackTrace(err, newTrace);
    };
  }
  function defaultPrepareStackTrace(err, trace) {
    if (trace.length === 0) return ErrorToString(err);
    return `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
  }
  return rewriteStackTrace;
}
var hasRequiredConfigError;
function requireConfigError() {
  if (hasRequiredConfigError) return configError;
  hasRequiredConfigError = 1;
  Object.defineProperty(configError, "__esModule", {
    value: true
  });
  configError.default = void 0;
  var _rewriteStackTrace = requireRewriteStackTrace();
  class ConfigError extends Error {
    constructor(message, filename) {
      super(message);
      (0, _rewriteStackTrace.expectedError)(this);
      if (filename) (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
    }
  }
  configError.default = ConfigError;
  return configError;
}
var hasRequiredOptions;
function requireOptions() {
  if (hasRequiredOptions) return options;
  hasRequiredOptions = 1;
  Object.defineProperty(options, "__esModule", {
    value: true
  });
  options.assumptionsNames = void 0;
  options.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;
  options.validate = validate2;
  var _removed = requireRemoved();
  var _optionAssertions = requireOptionAssertions();
  var _configError = requireConfigError();
  const ROOT_VALIDATORS = {
    cwd: _optionAssertions.assertString,
    root: _optionAssertions.assertString,
    rootMode: _optionAssertions.assertRootMode,
    configFile: _optionAssertions.assertConfigFileSearch,
    caller: _optionAssertions.assertCallerMetadata,
    filename: _optionAssertions.assertString,
    filenameRelative: _optionAssertions.assertString,
    code: _optionAssertions.assertBoolean,
    ast: _optionAssertions.assertBoolean,
    cloneInputAst: _optionAssertions.assertBoolean,
    envName: _optionAssertions.assertString
  };
  const BABELRC_VALIDATORS = {
    babelrc: _optionAssertions.assertBoolean,
    babelrcRoots: _optionAssertions.assertBabelrcSearch
  };
  const NONPRESET_VALIDATORS = {
    extends: _optionAssertions.assertString,
    ignore: _optionAssertions.assertIgnoreList,
    only: _optionAssertions.assertIgnoreList,
    targets: _optionAssertions.assertTargets,
    browserslistConfigFile: _optionAssertions.assertConfigFileSearch,
    browserslistEnv: _optionAssertions.assertString
  };
  const COMMON_VALIDATORS = {
    inputSourceMap: _optionAssertions.assertInputSourceMap,
    presets: _optionAssertions.assertPluginList,
    plugins: _optionAssertions.assertPluginList,
    passPerPreset: _optionAssertions.assertBoolean,
    assumptions: _optionAssertions.assertAssumptions,
    env: assertEnvSet,
    overrides: assertOverridesList,
    test: _optionAssertions.assertConfigApplicableTest,
    include: _optionAssertions.assertConfigApplicableTest,
    exclude: _optionAssertions.assertConfigApplicableTest,
    retainLines: _optionAssertions.assertBoolean,
    comments: _optionAssertions.assertBoolean,
    shouldPrintComment: _optionAssertions.assertFunction,
    compact: _optionAssertions.assertCompact,
    minified: _optionAssertions.assertBoolean,
    auxiliaryCommentBefore: _optionAssertions.assertString,
    auxiliaryCommentAfter: _optionAssertions.assertString,
    sourceType: _optionAssertions.assertSourceType,
    wrapPluginVisitorMethod: _optionAssertions.assertFunction,
    highlightCode: _optionAssertions.assertBoolean,
    sourceMaps: _optionAssertions.assertSourceMaps,
    sourceMap: _optionAssertions.assertSourceMaps,
    sourceFileName: _optionAssertions.assertString,
    sourceRoot: _optionAssertions.assertString,
    parserOpts: _optionAssertions.assertObject,
    generatorOpts: _optionAssertions.assertObject
  };
  {
    Object.assign(COMMON_VALIDATORS, {
      getModuleId: _optionAssertions.assertFunction,
      moduleRoot: _optionAssertions.assertString,
      moduleIds: _optionAssertions.assertBoolean,
      moduleId: _optionAssertions.assertString
    });
  }
  const knownAssumptions = ["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUninitializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"];
  options.assumptionsNames = new Set(knownAssumptions);
  function getSource(loc) {
    return loc.type === "root" ? loc.source : getSource(loc.parent);
  }
  function validate2(type, opts, filename) {
    try {
      return validateNested({
        type: "root",
        source: type
      }, opts);
    } catch (error2) {
      const configError2 = new _configError.default(error2.message, filename);
      if (error2.code) configError2.code = error2.code;
      throw configError2;
    }
  }
  function validateNested(loc, opts) {
    const type = getSource(loc);
    assertNoDuplicateSourcemap(opts);
    Object.keys(opts).forEach((key) => {
      const optLoc = {
        type: "option",
        name: key,
        parent: loc
      };
      if (type === "preset" && NONPRESET_VALIDATORS[key]) {
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
      }
      if (type !== "arguments" && ROOT_VALIDATORS[key]) {
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
      }
      if (type !== "arguments" && type !== "configfile" && BABELRC_VALIDATORS[key]) {
        if (type === "babelrcfile" || type === "extendsfile") {
          throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
        }
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
      }
      const validator2 = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;
      validator2(optLoc, opts[key]);
    });
    return opts;
  }
  function throwUnknownError(loc) {
    const key = loc.name;
    if (_removed.default[key]) {
      const {
        message,
        version = 5
      } = _removed.default[key];
      throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
    } else {
      const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
      unknownOptErr.code = "BABEL_UNKNOWN_OPTION";
      throw unknownOptErr;
    }
  }
  function assertNoDuplicateSourcemap(opts) {
    if (hasOwnProperty.call(opts, "sourceMap") && hasOwnProperty.call(opts, "sourceMaps")) {
      throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
    }
  }
  function assertEnvSet(loc, value2) {
    if (loc.parent.type === "env") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
    }
    const parent = loc.parent;
    const obj = (0, _optionAssertions.assertObject)(loc, value2);
    if (obj) {
      for (const envName of Object.keys(obj)) {
        const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
        if (!env) continue;
        const envLoc = {
          type: "env",
          name: envName,
          parent
        };
        validateNested(envLoc, env);
      }
    }
    return obj;
  }
  function assertOverridesList(loc, value2) {
    if (loc.parent.type === "env") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
    }
    if (loc.parent.type === "overrides") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
    }
    const parent = loc.parent;
    const arr = (0, _optionAssertions.assertArray)(loc, value2);
    if (arr) {
      for (const [index, item2] of arr.entries()) {
        const objLoc = (0, _optionAssertions.access)(loc, index);
        const env = (0, _optionAssertions.assertObject)(objLoc, item2);
        if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
        const overridesLoc = {
          type: "overrides",
          index,
          parent
        };
        validateNested(overridesLoc, env);
      }
    }
    return arr;
  }
  function checkNoUnwrappedItemOptionPairs(items, index, type, e) {
    if (index === 0) return;
    const lastItem = items[index - 1];
    const thisItem = items[index];
    if (lastItem.file && lastItem.options === void 0 && typeof thisItem.value === "object") {
      e.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;
    }
  }
  return options;
}
var patternToRegex = {};
var hasRequiredPatternToRegex;
function requirePatternToRegex() {
  if (hasRequiredPatternToRegex) return patternToRegex;
  hasRequiredPatternToRegex = 1;
  Object.defineProperty(patternToRegex, "__esModule", {
    value: true
  });
  patternToRegex.default = pathToPattern;
  function _path() {
    const data = require$$1;
    _path = function() {
      return data;
    };
    return data;
  }
  const sep = `\\${_path().sep}`;
  const endSep = `(?:${sep}|$)`;
  const substitution = `[^${sep}]+`;
  const starPat = `(?:${substitution}${sep})`;
  const starPatLast = `(?:${substitution}${endSep})`;
  const starStarPat = `${starPat}*?`;
  const starStarPatLast = `${starPat}*?${starPatLast}?`;
  function escapeRegExp(string2) {
    return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
  }
  function pathToPattern(pattern, dirname) {
    const parts = _path().resolve(dirname, pattern).split(_path().sep);
    return new RegExp(["^", ...parts.map((part, i) => {
      const last = i === parts.length - 1;
      if (part === "**") return last ? starStarPatLast : starStarPat;
      if (part === "*") return last ? starPatLast : starPat;
      if (part.indexOf("*.") === 0) {
        return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);
      }
      return escapeRegExp(part) + (last ? endSep : sep);
    })].join(""));
  }
  return patternToRegex;
}
var printer$1 = {};
var hasRequiredPrinter;
function requirePrinter() {
  if (hasRequiredPrinter) return printer$1;
  hasRequiredPrinter = 1;
  Object.defineProperty(printer$1, "__esModule", {
    value: true
  });
  printer$1.ConfigPrinter = printer$1.ChainFormatter = void 0;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  const ChainFormatter = printer$1.ChainFormatter = {
    Programmatic: 0,
    Config: 1
  };
  const Formatter = {
    title(type, callerName, filepath) {
      let title = "";
      if (type === ChainFormatter.Programmatic) {
        title = "programmatic options";
        if (callerName) {
          title += " from " + callerName;
        }
      } else {
        title = "config " + filepath;
      }
      return title;
    },
    loc(index, envName) {
      let loc = "";
      if (index != null) {
        loc += `.overrides[${index}]`;
      }
      if (envName != null) {
        loc += `.env["${envName}"]`;
      }
      return loc;
    },
    *optionsAndDescriptors(opt) {
      const content = Object.assign({}, opt.options);
      delete content.overrides;
      delete content.env;
      const pluginDescriptors = [...yield* opt.plugins()];
      if (pluginDescriptors.length) {
        content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d));
      }
      const presetDescriptors = [...yield* opt.presets()];
      if (presetDescriptors.length) {
        content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d));
      }
      return JSON.stringify(content, void 0, 2);
    }
  };
  function descriptorToConfig(d) {
    var _d$file;
    let name = (_d$file = d.file) == null ? void 0 : _d$file.request;
    if (name == null) {
      if (typeof d.value === "object") {
        name = d.value;
      } else if (typeof d.value === "function") {
        name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;
      }
    }
    if (name == null) {
      name = "[Unknown]";
    }
    if (d.options === void 0) {
      return name;
    } else if (d.name == null) {
      return [name, d.options];
    } else {
      return [name, d.options, d.name];
    }
  }
  class ConfigPrinter {
    constructor() {
      this._stack = [];
    }
    configure(enabled, type, {
      callerName,
      filepath
    }) {
      if (!enabled) return () => {
      };
      return (content, index, envName) => {
        this._stack.push({
          type,
          callerName,
          filepath,
          content,
          index,
          envName
        });
      };
    }
    static *format(config2) {
      let title = Formatter.title(config2.type, config2.callerName, config2.filepath);
      const loc = Formatter.loc(config2.index, config2.envName);
      if (loc) title += ` ${loc}`;
      const content = yield* Formatter.optionsAndDescriptors(config2.content);
      return `${title}
${content}`;
    }
    *output() {
      if (this._stack.length === 0) return "";
      const configs = yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)));
      return configs.join("\n\n");
    }
  }
  printer$1.ConfigPrinter = ConfigPrinter;
  return printer$1;
}
var hasRequiredConfigChain;
function requireConfigChain() {
  if (hasRequiredConfigChain) return configChain;
  hasRequiredConfigChain = 1;
  Object.defineProperty(configChain, "__esModule", {
    value: true
  });
  configChain.buildPresetChain = buildPresetChain;
  configChain.buildPresetChainWalker = void 0;
  configChain.buildRootChain = buildRootChain;
  function _path() {
    const data = require$$1;
    _path = function() {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = requireBrowser$1();
    _debug = function() {
      return data;
    };
    return data;
  }
  var _options = requireOptions();
  var _patternToRegex = requirePatternToRegex();
  var _printer = requirePrinter();
  var _rewriteStackTrace = requireRewriteStackTrace();
  var _configError = requireConfigError();
  var _index = requireIndexBrowser();
  var _caching = requireCaching();
  var _configDescriptors = requireConfigDescriptors();
  const debug2 = _debug()("babel:config:config-chain");
  function* buildPresetChain(arg, context2) {
    const chain = yield* buildPresetChainWalker(arg, context2);
    if (!chain) return null;
    return {
      plugins: dedupDescriptors(chain.plugins),
      presets: dedupDescriptors(chain.presets),
      options: chain.options.map((o) => normalizeOptions(o)),
      files: /* @__PURE__ */ new Set()
    };
  }
  const buildPresetChainWalker = configChain.buildPresetChainWalker = makeChainWalker({
    root: (preset) => loadPresetDescriptors(preset),
    env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
    overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),
    overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName),
    createLogger: () => () => {
    }
  });
  const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors));
  const loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName)));
  const loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index)));
  const loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
  function* buildRootChain(opts, context2) {
    let configReport, babelRcReport;
    const programmaticLogger = new _printer.ConfigPrinter();
    const programmaticChain = yield* loadProgrammaticChain({
      options: opts,
      dirname: context2.cwd
    }, context2, void 0, programmaticLogger);
    if (!programmaticChain) return null;
    const programmaticReport = yield* programmaticLogger.output();
    let configFile;
    if (typeof opts.configFile === "string") {
      configFile = yield* (0, _index.loadConfig)(opts.configFile, context2.cwd, context2.envName, context2.caller);
    } else if (opts.configFile !== false) {
      configFile = yield* (0, _index.findRootConfig)(context2.root, context2.envName, context2.caller);
    }
    let {
      babelrc,
      babelrcRoots
    } = opts;
    let babelrcRootsDirectory = context2.cwd;
    const configFileChain = emptyChain();
    const configFileLogger = new _printer.ConfigPrinter();
    if (configFile) {
      const validatedFile = validateConfigFile(configFile);
      const result = yield* loadFileChain(validatedFile, context2, void 0, configFileLogger);
      if (!result) return null;
      configReport = yield* configFileLogger.output();
      if (babelrc === void 0) {
        babelrc = validatedFile.options.babelrc;
      }
      if (babelrcRoots === void 0) {
        babelrcRootsDirectory = validatedFile.dirname;
        babelrcRoots = validatedFile.options.babelrcRoots;
      }
      mergeChain(configFileChain, result);
    }
    let ignoreFile, babelrcFile;
    let isIgnored = false;
    const fileChain = emptyChain();
    if ((babelrc === true || babelrc === void 0) && typeof context2.filename === "string") {
      const pkgData = yield* (0, _index.findPackageData)(context2.filename);
      if (pkgData && babelrcLoadEnabled(context2, pkgData, babelrcRoots, babelrcRootsDirectory)) {
        ({
          ignore: ignoreFile,
          config: babelrcFile
        } = yield* (0, _index.findRelativeConfig)(pkgData, context2.envName, context2.caller));
        if (ignoreFile) {
          fileChain.files.add(ignoreFile.filepath);
        }
        if (ignoreFile && shouldIgnore(context2, ignoreFile.ignore, null, ignoreFile.dirname)) {
          isIgnored = true;
        }
        if (babelrcFile && !isIgnored) {
          const validatedFile = validateBabelrcFile(babelrcFile);
          const babelrcLogger = new _printer.ConfigPrinter();
          const result = yield* loadFileChain(validatedFile, context2, void 0, babelrcLogger);
          if (!result) {
            isIgnored = true;
          } else {
            babelRcReport = yield* babelrcLogger.output();
            mergeChain(fileChain, result);
          }
        }
        if (babelrcFile && isIgnored) {
          fileChain.files.add(babelrcFile.filepath);
        }
      }
    }
    if (context2.showConfig) {
      console.log(`Babel configs on "${context2.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x2) => !!x2).join("\n\n") + "\n-----End Babel configs-----");
    }
    const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
    return {
      plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
      presets: isIgnored ? [] : dedupDescriptors(chain.presets),
      options: isIgnored ? [] : chain.options.map((o) => normalizeOptions(o)),
      fileHandling: isIgnored ? "ignored" : "transpile",
      ignore: ignoreFile || void 0,
      babelrc: babelrcFile || void 0,
      config: configFile || void 0,
      files: chain.files
    };
  }
  function babelrcLoadEnabled(context2, pkgData, babelrcRoots, babelrcRootsDirectory) {
    if (typeof babelrcRoots === "boolean") return babelrcRoots;
    const absoluteRoot = context2.root;
    if (babelrcRoots === void 0) {
      return pkgData.directories.includes(absoluteRoot);
    }
    let babelrcPatterns = babelrcRoots;
    if (!Array.isArray(babelrcPatterns)) {
      babelrcPatterns = [babelrcPatterns];
    }
    babelrcPatterns = babelrcPatterns.map((pat) => {
      return typeof pat === "string" ? _path().resolve(babelrcRootsDirectory, pat) : pat;
    });
    if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {
      return pkgData.directories.includes(absoluteRoot);
    }
    return babelrcPatterns.some((pat) => {
      if (typeof pat === "string") {
        pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
      }
      return pkgData.directories.some((directory) => {
        return matchPattern(pat, babelrcRootsDirectory, directory, context2);
      });
    });
  }
  const validateConfigFile = (0, _caching.makeWeakCacheSync)((file2) => ({
    filepath: file2.filepath,
    dirname: file2.dirname,
    options: (0, _options.validate)("configfile", file2.options, file2.filepath)
  }));
  const validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file2) => ({
    filepath: file2.filepath,
    dirname: file2.dirname,
    options: (0, _options.validate)("babelrcfile", file2.options, file2.filepath)
  }));
  const validateExtendFile = (0, _caching.makeWeakCacheSync)((file2) => ({
    filepath: file2.filepath,
    dirname: file2.dirname,
    options: (0, _options.validate)("extendsfile", file2.options, file2.filepath)
  }));
  const loadProgrammaticChain = makeChainWalker({
    root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors),
    env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName),
    overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index),
    overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName),
    createLogger: (input, context2, baseLogger) => buildProgrammaticLogger(input, context2, baseLogger)
  });
  const loadFileChainWalker = makeChainWalker({
    root: (file2) => loadFileDescriptors(file2),
    env: (file2, envName) => loadFileEnvDescriptors(file2)(envName),
    overrides: (file2, index) => loadFileOverridesDescriptors(file2)(index),
    overridesEnv: (file2, index, envName) => loadFileOverridesEnvDescriptors(file2)(index)(envName),
    createLogger: (file2, context2, baseLogger) => buildFileLogger(file2.filepath, context2, baseLogger)
  });
  function* loadFileChain(input, context2, files, baseLogger) {
    const chain = yield* loadFileChainWalker(input, context2, files, baseLogger);
    chain == null || chain.files.add(input.filepath);
    return chain;
  }
  const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file2) => buildRootDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors));
  const loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file2) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors, envName)));
  const loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file2) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors, index)));
  const loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file2) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file2, file2.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
  function buildFileLogger(filepath, context2, baseLogger) {
    if (!baseLogger) {
      return () => {
      };
    }
    return baseLogger.configure(context2.showConfig, _printer.ChainFormatter.Config, {
      filepath
    });
  }
  function buildRootDescriptors({
    dirname,
    options: options2
  }, alias, descriptors) {
    return descriptors(dirname, options2, alias);
  }
  function buildProgrammaticLogger(_2, context2, baseLogger) {
    var _context$caller;
    if (!baseLogger) {
      return () => {
      };
    }
    return baseLogger.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, {
      callerName: (_context$caller = context2.caller) == null ? void 0 : _context$caller.name
    });
  }
  function buildEnvDescriptors({
    dirname,
    options: options2
  }, alias, descriptors, envName) {
    var _options$env;
    const opts = (_options$env = options2.env) == null ? void 0 : _options$env[envName];
    return opts ? descriptors(dirname, opts, `${alias}.env["${envName}"]`) : null;
  }
  function buildOverrideDescriptors({
    dirname,
    options: options2
  }, alias, descriptors, index) {
    var _options$overrides;
    const opts = (_options$overrides = options2.overrides) == null ? void 0 : _options$overrides[index];
    if (!opts) throw new Error("Assertion failure - missing override");
    return descriptors(dirname, opts, `${alias}.overrides[${index}]`);
  }
  function buildOverrideEnvDescriptors({
    dirname,
    options: options2
  }, alias, descriptors, index, envName) {
    var _options$overrides2, _override$env;
    const override = (_options$overrides2 = options2.overrides) == null ? void 0 : _options$overrides2[index];
    if (!override) throw new Error("Assertion failure - missing override");
    const opts = (_override$env = override.env) == null ? void 0 : _override$env[envName];
    return opts ? descriptors(dirname, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
  }
  function makeChainWalker({
    root,
    env,
    overrides,
    overridesEnv,
    createLogger
  }) {
    return function* chainWalker(input, context2, files = /* @__PURE__ */ new Set(), baseLogger) {
      const {
        dirname
      } = input;
      const flattenedConfigs = [];
      const rootOpts = root(input);
      if (configIsApplicable(rootOpts, dirname, context2, input.filepath)) {
        flattenedConfigs.push({
          config: rootOpts,
          envName: void 0,
          index: void 0
        });
        const envOpts = env(input, context2.envName);
        if (envOpts && configIsApplicable(envOpts, dirname, context2, input.filepath)) {
          flattenedConfigs.push({
            config: envOpts,
            envName: context2.envName,
            index: void 0
          });
        }
        (rootOpts.options.overrides || []).forEach((_2, index) => {
          const overrideOps = overrides(input, index);
          if (configIsApplicable(overrideOps, dirname, context2, input.filepath)) {
            flattenedConfigs.push({
              config: overrideOps,
              index,
              envName: void 0
            });
            const overrideEnvOpts = overridesEnv(input, index, context2.envName);
            if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context2, input.filepath)) {
              flattenedConfigs.push({
                config: overrideEnvOpts,
                index,
                envName: context2.envName
              });
            }
          }
        });
      }
      if (flattenedConfigs.some(({
        config: {
          options: {
            ignore,
            only
          }
        }
      }) => shouldIgnore(context2, ignore, only, dirname))) {
        return null;
      }
      const chain = emptyChain();
      const logger = createLogger(input, context2, baseLogger);
      for (const {
        config: config2,
        index,
        envName
      } of flattenedConfigs) {
        if (!(yield* mergeExtendsChain(chain, config2.options, dirname, context2, files, baseLogger))) {
          return null;
        }
        logger(config2, index, envName);
        yield* mergeChainOpts(chain, config2);
      }
      return chain;
    };
  }
  function* mergeExtendsChain(chain, opts, dirname, context2, files, baseLogger) {
    if (opts.extends === void 0) return true;
    const file2 = yield* (0, _index.loadConfig)(opts.extends, dirname, context2.envName, context2.caller);
    if (files.has(file2)) {
      throw new Error(`Configuration cycle detected loading ${file2.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file3) => ` - ${file3.filepath}`).join("\n"));
    }
    files.add(file2);
    const fileChain = yield* loadFileChain(validateExtendFile(file2), context2, files, baseLogger);
    files.delete(file2);
    if (!fileChain) return false;
    mergeChain(chain, fileChain);
    return true;
  }
  function mergeChain(target, source) {
    target.options.push(...source.options);
    target.plugins.push(...source.plugins);
    target.presets.push(...source.presets);
    for (const file2 of source.files) {
      target.files.add(file2);
    }
    return target;
  }
  function* mergeChainOpts(target, {
    options: options2,
    plugins: plugins2,
    presets
  }) {
    target.options.push(options2);
    target.plugins.push(...yield* plugins2());
    target.presets.push(...yield* presets());
    return target;
  }
  function emptyChain() {
    return {
      options: [],
      presets: [],
      plugins: [],
      files: /* @__PURE__ */ new Set()
    };
  }
  function normalizeOptions(opts) {
    const options2 = Object.assign({}, opts);
    delete options2.extends;
    delete options2.env;
    delete options2.overrides;
    delete options2.plugins;
    delete options2.presets;
    delete options2.passPerPreset;
    delete options2.ignore;
    delete options2.only;
    delete options2.test;
    delete options2.include;
    delete options2.exclude;
    if (hasOwnProperty.call(options2, "sourceMap")) {
      options2.sourceMaps = options2.sourceMap;
      delete options2.sourceMap;
    }
    return options2;
  }
  function dedupDescriptors(items) {
    const map = /* @__PURE__ */ new Map();
    const descriptors = [];
    for (const item2 of items) {
      if (typeof item2.value === "function") {
        const fnKey = item2.value;
        let nameMap = map.get(fnKey);
        if (!nameMap) {
          nameMap = /* @__PURE__ */ new Map();
          map.set(fnKey, nameMap);
        }
        let desc = nameMap.get(item2.name);
        if (!desc) {
          desc = {
            value: item2
          };
          descriptors.push(desc);
          if (!item2.ownPass) nameMap.set(item2.name, desc);
        } else {
          desc.value = item2;
        }
      } else {
        descriptors.push({
          value: item2
        });
      }
    }
    return descriptors.reduce((acc, desc) => {
      acc.push(desc.value);
      return acc;
    }, []);
  }
  function configIsApplicable({
    options: options2
  }, dirname, context2, configName) {
    return (options2.test === void 0 || configFieldIsApplicable(context2, options2.test, dirname, configName)) && (options2.include === void 0 || configFieldIsApplicable(context2, options2.include, dirname, configName)) && (options2.exclude === void 0 || !configFieldIsApplicable(context2, options2.exclude, dirname, configName));
  }
  function configFieldIsApplicable(context2, test, dirname, configName) {
    const patterns = Array.isArray(test) ? test : [test];
    return matchesPatterns(context2, patterns, dirname, configName);
  }
  function ignoreListReplacer(_key, value2) {
    if (value2 instanceof RegExp) {
      return String(value2);
    }
    return value2;
  }
  function shouldIgnore(context2, ignore, only, dirname) {
    if (ignore && matchesPatterns(context2, ignore, dirname)) {
      var _context$filename;
      const message = `No config is applied to "${(_context$filename = context2.filename) != null ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname}"`;
      debug2(message);
      if (context2.showConfig) {
        console.log(message);
      }
      return true;
    }
    if (only && !matchesPatterns(context2, only, dirname)) {
      var _context$filename2;
      const message = `No config is applied to "${(_context$filename2 = context2.filename) != null ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname}"`;
      debug2(message);
      if (context2.showConfig) {
        console.log(message);
      }
      return true;
    }
    return false;
  }
  function matchesPatterns(context2, patterns, dirname, configName) {
    return patterns.some((pattern) => matchPattern(pattern, dirname, context2.filename, context2, configName));
  }
  function matchPattern(pattern, dirname, pathToTest, context2, configName) {
    if (typeof pattern === "function") {
      return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, {
        dirname,
        envName: context2.envName,
        caller: context2.caller
      });
    }
    if (typeof pathToTest !== "string") {
      throw new _configError.default(`Configuration contains string/RegExp pattern, but no filename was passed to Babel`, configName);
    }
    if (typeof pattern === "string") {
      pattern = (0, _patternToRegex.default)(pattern, dirname);
    }
    return pattern.test(pathToTest);
  }
  return configChain;
}
var plugins = {};
var hasRequiredPlugins;
function requirePlugins() {
  if (hasRequiredPlugins) return plugins;
  hasRequiredPlugins = 1;
  Object.defineProperty(plugins, "__esModule", {
    value: true
  });
  plugins.validatePluginObject = validatePluginObject;
  var _optionAssertions = requireOptionAssertions();
  const VALIDATORS = {
    name: _optionAssertions.assertString,
    manipulateOptions: _optionAssertions.assertFunction,
    pre: _optionAssertions.assertFunction,
    post: _optionAssertions.assertFunction,
    inherits: _optionAssertions.assertFunction,
    visitor: assertVisitorMap,
    parserOverride: _optionAssertions.assertFunction,
    generatorOverride: _optionAssertions.assertFunction
  };
  function assertVisitorMap(loc, value2) {
    const obj = (0, _optionAssertions.assertObject)(loc, value2);
    if (obj) {
      Object.keys(obj).forEach((prop) => {
        if (prop !== "_exploded" && prop !== "_verified") {
          assertVisitorHandler(prop, obj[prop]);
        }
      });
      if (obj.enter || obj.exit) {
        throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
      }
    }
    return obj;
  }
  function assertVisitorHandler(key, value2) {
    if (value2 && typeof value2 === "object") {
      Object.keys(value2).forEach((handler) => {
        if (handler !== "enter" && handler !== "exit") {
          throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
        }
      });
    } else if (typeof value2 !== "function") {
      throw new Error(`.visitor["${key}"] must be a function`);
    }
  }
  function validatePluginObject(obj) {
    const rootPath = {
      type: "root",
      source: "plugin"
    };
    Object.keys(obj).forEach((key) => {
      const validator2 = VALIDATORS[key];
      if (validator2) {
        const optLoc = {
          type: "option",
          name: key,
          parent: rootPath
        };
        validator2(optLoc, obj[key]);
      } else {
        const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
        invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY";
        throw invalidPluginPropertyError;
      }
    });
    return obj;
  }
  return plugins;
}
var configApi = {};
var hasRequiredConfigApi;
function requireConfigApi() {
  if (hasRequiredConfigApi) return configApi;
  hasRequiredConfigApi = 1;
  Object.defineProperty(configApi, "__esModule", {
    value: true
  });
  configApi.makeConfigAPI = makeConfigAPI;
  configApi.makePluginAPI = makePluginAPI;
  configApi.makePresetAPI = makePresetAPI;
  function _semver() {
    const data = requireSemver();
    _semver = function() {
      return data;
    };
    return data;
  }
  var _index = requireLib();
  var _caching = requireCaching();
  function makeConfigAPI(cache2) {
    const env = (value2) => cache2.using((data) => {
      if (value2 === void 0) return data.envName;
      if (typeof value2 === "function") {
        return (0, _caching.assertSimpleType)(value2(data.envName));
      }
      return (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
        if (typeof entry !== "string") {
          throw new Error("Unexpected non-string value");
        }
        return entry === data.envName;
      });
    });
    const caller = (cb) => cache2.using((data) => (0, _caching.assertSimpleType)(cb(data.caller)));
    return {
      version: _index.version,
      cache: cache2.simple(),
      env,
      async: () => false,
      caller,
      assertVersion
    };
  }
  function makePresetAPI(cache2, externalDependencies) {
    const targets2 = () => JSON.parse(cache2.using((data) => JSON.stringify(data.targets)));
    const addExternalDependency = (ref) => {
      externalDependencies.push(ref);
    };
    return Object.assign({}, makeConfigAPI(cache2), {
      targets: targets2,
      addExternalDependency
    });
  }
  function makePluginAPI(cache2, externalDependencies) {
    const assumption = (name) => cache2.using((data) => data.assumptions[name]);
    return Object.assign({}, makePresetAPI(cache2, externalDependencies), {
      assumption
    });
  }
  function assertVersion(range) {
    if (typeof range === "number") {
      if (!Number.isInteger(range)) {
        throw new Error("Expected string or integer value.");
      }
      range = `^${range}.0.0-0`;
    }
    if (typeof range !== "string") {
      throw new Error("Expected string or integer value.");
    }
    if (range === "*" || _semver().satisfies(_index.version, range)) return;
    const limit = Error.stackTraceLimit;
    if (typeof limit === "number" && limit < 25) {
      Error.stackTraceLimit = 25;
    }
    const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
    if (typeof limit === "number") {
      Error.stackTraceLimit = limit;
    }
    throw Object.assign(err, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: _index.version,
      range
    });
  }
  return configApi;
}
var partial = {};
var hasRequiredPartial;
function requirePartial() {
  if (hasRequiredPartial) return partial;
  hasRequiredPartial = 1;
  Object.defineProperty(partial, "__esModule", {
    value: true
  });
  partial.default = loadPrivatePartialConfig;
  partial.loadPartialConfig = loadPartialConfig;
  function _path() {
    const data = require$$1;
    _path = function() {
      return data;
    };
    return data;
  }
  var _plugin = requirePlugin();
  var _util = requireUtil();
  var _item = requireItem();
  var _configChain = requireConfigChain();
  var _environment = requireEnvironment();
  var _options = requireOptions();
  var _index = requireIndexBrowser();
  var _resolveTargets = requireResolveTargetsBrowser();
  const _excluded = ["showIgnoredFiles"];
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  function resolveRootMode(rootDir, rootMode) {
    switch (rootMode) {
      case "root":
        return rootDir;
      case "upward-optional": {
        const upwardRootDir = (0, _index.findConfigUpwards)(rootDir);
        return upwardRootDir === null ? rootDir : upwardRootDir;
      }
      case "upward": {
        const upwardRootDir = (0, _index.findConfigUpwards)(rootDir);
        if (upwardRootDir !== null) return upwardRootDir;
        throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir}".
One of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
          code: "BABEL_ROOT_NOT_FOUND",
          dirname: rootDir
        });
      }
      default:
        throw new Error(`Assertion failure - unknown rootMode value.`);
    }
  }
  function* loadPrivatePartialConfig(inputOpts) {
    if (inputOpts != null && (typeof inputOpts !== "object" || Array.isArray(inputOpts))) {
      throw new Error("Babel options must be an object, null, or undefined");
    }
    const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {};
    const {
      envName = (0, _environment.getEnv)(),
      cwd = ".",
      root: rootDir = ".",
      rootMode = "root",
      caller,
      cloneInputAst = true
    } = args;
    const absoluteCwd = _path().resolve(cwd);
    const absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);
    const filename = typeof args.filename === "string" ? _path().resolve(cwd, args.filename) : void 0;
    const showConfigPath = yield* (0, _index.resolveShowConfigPath)(absoluteCwd);
    const context2 = {
      filename,
      cwd: absoluteCwd,
      root: absoluteRootDir,
      envName,
      caller,
      showConfig: showConfigPath === filename
    };
    const configChain2 = yield* (0, _configChain.buildRootChain)(args, context2);
    if (!configChain2) return null;
    const merged = {
      assumptions: {}
    };
    configChain2.options.forEach((opts) => {
      (0, _util.mergeOptions)(merged, opts);
    });
    const options2 = Object.assign({}, merged, {
      targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),
      cloneInputAst,
      babelrc: false,
      configFile: false,
      browserslistConfigFile: false,
      passPerPreset: false,
      envName: context2.envName,
      cwd: context2.cwd,
      root: context2.root,
      rootMode: "root",
      filename: typeof context2.filename === "string" ? context2.filename : void 0,
      plugins: configChain2.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)),
      presets: configChain2.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor))
    });
    return {
      options: options2,
      context: context2,
      fileHandling: configChain2.fileHandling,
      ignore: configChain2.ignore,
      babelrc: configChain2.babelrc,
      config: configChain2.config,
      files: configChain2.files
    };
  }
  function* loadPartialConfig(opts) {
    let showIgnoredFiles = false;
    if (typeof opts === "object" && opts !== null && !Array.isArray(opts)) {
      var _opts = opts;
      ({
        showIgnoredFiles
      } = _opts);
      opts = _objectWithoutPropertiesLoose(_opts, _excluded);
    }
    const result = yield* loadPrivatePartialConfig(opts);
    if (!result) return null;
    const {
      options: options2,
      babelrc,
      ignore,
      config: config2,
      fileHandling,
      files
    } = result;
    if (fileHandling === "ignored" && !showIgnoredFiles) {
      return null;
    }
    (options2.plugins || []).forEach((item2) => {
      if (item2.value instanceof _plugin.default) {
        throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
      }
    });
    return new PartialConfig(options2, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config2 ? config2.filepath : void 0, fileHandling, files);
  }
  class PartialConfig {
    constructor(options2, babelrc, ignore, config2, fileHandling, files) {
      this.options = void 0;
      this.babelrc = void 0;
      this.babelignore = void 0;
      this.config = void 0;
      this.fileHandling = void 0;
      this.files = void 0;
      this.options = options2;
      this.babelignore = ignore;
      this.babelrc = babelrc;
      this.config = config2;
      this.fileHandling = fileHandling;
      this.files = files;
      Object.freeze(this);
    }
    hasFilesystemConfig() {
      return this.babelrc !== void 0 || this.config !== void 0;
    }
  }
  Object.freeze(PartialConfig.prototype);
  return partial;
}
var hasRequiredFull;
function requireFull() {
  if (hasRequiredFull) return full;
  hasRequiredFull = 1;
  Object.defineProperty(full, "__esModule", {
    value: true
  });
  full.default = void 0;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _async = requireAsync();
  var _util = requireUtil();
  var context2 = requireLib();
  var _plugin = requirePlugin();
  var _item = requireItem();
  var _configChain = requireConfigChain();
  var _deepArray = requireDeepArray();
  function _traverse() {
    const data = requireLib$5();
    _traverse = function() {
      return data;
    };
    return data;
  }
  var _caching = requireCaching();
  var _options = requireOptions();
  var _plugins = requirePlugins();
  var _configApi = requireConfigApi();
  var _partial = requirePartial();
  var _configError = requireConfigError();
  full.default = _gensync()(function* loadFullConfig(inputOpts) {
    var _opts$assumptions;
    const result = yield* (0, _partial.default)(inputOpts);
    if (!result) {
      return null;
    }
    const {
      options: options2,
      context: context3,
      fileHandling
    } = result;
    if (fileHandling === "ignored") {
      return null;
    }
    const optionDefaults = {};
    const {
      plugins: plugins2,
      presets
    } = options2;
    if (!plugins2 || !presets) {
      throw new Error("Assertion failure - plugins and presets exist");
    }
    const presetContext = Object.assign({}, context3, {
      targets: options2.targets
    });
    const toDescriptor = (item2) => {
      const desc = (0, _item.getItemDescriptor)(item2);
      if (!desc) {
        throw new Error("Assertion failure - must be config item");
      }
      return desc;
    };
    const presetsDescriptors = presets.map(toDescriptor);
    const initialPluginsDescriptors = plugins2.map(toDescriptor);
    const pluginDescriptorsByPass = [[]];
    const passes = [];
    const externalDependencies = [];
    const ignored = yield* enhanceError(context3, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
      const presets2 = [];
      for (let i = 0; i < rawPresets.length; i++) {
        const descriptor = rawPresets[i];
        if (descriptor.options !== false) {
          try {
            var preset = yield* loadPresetDescriptor(descriptor, presetContext);
          } catch (e) {
            if (e.code === "BABEL_UNKNOWN_OPTION") {
              (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e);
            }
            throw e;
          }
          externalDependencies.push(preset.externalDependencies);
          if (descriptor.ownPass) {
            presets2.push({
              preset: preset.chain,
              pass: []
            });
          } else {
            presets2.unshift({
              preset: preset.chain,
              pass: pluginDescriptorsPass
            });
          }
        }
      }
      if (presets2.length > 0) {
        pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
        for (const {
          preset: preset2,
          pass
        } of presets2) {
          if (!preset2) return true;
          pass.push(...preset2.plugins);
          const ignored2 = yield* recursePresetDescriptors(preset2.presets, pass);
          if (ignored2) return true;
          preset2.options.forEach((opts2) => {
            (0, _util.mergeOptions)(optionDefaults, opts2);
          });
        }
      }
    })(presetsDescriptors, pluginDescriptorsByPass[0]);
    if (ignored) return null;
    const opts = optionDefaults;
    (0, _util.mergeOptions)(opts, options2);
    const pluginContext = Object.assign({}, presetContext, {
      assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}
    });
    yield* enhanceError(context3, function* loadPluginDescriptors() {
      pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
      for (const descs of pluginDescriptorsByPass) {
        const pass = [];
        passes.push(pass);
        for (let i = 0; i < descs.length; i++) {
          const descriptor = descs[i];
          if (descriptor.options !== false) {
            try {
              var plugin2 = yield* loadPluginDescriptor(descriptor, pluginContext);
            } catch (e) {
              if (e.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
                (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e);
              }
              throw e;
            }
            pass.push(plugin2);
            externalDependencies.push(plugin2.externalDependencies);
          }
        }
      }
    })();
    opts.plugins = passes[0];
    opts.presets = passes.slice(1).filter((plugins3) => plugins3.length > 0).map((plugins3) => ({
      plugins: plugins3
    }));
    opts.passPerPreset = opts.presets.length > 0;
    return {
      options: opts,
      passes,
      externalDependencies: (0, _deepArray.finalize)(externalDependencies)
    };
  });
  function enhanceError(context3, fn2) {
    return function* (arg1, arg2) {
      try {
        return yield* fn2(arg1, arg2);
      } catch (e) {
        if (!/^\[BABEL\]/.test(e.message)) {
          var _context$filename;
          e.message = `[BABEL] ${(_context$filename = context3.filename) != null ? _context$filename : "unknown file"}: ${e.message}`;
        }
        throw e;
      }
    };
  }
  const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({
    value: value2,
    options: options2,
    dirname,
    alias
  }, cache2) {
    if (options2 === false) throw new Error("Assertion failure");
    options2 = options2 || {};
    const externalDependencies = [];
    let item2 = value2;
    if (typeof value2 === "function") {
      const factory = (0, _async.maybeAsync)(value2, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);
      const api = Object.assign({}, context2, apiFactory(cache2, externalDependencies));
      try {
        item2 = yield* factory(api, options2, dirname);
      } catch (e) {
        if (alias) {
          e.message += ` (While processing: ${JSON.stringify(alias)})`;
        }
        throw e;
      }
    }
    if (!item2 || typeof item2 !== "object") {
      throw new Error("Plugin/Preset did not return an object.");
    }
    if ((0, _async.isThenable)(item2)) {
      yield* [];
      throw new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
    }
    if (externalDependencies.length > 0 && (!cache2.configured() || cache2.mode() === "forever")) {
      let error2 = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
      if (!cache2.configured()) {
        error2 += `has not been configured to be invalidated when the external dependencies change. `;
      } else {
        error2 += ` has been configured to never be invalidated. `;
      }
      error2 += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`;
      throw new Error(error2);
    }
    return {
      value: item2,
      options: options2,
      dirname,
      alias,
      externalDependencies: (0, _deepArray.finalize)(externalDependencies)
    };
  });
  const pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);
  const presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);
  const instantiatePlugin = (0, _caching.makeWeakCache)(function* ({
    value: value2,
    options: options2,
    dirname,
    alias,
    externalDependencies
  }, cache2) {
    const pluginObj = (0, _plugins.validatePluginObject)(value2);
    const plugin2 = Object.assign({}, pluginObj);
    if (plugin2.visitor) {
      plugin2.visitor = _traverse().default.explode(Object.assign({}, plugin2.visitor));
    }
    if (plugin2.inherits) {
      const inheritsDescriptor = {
        name: void 0,
        alias: `${alias}$inherits`,
        value: plugin2.inherits,
        options: options2,
        dirname
      };
      const inherits2 = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => {
        return cache2.invalidate((data) => run(inheritsDescriptor, data));
      });
      plugin2.pre = chainMaybeAsync(inherits2.pre, plugin2.pre);
      plugin2.post = chainMaybeAsync(inherits2.post, plugin2.post);
      plugin2.manipulateOptions = chainMaybeAsync(inherits2.manipulateOptions, plugin2.manipulateOptions);
      plugin2.visitor = _traverse().default.visitors.merge([inherits2.visitor || {}, plugin2.visitor || {}]);
      if (inherits2.externalDependencies.length > 0) {
        if (externalDependencies.length === 0) {
          externalDependencies = inherits2.externalDependencies;
        } else {
          externalDependencies = (0, _deepArray.finalize)([externalDependencies, inherits2.externalDependencies]);
        }
      }
    }
    return new _plugin.default(plugin2, options2, alias, externalDependencies);
  });
  function* loadPluginDescriptor(descriptor, context3) {
    if (descriptor.value instanceof _plugin.default) {
      if (descriptor.options) {
        throw new Error("Passed options to an existing Plugin instance will not work.");
      }
      return descriptor.value;
    }
    return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context3), context3);
  }
  const needsFilename = (val) => val && typeof val !== "function";
  const validateIfOptionNeedsFilename = (options2, descriptor) => {
    if (needsFilename(options2.test) || needsFilename(options2.include) || needsFilename(options2.exclude)) {
      const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
      throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, `\`\`\``, `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, `\`\`\``, `See https://babeljs.io/docs/en/options#filename for more information.`].join("\n"));
    }
  };
  const validatePreset = (preset, context3, descriptor) => {
    if (!context3.filename) {
      var _options$overrides;
      const {
        options: options2
      } = preset;
      validateIfOptionNeedsFilename(options2, descriptor);
      (_options$overrides = options2.overrides) == null || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
    }
  };
  const instantiatePreset = (0, _caching.makeWeakCacheSync)(({
    value: value2,
    dirname,
    alias,
    externalDependencies
  }) => {
    return {
      options: (0, _options.validate)("preset", value2),
      alias,
      dirname,
      externalDependencies
    };
  });
  function* loadPresetDescriptor(descriptor, context3) {
    const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context3));
    validatePreset(preset, context3, descriptor);
    return {
      chain: yield* (0, _configChain.buildPresetChain)(preset, context3),
      externalDependencies: preset.externalDependencies
    };
  }
  function chainMaybeAsync(a, b) {
    if (!a) return b;
    if (!b) return a;
    return function(...args) {
      const res = a.apply(this, args);
      if (res && typeof res.then === "function") {
        return res.then(() => b.apply(this, args));
      }
      return b.apply(this, args);
    };
  }
  return full;
}
var hasRequiredConfig;
function requireConfig() {
  if (hasRequiredConfig) return config;
  hasRequiredConfig = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createConfigItem = createConfigItem;
    exports2.createConfigItemAsync = createConfigItemAsync;
    exports2.createConfigItemSync = createConfigItemSync;
    Object.defineProperty(exports2, "default", {
      enumerable: true,
      get: function() {
        return _full.default;
      }
    });
    exports2.loadOptions = loadOptions;
    exports2.loadOptionsAsync = loadOptionsAsync;
    exports2.loadOptionsSync = loadOptionsSync;
    exports2.loadPartialConfig = loadPartialConfig;
    exports2.loadPartialConfigAsync = loadPartialConfigAsync;
    exports2.loadPartialConfigSync = loadPartialConfigSync;
    function _gensync() {
      const data = requireGensync();
      _gensync = function() {
        return data;
      };
      return data;
    }
    var _full = requireFull();
    var _partial = requirePartial();
    var _item = requireItem();
    var _rewriteStackTrace = requireRewriteStackTrace();
    const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
    function loadPartialConfigAsync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
    }
    function loadPartialConfigSync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
    }
    function loadPartialConfig(opts, callback) {
      if (callback !== void 0) {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
      } else if (typeof opts === "function") {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(void 0, opts);
      } else {
        {
          return loadPartialConfigSync(opts);
        }
      }
    }
    function* loadOptionsImpl(opts) {
      var _config$options;
      const config2 = yield* (0, _full.default)(opts);
      return (_config$options = config2 == null ? void 0 : config2.options) != null ? _config$options : null;
    }
    const loadOptionsRunner = _gensync()(loadOptionsImpl);
    function loadOptionsAsync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
    }
    function loadOptionsSync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
    }
    function loadOptions(opts, callback) {
      if (callback !== void 0) {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
      } else if (typeof opts === "function") {
        (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(void 0, opts);
      } else {
        {
          return loadOptionsSync(opts);
        }
      }
    }
    const createConfigItemRunner = _gensync()(_item.createConfigItem);
    function createConfigItemAsync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
    }
    function createConfigItemSync(...args) {
      return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
    }
    function createConfigItem(target, options2, callback) {
      if (callback !== void 0) {
        (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options2, callback);
      } else if (typeof options2 === "function") {
        (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, void 0, callback);
      } else {
        {
          return createConfigItemSync(target, options2);
        }
      }
    }
  })(config);
  return config;
}
var transform = {};
var transformation = {};
var pluginPass = {};
var hasRequiredPluginPass;
function requirePluginPass() {
  if (hasRequiredPluginPass) return pluginPass;
  hasRequiredPluginPass = 1;
  Object.defineProperty(pluginPass, "__esModule", {
    value: true
  });
  pluginPass.default = void 0;
  class PluginPass {
    constructor(file2, key, options2, isAsync) {
      this._map = /* @__PURE__ */ new Map();
      this.key = void 0;
      this.file = void 0;
      this.opts = void 0;
      this.cwd = void 0;
      this.filename = void 0;
      this.isAsync = void 0;
      this.key = key;
      this.file = file2;
      this.opts = options2 || {};
      this.cwd = file2.opts.cwd;
      this.filename = file2.opts.filename;
      this.isAsync = isAsync;
    }
    set(key, val) {
      this._map.set(key, val);
    }
    get(key) {
      return this._map.get(key);
    }
    availableHelper(name, versionRange) {
      return this.file.availableHelper(name, versionRange);
    }
    addHelper(name) {
      return this.file.addHelper(name);
    }
    buildCodeFrameError(node2, msg, _Error) {
      return this.file.buildCodeFrameError(node2, msg, _Error);
    }
  }
  pluginPass.default = PluginPass;
  {
    PluginPass.prototype.getModuleName = function getModuleName2() {
      return this.file.getModuleName();
    };
    PluginPass.prototype.addImport = function addImport() {
      this.file.addImport();
    };
  }
  return pluginPass;
}
var blockHoistPlugin = {};
var hasRequiredBlockHoistPlugin;
function requireBlockHoistPlugin() {
  if (hasRequiredBlockHoistPlugin) return blockHoistPlugin;
  hasRequiredBlockHoistPlugin = 1;
  Object.defineProperty(blockHoistPlugin, "__esModule", {
    value: true
  });
  blockHoistPlugin.default = loadBlockHoistPlugin;
  function _traverse() {
    const data = requireLib$5();
    _traverse = function() {
      return data;
    };
    return data;
  }
  var _plugin = requirePlugin();
  let LOADED_PLUGIN;
  const blockHoistPlugin$1 = {
    name: "internal.blockHoist",
    visitor: {
      Block: {
        exit({
          node: node2
        }) {
          node2.body = performHoisting(node2.body);
        }
      },
      SwitchCase: {
        exit({
          node: node2
        }) {
          node2.consequent = performHoisting(node2.consequent);
        }
      }
    }
  };
  function performHoisting(body) {
    let max = Math.pow(2, 30) - 1;
    let hasChange = false;
    for (let i = 0; i < body.length; i++) {
      const n = body[i];
      const p = priority(n);
      if (p > max) {
        hasChange = true;
        break;
      }
      max = p;
    }
    if (!hasChange) return body;
    return stableSort(body.slice());
  }
  function loadBlockHoistPlugin() {
    if (!LOADED_PLUGIN) {
      LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin$1, {
        visitor: _traverse().default.explode(blockHoistPlugin$1.visitor)
      }), {});
    }
    return LOADED_PLUGIN;
  }
  function priority(bodyNode) {
    const priority2 = bodyNode == null ? void 0 : bodyNode._blockHoist;
    if (priority2 == null) return 1;
    if (priority2 === true) return 2;
    return priority2;
  }
  function stableSort(body) {
    const buckets = /* @__PURE__ */ Object.create(null);
    for (let i = 0; i < body.length; i++) {
      const n = body[i];
      const p = priority(n);
      const bucket = buckets[p] || (buckets[p] = []);
      bucket.push(n);
    }
    const keys = Object.keys(buckets).map((k2) => +k2).sort((a, b) => b - a);
    let index = 0;
    for (const key of keys) {
      const bucket = buckets[key];
      for (const n of bucket) {
        body[index++] = n;
      }
    }
    return body;
  }
  return blockHoistPlugin;
}
var normalizeOpts = {};
var hasRequiredNormalizeOpts;
function requireNormalizeOpts() {
  if (hasRequiredNormalizeOpts) return normalizeOpts;
  hasRequiredNormalizeOpts = 1;
  Object.defineProperty(normalizeOpts, "__esModule", {
    value: true
  });
  normalizeOpts.default = normalizeOptions;
  function _path() {
    const data = require$$1;
    _path = function() {
      return data;
    };
    return data;
  }
  function normalizeOptions(config2) {
    const {
      filename,
      cwd,
      filenameRelative = typeof filename === "string" ? _path().relative(cwd, filename) : "unknown",
      sourceType = "module",
      inputSourceMap,
      sourceMaps = !!inputSourceMap,
      sourceRoot = config2.options.moduleRoot,
      sourceFileName = _path().basename(filenameRelative),
      comments: comments2 = true,
      compact = "auto"
    } = config2.options;
    const opts = config2.options;
    const options2 = Object.assign({}, opts, {
      parserOpts: Object.assign({
        sourceType: _path().extname(filenameRelative) === ".mjs" ? "module" : sourceType,
        sourceFileName: filename,
        plugins: []
      }, opts.parserOpts),
      generatorOpts: Object.assign({
        filename,
        auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
        auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
        retainLines: opts.retainLines,
        comments: comments2,
        shouldPrintComment: opts.shouldPrintComment,
        compact,
        minified: opts.minified,
        sourceMaps,
        sourceRoot,
        sourceFileName
      }, opts.generatorOpts)
    });
    for (const plugins2 of config2.passes) {
      for (const plugin2 of plugins2) {
        if (plugin2.manipulateOptions) {
          plugin2.manipulateOptions(options2, options2.parserOpts);
        }
      }
    }
    return options2;
  }
  return normalizeOpts;
}
var normalizeFile = {};
var convertSourceMap = {};
var hasRequiredConvertSourceMap;
function requireConvertSourceMap() {
  if (hasRequiredConvertSourceMap) return convertSourceMap;
  hasRequiredConvertSourceMap = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "commentRegex", {
      get: function getCommentRegex() {
        return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
      }
    });
    Object.defineProperty(exports2, "mapFileCommentRegex", {
      get: function getMapFileCommentRegex() {
        return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
      }
    });
    var decodeBase64;
    if (typeof Buffer !== "undefined") {
      if (typeof Buffer.from === "function") {
        decodeBase64 = decodeBase64WithBufferFrom;
      } else {
        decodeBase64 = decodeBase64WithNewBuffer;
      }
    } else {
      decodeBase64 = decodeBase64WithAtob;
    }
    function decodeBase64WithBufferFrom(base64) {
      return Buffer.from(base64, "base64").toString();
    }
    function decodeBase64WithNewBuffer(base64) {
      if (typeof value === "number") {
        throw new TypeError("The value to decode must not be of type number.");
      }
      return new Buffer(base64, "base64").toString();
    }
    function decodeBase64WithAtob(base64) {
      return decodeURIComponent(escape(atob(base64)));
    }
    function stripComment(sm) {
      return sm.split(",").pop();
    }
    function readFromFileMap(sm, read) {
      var r = exports2.mapFileCommentRegex.exec(sm);
      var filename = r[1] || r[2];
      try {
        var sm = read(filename);
        if (sm != null && typeof sm.catch === "function") {
          return sm.catch(throwError);
        } else {
          return sm;
        }
      } catch (e) {
        throwError(e);
      }
      function throwError(e) {
        throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e.stack);
      }
    }
    function Converter(sm, opts) {
      opts = opts || {};
      if (opts.hasComment) {
        sm = stripComment(sm);
      }
      if (opts.encoding === "base64") {
        sm = decodeBase64(sm);
      } else if (opts.encoding === "uri") {
        sm = decodeURIComponent(sm);
      }
      if (opts.isJSON || opts.encoding) {
        sm = JSON.parse(sm);
      }
      this.sourcemap = sm;
    }
    Converter.prototype.toJSON = function(space) {
      return JSON.stringify(this.sourcemap, null, space);
    };
    if (typeof Buffer !== "undefined") {
      if (typeof Buffer.from === "function") {
        Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
      } else {
        Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
      }
    } else {
      Converter.prototype.toBase64 = encodeBase64WithBtoa;
    }
    function encodeBase64WithBufferFrom() {
      var json = this.toJSON();
      return Buffer.from(json, "utf8").toString("base64");
    }
    function encodeBase64WithNewBuffer() {
      var json = this.toJSON();
      if (typeof json === "number") {
        throw new TypeError("The json to encode must not be of type number.");
      }
      return new Buffer(json, "utf8").toString("base64");
    }
    function encodeBase64WithBtoa() {
      var json = this.toJSON();
      return btoa(unescape(encodeURIComponent(json)));
    }
    Converter.prototype.toURI = function() {
      var json = this.toJSON();
      return encodeURIComponent(json);
    };
    Converter.prototype.toComment = function(options2) {
      var encoding, content, data;
      if (options2 != null && options2.encoding === "uri") {
        encoding = "";
        content = this.toURI();
      } else {
        encoding = ";base64";
        content = this.toBase64();
      }
      data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content;
      return options2 != null && options2.multiline ? "/*# " + data + " */" : "//# " + data;
    };
    Converter.prototype.toObject = function() {
      return JSON.parse(this.toJSON());
    };
    Converter.prototype.addProperty = function(key, value2) {
      if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
      return this.setProperty(key, value2);
    };
    Converter.prototype.setProperty = function(key, value2) {
      this.sourcemap[key] = value2;
      return this;
    };
    Converter.prototype.getProperty = function(key) {
      return this.sourcemap[key];
    };
    exports2.fromObject = function(obj) {
      return new Converter(obj);
    };
    exports2.fromJSON = function(json) {
      return new Converter(json, { isJSON: true });
    };
    exports2.fromURI = function(uri) {
      return new Converter(uri, { encoding: "uri" });
    };
    exports2.fromBase64 = function(base64) {
      return new Converter(base64, { encoding: "base64" });
    };
    exports2.fromComment = function(comment) {
      var m, encoding;
      comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
      m = exports2.commentRegex.exec(comment);
      encoding = m && m[4] || "uri";
      return new Converter(comment, { encoding, hasComment: true });
    };
    function makeConverter(sm) {
      return new Converter(sm, { isJSON: true });
    }
    exports2.fromMapFileComment = function(comment, read) {
      if (typeof read === "string") {
        throw new Error(
          "String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading"
        );
      }
      var sm = readFromFileMap(comment, read);
      if (sm != null && typeof sm.then === "function") {
        return sm.then(makeConverter);
      } else {
        return makeConverter(sm);
      }
    };
    exports2.fromSource = function(content) {
      var m = content.match(exports2.commentRegex);
      return m ? exports2.fromComment(m.pop()) : null;
    };
    exports2.fromMapFileSource = function(content, read) {
      if (typeof read === "string") {
        throw new Error(
          "String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading"
        );
      }
      var m = content.match(exports2.mapFileCommentRegex);
      return m ? exports2.fromMapFileComment(m.pop(), read) : null;
    };
    exports2.removeComments = function(src) {
      return src.replace(exports2.commentRegex, "");
    };
    exports2.removeMapFileComments = function(src) {
      return src.replace(exports2.mapFileCommentRegex, "");
    };
    exports2.generateMapFileComment = function(file2, options2) {
      var data = "sourceMappingURL=" + file2;
      return options2 && options2.multiline ? "/*# " + data + " */" : "//# " + data;
    };
  })(convertSourceMap);
  return convertSourceMap;
}
var parser$1 = {};
var missingPluginHelper = {};
var hasRequiredMissingPluginHelper;
function requireMissingPluginHelper() {
  if (hasRequiredMissingPluginHelper) return missingPluginHelper;
  hasRequiredMissingPluginHelper = 1;
  Object.defineProperty(missingPluginHelper, "__esModule", {
    value: true
  });
  missingPluginHelper.default = generateMissingPluginMessage;
  const pluginNameMap = {
    asyncDoExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-async-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
      }
    },
    decimal: {
      syntax: {
        name: "@babel/plugin-syntax-decimal",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
      }
    },
    decorators: {
      syntax: {
        name: "@babel/plugin-syntax-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
      },
      transform: {
        name: "@babel/plugin-proposal-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
      }
    },
    doExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
      }
    },
    exportDefaultFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
      },
      transform: {
        name: "@babel/plugin-proposal-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
      }
    },
    flow: {
      syntax: {
        name: "@babel/plugin-syntax-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
      },
      transform: {
        name: "@babel/preset-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
      }
    },
    functionBind: {
      syntax: {
        name: "@babel/plugin-syntax-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
      },
      transform: {
        name: "@babel/plugin-proposal-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
      }
    },
    functionSent: {
      syntax: {
        name: "@babel/plugin-syntax-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
      },
      transform: {
        name: "@babel/plugin-proposal-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
      }
    },
    jsx: {
      syntax: {
        name: "@babel/plugin-syntax-jsx",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
      },
      transform: {
        name: "@babel/preset-react",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
      }
    },
    pipelineOperator: {
      syntax: {
        name: "@babel/plugin-syntax-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
      },
      transform: {
        name: "@babel/plugin-proposal-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
      }
    },
    recordAndTuple: {
      syntax: {
        name: "@babel/plugin-syntax-record-and-tuple",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
      }
    },
    throwExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
      }
    },
    typescript: {
      syntax: {
        name: "@babel/plugin-syntax-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
      },
      transform: {
        name: "@babel/preset-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
      }
    }
  };
  {
    Object.assign(pluginNameMap, {
      asyncGenerators: {
        syntax: {
          name: "@babel/plugin-syntax-async-generators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
        },
        transform: {
          name: "@babel/plugin-transform-async-generator-functions",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions"
        }
      },
      classProperties: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
        }
      },
      classPrivateProperties: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
        }
      },
      classPrivateMethods: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-private-methods",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods"
        }
      },
      classStaticBlock: {
        syntax: {
          name: "@babel/plugin-syntax-class-static-block",
          url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
        },
        transform: {
          name: "@babel/plugin-transform-class-static-block",
          url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block"
        }
      },
      dynamicImport: {
        syntax: {
          name: "@babel/plugin-syntax-dynamic-import",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
        }
      },
      exportNamespaceFrom: {
        syntax: {
          name: "@babel/plugin-syntax-export-namespace-from",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
        },
        transform: {
          name: "@babel/plugin-transform-export-namespace-from",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from"
        }
      },
      importAssertions: {
        syntax: {
          name: "@babel/plugin-syntax-import-assertions",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
        }
      },
      importAttributes: {
        syntax: {
          name: "@babel/plugin-syntax-import-attributes",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes"
        }
      },
      importMeta: {
        syntax: {
          name: "@babel/plugin-syntax-import-meta",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
        }
      },
      logicalAssignment: {
        syntax: {
          name: "@babel/plugin-syntax-logical-assignment-operators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
        },
        transform: {
          name: "@babel/plugin-transform-logical-assignment-operators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators"
        }
      },
      moduleStringNames: {
        syntax: {
          name: "@babel/plugin-syntax-module-string-names",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
        }
      },
      numericSeparator: {
        syntax: {
          name: "@babel/plugin-syntax-numeric-separator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
        },
        transform: {
          name: "@babel/plugin-transform-numeric-separator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator"
        }
      },
      nullishCoalescingOperator: {
        syntax: {
          name: "@babel/plugin-syntax-nullish-coalescing-operator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
        },
        transform: {
          name: "@babel/plugin-transform-nullish-coalescing-operator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
        }
      },
      objectRestSpread: {
        syntax: {
          name: "@babel/plugin-syntax-object-rest-spread",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
        },
        transform: {
          name: "@babel/plugin-transform-object-rest-spread",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread"
        }
      },
      optionalCatchBinding: {
        syntax: {
          name: "@babel/plugin-syntax-optional-catch-binding",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
        },
        transform: {
          name: "@babel/plugin-transform-optional-catch-binding",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding"
        }
      },
      optionalChaining: {
        syntax: {
          name: "@babel/plugin-syntax-optional-chaining",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
        },
        transform: {
          name: "@babel/plugin-transform-optional-chaining",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining"
        }
      },
      privateIn: {
        syntax: {
          name: "@babel/plugin-syntax-private-property-in-object",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
        },
        transform: {
          name: "@babel/plugin-transform-private-property-in-object",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object"
        }
      },
      regexpUnicodeSets: {
        syntax: {
          name: "@babel/plugin-syntax-unicode-sets-regex",
          url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
        },
        transform: {
          name: "@babel/plugin-transform-unicode-sets-regex",
          url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
        }
      }
    });
  }
  const getNameURLCombination = ({
    name,
    url
  }) => `${name} (${url})`;
  function generateMissingPluginMessage(missingPluginName, loc, codeFrame, filename) {
    let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
    const pluginInfo = pluginNameMap[missingPluginName];
    if (pluginInfo) {
      const {
        syntax: syntaxPlugin,
        transform: transformPlugin
      } = pluginInfo;
      if (syntaxPlugin) {
        const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
        if (transformPlugin) {
          const transformPluginInfo = getNameURLCombination(transformPlugin);
          const sectionType = transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets";
          helpMessage += `

Add ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
        } else {
          helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
        }
      }
    }
    const msgFilename = filename === "unknown" ? "<name of the input file>" : filename;
    helpMessage += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
	npx cross-env BABEL_SHOW_CONFIG_FOR=${msgFilename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`;
    return helpMessage;
  }
  return missingPluginHelper;
}
var hasRequiredParser;
function requireParser() {
  if (hasRequiredParser) return parser$1;
  hasRequiredParser = 1;
  Object.defineProperty(parser$1, "__esModule", {
    value: true
  });
  parser$1.default = parser2;
  function _parser() {
    const data = requireLib$a();
    _parser = function() {
      return data;
    };
    return data;
  }
  function _codeFrame() {
    const data = requireLib$9();
    _codeFrame = function() {
      return data;
    };
    return data;
  }
  var _missingPluginHelper = requireMissingPluginHelper();
  function* parser2(pluginPasses, {
    parserOpts,
    highlightCode = true,
    filename = "unknown"
  }, code) {
    try {
      const results = [];
      for (const plugins2 of pluginPasses) {
        for (const plugin2 of plugins2) {
          const {
            parserOverride
          } = plugin2;
          if (parserOverride) {
            const ast = parserOverride(code, parserOpts, _parser().parse);
            if (ast !== void 0) results.push(ast);
          }
        }
      }
      if (results.length === 0) {
        return (0, _parser().parse)(code, parserOpts);
      } else if (results.length === 1) {
        yield* [];
        if (typeof results[0].then === "function") {
          throw new Error(`You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
        }
        return results[0];
      }
      throw new Error("More than one plugin attempted to override parsing.");
    } catch (err) {
      if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
        err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.";
      }
      const {
        loc,
        missingPlugin
      } = err;
      if (loc) {
        const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {
          start: {
            line: loc.line,
            column: loc.column + 1
          }
        }, {
          highlightCode
        });
        if (missingPlugin) {
          err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename);
        } else {
          err.message = `${filename}: ${err.message}

` + codeFrame;
        }
        err.code = "BABEL_PARSE_ERROR";
      }
      throw err;
    }
  }
  return parser$1;
}
var cloneDeep = {};
var hasRequiredCloneDeep;
function requireCloneDeep() {
  if (hasRequiredCloneDeep) return cloneDeep;
  hasRequiredCloneDeep = 1;
  Object.defineProperty(cloneDeep, "__esModule", {
    value: true
  });
  cloneDeep.default = _default;
  function deepClone(value2, cache2, allowCircle) {
    if (value2 !== null) {
      {
        if (cache2.has(value2)) return cache2.get(value2);
      }
      let cloned;
      if (Array.isArray(value2)) {
        cloned = new Array(value2.length);
        cache2.set(value2, cloned);
        for (let i = 0; i < value2.length; i++) {
          cloned[i] = typeof value2[i] !== "object" ? value2[i] : deepClone(value2[i], cache2);
        }
      } else {
        cloned = {};
        cache2.set(value2, cloned);
        const keys = Object.keys(value2);
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          cloned[key] = typeof value2[key] !== "object" ? value2[key] : deepClone(value2[key], cache2);
        }
      }
      return cloned;
    }
    return value2;
  }
  function _default(value2) {
    if (typeof value2 !== "object") return value2;
    {
      try {
        return deepClone(value2, /* @__PURE__ */ new Map(), true);
      } catch (_2) {
        return structuredClone(value2);
      }
    }
  }
  return cloneDeep;
}
var hasRequiredNormalizeFile;
function requireNormalizeFile() {
  if (hasRequiredNormalizeFile) return normalizeFile;
  hasRequiredNormalizeFile = 1;
  Object.defineProperty(normalizeFile, "__esModule", {
    value: true
  });
  normalizeFile.default = normalizeFile$1;
  function _fs() {
    const data = require$$1;
    _fs = function() {
      return data;
    };
    return data;
  }
  function _path() {
    const data = require$$1;
    _path = function() {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = requireBrowser$1();
    _debug = function() {
      return data;
    };
    return data;
  }
  function _t2() {
    const data = requireLib$b();
    _t2 = function() {
      return data;
    };
    return data;
  }
  function _convertSourceMap() {
    const data = requireConvertSourceMap();
    _convertSourceMap = function() {
      return data;
    };
    return data;
  }
  var _file = requireFile();
  var _index = requireParser();
  var _cloneDeep = requireCloneDeep();
  const {
    file: file2,
    traverseFast: traverseFast2
  } = _t2();
  const debug2 = _debug()("babel:transform:file");
  const INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/;
  const EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
  function* normalizeFile$1(pluginPasses, options2, code, ast) {
    code = `${code || ""}`;
    if (ast) {
      if (ast.type === "Program") {
        ast = file2(ast, [], []);
      } else if (ast.type !== "File") {
        throw new Error("AST root must be a Program or File node");
      }
      if (options2.cloneInputAst) {
        ast = (0, _cloneDeep.default)(ast);
      }
    } else {
      ast = yield* (0, _index.default)(pluginPasses, options2, code);
    }
    let inputMap = null;
    if (options2.inputSourceMap !== false) {
      if (typeof options2.inputSourceMap === "object") {
        inputMap = _convertSourceMap().fromObject(options2.inputSourceMap);
      }
      if (!inputMap) {
        const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
        if (lastComment) {
          try {
            inputMap = _convertSourceMap().fromComment("//" + lastComment);
          } catch (err) {
            {
              debug2("discarding unknown inline input sourcemap");
            }
          }
        }
      }
      if (!inputMap) {
        const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
        if (typeof options2.filename === "string" && lastComment) {
          try {
            const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);
            const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options2.filename), match[1]), "utf8");
            inputMap = _convertSourceMap().fromJSON(inputMapContent);
          } catch (err) {
            debug2("discarding unknown file input sourcemap", err);
          }
        } else if (lastComment) {
          debug2("discarding un-loadable file input sourcemap");
        }
      }
    }
    return new _file.default(options2, {
      code,
      ast,
      inputMap
    });
  }
  function extractCommentsFromList(regex, comments2, lastComment) {
    if (comments2) {
      comments2 = comments2.filter(({
        value: value2
      }) => {
        if (regex.test(value2)) {
          lastComment = value2;
          return false;
        }
        return true;
      });
    }
    return [comments2, lastComment];
  }
  function extractComments(regex, ast) {
    let lastComment = null;
    traverseFast2(ast, (node2) => {
      [node2.leadingComments, lastComment] = extractCommentsFromList(regex, node2.leadingComments, lastComment);
      [node2.innerComments, lastComment] = extractCommentsFromList(regex, node2.innerComments, lastComment);
      [node2.trailingComments, lastComment] = extractCommentsFromList(regex, node2.trailingComments, lastComment);
    });
    return lastComment;
  }
  return normalizeFile;
}
var generate = {};
var mergeMap = {};
var remapping_umd$1 = { exports: {} };
var remapping_umd = remapping_umd$1.exports;
var hasRequiredRemapping_umd;
function requireRemapping_umd() {
  if (hasRequiredRemapping_umd) return remapping_umd$1.exports;
  hasRequiredRemapping_umd = 1;
  (function(module2, exports2) {
    (function(global2, factory) {
      module2.exports = factory(requireTraceMapping_umd(), requireGenMapping_umd());
    })(remapping_umd, function(traceMapping, genMapping) {
      const SOURCELESS_MAPPING = /* @__PURE__ */ SegmentObject("", -1, -1, "", null, false);
      const EMPTY_SOURCES = [];
      function SegmentObject(source, line, column, name, content, ignore) {
        return { source, line, column, name, content, ignore };
      }
      function Source(map, sources, source, content, ignore) {
        return {
          map,
          sources,
          source,
          content,
          ignore
        };
      }
      function MapSource(map, sources) {
        return Source(map, sources, "", null, false);
      }
      function OriginalSource(source, content, ignore) {
        return Source(null, EMPTY_SOURCES, source, content, ignore);
      }
      function traceMappings(tree) {
        const gen = new genMapping.GenMapping({ file: tree.map.file });
        const { sources: rootSources, map } = tree;
        const rootNames = map.names;
        const rootMappings = traceMapping.decodedMappings(map);
        for (let i = 0; i < rootMappings.length; i++) {
          const segments = rootMappings[i];
          for (let j = 0; j < segments.length; j++) {
            const segment = segments[j];
            const genCol = segment[0];
            let traced = SOURCELESS_MAPPING;
            if (segment.length !== 1) {
              const source2 = rootSources[segment[1]];
              traced = originalPositionFor(source2, segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : "");
              if (traced == null)
                continue;
            }
            const { column, line, name, content, source, ignore } = traced;
            genMapping.maybeAddSegment(gen, i, genCol, source, line, column, name);
            if (source && content != null)
              genMapping.setSourceContent(gen, source, content);
            if (ignore)
              genMapping.setIgnore(gen, source, true);
          }
        }
        return gen;
      }
      function originalPositionFor(source, line, column, name) {
        if (!source.map) {
          return SegmentObject(source.source, line, column, name, source.content, source.ignore);
        }
        const segment = traceMapping.traceSegment(source.map, line, column);
        if (segment == null)
          return null;
        if (segment.length === 1)
          return SOURCELESS_MAPPING;
        return originalPositionFor(source.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source.map.names[segment[4]] : name);
      }
      function asArray(value2) {
        if (Array.isArray(value2))
          return value2;
        return [value2];
      }
      function buildSourceMapTree(input, loader) {
        const maps = asArray(input).map((m) => new traceMapping.TraceMap(m, ""));
        const map = maps.pop();
        for (let i = 0; i < maps.length; i++) {
          if (maps[i].sources.length > 1) {
            throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
          }
        }
        let tree = build(map, loader, "", 0);
        for (let i = maps.length - 1; i >= 0; i--) {
          tree = MapSource(maps[i], [tree]);
        }
        return tree;
      }
      function build(map, loader, importer, importerDepth) {
        const { resolvedSources, sourcesContent, ignoreList } = map;
        const depth = importerDepth + 1;
        const children = resolvedSources.map((sourceFile, i) => {
          const ctx = {
            importer,
            depth,
            source: sourceFile || "",
            content: void 0,
            ignore: void 0
          };
          const sourceMap2 = loader(ctx.source, ctx);
          const { source, content, ignore } = ctx;
          if (sourceMap2)
            return build(new traceMapping.TraceMap(sourceMap2, source), loader, source, depth);
          const sourceContent = content !== void 0 ? content : sourcesContent ? sourcesContent[i] : null;
          const ignored = ignore !== void 0 ? ignore : ignoreList ? ignoreList.includes(i) : false;
          return OriginalSource(source, sourceContent, ignored);
        });
        return MapSource(map, children);
      }
      class SourceMap {
        constructor(map, options2) {
          const out = options2.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
          this.version = out.version;
          this.file = out.file;
          this.mappings = out.mappings;
          this.names = out.names;
          this.ignoreList = out.ignoreList;
          this.sourceRoot = out.sourceRoot;
          this.sources = out.sources;
          if (!options2.excludeContent) {
            this.sourcesContent = out.sourcesContent;
          }
        }
        toString() {
          return JSON.stringify(this);
        }
      }
      function remapping(input, loader, options2) {
        const opts = typeof options2 === "object" ? options2 : { excludeContent: !!options2, decodedMappings: false };
        const tree = buildSourceMapTree(input, loader);
        return new SourceMap(traceMappings(tree), opts);
      }
      return remapping;
    });
  })(remapping_umd$1);
  return remapping_umd$1.exports;
}
var hasRequiredMergeMap;
function requireMergeMap() {
  if (hasRequiredMergeMap) return mergeMap;
  hasRequiredMergeMap = 1;
  Object.defineProperty(mergeMap, "__esModule", {
    value: true
  });
  mergeMap.default = mergeSourceMap;
  function _remapping() {
    const data = requireRemapping_umd();
    _remapping = function() {
      return data;
    };
    return data;
  }
  function mergeSourceMap(inputMap, map, sourceFileName) {
    const source = sourceFileName.replace(/\\/g, "/");
    let found = false;
    const result = _remapping()(rootless(map), (s, ctx) => {
      if (s === source && !found) {
        found = true;
        ctx.source = "";
        return rootless(inputMap);
      }
      return null;
    });
    if (typeof inputMap.sourceRoot === "string") {
      result.sourceRoot = inputMap.sourceRoot;
    }
    return Object.assign({}, result);
  }
  function rootless(map) {
    return Object.assign({}, map, {
      sourceRoot: null
    });
  }
  return mergeMap;
}
var hasRequiredGenerate;
function requireGenerate() {
  if (hasRequiredGenerate) return generate;
  hasRequiredGenerate = 1;
  Object.defineProperty(generate, "__esModule", {
    value: true
  });
  generate.default = generateCode;
  function _convertSourceMap() {
    const data = requireConvertSourceMap();
    _convertSourceMap = function() {
      return data;
    };
    return data;
  }
  function _generator() {
    const data = requireLib$6();
    _generator = function() {
      return data;
    };
    return data;
  }
  var _mergeMap = requireMergeMap();
  function generateCode(pluginPasses, file2) {
    const {
      opts,
      ast,
      code,
      inputMap
    } = file2;
    const {
      generatorOpts
    } = opts;
    generatorOpts.inputSourceMap = inputMap == null ? void 0 : inputMap.toObject();
    const results = [];
    for (const plugins2 of pluginPasses) {
      for (const plugin2 of plugins2) {
        const {
          generatorOverride
        } = plugin2;
        if (generatorOverride) {
          const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
          if (result2 !== void 0) results.push(result2);
        }
      }
    }
    let result;
    if (results.length === 0) {
      result = (0, _generator().default)(ast, generatorOpts, code);
    } else if (results.length === 1) {
      result = results[0];
      if (typeof result.then === "function") {
        throw new Error(`You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.`);
      }
    } else {
      throw new Error("More than one plugin attempted to override codegen.");
    }
    let {
      code: outputCode,
      decodedMap: outputMap = result.map
    } = result;
    if (result.__mergedMap) {
      outputMap = Object.assign({}, result.map);
    } else {
      if (outputMap) {
        if (inputMap) {
          outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName);
        } else {
          outputMap = result.map;
        }
      }
    }
    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
      outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment();
    }
    if (opts.sourceMaps === "inline") {
      outputMap = null;
    }
    return {
      outputCode,
      outputMap
    };
  }
  return generate;
}
var hasRequiredTransformation;
function requireTransformation() {
  if (hasRequiredTransformation) return transformation;
  hasRequiredTransformation = 1;
  Object.defineProperty(transformation, "__esModule", {
    value: true
  });
  transformation.run = run;
  function _traverse() {
    const data = requireLib$5();
    _traverse = function() {
      return data;
    };
    return data;
  }
  var _pluginPass = requirePluginPass();
  var _blockHoistPlugin = requireBlockHoistPlugin();
  var _normalizeOpts = requireNormalizeOpts();
  var _normalizeFile = requireNormalizeFile();
  var _generate = requireGenerate();
  var _deepArray = requireDeepArray();
  var _async = requireAsync();
  function* run(config2, code, ast) {
    const file2 = yield* (0, _normalizeFile.default)(config2.passes, (0, _normalizeOpts.default)(config2), code, ast);
    const opts = file2.opts;
    try {
      yield* transformFile(file2, config2.passes);
    } catch (e) {
      var _opts$filename;
      e.message = `${(_opts$filename = opts.filename) != null ? _opts$filename : "unknown file"}: ${e.message}`;
      if (!e.code) {
        e.code = "BABEL_TRANSFORM_ERROR";
      }
      throw e;
    }
    let outputCode, outputMap;
    try {
      if (opts.code !== false) {
        ({
          outputCode,
          outputMap
        } = (0, _generate.default)(config2.passes, file2));
      }
    } catch (e) {
      var _opts$filename2;
      e.message = `${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : "unknown file"}: ${e.message}`;
      if (!e.code) {
        e.code = "BABEL_GENERATE_ERROR";
      }
      throw e;
    }
    return {
      metadata: file2.metadata,
      options: opts,
      ast: opts.ast === true ? file2.ast : null,
      code: outputCode === void 0 ? null : outputCode,
      map: outputMap === void 0 ? null : outputMap,
      sourceType: file2.ast.program.sourceType,
      externalDependencies: (0, _deepArray.flattenToSet)(config2.externalDependencies)
    };
  }
  function* transformFile(file2, pluginPasses) {
    const async2 = yield* (0, _async.isAsync)();
    for (const pluginPairs of pluginPasses) {
      const passPairs = [];
      const passes = [];
      const visitors2 = [];
      for (const plugin2 of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
        const pass = new _pluginPass.default(file2, plugin2.key, plugin2.options, async2);
        passPairs.push([plugin2, pass]);
        passes.push(pass);
        visitors2.push(plugin2.visitor);
      }
      for (const [plugin2, pass] of passPairs) {
        if (plugin2.pre) {
          const fn2 = (0, _async.maybeAsync)(plugin2.pre, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);
          yield* fn2.call(pass, file2);
        }
      }
      const visitor = _traverse().default.visitors.merge(visitors2, passes, file2.opts.wrapPluginVisitorMethod);
      {
        (0, _traverse().default)(file2.ast, visitor, file2.scope);
      }
      for (const [plugin2, pass] of passPairs) {
        if (plugin2.post) {
          const fn2 = (0, _async.maybeAsync)(plugin2.post, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);
          yield* fn2.call(pass, file2);
        }
      }
    }
  }
  return transformation;
}
var hasRequiredTransform;
function requireTransform() {
  if (hasRequiredTransform) return transform;
  hasRequiredTransform = 1;
  Object.defineProperty(transform, "__esModule", {
    value: true
  });
  transform.transform = void 0;
  transform.transformAsync = transformAsync;
  transform.transformSync = transformSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _index = requireConfig();
  var _index2 = requireTransformation();
  var _rewriteStackTrace = requireRewriteStackTrace();
  const transformRunner = _gensync()(function* transform2(code, opts) {
    const config2 = yield* (0, _index.default)(opts);
    if (config2 === null) return null;
    return yield* (0, _index2.run)(config2, code);
  });
  transform.transform = function transform2(code, optsOrCallback, maybeCallback) {
    let opts;
    let callback;
    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = void 0;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }
    if (callback === void 0) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
  };
  function transformSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
  }
  function transformAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
  }
  return transform;
}
var transformFileBrowser = {};
var hasRequiredTransformFileBrowser;
function requireTransformFileBrowser() {
  if (hasRequiredTransformFileBrowser) return transformFileBrowser;
  hasRequiredTransformFileBrowser = 1;
  Object.defineProperty(transformFileBrowser, "__esModule", {
    value: true
  });
  transformFileBrowser.transformFile = void 0;
  transformFileBrowser.transformFileAsync = transformFileAsync;
  transformFileBrowser.transformFileSync = transformFileSync;
  transformFileBrowser.transformFile = function transformFile(filename, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
    }
    callback(new Error("Transforming files is not supported in browsers"), null);
  };
  function transformFileSync() {
    throw new Error("Transforming files is not supported in browsers");
  }
  function transformFileAsync() {
    return Promise.reject(new Error("Transforming files is not supported in browsers"));
  }
  return transformFileBrowser;
}
var transformAst = {};
var hasRequiredTransformAst;
function requireTransformAst() {
  if (hasRequiredTransformAst) return transformAst;
  hasRequiredTransformAst = 1;
  Object.defineProperty(transformAst, "__esModule", {
    value: true
  });
  transformAst.transformFromAst = void 0;
  transformAst.transformFromAstAsync = transformFromAstAsync;
  transformAst.transformFromAstSync = transformFromAstSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _index = requireConfig();
  var _index2 = requireTransformation();
  var _rewriteStackTrace = requireRewriteStackTrace();
  const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
    const config2 = yield* (0, _index.default)(opts);
    if (config2 === null) return null;
    if (!ast) throw new Error("No AST given");
    return yield* (0, _index2.run)(config2, code, ast);
  });
  transformAst.transformFromAst = function transformFromAst(ast, code, optsOrCallback, maybeCallback) {
    let opts;
    let callback;
    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = void 0;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }
    if (callback === void 0) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
  };
  function transformFromAstSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
  }
  function transformFromAstAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
  }
  return transformAst;
}
var parse$1 = {};
var hasRequiredParse;
function requireParse() {
  if (hasRequiredParse) return parse$1;
  hasRequiredParse = 1;
  Object.defineProperty(parse$1, "__esModule", {
    value: true
  });
  parse$1.parse = void 0;
  parse$1.parseAsync = parseAsync;
  parse$1.parseSync = parseSync;
  function _gensync() {
    const data = requireGensync();
    _gensync = function() {
      return data;
    };
    return data;
  }
  var _index = requireConfig();
  var _index2 = requireParser();
  var _normalizeOpts = requireNormalizeOpts();
  var _rewriteStackTrace = requireRewriteStackTrace();
  const parseRunner = _gensync()(function* parse2(code, opts) {
    const config2 = yield* (0, _index.default)(opts);
    if (config2 === null) {
      return null;
    }
    return yield* (0, _index2.default)(config2.passes, (0, _normalizeOpts.default)(config2), code);
  });
  parse$1.parse = function parse2(code, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = void 0;
    }
    if (callback === void 0) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
  };
  function parseSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
  }
  function parseAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
  }
  return parse$1;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib$d;
  hasRequiredLib = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DEFAULT_EXTENSIONS = void 0;
    Object.defineProperty(exports2, "File", {
      enumerable: true,
      get: function() {
        return _file.default;
      }
    });
    Object.defineProperty(exports2, "buildExternalHelpers", {
      enumerable: true,
      get: function() {
        return _buildExternalHelpers.default;
      }
    });
    Object.defineProperty(exports2, "createConfigItem", {
      enumerable: true,
      get: function() {
        return _index2.createConfigItem;
      }
    });
    Object.defineProperty(exports2, "createConfigItemAsync", {
      enumerable: true,
      get: function() {
        return _index2.createConfigItemAsync;
      }
    });
    Object.defineProperty(exports2, "createConfigItemSync", {
      enumerable: true,
      get: function() {
        return _index2.createConfigItemSync;
      }
    });
    Object.defineProperty(exports2, "getEnv", {
      enumerable: true,
      get: function() {
        return _environment.getEnv;
      }
    });
    Object.defineProperty(exports2, "loadOptions", {
      enumerable: true,
      get: function() {
        return _index2.loadOptions;
      }
    });
    Object.defineProperty(exports2, "loadOptionsAsync", {
      enumerable: true,
      get: function() {
        return _index2.loadOptionsAsync;
      }
    });
    Object.defineProperty(exports2, "loadOptionsSync", {
      enumerable: true,
      get: function() {
        return _index2.loadOptionsSync;
      }
    });
    Object.defineProperty(exports2, "loadPartialConfig", {
      enumerable: true,
      get: function() {
        return _index2.loadPartialConfig;
      }
    });
    Object.defineProperty(exports2, "loadPartialConfigAsync", {
      enumerable: true,
      get: function() {
        return _index2.loadPartialConfigAsync;
      }
    });
    Object.defineProperty(exports2, "loadPartialConfigSync", {
      enumerable: true,
      get: function() {
        return _index2.loadPartialConfigSync;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function() {
        return _parse.parse;
      }
    });
    Object.defineProperty(exports2, "parseAsync", {
      enumerable: true,
      get: function() {
        return _parse.parseAsync;
      }
    });
    Object.defineProperty(exports2, "parseSync", {
      enumerable: true,
      get: function() {
        return _parse.parseSync;
      }
    });
    exports2.resolvePreset = exports2.resolvePlugin = void 0;
    Object.defineProperty(exports2, "template", {
      enumerable: true,
      get: function() {
        return _template().default;
      }
    });
    Object.defineProperty(exports2, "tokTypes", {
      enumerable: true,
      get: function() {
        return _parser().tokTypes;
      }
    });
    Object.defineProperty(exports2, "transform", {
      enumerable: true,
      get: function() {
        return _transform.transform;
      }
    });
    Object.defineProperty(exports2, "transformAsync", {
      enumerable: true,
      get: function() {
        return _transform.transformAsync;
      }
    });
    Object.defineProperty(exports2, "transformFile", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFile;
      }
    });
    Object.defineProperty(exports2, "transformFileAsync", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFileAsync;
      }
    });
    Object.defineProperty(exports2, "transformFileSync", {
      enumerable: true,
      get: function() {
        return _transformFile.transformFileSync;
      }
    });
    Object.defineProperty(exports2, "transformFromAst", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAst;
      }
    });
    Object.defineProperty(exports2, "transformFromAstAsync", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAstAsync;
      }
    });
    Object.defineProperty(exports2, "transformFromAstSync", {
      enumerable: true,
      get: function() {
        return _transformAst.transformFromAstSync;
      }
    });
    Object.defineProperty(exports2, "transformSync", {
      enumerable: true,
      get: function() {
        return _transform.transformSync;
      }
    });
    Object.defineProperty(exports2, "traverse", {
      enumerable: true,
      get: function() {
        return _traverse().default;
      }
    });
    exports2.version = exports2.types = void 0;
    var _file = requireFile();
    var _buildExternalHelpers = requireBuildExternalHelpers();
    var resolvers = requireIndexBrowser();
    var _environment = requireEnvironment();
    function _types() {
      const data = requireLib$b();
      _types = function() {
        return data;
      };
      return data;
    }
    Object.defineProperty(exports2, "types", {
      enumerable: true,
      get: function() {
        return _types();
      }
    });
    function _parser() {
      const data = requireLib$a();
      _parser = function() {
        return data;
      };
      return data;
    }
    function _traverse() {
      const data = requireLib$5();
      _traverse = function() {
        return data;
      };
      return data;
    }
    function _template() {
      const data = requireLib$8();
      _template = function() {
        return data;
      };
      return data;
    }
    var _index2 = requireConfig();
    var _transform = requireTransform();
    var _transformFile = requireTransformFileBrowser();
    var _transformAst = requireTransformAst();
    var _parse = requireParse();
    exports2.version = "7.27.4";
    const resolvePlugin = (name, dirname) => resolvers.resolvePlugin(name, dirname, false).filepath;
    exports2.resolvePlugin = resolvePlugin;
    const resolvePreset = (name, dirname) => resolvers.resolvePreset(name, dirname, false).filepath;
    exports2.resolvePreset = resolvePreset;
    exports2.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
    {
      exports2.OptionManager = class OptionManager {
        init(opts) {
          return (0, _index2.loadOptionsSync)(opts);
        }
      };
      exports2.Plugin = function Plugin(alias) {
        throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
      };
    }
  })(lib$d);
  return lib$d;
}
var libExports = requireLib();
var babel = { exports: {} };
var hasRequiredBabel;
function requireBabel() {
  if (hasRequiredBabel) return babel.exports;
  hasRequiredBabel = 1;
  (function(module2, exports2) {
    (function(f) {
      function e() {
        var i = f();
        return i.default || i;
      }
      module2.exports = e();
    })(function() {
      var Bs = Object.create;
      var be2 = Object.defineProperty;
      var Rs = Object.getOwnPropertyDescriptor;
      var _s = Object.getOwnPropertyNames;
      var Us = Object.getPrototypeOf, js = Object.prototype.hasOwnProperty;
      var $s = (a, t) => () => (t || a((t = { exports: {} }).exports, t), t.exports), zs = (a, t) => {
        for (var e in t) be2(a, e, { get: t[e], enumerable: true });
      }, Et2 = (a, t, e, s) => {
        if (t && typeof t == "object" || typeof t == "function") for (let i of _s(t)) !js.call(a, i) && i !== e && be2(a, i, { get: () => t[i], enumerable: !(s = Rs(t, i)) || s.enumerable });
        return a;
      };
      var It2 = (a, t, e) => (e = a != null ? Bs(Us(a)) : {}, Et2(be2(e, "default", { value: a, enumerable: true }), a)), Vs = (a) => Et2(be2({}, "__esModule", { value: true }), a);
      var gt2 = $s((me2) => {
        Object.defineProperty(me2, "__esModule", { value: true });
        function qs(a, t) {
          if (a == null) return {};
          var e = {};
          for (var s in a) if ({}.hasOwnProperty.call(a, s)) {
            if (t.includes(s)) continue;
            e[s] = a[s];
          }
          return e;
        }
        var O2 = class {
          constructor(t, e, s) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = t, this.column = e, this.index = s;
          }
        }, ee2 = class {
          constructor(t, e) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = t, this.end = e;
          }
        };
        function v(a, t) {
          let { line: e, column: s, index: i } = a;
          return new O2(e, s + t, i + t);
        }
        var Nt2 = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED", Ks = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code: Nt2 }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code: Nt2 } }, kt2 = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, we2 = (a) => a.type === "UpdateExpression" ? kt2.UpdateExpression[`${a.prefix}`] : kt2[a.type], Hs = { AccessorIsGenerator: ({ kind: a }) => `A ${a}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accessor must not have any formal parameters.", BadSetterArity: "A 'set' accessor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind: a }) => `Missing initializer in ${a} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.", DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.', DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName: a }) => `\`${a}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", DynamicImportPhaseRequiresImportExpressions: ({ phase: a }) => `'import.${a}(...)' can only be parsed when using the 'createImportExpressions' option.`, ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName: a, exportName: t }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${a}' as '${t}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type: a }) => `'${a === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type: a }) => `Unsyntactic ${a === "BreakStatement" ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.", ImportBindingIsString: ({ importName: a }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${a}" as foo }\`?`, ImportCallArity: "`import()` requires exactly one or two arguments.", ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix: a }) => `Expected number in radix ${a}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord: a }) => `Escape sequence in keyword ${a}.`, InvalidIdentifier: ({ identifierName: a }) => `Invalid identifier ${a}.`, InvalidLhs: ({ ancestor: a }) => `Invalid left-hand side in ${we2(a)}.`, InvalidLhsBinding: ({ ancestor: a }) => `Binding invalid left-hand side in ${we2(a)}.`, InvalidLhsOptionalChaining: ({ ancestor: a }) => `Invalid optional chaining in the left-hand side of ${we2(a)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected: a }) => `Unexpected character '${a}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName: a }) => `Private name #${a} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName: a }) => `Label '${a}' is already declared.`, LetInLexicalBinding: "'let' is disallowed as a lexically bound name.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin: a }) => `This experimental syntax requires enabling the parser plugin: ${a.map((t) => JSON.stringify(t)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin: a }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${a.map((t) => JSON.stringify(t)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key: a }) => `Duplicate key "${a}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode: a }) => `An export name cannot include a lone surrogate, found '\\u${a.toString(16)}'.`, ModuleExportUndefined: ({ localName: a }) => `Export '${a}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName: a }) => `Private names are only allowed in property accesses (\`obj.#${a}\`) or in \`in\` expressions (\`#${a} in obj\`).`, PrivateNameRedeclaration: ({ identifierName: a }) => `Duplicate private name #${a}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.", SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.', StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword: a }) => `Unexpected keyword '${a}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord: a }) => `Unexpected reserved word '${a}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected: a, unexpected: t }) => `Unexpected token${t ? ` '${t}'.` : ""}${a ? `, expected "${a}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target: a, onlyValidPropertyName: t }) => `The only valid meta property for ${a} is ${a}.${t}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationExport: "Using declaration cannot be exported.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: ({ identifierName: a }) => `Identifier '${a}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." }, Js = { StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName: a }) => `Assigning to '${a}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName: a }) => `Binding '${a}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }, Ws = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]), Xs = Object.assign({ PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token: a }) => `Invalid topic token ${a}. In order to use ${a} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${a}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type: a }) => `Hack-style pipe body cannot be an unparenthesized ${we2({ type: a })}; please wrap it in parentheses.` }, { PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' }), Gs = ["message"];
        function vt2(a, t, e) {
          Object.defineProperty(a, t, { enumerable: false, configurable: true, value: e });
        }
        function Ys({ toMessage: a, code: t, reasonCode: e, syntaxPlugin: s }) {
          let i = e === "MissingPlugin" || e === "MissingOneOfPlugins";
          {
            let r = { AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter", AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference", SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter", SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter", SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType" };
            r[e] && (e = r[e]);
          }
          return function r(n, o) {
            let h = new SyntaxError();
            return h.code = t, h.reasonCode = e, h.loc = n, h.pos = n.index, h.syntaxPlugin = s, i && (h.missingPlugin = o.missingPlugin), vt2(h, "clone", function(c = {}) {
              var u;
              let { line: f, column: d, index: x2 } = (u = c.loc) != null ? u : n;
              return r(new O2(f, d, x2), Object.assign({}, o, c.details));
            }), vt2(h, "details", o), Object.defineProperty(h, "message", { configurable: true, get() {
              let l = `${a(o)} (${n.line}:${n.column})`;
              return this.message = l, l;
            }, set(l) {
              Object.defineProperty(this, "message", { value: l, writable: true });
            } }), h;
          };
        }
        function _2(a, t) {
          if (Array.isArray(a)) return (s) => _2(s, a[0]);
          let e = {};
          for (let s of Object.keys(a)) {
            let i = a[s], r = typeof i == "string" ? { message: () => i } : typeof i == "function" ? { message: i } : i, { message: n } = r, o = qs(r, Gs), h = typeof n == "string" ? () => n : n;
            e[s] = Ys(Object.assign({ code: "BABEL_PARSER_SYNTAX_ERROR", reasonCode: s, toMessage: h }, t ? { syntaxPlugin: t } : {}, o));
          }
          return e;
        }
        var p = Object.assign({}, _2(Ks), _2(Hs), _2(Js), _2`pipelineOperator`(Xs));
        function Qs() {
          return { sourceType: "script", sourceFilename: void 0, startIndex: 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowNewTargetOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createImportExpressions: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true, annexB: true };
        }
        function Zs(a) {
          let t = Qs();
          if (a == null) return t;
          if (a.annexB != null && a.annexB !== false) throw new Error("The `annexB` option can only be set to `false`.");
          for (let e of Object.keys(t)) a[e] != null && (t[e] = a[e]);
          if (t.startLine === 1) a.startIndex == null && t.startColumn > 0 ? t.startIndex = t.startColumn : a.startColumn == null && t.startIndex > 0 && (t.startColumn = t.startIndex);
          else if ((a.startColumn == null || a.startIndex == null) && a.startIndex != null) throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
          return t;
        }
        var { defineProperty: ei2 } = Object, Lt2 = (a, t) => {
          a && ei2(a, t, { enumerable: false, value: a[t] });
        };
        function oe2(a) {
          return Lt2(a.loc.start, "index"), Lt2(a.loc.end, "index"), a;
        }
        var ti2 = (a) => class extends a {
          parse() {
            let e = oe2(super.parse());
            return this.optionFlags & 128 && (e.tokens = e.tokens.map(oe2)), e;
          }
          parseRegExpLiteral({ pattern: e, flags: s }) {
            let i = null;
            try {
              i = new RegExp(e, s);
            } catch {
            }
            let r = this.estreeParseLiteral(i);
            return r.regex = { pattern: e, flags: s }, r;
          }
          parseBigIntLiteral(e) {
            let s;
            try {
              s = BigInt(e);
            } catch {
              s = null;
            }
            let i = this.estreeParseLiteral(s);
            return i.bigint = String(i.value || e), i;
          }
          parseDecimalLiteral(e) {
            let i = this.estreeParseLiteral(null);
            return i.decimal = String(i.value || e), i;
          }
          estreeParseLiteral(e) {
            return this.parseLiteral(e, "Literal");
          }
          parseStringLiteral(e) {
            return this.estreeParseLiteral(e);
          }
          parseNumericLiteral(e) {
            return this.estreeParseLiteral(e);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(e) {
            return this.estreeParseLiteral(e);
          }
          directiveToStmt(e) {
            let s = e.value;
            delete e.value, s.type = "Literal", s.raw = s.extra.raw, s.value = s.extra.expressionValue;
            let i = e;
            return i.type = "ExpressionStatement", i.expression = s, i.directive = s.extra.rawValue, delete s.extra, i;
          }
          initFunction(e, s) {
            super.initFunction(e, s), e.expression = false;
          }
          checkDeclaration(e) {
            e != null && this.isObjectProperty(e) ? this.checkDeclaration(e.value) : super.checkDeclaration(e);
          }
          getObjectOrClassMethodParams(e) {
            return e.value.params;
          }
          isValidDirective(e) {
            var s;
            return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && !((s = e.expression.extra) != null && s.parenthesized);
          }
          parseBlockBody(e, s, i, r, n) {
            super.parseBlockBody(e, s, i, r, n);
            let o = e.directives.map((h) => this.directiveToStmt(h));
            e.body = o.concat(e.body), delete e.directives;
          }
          parsePrivateName() {
            let e = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(e) : e;
          }
          convertPrivateNameToPrivateIdentifier(e) {
            let s = super.getPrivateNameSV(e);
            return e = e, delete e.id, e.name = s, e.type = "PrivateIdentifier", e;
          }
          isPrivateName(e) {
            return this.getPluginOption("estree", "classFeatures") ? e.type === "PrivateIdentifier" : super.isPrivateName(e);
          }
          getPrivateNameSV(e) {
            return this.getPluginOption("estree", "classFeatures") ? e.name : super.getPrivateNameSV(e);
          }
          parseLiteral(e, s) {
            let i = super.parseLiteral(e, s);
            return i.raw = i.extra.raw, delete i.extra, i;
          }
          parseFunctionBody(e, s, i = false) {
            super.parseFunctionBody(e, s, i), e.expression = e.body.type !== "BlockStatement";
          }
          parseMethod(e, s, i, r, n, o, h = false) {
            let l = this.startNode();
            l.kind = e.kind, l = super.parseMethod(l, s, i, r, n, o, h), l.type = "FunctionExpression", delete l.kind, e.value = l;
            let { typeParameters: c } = e;
            return c && (delete e.typeParameters, l.typeParameters = c, this.resetStartLocationFromNode(l, c)), o === "ClassPrivateMethod" && (e.computed = false), this.finishNode(e, "MethodDefinition");
          }
          nameIsConstructor(e) {
            return e.type === "Literal" ? e.value === "constructor" : super.nameIsConstructor(e);
          }
          parseClassProperty(...e) {
            let s = super.parseClassProperty(...e);
            return this.getPluginOption("estree", "classFeatures") && (s.type = "PropertyDefinition"), s;
          }
          parseClassPrivateProperty(...e) {
            let s = super.parseClassPrivateProperty(...e);
            return this.getPluginOption("estree", "classFeatures") && (s.type = "PropertyDefinition", s.computed = false), s;
          }
          parseObjectMethod(e, s, i, r, n) {
            let o = super.parseObjectMethod(e, s, i, r, n);
            return o && (o.type = "Property", o.kind === "method" && (o.kind = "init"), o.shorthand = false), o;
          }
          parseObjectProperty(e, s, i, r) {
            let n = super.parseObjectProperty(e, s, i, r);
            return n && (n.kind = "init", n.type = "Property"), n;
          }
          isValidLVal(e, s, i) {
            return e === "Property" ? "value" : super.isValidLVal(e, s, i);
          }
          isAssignable(e, s) {
            return e != null && this.isObjectProperty(e) ? this.isAssignable(e.value, s) : super.isAssignable(e, s);
          }
          toAssignable(e, s = false) {
            if (e != null && this.isObjectProperty(e)) {
              let { key: i, value: r } = e;
              this.isPrivateName(i) && this.classScope.usePrivateName(this.getPrivateNameSV(i), i.loc.start), this.toAssignable(r, s);
            } else super.toAssignable(e, s);
          }
          toAssignableObjectExpressionProp(e, s, i) {
            e.type === "Property" && (e.kind === "get" || e.kind === "set") ? this.raise(p.PatternHasAccessor, e.key) : e.type === "Property" && e.method ? this.raise(p.PatternHasMethod, e.key) : super.toAssignableObjectExpressionProp(e, s, i);
          }
          finishCallExpression(e, s) {
            let i = super.finishCallExpression(e, s);
            if (i.callee.type === "Import") {
              var r, n;
              i.type = "ImportExpression", i.source = i.arguments[0], i.options = (r = i.arguments[1]) != null ? r : null, i.attributes = (n = i.arguments[1]) != null ? n : null, delete i.arguments, delete i.callee;
            }
            return i;
          }
          toReferencedArguments(e) {
            e.type !== "ImportExpression" && super.toReferencedArguments(e);
          }
          parseExport(e, s) {
            let i = this.state.lastTokStartLoc, r = super.parseExport(e, s);
            switch (r.type) {
              case "ExportAllDeclaration":
                r.exported = null;
                break;
              case "ExportNamedDeclaration":
                r.specifiers.length === 1 && r.specifiers[0].type === "ExportNamespaceSpecifier" && (r.type = "ExportAllDeclaration", r.exported = r.specifiers[0].exported, delete r.specifiers);
              case "ExportDefaultDeclaration":
                {
                  var n;
                  let { declaration: o } = r;
                  (o == null ? void 0 : o.type) === "ClassDeclaration" && ((n = o.decorators) == null ? void 0 : n.length) > 0 && o.start === r.start && this.resetStartLocation(r, i);
                }
                break;
            }
            return r;
          }
          parseSubscript(e, s, i, r) {
            let n = super.parseSubscript(e, s, i, r);
            if (r.optionalChainMember) {
              if ((n.type === "OptionalMemberExpression" || n.type === "OptionalCallExpression") && (n.type = n.type.substring(8)), r.stop) {
                let o = this.startNodeAtNode(n);
                return o.expression = n, this.finishNode(o, "ChainExpression");
              }
            } else (n.type === "MemberExpression" || n.type === "CallExpression") && (n.optional = false);
            return n;
          }
          isOptionalMemberExpression(e) {
            return e.type === "ChainExpression" ? e.expression.type === "MemberExpression" : super.isOptionalMemberExpression(e);
          }
          hasPropertyAsPrivateName(e) {
            return e.type === "ChainExpression" && (e = e.expression), super.hasPropertyAsPrivateName(e);
          }
          isObjectProperty(e) {
            return e.type === "Property" && e.kind === "init" && !e.method;
          }
          isObjectMethod(e) {
            return e.type === "Property" && (e.method || e.kind === "get" || e.kind === "set");
          }
          finishNodeAt(e, s, i) {
            return oe2(super.finishNodeAt(e, s, i));
          }
          resetStartLocation(e, s) {
            super.resetStartLocation(e, s), oe2(e);
          }
          resetEndLocation(e, s = this.state.lastTokEndLoc) {
            super.resetEndLocation(e, s), oe2(e);
          }
        }, W2 = class {
          constructor(t, e) {
            this.token = void 0, this.preserveSpace = void 0, this.token = t, this.preserveSpace = !!e;
          }
        }, C = { brace: new W2("{"), j_oTag: new W2("<tag"), j_cTag: new W2("</tag"), j_expr: new W2("<tag>...</tag>", true) };
        C.template = new W2("`", true);
        var b = true, m = true, _e2 = true, he2 = true, z2 = true, si2 = true, Ie2 = class {
          constructor(t, e = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = t, this.keyword = e.keyword, this.beforeExpr = !!e.beforeExpr, this.startsExpr = !!e.startsExpr, this.rightAssociative = !!e.rightAssociative, this.isLoop = !!e.isLoop, this.isAssign = !!e.isAssign, this.prefix = !!e.prefix, this.postfix = !!e.postfix, this.binop = e.binop != null ? e.binop : null, this.updateContext = null;
          }
        }, lt2 = /* @__PURE__ */ new Map();
        function A2(a, t = {}) {
          t.keyword = a;
          let e = P2(a, t);
          return lt2.set(a, e), e;
        }
        function k2(a, t) {
          return P2(a, { beforeExpr: b, binop: t });
        }
        var pe2 = -1, B2 = [], ct2 = [], pt2 = [], ut2 = [], ft2 = [], dt2 = [];
        function P2(a, t = {}) {
          var e, s, i, r;
          return ++pe2, ct2.push(a), pt2.push((e = t.binop) != null ? e : -1), ut2.push((s = t.beforeExpr) != null ? s : false), ft2.push((i = t.startsExpr) != null ? i : false), dt2.push((r = t.prefix) != null ? r : false), B2.push(new Ie2(a, t)), pe2;
        }
        function T2(a, t = {}) {
          var e, s, i, r;
          return ++pe2, lt2.set(a, pe2), ct2.push(a), pt2.push((e = t.binop) != null ? e : -1), ut2.push((s = t.beforeExpr) != null ? s : false), ft2.push((i = t.startsExpr) != null ? i : false), dt2.push((r = t.prefix) != null ? r : false), B2.push(new Ie2("name", t)), pe2;
        }
        var ii2 = { bracketL: P2("[", { beforeExpr: b, startsExpr: m }), bracketHashL: P2("#[", { beforeExpr: b, startsExpr: m }), bracketBarL: P2("[|", { beforeExpr: b, startsExpr: m }), bracketR: P2("]"), bracketBarR: P2("|]"), braceL: P2("{", { beforeExpr: b, startsExpr: m }), braceBarL: P2("{|", { beforeExpr: b, startsExpr: m }), braceHashL: P2("#{", { beforeExpr: b, startsExpr: m }), braceR: P2("}"), braceBarR: P2("|}"), parenL: P2("(", { beforeExpr: b, startsExpr: m }), parenR: P2(")"), comma: P2(",", { beforeExpr: b }), semi: P2(";", { beforeExpr: b }), colon: P2(":", { beforeExpr: b }), doubleColon: P2("::", { beforeExpr: b }), dot: P2("."), question: P2("?", { beforeExpr: b }), questionDot: P2("?."), arrow: P2("=>", { beforeExpr: b }), template: P2("template"), ellipsis: P2("...", { beforeExpr: b }), backQuote: P2("`", { startsExpr: m }), dollarBraceL: P2("${", { beforeExpr: b, startsExpr: m }), templateTail: P2("...`", { startsExpr: m }), templateNonTail: P2("...${", { beforeExpr: b, startsExpr: m }), at: P2("@"), hash: P2("#", { startsExpr: m }), interpreterDirective: P2("#!..."), eq: P2("=", { beforeExpr: b, isAssign: he2 }), assign: P2("_=", { beforeExpr: b, isAssign: he2 }), slashAssign: P2("_=", { beforeExpr: b, isAssign: he2 }), xorAssign: P2("_=", { beforeExpr: b, isAssign: he2 }), moduloAssign: P2("_=", { beforeExpr: b, isAssign: he2 }), incDec: P2("++/--", { prefix: z2, postfix: si2, startsExpr: m }), bang: P2("!", { beforeExpr: b, prefix: z2, startsExpr: m }), tilde: P2("~", { beforeExpr: b, prefix: z2, startsExpr: m }), doubleCaret: P2("^^", { startsExpr: m }), doubleAt: P2("@@", { startsExpr: m }), pipeline: k2("|>", 0), nullishCoalescing: k2("??", 1), logicalOR: k2("||", 1), logicalAND: k2("&&", 2), bitwiseOR: k2("|", 3), bitwiseXOR: k2("^", 4), bitwiseAND: k2("&", 5), equality: k2("==/!=/===/!==", 6), lt: k2("</>/<=/>=", 7), gt: k2("</>/<=/>=", 7), relational: k2("</>/<=/>=", 7), bitShift: k2("<</>>/>>>", 8), bitShiftL: k2("<</>>/>>>", 8), bitShiftR: k2("<</>>/>>>", 8), plusMin: P2("+/-", { beforeExpr: b, binop: 9, prefix: z2, startsExpr: m }), modulo: P2("%", { binop: 10, startsExpr: m }), star: P2("*", { binop: 10 }), slash: k2("/", 10), exponent: P2("**", { beforeExpr: b, binop: 11, rightAssociative: true }), _in: A2("in", { beforeExpr: b, binop: 7 }), _instanceof: A2("instanceof", { beforeExpr: b, binop: 7 }), _break: A2("break"), _case: A2("case", { beforeExpr: b }), _catch: A2("catch"), _continue: A2("continue"), _debugger: A2("debugger"), _default: A2("default", { beforeExpr: b }), _else: A2("else", { beforeExpr: b }), _finally: A2("finally"), _function: A2("function", { startsExpr: m }), _if: A2("if"), _return: A2("return", { beforeExpr: b }), _switch: A2("switch"), _throw: A2("throw", { beforeExpr: b, prefix: z2, startsExpr: m }), _try: A2("try"), _var: A2("var"), _const: A2("const"), _with: A2("with"), _new: A2("new", { beforeExpr: b, startsExpr: m }), _this: A2("this", { startsExpr: m }), _super: A2("super", { startsExpr: m }), _class: A2("class", { startsExpr: m }), _extends: A2("extends", { beforeExpr: b }), _export: A2("export"), _import: A2("import", { startsExpr: m }), _null: A2("null", { startsExpr: m }), _true: A2("true", { startsExpr: m }), _false: A2("false", { startsExpr: m }), _typeof: A2("typeof", { beforeExpr: b, prefix: z2, startsExpr: m }), _void: A2("void", { beforeExpr: b, prefix: z2, startsExpr: m }), _delete: A2("delete", { beforeExpr: b, prefix: z2, startsExpr: m }), _do: A2("do", { isLoop: _e2, beforeExpr: b }), _for: A2("for", { isLoop: _e2 }), _while: A2("while", { isLoop: _e2 }), _as: T2("as", { startsExpr: m }), _assert: T2("assert", { startsExpr: m }), _async: T2("async", { startsExpr: m }), _await: T2("await", { startsExpr: m }), _defer: T2("defer", { startsExpr: m }), _from: T2("from", { startsExpr: m }), _get: T2("get", { startsExpr: m }), _let: T2("let", { startsExpr: m }), _meta: T2("meta", { startsExpr: m }), _of: T2("of", { startsExpr: m }), _sent: T2("sent", { startsExpr: m }), _set: T2("set", { startsExpr: m }), _source: T2("source", { startsExpr: m }), _static: T2("static", { startsExpr: m }), _using: T2("using", { startsExpr: m }), _yield: T2("yield", { startsExpr: m }), _asserts: T2("asserts", { startsExpr: m }), _checks: T2("checks", { startsExpr: m }), _exports: T2("exports", { startsExpr: m }), _global: T2("global", { startsExpr: m }), _implements: T2("implements", { startsExpr: m }), _intrinsic: T2("intrinsic", { startsExpr: m }), _infer: T2("infer", { startsExpr: m }), _is: T2("is", { startsExpr: m }), _mixins: T2("mixins", { startsExpr: m }), _proto: T2("proto", { startsExpr: m }), _require: T2("require", { startsExpr: m }), _satisfies: T2("satisfies", { startsExpr: m }), _keyof: T2("keyof", { startsExpr: m }), _readonly: T2("readonly", { startsExpr: m }), _unique: T2("unique", { startsExpr: m }), _abstract: T2("abstract", { startsExpr: m }), _declare: T2("declare", { startsExpr: m }), _enum: T2("enum", { startsExpr: m }), _module: T2("module", { startsExpr: m }), _namespace: T2("namespace", { startsExpr: m }), _interface: T2("interface", { startsExpr: m }), _type: T2("type", { startsExpr: m }), _opaque: T2("opaque", { startsExpr: m }), name: P2("name", { startsExpr: m }), placeholder: P2("%%", { startsExpr: true }), string: P2("string", { startsExpr: m }), num: P2("num", { startsExpr: m }), bigint: P2("bigint", { startsExpr: m }), decimal: P2("decimal", { startsExpr: m }), regexp: P2("regexp", { startsExpr: m }), privateName: P2("#name", { startsExpr: m }), eof: P2("eof"), jsxName: P2("jsxName"), jsxText: P2("jsxText", { beforeExpr: true }), jsxTagStart: P2("jsxTagStart", { startsExpr: true }), jsxTagEnd: P2("jsxTagEnd") };
        function E(a) {
          return a >= 93 && a <= 133;
        }
        function ri2(a) {
          return a <= 92;
        }
        function D(a) {
          return a >= 58 && a <= 133;
        }
        function Vt2(a) {
          return a >= 58 && a <= 137;
        }
        function ai2(a) {
          return ut2[a];
        }
        function Ve2(a) {
          return ft2[a];
        }
        function ni2(a) {
          return a >= 29 && a <= 33;
        }
        function Dt2(a) {
          return a >= 129 && a <= 131;
        }
        function oi2(a) {
          return a >= 90 && a <= 92;
        }
        function mt2(a) {
          return a >= 58 && a <= 92;
        }
        function hi2(a) {
          return a >= 39 && a <= 59;
        }
        function li2(a) {
          return a === 34;
        }
        function ci2(a) {
          return dt2[a];
        }
        function pi2(a) {
          return a >= 121 && a <= 123;
        }
        function ui2(a) {
          return a >= 124 && a <= 130;
        }
        function q2(a) {
          return ct2[a];
        }
        function Ce2(a) {
          return pt2[a];
        }
        function fi2(a) {
          return a === 57;
        }
        function Ne2(a) {
          return a >= 24 && a <= 25;
        }
        function F(a) {
          return B2[a];
        }
        B2[8].updateContext = (a) => {
          a.pop();
        }, B2[5].updateContext = B2[7].updateContext = B2[23].updateContext = (a) => {
          a.push(C.brace);
        }, B2[22].updateContext = (a) => {
          a[a.length - 1] === C.template ? a.pop() : a.push(C.template);
        }, B2[143].updateContext = (a) => {
          a.push(C.j_expr, C.j_oTag);
        };
        var yt = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", qt2 = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･", di2 = new RegExp("[" + yt + "]"), mi2 = new RegExp("[" + yt + qt2 + "]");
        yt = qt2 = null;
        var Kt2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], yi2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function qe2(a, t) {
          let e = 65536;
          for (let s = 0, i = t.length; s < i; s += 2) {
            if (e += t[s], e > a) return false;
            if (e += t[s + 1], e >= a) return true;
          }
          return false;
        }
        function R2(a) {
          return a < 65 ? a === 36 : a <= 90 ? true : a < 97 ? a === 95 : a <= 122 ? true : a <= 65535 ? a >= 170 && di2.test(String.fromCharCode(a)) : qe2(a, Kt2);
        }
        function Y2(a) {
          return a < 48 ? a === 36 : a < 58 ? true : a < 65 ? false : a <= 90 ? true : a < 97 ? a === 95 : a <= 122 ? true : a <= 65535 ? a >= 170 && mi2.test(String.fromCharCode(a)) : qe2(a, Kt2) || qe2(a, yi2);
        }
        var xt2 = { keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"], strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], strictBind: ["eval", "arguments"] }, xi = new Set(xt2.keyword), Pi2 = new Set(xt2.strict), gi2 = new Set(xt2.strictBind);
        function Ht2(a, t) {
          return t && a === "await" || a === "enum";
        }
        function Jt2(a, t) {
          return Ht2(a, t) || Pi2.has(a);
        }
        function Wt2(a) {
          return gi2.has(a);
        }
        function Xt2(a, t) {
          return Jt2(a, t) || Wt2(a);
        }
        function Ti2(a) {
          return xi.has(a);
        }
        function bi2(a, t, e) {
          return a === 64 && t === 64 && R2(e);
        }
        var Ai2 = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        function Si2(a) {
          return Ai2.has(a);
        }
        var ue2 = class {
          constructor(t) {
            this.flags = 0, this.names = /* @__PURE__ */ new Map(), this.firstLexicalName = "", this.flags = t;
          }
        }, fe2 = class {
          constructor(t, e) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = t, this.inModule = e;
          }
          get inTopLevel() {
            return (this.currentScope().flags & 1) > 0;
          }
          get inFunction() {
            return (this.currentVarScopeFlags() & 2) > 0;
          }
          get allowSuper() {
            return (this.currentThisScopeFlags() & 16) > 0;
          }
          get allowDirectSuper() {
            return (this.currentThisScopeFlags() & 32) > 0;
          }
          get inClass() {
            return (this.currentThisScopeFlags() & 64) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            let t = this.currentThisScopeFlags();
            return (t & 64) > 0 && (t & 2) === 0;
          }
          get inStaticBlock() {
            for (let t = this.scopeStack.length - 1; ; t--) {
              let { flags: e } = this.scopeStack[t];
              if (e & 128) return true;
              if (e & 451) return false;
            }
          }
          get inNonArrowFunction() {
            return (this.currentThisScopeFlags() & 2) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(t) {
            return new ue2(t);
          }
          enter(t) {
            this.scopeStack.push(this.createScope(t));
          }
          exit() {
            return this.scopeStack.pop().flags;
          }
          treatFunctionsAsVarInScope(t) {
            return !!(t.flags & 130 || !this.parser.inModule && t.flags & 1);
          }
          declareName(t, e, s) {
            let i = this.currentScope();
            if (e & 8 || e & 16) {
              this.checkRedeclarationInScope(i, t, e, s);
              let r = i.names.get(t) || 0;
              e & 16 ? r = r | 4 : (i.firstLexicalName || (i.firstLexicalName = t), r = r | 2), i.names.set(t, r), e & 8 && this.maybeExportDefined(i, t);
            } else if (e & 4) for (let r = this.scopeStack.length - 1; r >= 0 && (i = this.scopeStack[r], this.checkRedeclarationInScope(i, t, e, s), i.names.set(t, (i.names.get(t) || 0) | 1), this.maybeExportDefined(i, t), !(i.flags & 387)); --r) ;
            this.parser.inModule && i.flags & 1 && this.undefinedExports.delete(t);
          }
          maybeExportDefined(t, e) {
            this.parser.inModule && t.flags & 1 && this.undefinedExports.delete(e);
          }
          checkRedeclarationInScope(t, e, s, i) {
            this.isRedeclaredInScope(t, e, s) && this.parser.raise(p.VarRedeclaration, i, { identifierName: e });
          }
          isRedeclaredInScope(t, e, s) {
            if (!(s & 1)) return false;
            if (s & 8) return t.names.has(e);
            let i = t.names.get(e);
            return s & 16 ? (i & 2) > 0 || !this.treatFunctionsAsVarInScope(t) && (i & 1) > 0 : (i & 2) > 0 && !(t.flags & 8 && t.firstLexicalName === e) || !this.treatFunctionsAsVarInScope(t) && (i & 4) > 0;
          }
          checkLocalExport(t) {
            let { name: e } = t;
            this.scopeStack[0].names.has(e) || this.undefinedExports.set(e, t.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let t = this.scopeStack.length - 1; ; t--) {
              let { flags: e } = this.scopeStack[t];
              if (e & 387) return e;
            }
          }
          currentThisScopeFlags() {
            for (let t = this.scopeStack.length - 1; ; t--) {
              let { flags: e } = this.scopeStack[t];
              if (e & 451 && !(e & 4)) return e;
            }
          }
        }, Ke2 = class extends ue2 {
          constructor(...t) {
            super(...t), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }, He2 = class extends fe2 {
          createScope(t) {
            return new Ke2(t);
          }
          declareName(t, e, s) {
            let i = this.currentScope();
            if (e & 2048) {
              this.checkRedeclarationInScope(i, t, e, s), this.maybeExportDefined(i, t), i.declareFunctions.add(t);
              return;
            }
            super.declareName(t, e, s);
          }
          isRedeclaredInScope(t, e, s) {
            if (super.isRedeclaredInScope(t, e, s)) return true;
            if (s & 2048 && !t.declareFunctions.has(e)) {
              let i = t.names.get(e);
              return (i & 4) > 0 || (i & 2) > 0;
            }
            return false;
          }
          checkLocalExport(t) {
            this.scopeStack[0].declareFunctions.has(t.name) || super.checkLocalExport(t);
          }
        }, Je2 = class {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          sourceToOffsetPos(t) {
            return t + this.startIndex;
          }
          offsetToSourcePos(t) {
            return t - this.startIndex;
          }
          hasPlugin(t) {
            if (typeof t == "string") return this.plugins.has(t);
            {
              let [e, s] = t;
              if (!this.hasPlugin(e)) return false;
              let i = this.plugins.get(e);
              for (let r of Object.keys(s)) if ((i == null ? void 0 : i[r]) !== s[r]) return false;
              return true;
            }
          }
          getPluginOption(t, e) {
            var s;
            return (s = this.plugins.get(t)) == null ? void 0 : s[e];
          }
        };
        function Gt2(a, t) {
          a.trailingComments === void 0 ? a.trailingComments = t : a.trailingComments.unshift(...t);
        }
        function wi(a, t) {
          a.leadingComments === void 0 ? a.leadingComments = t : a.leadingComments.unshift(...t);
        }
        function de2(a, t) {
          a.innerComments === void 0 ? a.innerComments = t : a.innerComments.unshift(...t);
        }
        function H2(a, t, e) {
          let s = null, i = t.length;
          for (; s === null && i > 0; ) s = t[--i];
          s === null || s.start > e.start ? de2(a, e.comments) : Gt2(s, e.comments);
        }
        var We2 = class extends Je2 {
          addComment(t) {
            this.filename && (t.loc.filename = this.filename);
            let { commentsLen: e } = this.state;
            this.comments.length !== e && (this.comments.length = e), this.comments.push(t), this.state.commentsLen++;
          }
          processComment(t) {
            let { commentStack: e } = this.state, s = e.length;
            if (s === 0) return;
            let i = s - 1, r = e[i];
            r.start === t.end && (r.leadingNode = t, i--);
            let { start: n } = t;
            for (; i >= 0; i--) {
              let o = e[i], h = o.end;
              if (h > n) o.containingNode = t, this.finalizeComment(o), e.splice(i, 1);
              else {
                h === n && (o.trailingNode = t);
                break;
              }
            }
          }
          finalizeComment(t) {
            let { comments: e } = t;
            if (t.leadingNode !== null || t.trailingNode !== null) t.leadingNode !== null && Gt2(t.leadingNode, e), t.trailingNode !== null && wi(t.trailingNode, e);
            else {
              let { containingNode: s, start: i } = t;
              if (this.input.charCodeAt(this.offsetToSourcePos(i) - 1) === 44) switch (s.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  H2(s, s.properties, t);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  H2(s, s.arguments, t);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  H2(s, s.params, t);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  H2(s, s.elements, t);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  H2(s, s.specifiers, t);
                  break;
                case "TSEnumDeclaration":
                  H2(s, s.members, t);
                  break;
                case "TSEnumBody":
                  H2(s, s.members, t);
                  break;
                default:
                  de2(s, e);
              }
              else de2(s, e);
            }
          }
          finalizeRemainingComments() {
            let { commentStack: t } = this.state;
            for (let e = t.length - 1; e >= 0; e--) this.finalizeComment(t[e]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(t) {
            let { commentStack: e } = this.state, { length: s } = e;
            if (s === 0) return;
            let i = e[s - 1];
            i.leadingNode === t && (i.leadingNode = null);
          }
          resetPreviousIdentifierLeadingComments(t) {
            let { commentStack: e } = this.state, { length: s } = e;
            s !== 0 && (e[s - 1].trailingNode === t ? e[s - 1].trailingNode = null : s >= 2 && e[s - 2].trailingNode === t && (e[s - 2].trailingNode = null));
          }
          takeSurroundingComments(t, e, s) {
            let { commentStack: i } = this.state, r = i.length;
            if (r === 0) return;
            let n = r - 1;
            for (; n >= 0; n--) {
              let o = i[n], h = o.end;
              if (o.start === s) o.leadingNode = t;
              else if (h === e) o.trailingNode = t;
              else if (h < e) break;
            }
          }
        }, Ci = /\r\n|[\r\n\u2028\u2029]/, Ae2 = new RegExp(Ci.source, "g");
        function Q2(a) {
          switch (a) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        function Mt2(a, t, e) {
          for (let s = t; s < e; s++) if (Q2(a.charCodeAt(s))) return true;
          return false;
        }
        var Ue2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, je2 = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
        function Ei2(a) {
          switch (a) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        var Xe2 = class a {
          constructor() {
            this.flags = 1024, this.startIndex = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 140, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [C.brace], this.firstInvalidTemplateEscapePos = null, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          get strict() {
            return (this.flags & 1) > 0;
          }
          set strict(t) {
            t ? this.flags |= 1 : this.flags &= -2;
          }
          init({ strictMode: t, sourceType: e, startIndex: s, startLine: i, startColumn: r }) {
            this.strict = t === false ? false : t === true ? true : e === "module", this.startIndex = s, this.curLine = i, this.lineStart = -r, this.startLoc = this.endLoc = new O2(i, r, s);
          }
          get maybeInArrowParameters() {
            return (this.flags & 2) > 0;
          }
          set maybeInArrowParameters(t) {
            t ? this.flags |= 2 : this.flags &= -3;
          }
          get inType() {
            return (this.flags & 4) > 0;
          }
          set inType(t) {
            t ? this.flags |= 4 : this.flags &= -5;
          }
          get noAnonFunctionType() {
            return (this.flags & 8) > 0;
          }
          set noAnonFunctionType(t) {
            t ? this.flags |= 8 : this.flags &= -9;
          }
          get hasFlowComment() {
            return (this.flags & 16) > 0;
          }
          set hasFlowComment(t) {
            t ? this.flags |= 16 : this.flags &= -17;
          }
          get isAmbientContext() {
            return (this.flags & 32) > 0;
          }
          set isAmbientContext(t) {
            t ? this.flags |= 32 : this.flags &= -33;
          }
          get inAbstractClass() {
            return (this.flags & 64) > 0;
          }
          set inAbstractClass(t) {
            t ? this.flags |= 64 : this.flags &= -65;
          }
          get inDisallowConditionalTypesContext() {
            return (this.flags & 128) > 0;
          }
          set inDisallowConditionalTypesContext(t) {
            t ? this.flags |= 128 : this.flags &= -129;
          }
          get soloAwait() {
            return (this.flags & 256) > 0;
          }
          set soloAwait(t) {
            t ? this.flags |= 256 : this.flags &= -257;
          }
          get inFSharpPipelineDirectBody() {
            return (this.flags & 512) > 0;
          }
          set inFSharpPipelineDirectBody(t) {
            t ? this.flags |= 512 : this.flags &= -513;
          }
          get canStartJSXElement() {
            return (this.flags & 1024) > 0;
          }
          set canStartJSXElement(t) {
            t ? this.flags |= 1024 : this.flags &= -1025;
          }
          get containsEsc() {
            return (this.flags & 2048) > 0;
          }
          set containsEsc(t) {
            t ? this.flags |= 2048 : this.flags &= -2049;
          }
          get hasTopLevelAwait() {
            return (this.flags & 4096) > 0;
          }
          set hasTopLevelAwait(t) {
            t ? this.flags |= 4096 : this.flags &= -4097;
          }
          curPosition() {
            return new O2(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
          }
          clone() {
            let t = new a();
            return t.flags = this.flags, t.startIndex = this.startIndex, t.curLine = this.curLine, t.lineStart = this.lineStart, t.startLoc = this.startLoc, t.endLoc = this.endLoc, t.errors = this.errors.slice(), t.potentialArrowAt = this.potentialArrowAt, t.noArrowAt = this.noArrowAt.slice(), t.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice(), t.topicContext = this.topicContext, t.labels = this.labels.slice(), t.commentsLen = this.commentsLen, t.commentStack = this.commentStack.slice(), t.pos = this.pos, t.type = this.type, t.value = this.value, t.start = this.start, t.end = this.end, t.lastTokEndLoc = this.lastTokEndLoc, t.lastTokStartLoc = this.lastTokStartLoc, t.context = this.context.slice(), t.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos, t.strictErrors = this.strictErrors, t.tokensLength = this.tokensLength, t;
          }
        }, Ii2 = function(t) {
          return t >= 48 && t <= 57;
        }, Ot2 = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, Se2 = { bin: (a) => a === 48 || a === 49, oct: (a) => a >= 48 && a <= 55, dec: (a) => a >= 48 && a <= 57, hex: (a) => a >= 48 && a <= 57 || a >= 65 && a <= 70 || a >= 97 && a <= 102 };
        function Ft2(a, t, e, s, i, r) {
          let n = e, o = s, h = i, l = "", c = null, u = e, { length: f } = t;
          for (; ; ) {
            if (e >= f) {
              r.unterminated(n, o, h), l += t.slice(u, e);
              break;
            }
            let d = t.charCodeAt(e);
            if (Ni2(a, d, t, e)) {
              l += t.slice(u, e);
              break;
            }
            if (d === 92) {
              l += t.slice(u, e);
              let x2 = ki2(t, e, s, i, a === "template", r);
              x2.ch === null && !c ? c = { pos: e, lineStart: s, curLine: i } : l += x2.ch, { pos: e, lineStart: s, curLine: i } = x2, u = e;
            } else d === 8232 || d === 8233 ? (++e, ++i, s = e) : d === 10 || d === 13 ? a === "template" ? (l += t.slice(u, e) + `
`, ++e, d === 13 && t.charCodeAt(e) === 10 && ++e, ++i, u = s = e) : r.unterminated(n, o, h) : ++e;
          }
          return { pos: e, str: l, firstInvalidLoc: c, lineStart: s, curLine: i, containsInvalid: !!c };
        }
        function Ni2(a, t, e, s) {
          return a === "template" ? t === 96 || t === 36 && e.charCodeAt(s + 1) === 123 : t === (a === "double" ? 34 : 39);
        }
        function ki2(a, t, e, s, i, r) {
          let n = !i;
          t++;
          let o = (l) => ({ pos: t, ch: l, lineStart: e, curLine: s }), h = a.charCodeAt(t++);
          switch (h) {
            case 110:
              return o(`
`);
            case 114:
              return o("\r");
            case 120: {
              let l;
              return { code: l, pos: t } = Ge2(a, t, e, s, 2, false, n, r), o(l === null ? null : String.fromCharCode(l));
            }
            case 117: {
              let l;
              return { code: l, pos: t } = Qt2(a, t, e, s, n, r), o(l === null ? null : String.fromCodePoint(l));
            }
            case 116:
              return o("	");
            case 98:
              return o("\b");
            case 118:
              return o("\v");
            case 102:
              return o("\f");
            case 13:
              a.charCodeAt(t) === 10 && ++t;
            case 10:
              e = t, ++s;
            case 8232:
            case 8233:
              return o("");
            case 56:
            case 57:
              if (i) return o(null);
              r.strictNumericEscape(t - 1, e, s);
            default:
              if (h >= 48 && h <= 55) {
                let l = t - 1, u = /^[0-7]+/.exec(a.slice(l, t + 2))[0], f = parseInt(u, 8);
                f > 255 && (u = u.slice(0, -1), f = parseInt(u, 8)), t += u.length - 1;
                let d = a.charCodeAt(t);
                if (u !== "0" || d === 56 || d === 57) {
                  if (i) return o(null);
                  r.strictNumericEscape(l, e, s);
                }
                return o(String.fromCharCode(f));
              }
              return o(String.fromCharCode(h));
          }
        }
        function Ge2(a, t, e, s, i, r, n, o) {
          let h = t, l;
          return { n: l, pos: t } = Yt2(a, t, e, s, 16, i, r, false, o, !n), l === null && (n ? o.invalidEscapeSequence(h, e, s) : t = h - 1), { code: l, pos: t };
        }
        function Yt2(a, t, e, s, i, r, n, o, h, l) {
          let c = t, u = i === 16 ? Ot2.hex : Ot2.decBinOct, f = i === 16 ? Se2.hex : i === 10 ? Se2.dec : i === 8 ? Se2.oct : Se2.bin, d = false, x2 = 0;
          for (let S2 = 0, N2 = r ?? 1 / 0; S2 < N2; ++S2) {
            let w2 = a.charCodeAt(t), I2;
            if (w2 === 95 && o !== "bail") {
              let Te2 = a.charCodeAt(t - 1), ne2 = a.charCodeAt(t + 1);
              if (o) {
                if (Number.isNaN(ne2) || !f(ne2) || u.has(Te2) || u.has(ne2)) {
                  if (l) return { n: null, pos: t };
                  h.unexpectedNumericSeparator(t, e, s);
                }
              } else {
                if (l) return { n: null, pos: t };
                h.numericSeparatorInEscapeSequence(t, e, s);
              }
              ++t;
              continue;
            }
            if (w2 >= 97 ? I2 = w2 - 97 + 10 : w2 >= 65 ? I2 = w2 - 65 + 10 : Ii2(w2) ? I2 = w2 - 48 : I2 = 1 / 0, I2 >= i) {
              if (I2 <= 9 && l) return { n: null, pos: t };
              if (I2 <= 9 && h.invalidDigit(t, e, s, i)) I2 = 0;
              else if (n) I2 = 0, d = true;
              else break;
            }
            ++t, x2 = x2 * i + I2;
          }
          return t === c || r != null && t - c !== r || d ? { n: null, pos: t } : { n: x2, pos: t };
        }
        function Qt2(a, t, e, s, i, r) {
          let n = a.charCodeAt(t), o;
          if (n === 123) {
            if (++t, { code: o, pos: t } = Ge2(a, t, e, s, a.indexOf("}", t) - t, true, i, r), ++t, o !== null && o > 1114111) if (i) r.invalidCodePoint(t, e, s);
            else return { code: null, pos: t };
          } else ({ code: o, pos: t } = Ge2(a, t, e, s, 4, false, i, r));
          return { code: o, pos: t };
        }
        function le2(a, t, e) {
          return new O2(e, a - t, a);
        }
        var vi2 = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]), M2 = class {
          constructor(t) {
            let e = t.startIndex || 0;
            this.type = t.type, this.value = t.value, this.start = e + t.start, this.end = e + t.end, this.loc = new ee2(t.startLoc, t.endLoc);
          }
        }, Ye2 = class extends We2 {
          constructor(t, e) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (s, i, r, n) => this.optionFlags & 1024 ? (this.raise(p.InvalidDigit, le2(s, i, r), { radix: n }), true) : false, numericSeparatorInEscapeSequence: this.errorBuilder(p.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(p.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(p.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(p.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (s, i, r) => {
              this.recordStrictModeErrors(p.StrictNumericEscape, le2(s, i, r));
            }, unterminated: (s, i, r) => {
              throw this.raise(p.UnterminatedString, le2(s - 1, i, r));
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(p.StrictNumericEscape), unterminated: (s, i, r) => {
              throw this.raise(p.UnterminatedTemplate, le2(s, i, r));
            } }), this.state = new Xe2(), this.state.init(t), this.input = e, this.length = e.length, this.comments = [], this.isLookahead = false;
          }
          pushToken(t) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(t), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.optionFlags & 128 && this.pushToken(new M2(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(t) {
            return this.match(t) ? (this.next(), true) : false;
          }
          match(t) {
            return this.state.type === t;
          }
          createLookaheadState(t) {
            return { pos: t.pos, value: null, type: t.type, start: t.start, end: t.end, context: [this.curContext()], inType: t.inType, startLoc: t.startLoc, lastTokEndLoc: t.lastTokEndLoc, curLine: t.curLine, lineStart: t.lineStart, curPosition: t.curPosition };
          }
          lookahead() {
            let t = this.state;
            this.state = this.createLookaheadState(t), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            let e = this.state;
            return this.state = t, e;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(t) {
            return Ue2.lastIndex = t, Ue2.test(this.input) ? Ue2.lastIndex : t;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          nextTokenInLineStart() {
            return this.nextTokenInLineStartSince(this.state.pos);
          }
          nextTokenInLineStartSince(t) {
            return je2.lastIndex = t, je2.test(this.input) ? je2.lastIndex : t;
          }
          lookaheadInLineCharCode() {
            return this.input.charCodeAt(this.nextTokenInLineStart());
          }
          codePointAtPos(t) {
            let e = this.input.charCodeAt(t);
            if ((e & 64512) === 55296 && ++t < this.input.length) {
              let s = this.input.charCodeAt(t);
              (s & 64512) === 56320 && (e = 65536 + ((e & 1023) << 10) + (s & 1023));
            }
            return e;
          }
          setStrict(t) {
            this.state.strict = t, t && (this.state.strictErrors.forEach(([e, s]) => this.raise(e, s)), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            if (this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length) {
              this.finishToken(140);
              return;
            }
            this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment(t) {
            let e;
            this.isLookahead || (e = this.state.curPosition());
            let s = this.state.pos, i = this.input.indexOf(t, s + 2);
            if (i === -1) throw this.raise(p.UnterminatedComment, this.state.curPosition());
            for (this.state.pos = i + t.length, Ae2.lastIndex = s + 2; Ae2.test(this.input) && Ae2.lastIndex <= i; ) ++this.state.curLine, this.state.lineStart = Ae2.lastIndex;
            if (this.isLookahead) return;
            let r = { type: "CommentBlock", value: this.input.slice(s + 2, i), start: this.sourceToOffsetPos(s), end: this.sourceToOffsetPos(i + t.length), loc: new ee2(e, this.state.curPosition()) };
            return this.optionFlags & 128 && this.pushToken(r), r;
          }
          skipLineComment(t) {
            let e = this.state.pos, s;
            this.isLookahead || (s = this.state.curPosition());
            let i = this.input.charCodeAt(this.state.pos += t);
            if (this.state.pos < this.length) for (; !Q2(i) && ++this.state.pos < this.length; ) i = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead) return;
            let r = this.state.pos, o = { type: "CommentLine", value: this.input.slice(e + t, r), start: this.sourceToOffsetPos(e), end: this.sourceToOffsetPos(r), loc: new ee2(s, this.state.curPosition()) };
            return this.optionFlags & 128 && this.pushToken(o), o;
          }
          skipSpace() {
            let t = this.state.pos, e = this.optionFlags & 2048 ? [] : null;
            e: for (; this.state.pos < this.length; ) {
              let s = this.input.charCodeAt(this.state.pos);
              switch (s) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      let i = this.skipBlockComment("*/");
                      i !== void 0 && (this.addComment(i), e == null || e.push(i));
                      break;
                    }
                    case 47: {
                      let i = this.skipLineComment(2);
                      i !== void 0 && (this.addComment(i), e == null || e.push(i));
                      break;
                    }
                    default:
                      break e;
                  }
                  break;
                default:
                  if (Ei2(s)) ++this.state.pos;
                  else if (s === 45 && !this.inModule && this.optionFlags & 4096) {
                    let i = this.state.pos;
                    if (this.input.charCodeAt(i + 1) === 45 && this.input.charCodeAt(i + 2) === 62 && (t === 0 || this.state.lineStart > t)) {
                      let r = this.skipLineComment(3);
                      r !== void 0 && (this.addComment(r), e == null || e.push(r));
                    } else break e;
                  } else if (s === 60 && !this.inModule && this.optionFlags & 4096) {
                    let i = this.state.pos;
                    if (this.input.charCodeAt(i + 1) === 33 && this.input.charCodeAt(i + 2) === 45 && this.input.charCodeAt(i + 3) === 45) {
                      let r = this.skipLineComment(4);
                      r !== void 0 && (this.addComment(r), e == null || e.push(r));
                    } else break e;
                  } else break e;
              }
            }
            if ((e == null ? void 0 : e.length) > 0) {
              let s = this.state.pos, i = { start: this.sourceToOffsetPos(t), end: this.sourceToOffsetPos(s), comments: e, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(i);
            }
          }
          finishToken(t, e) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            let s = this.state.type;
            this.state.type = t, this.state.value = e, this.isLookahead || this.updateContext(s);
          }
          replaceToken(t) {
            this.state.type = t, this.updateContext();
          }
          readToken_numberSign() {
            if (this.state.pos === 0 && this.readToken_interpreter()) return;
            let t = this.state.pos + 1, e = this.codePointAtPos(t);
            if (e >= 48 && e <= 57) throw this.raise(p.UnexpectedDigitAfterHash, this.state.curPosition());
            if (e === 123 || e === 91 && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") === "bar") throw this.raise(e === 123 ? p.RecordExpressionHashIncorrectStartSyntaxType : p.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
              this.state.pos += 2, e === 123 ? this.finishToken(7) : this.finishToken(1);
            } else R2(e) ? (++this.state.pos, this.finishToken(139, this.readWord1(e))) : e === 92 ? (++this.state.pos, this.finishToken(139, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            let t = this.input.charCodeAt(this.state.pos + 1);
            if (t >= 48 && t <= 57) {
              this.readNumber(true);
              return;
            }
            t === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (this.state.pos !== 0 || this.length < 2) return false;
            let t = this.input.charCodeAt(this.state.pos + 1);
            if (t !== 33) return false;
            let e = this.state.pos;
            for (this.state.pos += 1; !Q2(t) && ++this.state.pos < this.length; ) t = this.input.charCodeAt(this.state.pos);
            let s = this.input.slice(e + 2, this.state.pos);
            return this.finishToken(28, s), true;
          }
          readToken_mult_modulo(t) {
            let e = t === 42 ? 55 : 54, s = 1, i = this.input.charCodeAt(this.state.pos + 1);
            t === 42 && i === 42 && (s++, i = this.input.charCodeAt(this.state.pos + 2), e = 57), i === 61 && !this.state.inType && (s++, e = t === 37 ? 33 : 30), this.finishOp(e, s);
          }
          readToken_pipe_amp(t) {
            let e = this.input.charCodeAt(this.state.pos + 1);
            if (e === t) {
              this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(30, 3) : this.finishOp(t === 124 ? 41 : 42, 2);
              return;
            }
            if (t === 124) {
              if (e === 62) {
                this.finishOp(39, 2);
                return;
              }
              if (this.hasPlugin("recordAndTuple") && e === 125) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(p.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                this.state.pos += 2, this.finishToken(9);
                return;
              }
              if (this.hasPlugin("recordAndTuple") && e === 93) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(p.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                this.state.pos += 2, this.finishToken(4);
                return;
              }
            }
            if (e === 61) {
              this.finishOp(30, 2);
              return;
            }
            this.finishOp(t === 124 ? 43 : 45, 1);
          }
          readToken_caret() {
            let t = this.input.charCodeAt(this.state.pos + 1);
            t === 61 && !this.state.inType ? this.finishOp(32, 2) : t === 94 && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }]) ? (this.finishOp(37, 2), this.input.codePointAt(this.state.pos) === 94 && this.unexpected()) : this.finishOp(44, 1);
          }
          readToken_atSign() {
            this.input.charCodeAt(this.state.pos + 1) === 64 && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(t) {
            let e = this.input.charCodeAt(this.state.pos + 1);
            if (e === t) {
              this.finishOp(34, 2);
              return;
            }
            e === 61 ? this.finishOp(30, 2) : this.finishOp(53, 1);
          }
          readToken_lt() {
            let { pos: t } = this.state, e = this.input.charCodeAt(t + 1);
            if (e === 60) {
              if (this.input.charCodeAt(t + 2) === 61) {
                this.finishOp(30, 3);
                return;
              }
              this.finishOp(51, 2);
              return;
            }
            if (e === 61) {
              this.finishOp(49, 2);
              return;
            }
            this.finishOp(47, 1);
          }
          readToken_gt() {
            let { pos: t } = this.state, e = this.input.charCodeAt(t + 1);
            if (e === 62) {
              let s = this.input.charCodeAt(t + 2) === 62 ? 3 : 2;
              if (this.input.charCodeAt(t + s) === 61) {
                this.finishOp(30, s + 1);
                return;
              }
              this.finishOp(52, s);
              return;
            }
            if (e === 61) {
              this.finishOp(49, 2);
              return;
            }
            this.finishOp(48, 1);
          }
          readToken_eq_excl(t) {
            let e = this.input.charCodeAt(this.state.pos + 1);
            if (e === 61) {
              this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
              return;
            }
            if (t === 61 && e === 62) {
              this.state.pos += 2, this.finishToken(19);
              return;
            }
            this.finishOp(t === 61 ? 29 : 35, 1);
          }
          readToken_question() {
            let t = this.input.charCodeAt(this.state.pos + 1), e = this.input.charCodeAt(this.state.pos + 2);
            t === 63 ? e === 61 ? this.finishOp(30, 3) : this.finishOp(40, 2) : t === 46 && !(e >= 48 && e <= 57) ? (this.state.pos += 2, this.finishToken(18)) : (++this.state.pos, this.finishToken(17));
          }
          getTokenFromCode(t) {
            switch (t) {
              case 46:
                this.readToken_dot();
                return;
              case 40:
                ++this.state.pos, this.finishToken(10);
                return;
              case 41:
                ++this.state.pos, this.finishToken(11);
                return;
              case 59:
                ++this.state.pos, this.finishToken(13);
                return;
              case 44:
                ++this.state.pos, this.finishToken(12);
                return;
              case 91:
                if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                  if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(p.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                  this.state.pos += 2, this.finishToken(2);
                } else ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                ++this.state.pos, this.finishToken(3);
                return;
              case 123:
                if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                  if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(p.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                  this.state.pos += 2, this.finishToken(6);
                } else ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                ++this.state.pos, this.finishToken(8);
                return;
              case 58:
                this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14));
                return;
              case 63:
                this.readToken_question();
                return;
              case 96:
                this.readTemplateToken();
                return;
              case 48: {
                let e = this.input.charCodeAt(this.state.pos + 1);
                if (e === 120 || e === 88) {
                  this.readRadixNumber(16);
                  return;
                }
                if (e === 111 || e === 79) {
                  this.readRadixNumber(8);
                  return;
                }
                if (e === 98 || e === 66) {
                  this.readRadixNumber(2);
                  return;
                }
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                this.readNumber(false);
                return;
              case 34:
              case 39:
                this.readString(t);
                return;
              case 47:
                this.readToken_slash();
                return;
              case 37:
              case 42:
                this.readToken_mult_modulo(t);
                return;
              case 124:
              case 38:
                this.readToken_pipe_amp(t);
                return;
              case 94:
                this.readToken_caret();
                return;
              case 43:
              case 45:
                this.readToken_plus_min(t);
                return;
              case 60:
                this.readToken_lt();
                return;
              case 62:
                this.readToken_gt();
                return;
              case 61:
              case 33:
                this.readToken_eq_excl(t);
                return;
              case 126:
                this.finishOp(36, 1);
                return;
              case 64:
                this.readToken_atSign();
                return;
              case 35:
                this.readToken_numberSign();
                return;
              case 92:
                this.readWord();
                return;
              default:
                if (R2(t)) {
                  this.readWord(t);
                  return;
                }
            }
            throw this.raise(p.InvalidOrUnexpectedToken, this.state.curPosition(), { unexpected: String.fromCodePoint(t) });
          }
          finishOp(t, e) {
            let s = this.input.slice(this.state.pos, this.state.pos + e);
            this.state.pos += e, this.finishToken(t, s);
          }
          readRegexp() {
            let t = this.state.startLoc, e = this.state.start + 1, s, i, { pos: r } = this.state;
            for (; ; ++r) {
              if (r >= this.length) throw this.raise(p.UnterminatedRegExp, v(t, 1));
              let l = this.input.charCodeAt(r);
              if (Q2(l)) throw this.raise(p.UnterminatedRegExp, v(t, 1));
              if (s) s = false;
              else {
                if (l === 91) i = true;
                else if (l === 93 && i) i = false;
                else if (l === 47 && !i) break;
                s = l === 92;
              }
            }
            let n = this.input.slice(e, r);
            ++r;
            let o = "", h = () => v(t, r + 2 - e);
            for (; r < this.length; ) {
              let l = this.codePointAtPos(r), c = String.fromCharCode(l);
              if (vi2.has(l)) l === 118 ? o.includes("u") && this.raise(p.IncompatibleRegExpUVFlags, h()) : l === 117 && o.includes("v") && this.raise(p.IncompatibleRegExpUVFlags, h()), o.includes(c) && this.raise(p.DuplicateRegExpFlags, h());
              else if (Y2(l) || l === 92) this.raise(p.MalformedRegExpFlags, h());
              else break;
              ++r, o += c;
            }
            this.state.pos = r, this.finishToken(138, { pattern: n, flags: o });
          }
          readInt(t, e, s = false, i = true) {
            let { n: r, pos: n } = Yt2(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, e, s, i, this.errorHandlers_readInt, false);
            return this.state.pos = n, r;
          }
          readRadixNumber(t) {
            let e = this.state.pos, s = this.state.curPosition(), i = false;
            this.state.pos += 2;
            let r = this.readInt(t);
            r == null && this.raise(p.InvalidDigit, v(s, 2), { radix: t });
            let n = this.input.charCodeAt(this.state.pos);
            if (n === 110) ++this.state.pos, i = true;
            else if (n === 109) throw this.raise(p.InvalidDecimal, s);
            if (R2(this.codePointAtPos(this.state.pos))) throw this.raise(p.NumberIdentifier, this.state.curPosition());
            if (i) {
              let o = this.input.slice(e, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(136, o);
              return;
            }
            this.finishToken(135, r);
          }
          readNumber(t) {
            let e = this.state.pos, s = this.state.curPosition(), i = false, r = false, n = false, o = false;
            !t && this.readInt(10) === null && this.raise(p.InvalidNumber, this.state.curPosition());
            let h = this.state.pos - e >= 2 && this.input.charCodeAt(e) === 48;
            if (h) {
              let d = this.input.slice(e, this.state.pos);
              if (this.recordStrictModeErrors(p.StrictOctalLiteral, s), !this.state.strict) {
                let x2 = d.indexOf("_");
                x2 > 0 && this.raise(p.ZeroDigitNumericSeparator, v(s, x2));
              }
              o = h && !/[89]/.test(d);
            }
            let l = this.input.charCodeAt(this.state.pos);
            if (l === 46 && !o && (++this.state.pos, this.readInt(10), i = true, l = this.input.charCodeAt(this.state.pos)), (l === 69 || l === 101) && !o && (l = this.input.charCodeAt(++this.state.pos), (l === 43 || l === 45) && ++this.state.pos, this.readInt(10) === null && this.raise(p.InvalidOrMissingExponent, s), i = true, n = true, l = this.input.charCodeAt(this.state.pos)), l === 110 && ((i || h) && this.raise(p.InvalidBigIntLiteral, s), ++this.state.pos, r = true), l === 109) {
              this.expectPlugin("decimal", this.state.curPosition()), (n || h) && this.raise(p.InvalidDecimal, s), ++this.state.pos;
              var c = true;
            }
            if (R2(this.codePointAtPos(this.state.pos))) throw this.raise(p.NumberIdentifier, this.state.curPosition());
            let u = this.input.slice(e, this.state.pos).replace(/[_mn]/g, "");
            if (r) {
              this.finishToken(136, u);
              return;
            }
            if (c) {
              this.finishToken(137, u);
              return;
            }
            let f = o ? parseInt(u, 8) : parseFloat(u);
            this.finishToken(135, f);
          }
          readCodePoint(t) {
            let { code: e, pos: s } = Qt2(this.input, this.state.pos, this.state.lineStart, this.state.curLine, t, this.errorHandlers_readCodePoint);
            return this.state.pos = s, e;
          }
          readString(t) {
            let { str: e, pos: s, curLine: i, lineStart: r } = Ft2(t === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = s + 1, this.state.lineStart = r, this.state.curLine = i, this.finishToken(134, e);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            let t = this.input[this.state.pos], { str: e, firstInvalidLoc: s, pos: i, curLine: r, lineStart: n } = Ft2("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = i + 1, this.state.lineStart = n, this.state.curLine = r, s && (this.state.firstInvalidTemplateEscapePos = new O2(s.curLine, s.pos - s.lineStart, this.sourceToOffsetPos(s.pos))), this.input.codePointAt(i) === 96 ? this.finishToken(24, s ? null : t + e + "`") : (this.state.pos++, this.finishToken(25, s ? null : t + e + "${"));
          }
          recordStrictModeErrors(t, e) {
            let s = e.index;
            this.state.strict && !this.state.strictErrors.has(s) ? this.raise(t, e) : this.state.strictErrors.set(s, [t, e]);
          }
          readWord1(t) {
            this.state.containsEsc = false;
            let e = "", s = this.state.pos, i = this.state.pos;
            for (t !== void 0 && (this.state.pos += t <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              let r = this.codePointAtPos(this.state.pos);
              if (Y2(r)) this.state.pos += r <= 65535 ? 1 : 2;
              else if (r === 92) {
                this.state.containsEsc = true, e += this.input.slice(i, this.state.pos);
                let n = this.state.curPosition(), o = this.state.pos === s ? R2 : Y2;
                if (this.input.charCodeAt(++this.state.pos) !== 117) {
                  this.raise(p.MissingUnicodeEscape, this.state.curPosition()), i = this.state.pos - 1;
                  continue;
                }
                ++this.state.pos;
                let h = this.readCodePoint(true);
                h !== null && (o(h) || this.raise(p.EscapedCharNotAnIdentifier, n), e += String.fromCodePoint(h)), i = this.state.pos;
              } else break;
            }
            return e + this.input.slice(i, this.state.pos);
          }
          readWord(t) {
            let e = this.readWord1(t), s = lt2.get(e);
            s !== void 0 ? this.finishToken(s, q2(s)) : this.finishToken(132, e);
          }
          checkKeywordEscapes() {
            let { type: t } = this.state;
            mt2(t) && this.state.containsEsc && this.raise(p.InvalidEscapedReservedWord, this.state.startLoc, { reservedWord: q2(t) });
          }
          raise(t, e, s = {}) {
            let i = e instanceof O2 ? e : e.loc.start, r = t(i, s);
            if (!(this.optionFlags & 1024)) throw r;
            return this.isLookahead || this.state.errors.push(r), r;
          }
          raiseOverwrite(t, e, s = {}) {
            let i = e instanceof O2 ? e : e.loc.start, r = i.index, n = this.state.errors;
            for (let o = n.length - 1; o >= 0; o--) {
              let h = n[o];
              if (h.loc.index === r) return n[o] = t(i, s);
              if (h.loc.index < r) break;
            }
            return this.raise(t, e, s);
          }
          updateContext(t) {
          }
          unexpected(t, e) {
            throw this.raise(p.UnexpectedToken, t ?? this.state.startLoc, { expected: e ? q2(e) : null });
          }
          expectPlugin(t, e) {
            if (this.hasPlugin(t)) return true;
            throw this.raise(p.MissingPlugin, e ?? this.state.startLoc, { missingPlugin: [t] });
          }
          expectOnePlugin(t) {
            if (!t.some((e) => this.hasPlugin(e))) throw this.raise(p.MissingOneOfPlugins, this.state.startLoc, { missingPlugin: t });
          }
          errorBuilder(t) {
            return (e, s, i) => {
              this.raise(t, le2(e, s, i));
            };
          }
        }, Qe2 = class {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }, Ze2 = class {
          constructor(t) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = t;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new Qe2());
          }
          exit() {
            let t = this.stack.pop(), e = this.current();
            for (let [s, i] of Array.from(t.undefinedPrivateNames)) e ? e.undefinedPrivateNames.has(s) || e.undefinedPrivateNames.set(s, i) : this.parser.raise(p.InvalidPrivateFieldResolution, i, { identifierName: s });
          }
          declarePrivateName(t, e, s) {
            let { privateNames: i, loneAccessors: r, undefinedPrivateNames: n } = this.current(), o = i.has(t);
            if (e & 3) {
              let h = o && r.get(t);
              if (h) {
                let l = h & 4, c = e & 4, u = h & 3, f = e & 3;
                o = u === f || l !== c, o || r.delete(t);
              } else o || r.set(t, e);
            }
            o && this.parser.raise(p.PrivateNameRedeclaration, s, { identifierName: t }), i.add(t), n.delete(t);
          }
          usePrivateName(t, e) {
            let s;
            for (s of this.stack) if (s.privateNames.has(t)) return;
            s ? s.undefinedPrivateNames.set(t, e) : this.parser.raise(p.InvalidPrivateFieldResolution, e, { identifierName: t });
          }
        }, te2 = class {
          constructor(t = 0) {
            this.type = t;
          }
          canBeArrowParameterDeclaration() {
            return this.type === 2 || this.type === 1;
          }
          isCertainlyParameterDeclaration() {
            return this.type === 3;
          }
        }, ke2 = class extends te2 {
          constructor(t) {
            super(t), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(t, e) {
            let s = e.index;
            this.declarationErrors.set(s, [t, e]);
          }
          clearDeclarationError(t) {
            this.declarationErrors.delete(t);
          }
          iterateErrors(t) {
            this.declarationErrors.forEach(t);
          }
        }, et2 = class {
          constructor(t) {
            this.parser = void 0, this.stack = [new te2()], this.parser = t;
          }
          enter(t) {
            this.stack.push(t);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(t, e) {
            let s = e.loc.start, { stack: i } = this, r = i.length - 1, n = i[r];
            for (; !n.isCertainlyParameterDeclaration(); ) {
              if (n.canBeArrowParameterDeclaration()) n.recordDeclarationError(t, s);
              else return;
              n = i[--r];
            }
            this.parser.raise(t, s);
          }
          recordArrowParameterBindingError(t, e) {
            let { stack: s } = this, i = s[s.length - 1], r = e.loc.start;
            if (i.isCertainlyParameterDeclaration()) this.parser.raise(t, r);
            else if (i.canBeArrowParameterDeclaration()) i.recordDeclarationError(t, r);
            else return;
          }
          recordAsyncArrowParametersError(t) {
            let { stack: e } = this, s = e.length - 1, i = e[s];
            for (; i.canBeArrowParameterDeclaration(); ) i.type === 2 && i.recordDeclarationError(p.AwaitBindingIdentifier, t), i = e[--s];
          }
          validateAsPattern() {
            let { stack: t } = this, e = t[t.length - 1];
            e.canBeArrowParameterDeclaration() && e.iterateErrors(([s, i]) => {
              this.parser.raise(s, i);
              let r = t.length - 2, n = t[r];
              for (; n.canBeArrowParameterDeclaration(); ) n.clearDeclarationError(i.index), n = t[--r];
            });
          }
        };
        function Li2() {
          return new te2(3);
        }
        function Di() {
          return new ke2(1);
        }
        function Mi2() {
          return new ke2(2);
        }
        function Zt2() {
          return new te2();
        }
        var tt2 = class {
          constructor() {
            this.stacks = [];
          }
          enter(t) {
            this.stacks.push(t);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (this.currentFlags() & 2) > 0;
          }
          get hasYield() {
            return (this.currentFlags() & 1) > 0;
          }
          get hasReturn() {
            return (this.currentFlags() & 4) > 0;
          }
          get hasIn() {
            return (this.currentFlags() & 8) > 0;
          }
        };
        function Ee2(a, t) {
          return (a ? 2 : 0) | (t ? 1 : 0);
        }
        var st2 = class extends Ye2 {
          addExtra(t, e, s, i = true) {
            if (!t) return;
            let { extra: r } = t;
            r == null && (r = {}, t.extra = r), i ? r[e] = s : Object.defineProperty(r, e, { enumerable: i, value: s });
          }
          isContextual(t) {
            return this.state.type === t && !this.state.containsEsc;
          }
          isUnparsedContextual(t, e) {
            let s = t + e.length;
            if (this.input.slice(t, s) === e) {
              let i = this.input.charCodeAt(s);
              return !(Y2(i) || (i & 64512) === 55296);
            }
            return false;
          }
          isLookaheadContextual(t) {
            let e = this.nextTokenStart();
            return this.isUnparsedContextual(e, t);
          }
          eatContextual(t) {
            return this.isContextual(t) ? (this.next(), true) : false;
          }
          expectContextual(t, e) {
            if (!this.eatContextual(t)) {
              if (e != null) throw this.raise(e, this.state.startLoc);
              this.unexpected(null, t);
            }
          }
          canInsertSemicolon() {
            return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return Mt2(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
          }
          hasFollowingLineBreak() {
            return Mt2(this.input, this.state.end, this.nextTokenStart());
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(t = true) {
            (t ? this.isLineTerminator() : this.eat(13)) || this.raise(p.MissingSemicolon, this.state.lastTokEndLoc);
          }
          expect(t, e) {
            this.eat(t) || this.unexpected(e, t);
          }
          tryParse(t, e = this.state.clone()) {
            let s = { node: null };
            try {
              let i = t((r = null) => {
                throw s.node = r, s;
              });
              if (this.state.errors.length > e.errors.length) {
                let r = this.state;
                return this.state = e, this.state.tokensLength = r.tokensLength, { node: i, error: r.errors[e.errors.length], thrown: false, aborted: false, failState: r };
              }
              return { node: i, error: null, thrown: false, aborted: false, failState: null };
            } catch (i) {
              let r = this.state;
              if (this.state = e, i instanceof SyntaxError) return { node: null, error: i, thrown: true, aborted: false, failState: r };
              if (i === s) return { node: s.node, error: null, thrown: false, aborted: true, failState: r };
              throw i;
            }
          }
          checkExpressionErrors(t, e) {
            if (!t) return false;
            let { shorthandAssignLoc: s, doubleProtoLoc: i, privateKeyLoc: r, optionalParametersLoc: n } = t, o = !!s || !!i || !!n || !!r;
            if (!e) return o;
            s != null && this.raise(p.InvalidCoverInitializedName, s), i != null && this.raise(p.DuplicateProto, i), r != null && this.raise(p.UnexpectedPrivateField, r), n != null && this.unexpected(n);
          }
          isLiteralPropertyName() {
            return Vt2(this.state.type);
          }
          isPrivateName(t) {
            return t.type === "PrivateName";
          }
          getPrivateNameSV(t) {
            return t.id.name;
          }
          hasPropertyAsPrivateName(t) {
            return (t.type === "MemberExpression" || t.type === "OptionalMemberExpression") && this.isPrivateName(t.property);
          }
          isObjectProperty(t) {
            return t.type === "ObjectProperty";
          }
          isObjectMethod(t) {
            return t.type === "ObjectMethod";
          }
          initializeScopes(t = this.options.sourceType === "module") {
            let e = this.state.labels;
            this.state.labels = [];
            let s = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            let i = this.inModule;
            this.inModule = t;
            let r = this.scope, n = this.getScopeHandler();
            this.scope = new n(this, t);
            let o = this.prodParam;
            this.prodParam = new tt2();
            let h = this.classScope;
            this.classScope = new Ze2(this);
            let l = this.expressionScope;
            return this.expressionScope = new et2(this), () => {
              this.state.labels = e, this.exportedIdentifiers = s, this.inModule = i, this.scope = r, this.prodParam = o, this.classScope = h, this.expressionScope = l;
            };
          }
          enterInitialScopes() {
            let t = 0;
            this.inModule && (t |= 2), this.scope.enter(1), this.prodParam.enter(t);
          }
          checkDestructuringPrivate(t) {
            let { privateKeyLoc: e } = t;
            e !== null && this.expectPlugin("destructuringPrivate", e);
          }
        }, Z2 = class {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }, se2 = class {
          constructor(t, e, s) {
            this.type = "", this.start = e, this.end = 0, this.loc = new ee2(s), (t == null ? void 0 : t.optionFlags) & 64 && (this.range = [e, 0]), t != null && t.filename && (this.loc.filename = t.filename);
          }
        }, Pt2 = se2.prototype;
        Pt2.__clone = function() {
          let a = new se2(void 0, this.start, this.loc.start), t = Object.keys(this);
          for (let e = 0, s = t.length; e < s; e++) {
            let i = t[e];
            i !== "leadingComments" && i !== "trailingComments" && i !== "innerComments" && (a[i] = this[i]);
          }
          return a;
        };
        function Oi2(a) {
          return U2(a);
        }
        function U2(a) {
          let { type: t, start: e, end: s, loc: i, range: r, extra: n, name: o } = a, h = Object.create(Pt2);
          return h.type = t, h.start = e, h.end = s, h.loc = i, h.range = r, h.extra = n, h.name = o, t === "Placeholder" && (h.expectedNode = a.expectedNode), h;
        }
        function Fi2(a) {
          let { type: t, start: e, end: s, loc: i, range: r, extra: n } = a;
          if (t === "Placeholder") return Oi2(a);
          let o = Object.create(Pt2);
          return o.type = t, o.start = e, o.end = s, o.loc = i, o.range = r, a.raw !== void 0 ? o.raw = a.raw : o.extra = n, o.value = a.value, o;
        }
        var it2 = class extends st2 {
          startNode() {
            let t = this.state.startLoc;
            return new se2(this, t.index, t);
          }
          startNodeAt(t) {
            return new se2(this, t.index, t);
          }
          startNodeAtNode(t) {
            return this.startNodeAt(t.loc.start);
          }
          finishNode(t, e) {
            return this.finishNodeAt(t, e, this.state.lastTokEndLoc);
          }
          finishNodeAt(t, e, s) {
            return t.type = e, t.end = s.index, t.loc.end = s, this.optionFlags & 64 && (t.range[1] = s.index), this.optionFlags & 2048 && this.processComment(t), t;
          }
          resetStartLocation(t, e) {
            t.start = e.index, t.loc.start = e, this.optionFlags & 64 && (t.range[0] = e.index);
          }
          resetEndLocation(t, e = this.state.lastTokEndLoc) {
            t.end = e.index, t.loc.end = e, this.optionFlags & 64 && (t.range[1] = e.index);
          }
          resetStartLocationFromNode(t, e) {
            this.resetStartLocation(t, e.loc.start);
          }
        }, Bi2 = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), g = _2`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType: a }) => `Cannot overwrite reserved type ${a}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName: a, enumName: t }) => `Boolean enum members need to be initialized. Use either \`${a} = true,\` or \`${a} = false,\` in enum \`${t}\`.`, EnumDuplicateMemberName: ({ memberName: a, enumName: t }) => `Enum member names need to be unique, but the name \`${a}\` has already been used before in enum \`${t}\`.`, EnumInconsistentMemberValues: ({ enumName: a }) => `Enum \`${a}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType: a, enumName: t }) => `Enum type \`${a}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${t}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName: a }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${a}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName: a, memberName: t, explicitType: e }) => `Enum \`${a}\` has type \`${e}\`, so the initializer of \`${t}\` needs to be a ${e} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName: a, memberName: t }) => `Symbol enum members cannot be initialized. Use \`${t},\` in enum \`${a}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName: a, memberName: t }) => `The enum member initializer for \`${t}\` needs to be a literal (either a boolean, number, or string) in enum \`${a}\`.`, EnumInvalidMemberName: ({ enumName: a, memberName: t, suggestion: e }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${t}\`, consider using \`${e}\`, in enum \`${a}\`.`, EnumNumberMemberNotInitialized: ({ enumName: a, memberName: t }) => `Number enum members need to be initialized, e.g. \`${t} = 1\` in enum \`${a}\`.`, EnumStringMemberInconsistentlyInitialized: ({ enumName: a }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${a}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType: a }) => `Unexpected reserved type ${a}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind: a, suggestion: t }) => `\`declare export ${a}\` is not supported. Use \`${t}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function Ri2(a) {
          return a.type === "DeclareExportAllDeclaration" || a.type === "DeclareExportDeclaration" && (!a.declaration || a.declaration.type !== "TypeAlias" && a.declaration.type !== "InterfaceDeclaration");
        }
        function Bt2(a) {
          return a.importKind === "type" || a.importKind === "typeof";
        }
        var _i = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        function Ui2(a, t) {
          let e = [], s = [];
          for (let i = 0; i < a.length; i++) (t(a[i], i, a) ? e : s).push(a[i]);
          return [e, s];
        }
        var ji2 = /\*?\s*@((?:no)?flow)\b/, $i2 = (a) => class extends a {
          constructor(...e) {
            super(...e), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return He2;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
          }
          finishToken(e, s) {
            e !== 134 && e !== 13 && e !== 28 && this.flowPragma === void 0 && (this.flowPragma = null), super.finishToken(e, s);
          }
          addComment(e) {
            if (this.flowPragma === void 0) {
              let s = ji2.exec(e.value);
              if (s) if (s[1] === "flow") this.flowPragma = "flow";
              else if (s[1] === "noflow") this.flowPragma = "noflow";
              else throw new Error("Unexpected flow pragma");
            }
            super.addComment(e);
          }
          flowParseTypeInitialiser(e) {
            let s = this.state.inType;
            this.state.inType = true, this.expect(e || 14);
            let i = this.flowParseType();
            return this.state.inType = s, i;
          }
          flowParsePredicate() {
            let e = this.startNode(), s = this.state.startLoc;
            return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > s.index + 1 && this.raise(g.UnexpectedSpaceBetweenModuloChecks, s), this.eat(10) ? (e.value = super.parseExpression(), this.expect(11), this.finishNode(e, "DeclaredPredicate")) : this.finishNode(e, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            let e = this.state.inType;
            this.state.inType = true, this.expect(14);
            let s = null, i = null;
            return this.match(54) ? (this.state.inType = e, i = this.flowParsePredicate()) : (s = this.flowParseType(), this.state.inType = e, this.match(54) && (i = this.flowParsePredicate())), [s, i];
          }
          flowParseDeclareClass(e) {
            return this.next(), this.flowParseInterfaceish(e, true), this.finishNode(e, "DeclareClass");
          }
          flowParseDeclareFunction(e) {
            this.next();
            let s = e.id = this.parseIdentifier(), i = this.startNode(), r = this.startNode();
            this.match(47) ? i.typeParameters = this.flowParseTypeParameterDeclaration() : i.typeParameters = null, this.expect(10);
            let n = this.flowParseFunctionTypeParams();
            return i.params = n.params, i.rest = n.rest, i.this = n._this, this.expect(11), [i.returnType, e.predicate] = this.flowParseTypeAndPredicateInitialiser(), r.typeAnnotation = this.finishNode(i, "FunctionTypeAnnotation"), s.typeAnnotation = this.finishNode(r, "TypeAnnotation"), this.resetEndLocation(s), this.semicolon(), this.scope.declareName(e.id.name, 2048, e.id.loc.start), this.finishNode(e, "DeclareFunction");
          }
          flowParseDeclare(e, s) {
            if (this.match(80)) return this.flowParseDeclareClass(e);
            if (this.match(68)) return this.flowParseDeclareFunction(e);
            if (this.match(74)) return this.flowParseDeclareVariable(e);
            if (this.eatContextual(127)) return this.match(16) ? this.flowParseDeclareModuleExports(e) : (s && this.raise(g.NestedDeclareModule, this.state.lastTokStartLoc), this.flowParseDeclareModule(e));
            if (this.isContextual(130)) return this.flowParseDeclareTypeAlias(e);
            if (this.isContextual(131)) return this.flowParseDeclareOpaqueType(e);
            if (this.isContextual(129)) return this.flowParseDeclareInterface(e);
            if (this.match(82)) return this.flowParseDeclareExportDeclaration(e, s);
            this.unexpected();
          }
          flowParseDeclareVariable(e) {
            return this.next(), e.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(e.id.name, 5, e.id.loc.start), this.semicolon(), this.finishNode(e, "DeclareVariable");
          }
          flowParseDeclareModule(e) {
            this.scope.enter(0), this.match(134) ? e.id = super.parseExprAtom() : e.id = this.parseIdentifier();
            let s = e.body = this.startNode(), i = s.body = [];
            for (this.expect(5); !this.match(8); ) {
              let o = this.startNode();
              this.match(83) ? (this.next(), !this.isContextual(130) && !this.match(87) && this.raise(g.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc), super.parseImport(o)) : (this.expectContextual(125, g.UnsupportedStatementInDeclareModule), o = this.flowParseDeclare(o, true)), i.push(o);
            }
            this.scope.exit(), this.expect(8), this.finishNode(s, "BlockStatement");
            let r = null, n = false;
            return i.forEach((o) => {
              Ri2(o) ? (r === "CommonJS" && this.raise(g.AmbiguousDeclareModuleKind, o), r = "ES") : o.type === "DeclareModuleExports" && (n && this.raise(g.DuplicateDeclareModuleExports, o), r === "ES" && this.raise(g.AmbiguousDeclareModuleKind, o), r = "CommonJS", n = true);
            }), e.kind = r || "CommonJS", this.finishNode(e, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(e, s) {
            if (this.expect(82), this.eat(65)) return this.match(68) || this.match(80) ? e.declaration = this.flowParseDeclare(this.startNode()) : (e.declaration = this.flowParseType(), this.semicolon()), e.default = true, this.finishNode(e, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !s) {
              let i = this.state.value;
              throw this.raise(g.UnsupportedDeclareExportKind, this.state.startLoc, { unsupportedExportKind: i, suggestion: _i[i] });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) return e.declaration = this.flowParseDeclare(this.startNode()), e.default = false, this.finishNode(e, "DeclareExportDeclaration");
            if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) return e = this.parseExport(e, null), e.type === "ExportNamedDeclaration" && (e.type = "ExportDeclaration", e.default = false, delete e.exportKind), e.type = "Declare" + e.type, e;
            this.unexpected();
          }
          flowParseDeclareModuleExports(e) {
            return this.next(), this.expectContextual(111), e.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(e, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(e) {
            this.next();
            let s = this.flowParseTypeAlias(e);
            return s.type = "DeclareTypeAlias", s;
          }
          flowParseDeclareOpaqueType(e) {
            this.next();
            let s = this.flowParseOpaqueType(e, true);
            return s.type = "DeclareOpaqueType", s;
          }
          flowParseDeclareInterface(e) {
            return this.next(), this.flowParseInterfaceish(e, false), this.finishNode(e, "DeclareInterface");
          }
          flowParseInterfaceish(e, s) {
            if (e.id = this.flowParseRestrictedIdentifier(!s, true), this.scope.declareName(e.id.name, s ? 17 : 8201, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.extends = [], this.eat(81)) do
              e.extends.push(this.flowParseInterfaceExtends());
            while (!s && this.eat(12));
            if (s) {
              if (e.implements = [], e.mixins = [], this.eatContextual(117)) do
                e.mixins.push(this.flowParseInterfaceExtends());
              while (this.eat(12));
              if (this.eatContextual(113)) do
                e.implements.push(this.flowParseInterfaceExtends());
              while (this.eat(12));
            }
            e.body = this.flowParseObjectType({ allowStatic: s, allowExact: false, allowSpread: false, allowProto: s, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            let e = this.startNode();
            return e.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? e.typeParameters = this.flowParseTypeParameterInstantiation() : e.typeParameters = null, this.finishNode(e, "InterfaceExtends");
          }
          flowParseInterface(e) {
            return this.flowParseInterfaceish(e, false), this.finishNode(e, "InterfaceDeclaration");
          }
          checkNotUnderscore(e) {
            e === "_" && this.raise(g.UnexpectedReservedUnderscore, this.state.startLoc);
          }
          checkReservedType(e, s, i) {
            Bi2.has(e) && this.raise(i ? g.AssignReservedType : g.UnexpectedReservedType, s, { reservedType: e });
          }
          flowParseRestrictedIdentifier(e, s) {
            return this.checkReservedType(this.state.value, this.state.startLoc, s), this.parseIdentifier(e);
          }
          flowParseTypeAlias(e) {
            return e.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(e.id.name, 8201, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(e, "TypeAlias");
          }
          flowParseOpaqueType(e, s) {
            return this.expectContextual(130), e.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(e.id.name, 8201, e.id.loc.start), this.match(47) ? e.typeParameters = this.flowParseTypeParameterDeclaration() : e.typeParameters = null, e.supertype = null, this.match(14) && (e.supertype = this.flowParseTypeInitialiser(14)), e.impltype = null, s || (e.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(e, "OpaqueType");
          }
          flowParseTypeParameter(e = false) {
            let s = this.state.startLoc, i = this.startNode(), r = this.flowParseVariance(), n = this.flowParseTypeAnnotatableIdentifier();
            return i.name = n.name, i.variance = r, i.bound = n.typeAnnotation, this.match(29) ? (this.eat(29), i.default = this.flowParseType()) : e && this.raise(g.MissingTypeParamDefault, s), this.finishNode(i, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            let e = this.state.inType, s = this.startNode();
            s.params = [], this.state.inType = true, this.match(47) || this.match(143) ? this.next() : this.unexpected();
            let i = false;
            do {
              let r = this.flowParseTypeParameter(i);
              s.params.push(r), r.default && (i = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = e, this.finishNode(s, "TypeParameterDeclaration");
          }
          flowInTopLevelContext(e) {
            if (this.curContext() !== C.brace) {
              let s = this.state.context;
              this.state.context = [s[0]];
              try {
                return e();
              } finally {
                this.state.context = s;
              }
            } else return e();
          }
          flowParseTypeParameterInstantiationInExpression() {
            if (this.reScan_lt() === 47) return this.flowParseTypeParameterInstantiation();
          }
          flowParseTypeParameterInstantiation() {
            let e = this.startNode(), s = this.state.inType;
            return this.state.inType = true, e.params = [], this.flowInTopLevelContext(() => {
              this.expect(47);
              let i = this.state.noAnonFunctionType;
              for (this.state.noAnonFunctionType = false; !this.match(48); ) e.params.push(this.flowParseType()), this.match(48) || this.expect(12);
              this.state.noAnonFunctionType = i;
            }), this.state.inType = s, !this.state.inType && this.curContext() === C.brace && this.reScan_lt_gt(), this.expect(48), this.finishNode(e, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            if (this.reScan_lt() !== 47) return;
            let e = this.startNode(), s = this.state.inType;
            for (e.params = [], this.state.inType = true, this.expect(47); !this.match(48); ) e.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = s, this.finishNode(e, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            let e = this.startNode();
            if (this.expectContextual(129), e.extends = [], this.eat(81)) do
              e.extends.push(this.flowParseInterfaceExtends());
            while (this.eat(12));
            return e.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(e, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(e, s, i) {
            return e.static = s, this.lookahead().type === 14 ? (e.id = this.flowParseObjectPropertyKey(), e.key = this.flowParseTypeInitialiser()) : (e.id = null, e.key = this.flowParseType()), this.expect(3), e.value = this.flowParseTypeInitialiser(), e.variance = i, this.finishNode(e, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(e, s) {
            return e.static = s, e.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (e.method = true, e.optional = false, e.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start))) : (e.method = false, this.eat(17) && (e.optional = true), e.value = this.flowParseTypeInitialiser()), this.finishNode(e, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(e) {
            for (e.params = [], e.rest = null, e.typeParameters = null, e.this = null, this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (e.this = this.flowParseFunctionTypeParam(true), e.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) e.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (e.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), e.returnType = this.flowParseTypeInitialiser(), this.finishNode(e, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(e, s) {
            let i = this.startNode();
            return e.static = s, e.value = this.flowParseObjectTypeMethodish(i), this.finishNode(e, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic: e, allowExact: s, allowSpread: i, allowProto: r, allowInexact: n }) {
            let o = this.state.inType;
            this.state.inType = true;
            let h = this.startNode();
            h.callProperties = [], h.properties = [], h.indexers = [], h.internalSlots = [];
            let l, c, u = false;
            for (s && this.match(6) ? (this.expect(6), l = 9, c = true) : (this.expect(5), l = 8, c = false), h.exact = c; !this.match(l); ) {
              let d = false, x2 = null, S2 = null, N2 = this.startNode();
              if (r && this.isContextual(118)) {
                let I2 = this.lookahead();
                I2.type !== 14 && I2.type !== 17 && (this.next(), x2 = this.state.startLoc, e = false);
              }
              if (e && this.isContextual(106)) {
                let I2 = this.lookahead();
                I2.type !== 14 && I2.type !== 17 && (this.next(), d = true);
              }
              let w2 = this.flowParseVariance();
              if (this.eat(0)) x2 != null && this.unexpected(x2), this.eat(0) ? (w2 && this.unexpected(w2.loc.start), h.internalSlots.push(this.flowParseObjectTypeInternalSlot(N2, d))) : h.indexers.push(this.flowParseObjectTypeIndexer(N2, d, w2));
              else if (this.match(10) || this.match(47)) x2 != null && this.unexpected(x2), w2 && this.unexpected(w2.loc.start), h.callProperties.push(this.flowParseObjectTypeCallProperty(N2, d));
              else {
                let I2 = "init";
                if (this.isContextual(99) || this.isContextual(104)) {
                  let ne2 = this.lookahead();
                  Vt2(ne2.type) && (I2 = this.state.value, this.next());
                }
                let Te2 = this.flowParseObjectTypeProperty(N2, d, x2, w2, I2, i, n ?? !c);
                Te2 === null ? (u = true, S2 = this.state.lastTokStartLoc) : h.properties.push(Te2);
              }
              this.flowObjectTypeSemicolon(), S2 && !this.match(8) && !this.match(9) && this.raise(g.UnexpectedExplicitInexactInObject, S2);
            }
            this.expect(l), i && (h.inexact = u);
            let f = this.finishNode(h, "ObjectTypeAnnotation");
            return this.state.inType = o, f;
          }
          flowParseObjectTypeProperty(e, s, i, r, n, o, h) {
            if (this.eat(21)) return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (o ? h || this.raise(g.InexactInsideExact, this.state.lastTokStartLoc) : this.raise(g.InexactInsideNonObject, this.state.lastTokStartLoc), r && this.raise(g.InexactVariance, r), null) : (o || this.raise(g.UnexpectedSpreadType, this.state.lastTokStartLoc), i != null && this.unexpected(i), r && this.raise(g.SpreadVariance, r), e.argument = this.flowParseType(), this.finishNode(e, "ObjectTypeSpreadProperty"));
            {
              e.key = this.flowParseObjectPropertyKey(), e.static = s, e.proto = i != null, e.kind = n;
              let l = false;
              return this.match(47) || this.match(10) ? (e.method = true, i != null && this.unexpected(i), r && this.unexpected(r.loc.start), e.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start)), (n === "get" || n === "set") && this.flowCheckGetterSetterParams(e), !o && e.key.name === "constructor" && e.value.this && this.raise(g.ThisParamBannedInConstructor, e.value.this)) : (n !== "init" && this.unexpected(), e.method = false, this.eat(17) && (l = true), e.value = this.flowParseTypeInitialiser(), e.variance = r), e.optional = l, this.finishNode(e, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(e) {
            let s = e.kind === "get" ? 0 : 1, i = e.value.params.length + (e.value.rest ? 1 : 0);
            e.value.this && this.raise(e.kind === "get" ? g.GetterMayNotHaveThisParam : g.SetterMayNotHaveThisParam, e.value.this), i !== s && this.raise(e.kind === "get" ? p.BadGetterArity : p.BadSetterArity, e), e.kind === "set" && e.value.rest && this.raise(p.BadSetterRestParameter, e);
          }
          flowObjectTypeSemicolon() {
            !this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9) && this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(e, s) {
            e != null || (e = this.state.startLoc);
            let r = s || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              let n = this.startNodeAt(e);
              n.qualification = r, n.id = this.flowParseRestrictedIdentifier(true), r = this.finishNode(n, "QualifiedTypeIdentifier");
            }
            return r;
          }
          flowParseGenericType(e, s) {
            let i = this.startNodeAt(e);
            return i.typeParameters = null, i.id = this.flowParseQualifiedTypeIdentifier(e, s), this.match(47) && (i.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(i, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            let e = this.startNode();
            return this.expect(87), e.argument = this.flowParsePrimaryType(), this.finishNode(e, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            let e = this.startNode();
            for (e.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (e.types.push(this.flowParseType()), !this.match(3)); ) this.expect(12);
            return this.expect(3), this.finishNode(e, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(e) {
            let s = null, i = false, r = null, n = this.startNode(), o = this.lookahead(), h = this.state.type === 78;
            return o.type === 14 || o.type === 17 ? (h && !e && this.raise(g.ThisParamMustBeFirst, n), s = this.parseIdentifier(h), this.eat(17) && (i = true, h && this.raise(g.ThisParamMayNotBeOptional, n)), r = this.flowParseTypeInitialiser()) : r = this.flowParseType(), n.name = s, n.optional = i, n.typeAnnotation = r, this.finishNode(n, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(e) {
            let s = this.startNodeAt(e.loc.start);
            return s.name = null, s.optional = false, s.typeAnnotation = e, this.finishNode(s, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(e = []) {
            let s = null, i = null;
            for (this.match(78) && (i = this.flowParseFunctionTypeParam(true), i.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) e.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (s = this.flowParseFunctionTypeParam(false)), { params: e, rest: s, _this: i };
          }
          flowIdentToTypeAnnotation(e, s, i) {
            switch (i.name) {
              case "any":
                return this.finishNode(s, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(s, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(s, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(s, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(s, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(s, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(s, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(i.name), this.flowParseGenericType(e, i);
            }
          }
          flowParsePrimaryType() {
            let e = this.state.startLoc, s = this.startNode(), i, r, n = false, o = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, r = this.flowParseTupleType(), this.state.noAnonFunctionType = o, r;
              case 47: {
                let h = this.startNode();
                return h.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), i = this.flowParseFunctionTypeParams(), h.params = i.params, h.rest = i.rest, h.this = i._this, this.expect(11), this.expect(19), h.returnType = this.flowParseType(), this.finishNode(h, "FunctionTypeAnnotation");
              }
              case 10: {
                let h = this.startNode();
                if (this.next(), !this.match(11) && !this.match(21)) if (E(this.state.type) || this.match(78)) {
                  let l = this.lookahead().type;
                  n = l !== 17 && l !== 14;
                } else n = true;
                if (n) {
                  if (this.state.noAnonFunctionType = false, r = this.flowParseType(), this.state.noAnonFunctionType = o, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) return this.expect(11), r;
                  this.eat(12);
                }
                return r ? i = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(r)]) : i = this.flowParseFunctionTypeParams(), h.params = i.params, h.rest = i.rest, h.this = i._this, this.expect(11), this.expect(19), h.returnType = this.flowParseType(), h.typeParameters = null, this.finishNode(h, "FunctionTypeAnnotation");
              }
              case 134:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return s.value = this.match(85), this.next(), this.finishNode(s, "BooleanLiteralTypeAnnotation");
              case 53:
                if (this.state.value === "-") {
                  if (this.next(), this.match(135)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", s);
                  if (this.match(136)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", s);
                  throw this.raise(g.UnexpectedSubtractionOperand, this.state.startLoc);
                }
                this.unexpected();
                return;
              case 135:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 136:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(s, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(s, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(s, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(s, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (mt2(this.state.type)) {
                  let h = q2(this.state.type);
                  return this.next(), super.createIdentifier(s, h);
                } else if (E(this.state.type)) return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(e, s, this.parseIdentifier());
            }
            this.unexpected();
          }
          flowParsePostfixType() {
            let e = this.state.startLoc, s = this.flowParsePrimaryType(), i = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              let r = this.startNodeAt(e), n = this.eat(18);
              i = i || n, this.expect(0), !n && this.match(3) ? (r.elementType = s, this.next(), s = this.finishNode(r, "ArrayTypeAnnotation")) : (r.objectType = s, r.indexType = this.flowParseType(), this.expect(3), i ? (r.optional = n, s = this.finishNode(r, "OptionalIndexedAccessType")) : s = this.finishNode(r, "IndexedAccessType"));
            }
            return s;
          }
          flowParsePrefixType() {
            let e = this.startNode();
            return this.eat(17) ? (e.typeAnnotation = this.flowParsePrefixType(), this.finishNode(e, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            let e = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              let s = this.startNodeAt(e.loc.start);
              return s.params = [this.reinterpretTypeAsFunctionTypeParam(e)], s.rest = null, s.this = null, s.returnType = this.flowParseType(), s.typeParameters = null, this.finishNode(s, "FunctionTypeAnnotation");
            }
            return e;
          }
          flowParseIntersectionType() {
            let e = this.startNode();
            this.eat(45);
            let s = this.flowParseAnonFunctionWithoutParens();
            for (e.types = [s]; this.eat(45); ) e.types.push(this.flowParseAnonFunctionWithoutParens());
            return e.types.length === 1 ? s : this.finishNode(e, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            let e = this.startNode();
            this.eat(43);
            let s = this.flowParseIntersectionType();
            for (e.types = [s]; this.eat(43); ) e.types.push(this.flowParseIntersectionType());
            return e.types.length === 1 ? s : this.finishNode(e, "UnionTypeAnnotation");
          }
          flowParseType() {
            let e = this.state.inType;
            this.state.inType = true;
            let s = this.flowParseUnionType();
            return this.state.inType = e, s;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (this.state.type === 132 && this.state.value === "_") {
              let e = this.state.startLoc, s = this.parseIdentifier();
              return this.flowParseGenericType(e, s);
            } else return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            let e = this.startNode();
            return e.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(e, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(e) {
            let s = e ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (s.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(s)), s;
          }
          typeCastToParameter(e) {
            return e.expression.typeAnnotation = e.typeAnnotation, this.resetEndLocation(e.expression, e.typeAnnotation.loc.end), e.expression;
          }
          flowParseVariance() {
            let e = null;
            return this.match(53) ? (e = this.startNode(), this.state.value === "+" ? e.kind = "plus" : e.kind = "minus", this.next(), this.finishNode(e, "Variance")) : e;
          }
          parseFunctionBody(e, s, i = false) {
            if (s) {
              this.forwardNoArrowParamsConversionAt(e, () => super.parseFunctionBody(e, true, i));
              return;
            }
            super.parseFunctionBody(e, false, i);
          }
          parseFunctionBodyAndFinish(e, s, i = false) {
            if (this.match(14)) {
              let r = this.startNode();
              [r.typeAnnotation, e.predicate] = this.flowParseTypeAndPredicateInitialiser(), e.returnType = r.typeAnnotation ? this.finishNode(r, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(e, s, i);
          }
          parseStatementLike(e) {
            if (this.state.strict && this.isContextual(129)) {
              let i = this.lookahead();
              if (D(i.type)) {
                let r = this.startNode();
                return this.next(), this.flowParseInterface(r);
              }
            } else if (this.isContextual(126)) {
              let i = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(i);
            }
            let s = super.parseStatementLike(e);
            return this.flowPragma === void 0 && !this.isValidDirective(s) && (this.flowPragma = null), s;
          }
          parseExpressionStatement(e, s, i) {
            if (s.type === "Identifier") {
              if (s.name === "declare") {
                if (this.match(80) || E(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(e);
              } else if (E(this.state.type)) {
                if (s.name === "interface") return this.flowParseInterface(e);
                if (s.name === "type") return this.flowParseTypeAlias(e);
                if (s.name === "opaque") return this.flowParseOpaqueType(e, false);
              }
            }
            return super.parseExpressionStatement(e, s, i);
          }
          shouldParseExportDeclaration() {
            let { type: e } = this.state;
            return e === 126 || Dt2(e) ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            let { type: e } = this.state;
            return e === 126 || Dt2(e) ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.isContextual(126)) {
              let e = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(e);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(e, s, i) {
            if (!this.match(17)) return e;
            if (this.state.maybeInArrowParameters) {
              let f = this.lookaheadCharCode();
              if (f === 44 || f === 61 || f === 58 || f === 41) return this.setOptionalParametersError(i), e;
            }
            this.expect(17);
            let r = this.state.clone(), n = this.state.noArrowAt, o = this.startNodeAt(s), { consequent: h, failed: l } = this.tryParseConditionalConsequent(), [c, u] = this.getArrowLikeExpressions(h);
            if (l || u.length > 0) {
              let f = [...n];
              if (u.length > 0) {
                this.state = r, this.state.noArrowAt = f;
                for (let d = 0; d < u.length; d++) f.push(u[d].start);
                ({ consequent: h, failed: l } = this.tryParseConditionalConsequent()), [c, u] = this.getArrowLikeExpressions(h);
              }
              l && c.length > 1 && this.raise(g.AmbiguousConditionalArrow, r.startLoc), l && c.length === 1 && (this.state = r, f.push(c[0].start), this.state.noArrowAt = f, { consequent: h, failed: l } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(h, true), this.state.noArrowAt = n, this.expect(14), o.test = e, o.consequent = h, o.alternate = this.forwardNoArrowParamsConversionAt(o, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(o, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            let e = this.parseMaybeAssignAllowIn(), s = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent: e, failed: s };
          }
          getArrowLikeExpressions(e, s) {
            let i = [e], r = [];
            for (; i.length !== 0; ) {
              let n = i.pop();
              n.type === "ArrowFunctionExpression" && n.body.type !== "BlockStatement" ? (n.typeParameters || !n.returnType ? this.finishArrowValidation(n) : r.push(n), i.push(n.body)) : n.type === "ConditionalExpression" && (i.push(n.consequent), i.push(n.alternate));
            }
            return s ? (r.forEach((n) => this.finishArrowValidation(n)), [r, []]) : Ui2(r, (n) => n.params.every((o) => this.isAssignable(o, true)));
          }
          finishArrowValidation(e) {
            var s;
            this.toAssignableList(e.params, (s = e.extra) == null ? void 0 : s.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(e, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(e, s) {
            let i;
            return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(e.start)) ? (this.state.noArrowParamsConversionAt.push(this.state.start), i = s(), this.state.noArrowParamsConversionAt.pop()) : i = s(), i;
          }
          parseParenItem(e, s) {
            let i = super.parseParenItem(e, s);
            if (this.eat(17) && (i.optional = true, this.resetEndLocation(e)), this.match(14)) {
              let r = this.startNodeAt(s);
              return r.expression = i, r.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(r, "TypeCastExpression");
            }
            return i;
          }
          assertModuleNodeAllowed(e) {
            e.type === "ImportDeclaration" && (e.importKind === "type" || e.importKind === "typeof") || e.type === "ExportNamedDeclaration" && e.exportKind === "type" || e.type === "ExportAllDeclaration" && e.exportKind === "type" || super.assertModuleNodeAllowed(e);
          }
          parseExportDeclaration(e) {
            if (this.isContextual(130)) {
              e.exportKind = "type";
              let s = this.startNode();
              return this.next(), this.match(5) ? (e.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(e), null) : this.flowParseTypeAlias(s);
            } else if (this.isContextual(131)) {
              e.exportKind = "type";
              let s = this.startNode();
              return this.next(), this.flowParseOpaqueType(s, false);
            } else if (this.isContextual(129)) {
              e.exportKind = "type";
              let s = this.startNode();
              return this.next(), this.flowParseInterface(s);
            } else if (this.isContextual(126)) {
              e.exportKind = "value";
              let s = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(s);
            } else return super.parseExportDeclaration(e);
          }
          eatExportStar(e) {
            return super.eatExportStar(e) ? true : this.isContextual(130) && this.lookahead().type === 55 ? (e.exportKind = "type", this.next(), this.next(), true) : false;
          }
          maybeParseExportNamespaceSpecifier(e) {
            let { startLoc: s } = this.state, i = super.maybeParseExportNamespaceSpecifier(e);
            return i && e.exportKind === "type" && this.unexpected(s), i;
          }
          parseClassId(e, s, i) {
            super.parseClassId(e, s, i), this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(e, s, i) {
            let { startLoc: r } = this.state;
            if (this.isContextual(125)) {
              if (super.parseClassMemberFromModifier(e, s)) return;
              s.declare = true;
            }
            super.parseClassMember(e, s, i), s.declare && (s.type !== "ClassProperty" && s.type !== "ClassPrivateProperty" && s.type !== "PropertyDefinition" ? this.raise(g.DeclareClassElement, r) : s.value && this.raise(g.DeclareClassFieldInitializer, s.value));
          }
          isIterator(e) {
            return e === "iterator" || e === "asyncIterator";
          }
          readIterator() {
            let e = super.readWord1(), s = "@@" + e;
            (!this.isIterator(e) || !this.state.inType) && this.raise(p.InvalidIdentifier, this.state.curPosition(), { identifierName: s }), this.finishToken(132, s);
          }
          getTokenFromCode(e) {
            let s = this.input.charCodeAt(this.state.pos + 1);
            e === 123 && s === 124 ? this.finishOp(6, 2) : this.state.inType && (e === 62 || e === 60) ? this.finishOp(e === 62 ? 48 : 47, 1) : this.state.inType && e === 63 ? s === 46 ? this.finishOp(18, 2) : this.finishOp(17, 1) : bi2(e, s, this.input.charCodeAt(this.state.pos + 2)) ? (this.state.pos += 2, this.readIterator()) : super.getTokenFromCode(e);
          }
          isAssignable(e, s) {
            return e.type === "TypeCastExpression" ? this.isAssignable(e.expression, s) : super.isAssignable(e, s);
          }
          toAssignable(e, s = false) {
            !s && e.type === "AssignmentExpression" && e.left.type === "TypeCastExpression" && (e.left = this.typeCastToParameter(e.left)), super.toAssignable(e, s);
          }
          toAssignableList(e, s, i) {
            for (let r = 0; r < e.length; r++) {
              let n = e[r];
              (n == null ? void 0 : n.type) === "TypeCastExpression" && (e[r] = this.typeCastToParameter(n));
            }
            super.toAssignableList(e, s, i);
          }
          toReferencedList(e, s) {
            for (let r = 0; r < e.length; r++) {
              var i;
              let n = e[r];
              n && n.type === "TypeCastExpression" && !((i = n.extra) != null && i.parenthesized) && (e.length > 1 || !s) && this.raise(g.TypeCastInPattern, n.typeAnnotation);
            }
            return e;
          }
          parseArrayLike(e, s, i, r) {
            let n = super.parseArrayLike(e, s, i, r);
            return s && !this.state.maybeInArrowParameters && this.toReferencedList(n.elements), n;
          }
          isValidLVal(e, s, i) {
            return e === "TypeCastExpression" || super.isValidLVal(e, s, i);
          }
          parseClassProperty(e) {
            return this.match(14) && (e.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(e);
          }
          parseClassPrivateProperty(e) {
            return this.match(14) && (e.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(e);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(e) {
            return !this.match(14) && super.isNonstaticConstructor(e);
          }
          pushClassMethod(e, s, i, r, n, o) {
            if (s.variance && this.unexpected(s.variance.loc.start), delete s.variance, this.match(47) && (s.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(e, s, i, r, n, o), s.params && n) {
              let h = s.params;
              h.length > 0 && this.isThisParam(h[0]) && this.raise(g.ThisParamBannedInConstructor, s);
            } else if (s.type === "MethodDefinition" && n && s.value.params) {
              let h = s.value.params;
              h.length > 0 && this.isThisParam(h[0]) && this.raise(g.ThisParamBannedInConstructor, s);
            }
          }
          pushClassPrivateMethod(e, s, i, r) {
            s.variance && this.unexpected(s.variance.loc.start), delete s.variance, this.match(47) && (s.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(e, s, i, r);
          }
          parseClassSuper(e) {
            if (super.parseClassSuper(e), e.superClass && (this.match(47) || this.match(51)) && (e.superTypeParameters = this.flowParseTypeParameterInstantiationInExpression()), this.isContextual(113)) {
              this.next();
              let s = e.implements = [];
              do {
                let i = this.startNode();
                i.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? i.typeParameters = this.flowParseTypeParameterInstantiation() : i.typeParameters = null, s.push(this.finishNode(i, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(e) {
            super.checkGetterSetterParams(e);
            let s = this.getObjectOrClassMethodParams(e);
            if (s.length > 0) {
              let i = s[0];
              this.isThisParam(i) && e.kind === "get" ? this.raise(g.GetterMayNotHaveThisParam, i) : this.isThisParam(i) && this.raise(g.SetterMayNotHaveThisParam, i);
            }
          }
          parsePropertyNamePrefixOperator(e) {
            e.variance = this.flowParseVariance();
          }
          parseObjPropValue(e, s, i, r, n, o, h) {
            e.variance && this.unexpected(e.variance.loc.start), delete e.variance;
            let l;
            this.match(47) && !o && (l = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            let c = super.parseObjPropValue(e, s, i, r, n, o, h);
            return l && ((c.value || c).typeParameters = l), c;
          }
          parseFunctionParamType(e) {
            return this.eat(17) && (e.type !== "Identifier" && this.raise(g.PatternIsOptional, e), this.isThisParam(e) && this.raise(g.ThisParamMayNotBeOptional, e), e.optional = true), this.match(14) ? e.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(e) && this.raise(g.ThisParamAnnotationRequired, e), this.match(29) && this.isThisParam(e) && this.raise(g.ThisParamNoDefault, e), this.resetEndLocation(e), e;
          }
          parseMaybeDefault(e, s) {
            let i = super.parseMaybeDefault(e, s);
            return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(g.TypeBeforeInitializer, i.typeAnnotation), i;
          }
          checkImportReflection(e) {
            super.checkImportReflection(e), e.module && e.importKind !== "value" && this.raise(g.ImportReflectionHasImportType, e.specifiers[0].loc.start);
          }
          parseImportSpecifierLocal(e, s, i) {
            s.local = Bt2(e) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), e.specifiers.push(this.finishImportSpecifier(s, i));
          }
          isPotentialImportPhase(e) {
            if (super.isPotentialImportPhase(e)) return true;
            if (this.isContextual(130)) {
              if (!e) return true;
              let s = this.lookaheadCharCode();
              return s === 123 || s === 42;
            }
            return !e && this.isContextual(87);
          }
          applyImportPhase(e, s, i, r) {
            if (super.applyImportPhase(e, s, i, r), s) {
              if (!i && this.match(65)) return;
              e.exportKind = i === "type" ? i : "value";
            } else i === "type" && this.match(55) && this.unexpected(), e.importKind = i === "type" || i === "typeof" ? i : "value";
          }
          parseImportSpecifier(e, s, i, r, n) {
            let o = e.imported, h = null;
            o.type === "Identifier" && (o.name === "type" ? h = "type" : o.name === "typeof" && (h = "typeof"));
            let l = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              let u = this.parseIdentifier(true);
              h !== null && !D(this.state.type) ? (e.imported = u, e.importKind = h, e.local = U2(u)) : (e.imported = o, e.importKind = null, e.local = this.parseIdentifier());
            } else {
              if (h !== null && D(this.state.type)) e.imported = this.parseIdentifier(true), e.importKind = h;
              else {
                if (s) throw this.raise(p.ImportBindingIsString, e, { importName: o.value });
                e.imported = o, e.importKind = null;
              }
              this.eatContextual(93) ? e.local = this.parseIdentifier() : (l = true, e.local = U2(e.imported));
            }
            let c = Bt2(e);
            return i && c && this.raise(g.ImportTypeShorthandOnlyInPureImport, e), (i || c) && this.checkReservedType(e.local.name, e.local.loc.start, true), l && !i && !c && this.checkReservedWord(e.local.name, e.loc.start, true, true), this.finishImportSpecifier(e, "ImportSpecifier");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 78:
                return this.parseIdentifier(true);
              default:
                return super.parseBindingAtom();
            }
          }
          parseFunctionParams(e, s) {
            let i = e.kind;
            i !== "get" && i !== "set" && this.match(47) && (e.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(e, s);
          }
          parseVarId(e, s) {
            super.parseVarId(e, s), this.match(14) && (e.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(e.id));
          }
          parseAsyncArrowFromCallExpression(e, s) {
            if (this.match(14)) {
              let i = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, e.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = i;
            }
            return super.parseAsyncArrowFromCallExpression(e, s);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(e, s) {
            var i;
            let r = null, n;
            if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
              if (r = this.state.clone(), n = this.tryParse(() => super.parseMaybeAssign(e, s), r), !n.error) return n.node;
              let { context: l } = this.state, c = l[l.length - 1];
              (c === C.j_oTag || c === C.j_expr) && l.pop();
            }
            if ((i = n) != null && i.error || this.match(47)) {
              var o, h;
              r = r || this.state.clone();
              let l, c = this.tryParse((f) => {
                var d;
                l = this.flowParseTypeParameterDeclaration();
                let x2 = this.forwardNoArrowParamsConversionAt(l, () => {
                  let N2 = super.parseMaybeAssign(e, s);
                  return this.resetStartLocationFromNode(N2, l), N2;
                });
                (d = x2.extra) != null && d.parenthesized && f();
                let S2 = this.maybeUnwrapTypeCastExpression(x2);
                return S2.type !== "ArrowFunctionExpression" && f(), S2.typeParameters = l, this.resetStartLocationFromNode(S2, l), x2;
              }, r), u = null;
              if (c.node && this.maybeUnwrapTypeCastExpression(c.node).type === "ArrowFunctionExpression") {
                if (!c.error && !c.aborted) return c.node.async && this.raise(g.UnexpectedTypeParameterBeforeAsyncArrowFunction, l), c.node;
                u = c.node;
              }
              if ((o = n) != null && o.node) return this.state = n.failState, n.node;
              if (u) return this.state = c.failState, u;
              throw (h = n) != null && h.thrown ? n.error : c.thrown ? c.error : this.raise(g.UnexpectedTokenAfterTypeParameter, l);
            }
            return super.parseMaybeAssign(e, s);
          }
          parseArrow(e) {
            if (this.match(14)) {
              let s = this.tryParse(() => {
                let i = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                let r = this.startNode();
                return [r.typeAnnotation, e.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = i, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), r;
              });
              if (s.thrown) return null;
              s.error && (this.state = s.failState), e.returnType = s.node.typeAnnotation ? this.finishNode(s.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(e);
          }
          shouldParseArrow(e) {
            return this.match(14) || super.shouldParseArrow(e);
          }
          setArrowFunctionParameters(e, s) {
            this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(e.start)) ? e.params = s : super.setArrowFunctionParameters(e, s);
          }
          checkParams(e, s, i, r = true) {
            if (!(i && this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(e.start)))) {
              for (let n = 0; n < e.params.length; n++) this.isThisParam(e.params[n]) && n > 0 && this.raise(g.ThisParamMustBeFirst, e.params[n]);
              super.checkParams(e, s, i, r);
            }
          }
          parseParenAndDistinguishExpression(e) {
            return super.parseParenAndDistinguishExpression(e && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
          }
          parseSubscripts(e, s, i) {
            if (e.type === "Identifier" && e.name === "async" && this.state.noArrowAt.includes(s.index)) {
              this.next();
              let r = this.startNodeAt(s);
              r.callee = e, r.arguments = super.parseCallExpressionArguments(11), e = this.finishNode(r, "CallExpression");
            } else if (e.type === "Identifier" && e.name === "async" && this.match(47)) {
              let r = this.state.clone(), n = this.tryParse((h) => this.parseAsyncArrowWithTypeParameters(s) || h(), r);
              if (!n.error && !n.aborted) return n.node;
              let o = this.tryParse(() => super.parseSubscripts(e, s, i), r);
              if (o.node && !o.error) return o.node;
              if (n.node) return this.state = n.failState, n.node;
              if (o.node) return this.state = o.failState, o.node;
              throw n.error || o.error;
            }
            return super.parseSubscripts(e, s, i);
          }
          parseSubscript(e, s, i, r) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (r.optionalChainMember = true, i) return r.stop = true, e;
              this.next();
              let n = this.startNodeAt(s);
              return n.callee = e, n.typeArguments = this.flowParseTypeParameterInstantiationInExpression(), this.expect(10), n.arguments = this.parseCallExpressionArguments(11), n.optional = true, this.finishCallExpression(n, true);
            } else if (!i && this.shouldParseTypes() && (this.match(47) || this.match(51))) {
              let n = this.startNodeAt(s);
              n.callee = e;
              let o = this.tryParse(() => (n.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), n.arguments = super.parseCallExpressionArguments(11), r.optionalChainMember && (n.optional = false), this.finishCallExpression(n, r.optionalChainMember)));
              if (o.node) return o.error && (this.state = o.failState), o.node;
            }
            return super.parseSubscript(e, s, i, r);
          }
          parseNewCallee(e) {
            super.parseNewCallee(e);
            let s = null;
            this.shouldParseTypes() && this.match(47) && (s = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), e.typeArguments = s;
          }
          parseAsyncArrowWithTypeParameters(e) {
            let s = this.startNodeAt(e);
            if (this.parseFunctionParams(s, false), !!this.parseArrow(s)) return super.parseArrowExpression(s, void 0, true);
          }
          readToken_mult_modulo(e) {
            let s = this.input.charCodeAt(this.state.pos + 1);
            if (e === 42 && s === 47 && this.state.hasFlowComment) {
              this.state.hasFlowComment = false, this.state.pos += 2, this.nextToken();
              return;
            }
            super.readToken_mult_modulo(e);
          }
          readToken_pipe_amp(e) {
            let s = this.input.charCodeAt(this.state.pos + 1);
            if (e === 124 && s === 125) {
              this.finishOp(9, 2);
              return;
            }
            super.readToken_pipe_amp(e);
          }
          parseTopLevel(e, s) {
            let i = super.parseTopLevel(e, s);
            return this.state.hasFlowComment && this.raise(g.UnterminatedFlowComment, this.state.curPosition()), i;
          }
          skipBlockComment() {
            if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
              if (this.state.hasFlowComment) throw this.raise(g.NestedFlowComment, this.state.startLoc);
              this.hasFlowCommentCompletion();
              let e = this.skipFlowComment();
              e && (this.state.pos += e, this.state.hasFlowComment = true);
              return;
            }
            return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
          }
          skipFlowComment() {
            let { pos: e } = this.state, s = 2;
            for (; [32, 9].includes(this.input.charCodeAt(e + s)); ) s++;
            let i = this.input.charCodeAt(s + e), r = this.input.charCodeAt(s + e + 1);
            return i === 58 && r === 58 ? s + 2 : this.input.slice(s + e, s + e + 12) === "flow-include" ? s + 12 : i === 58 && r !== 58 ? s : false;
          }
          hasFlowCommentCompletion() {
            if (this.input.indexOf("*/", this.state.pos) === -1) throw this.raise(p.UnterminatedComment, this.state.curPosition());
          }
          flowEnumErrorBooleanMemberNotInitialized(e, { enumName: s, memberName: i }) {
            this.raise(g.EnumBooleanMemberNotInitialized, e, { memberName: i, enumName: s });
          }
          flowEnumErrorInvalidMemberInitializer(e, s) {
            return this.raise(s.explicitType ? s.explicitType === "symbol" ? g.EnumInvalidMemberInitializerSymbolType : g.EnumInvalidMemberInitializerPrimaryType : g.EnumInvalidMemberInitializerUnknownType, e, s);
          }
          flowEnumErrorNumberMemberNotInitialized(e, s) {
            this.raise(g.EnumNumberMemberNotInitialized, e, s);
          }
          flowEnumErrorStringMemberInconsistentlyInitialized(e, s) {
            this.raise(g.EnumStringMemberInconsistentlyInitialized, e, s);
          }
          flowEnumMemberInit() {
            let e = this.state.startLoc, s = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 135: {
                let i = this.parseNumericLiteral(this.state.value);
                return s() ? { type: "number", loc: i.loc.start, value: i } : { type: "invalid", loc: e };
              }
              case 134: {
                let i = this.parseStringLiteral(this.state.value);
                return s() ? { type: "string", loc: i.loc.start, value: i } : { type: "invalid", loc: e };
              }
              case 85:
              case 86: {
                let i = this.parseBooleanLiteral(this.match(85));
                return s() ? { type: "boolean", loc: i.loc.start, value: i } : { type: "invalid", loc: e };
              }
              default:
                return { type: "invalid", loc: e };
            }
          }
          flowEnumMemberRaw() {
            let e = this.state.startLoc, s = this.parseIdentifier(true), i = this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc: e };
            return { id: s, init: i };
          }
          flowEnumCheckExplicitTypeMismatch(e, s, i) {
            let { explicitType: r } = s;
            r !== null && r !== i && this.flowEnumErrorInvalidMemberInitializer(e, s);
          }
          flowEnumMembers({ enumName: e, explicitType: s }) {
            let i = /* @__PURE__ */ new Set(), r = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] }, n = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                n = true;
                break;
              }
              let o = this.startNode(), { id: h, init: l } = this.flowEnumMemberRaw(), c = h.name;
              if (c === "") continue;
              /^[a-z]/.test(c) && this.raise(g.EnumInvalidMemberName, h, { memberName: c, suggestion: c[0].toUpperCase() + c.slice(1), enumName: e }), i.has(c) && this.raise(g.EnumDuplicateMemberName, h, { memberName: c, enumName: e }), i.add(c);
              let u = { enumName: e, explicitType: s, memberName: c };
              switch (o.id = h, l.type) {
                case "boolean": {
                  this.flowEnumCheckExplicitTypeMismatch(l.loc, u, "boolean"), o.init = l.value, r.booleanMembers.push(this.finishNode(o, "EnumBooleanMember"));
                  break;
                }
                case "number": {
                  this.flowEnumCheckExplicitTypeMismatch(l.loc, u, "number"), o.init = l.value, r.numberMembers.push(this.finishNode(o, "EnumNumberMember"));
                  break;
                }
                case "string": {
                  this.flowEnumCheckExplicitTypeMismatch(l.loc, u, "string"), o.init = l.value, r.stringMembers.push(this.finishNode(o, "EnumStringMember"));
                  break;
                }
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(l.loc, u);
                case "none":
                  switch (s) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(l.loc, u);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(l.loc, u);
                      break;
                    default:
                      r.defaultedMembers.push(this.finishNode(o, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members: r, hasUnknownMembers: n };
          }
          flowEnumStringMembers(e, s, { enumName: i }) {
            if (e.length === 0) return s;
            if (s.length === 0) return e;
            if (s.length > e.length) {
              for (let r of e) this.flowEnumErrorStringMemberInconsistentlyInitialized(r, { enumName: i });
              return s;
            } else {
              for (let r of s) this.flowEnumErrorStringMemberInconsistentlyInitialized(r, { enumName: i });
              return e;
            }
          }
          flowEnumParseExplicitType({ enumName: e }) {
            if (!this.eatContextual(102)) return null;
            if (!E(this.state.type)) throw this.raise(g.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, { enumName: e });
            let { value: s } = this.state;
            return this.next(), s !== "boolean" && s !== "number" && s !== "string" && s !== "symbol" && this.raise(g.EnumInvalidExplicitType, this.state.startLoc, { enumName: e, invalidEnumType: s }), s;
          }
          flowEnumBody(e, s) {
            let i = s.name, r = s.loc.start, n = this.flowEnumParseExplicitType({ enumName: i });
            this.expect(5);
            let { members: o, hasUnknownMembers: h } = this.flowEnumMembers({ enumName: i, explicitType: n });
            switch (e.hasUnknownMembers = h, n) {
              case "boolean":
                return e.explicitType = true, e.members = o.booleanMembers, this.expect(8), this.finishNode(e, "EnumBooleanBody");
              case "number":
                return e.explicitType = true, e.members = o.numberMembers, this.expect(8), this.finishNode(e, "EnumNumberBody");
              case "string":
                return e.explicitType = true, e.members = this.flowEnumStringMembers(o.stringMembers, o.defaultedMembers, { enumName: i }), this.expect(8), this.finishNode(e, "EnumStringBody");
              case "symbol":
                return e.members = o.defaultedMembers, this.expect(8), this.finishNode(e, "EnumSymbolBody");
              default: {
                let l = () => (e.members = [], this.expect(8), this.finishNode(e, "EnumStringBody"));
                e.explicitType = false;
                let c = o.booleanMembers.length, u = o.numberMembers.length, f = o.stringMembers.length, d = o.defaultedMembers.length;
                if (!c && !u && !f && !d) return l();
                if (!c && !u) return e.members = this.flowEnumStringMembers(o.stringMembers, o.defaultedMembers, { enumName: i }), this.expect(8), this.finishNode(e, "EnumStringBody");
                if (!u && !f && c >= d) {
                  for (let x2 of o.defaultedMembers) this.flowEnumErrorBooleanMemberNotInitialized(x2.loc.start, { enumName: i, memberName: x2.id.name });
                  return e.members = o.booleanMembers, this.expect(8), this.finishNode(e, "EnumBooleanBody");
                } else if (!c && !f && u >= d) {
                  for (let x2 of o.defaultedMembers) this.flowEnumErrorNumberMemberNotInitialized(x2.loc.start, { enumName: i, memberName: x2.id.name });
                  return e.members = o.numberMembers, this.expect(8), this.finishNode(e, "EnumNumberBody");
                } else return this.raise(g.EnumInconsistentMemberValues, r, { enumName: i }), l();
              }
            }
          }
          flowParseEnumDeclaration(e) {
            let s = this.parseIdentifier();
            return e.id = s, e.body = this.flowEnumBody(this.startNode(), s), this.finishNode(e, "EnumDeclaration");
          }
          jsxParseOpeningElementAfterName(e) {
            return this.shouldParseTypes() && (this.match(47) || this.match(51)) && (e.typeArguments = this.flowParseTypeParameterInstantiationInExpression()), super.jsxParseOpeningElementAfterName(e);
          }
          isLookaheadToken_lt() {
            let e = this.nextTokenStart();
            if (this.input.charCodeAt(e) === 60) {
              let s = this.input.charCodeAt(e + 1);
              return s !== 60 && s !== 61;
            }
            return false;
          }
          reScan_lt_gt() {
            let { type: e } = this.state;
            e === 47 ? (this.state.pos -= 1, this.readToken_lt()) : e === 48 && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            let { type: e } = this.state;
            return e === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : e;
          }
          maybeUnwrapTypeCastExpression(e) {
            return e.type === "TypeCastExpression" ? e.expression : e;
          }
        }, J2 = _2`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName: a }) => `Expected corresponding JSX closing tag for <${a}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected: a, HTMLEntity: t }) => `Unexpected token \`${a}\`. Did you mean \`${t}\` or \`{'${a}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function V2(a) {
          return a ? a.type === "JSXOpeningFragment" || a.type === "JSXClosingFragment" : false;
        }
        function G(a) {
          if (a.type === "JSXIdentifier") return a.name;
          if (a.type === "JSXNamespacedName") return a.namespace.name + ":" + a.name.name;
          if (a.type === "JSXMemberExpression") return G(a.object) + "." + G(a.property);
          throw new Error("Node had unexpected type: " + a.type);
        }
        var zi2 = (a) => class extends a {
          jsxReadToken() {
            let e = "", s = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(J2.UnterminatedJsxContent, this.state.startLoc);
              let i = this.input.charCodeAt(this.state.pos);
              switch (i) {
                case 60:
                case 123:
                  if (this.state.pos === this.state.start) {
                    i === 60 && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(143)) : super.getTokenFromCode(i);
                    return;
                  }
                  e += this.input.slice(s, this.state.pos), this.finishToken(142, e);
                  return;
                case 38:
                  e += this.input.slice(s, this.state.pos), e += this.jsxReadEntity(), s = this.state.pos;
                  break;
                case 62:
                case 125:
                default:
                  Q2(i) ? (e += this.input.slice(s, this.state.pos), e += this.jsxReadNewLine(true), s = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(e) {
            let s = this.input.charCodeAt(this.state.pos), i;
            return ++this.state.pos, s === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, i = e ? `
` : `\r
`) : i = String.fromCharCode(s), ++this.state.curLine, this.state.lineStart = this.state.pos, i;
          }
          jsxReadString(e) {
            let s = "", i = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(p.UnterminatedString, this.state.startLoc);
              let r = this.input.charCodeAt(this.state.pos);
              if (r === e) break;
              r === 38 ? (s += this.input.slice(i, this.state.pos), s += this.jsxReadEntity(), i = this.state.pos) : Q2(r) ? (s += this.input.slice(i, this.state.pos), s += this.jsxReadNewLine(false), i = this.state.pos) : ++this.state.pos;
            }
            s += this.input.slice(i, this.state.pos++), this.finishToken(134, s);
          }
          jsxReadEntity() {
            let e = ++this.state.pos;
            if (this.codePointAtPos(this.state.pos) === 35) {
              ++this.state.pos;
              let s = 10;
              this.codePointAtPos(this.state.pos) === 120 && (s = 16, ++this.state.pos);
              let i = this.readInt(s, void 0, false, "bail");
              if (i !== null && this.codePointAtPos(this.state.pos) === 59) return ++this.state.pos, String.fromCodePoint(i);
            } else {
              let s = 0, i = false;
              for (; s++ < 10 && this.state.pos < this.length && !(i = this.codePointAtPos(this.state.pos) === 59); ) ++this.state.pos;
              if (i) {
                this.input.slice(e, this.state.pos);
                let n = void 0;
                if (++this.state.pos, n) ;
              }
            }
            return this.state.pos = e, "&";
          }
          jsxReadWord() {
            let e, s = this.state.pos;
            do
              e = this.input.charCodeAt(++this.state.pos);
            while (Y2(e) || e === 45);
            this.finishToken(141, this.input.slice(s, this.state.pos));
          }
          jsxParseIdentifier() {
            let e = this.startNode();
            return this.match(141) ? e.name = this.state.value : mt2(this.state.type) ? e.name = q2(this.state.type) : this.unexpected(), this.next(), this.finishNode(e, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            let e = this.state.startLoc, s = this.jsxParseIdentifier();
            if (!this.eat(14)) return s;
            let i = this.startNodeAt(e);
            return i.namespace = s, i.name = this.jsxParseIdentifier(), this.finishNode(i, "JSXNamespacedName");
          }
          jsxParseElementName() {
            let e = this.state.startLoc, s = this.jsxParseNamespacedName();
            if (s.type === "JSXNamespacedName") return s;
            for (; this.eat(16); ) {
              let i = this.startNodeAt(e);
              i.object = s, i.property = this.jsxParseIdentifier(), s = this.finishNode(i, "JSXMemberExpression");
            }
            return s;
          }
          jsxParseAttributeValue() {
            let e;
            switch (this.state.type) {
              case 5:
                return e = this.startNode(), this.setContext(C.brace), this.next(), e = this.jsxParseExpressionContainer(e, C.j_oTag), e.expression.type === "JSXEmptyExpression" && this.raise(J2.AttributeIsEmpty, e), e;
              case 143:
              case 134:
                return this.parseExprAtom();
              default:
                throw this.raise(J2.UnsupportedJsxValue, this.state.startLoc);
            }
          }
          jsxParseEmptyExpression() {
            let e = this.startNodeAt(this.state.lastTokEndLoc);
            return this.finishNodeAt(e, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(e) {
            return this.next(), e.expression = this.parseExpression(), this.setContext(C.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(e, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(e, s) {
            if (this.match(8)) e.expression = this.jsxParseEmptyExpression();
            else {
              let i = this.parseExpression();
              e.expression = i;
            }
            return this.setContext(s), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(e, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            let e = this.startNode();
            return this.match(5) ? (this.setContext(C.brace), this.next(), this.expect(21), e.argument = this.parseMaybeAssignAllowIn(), this.setContext(C.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(e, "JSXSpreadAttribute")) : (e.name = this.jsxParseNamespacedName(), e.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(e, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(e) {
            let s = this.startNodeAt(e);
            return this.eat(144) ? this.finishNode(s, "JSXOpeningFragment") : (s.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(s));
          }
          jsxParseOpeningElementAfterName(e) {
            let s = [];
            for (; !this.match(56) && !this.match(144); ) s.push(this.jsxParseAttribute());
            return e.attributes = s, e.selfClosing = this.eat(56), this.expect(144), this.finishNode(e, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(e) {
            let s = this.startNodeAt(e);
            return this.eat(144) ? this.finishNode(s, "JSXClosingFragment") : (s.name = this.jsxParseElementName(), this.expect(144), this.finishNode(s, "JSXClosingElement"));
          }
          jsxParseElementAt(e) {
            let s = this.startNodeAt(e), i = [], r = this.jsxParseOpeningElementAt(e), n = null;
            if (!r.selfClosing) {
              e: for (; ; ) switch (this.state.type) {
                case 143:
                  if (e = this.state.startLoc, this.next(), this.eat(56)) {
                    n = this.jsxParseClosingElementAt(e);
                    break e;
                  }
                  i.push(this.jsxParseElementAt(e));
                  break;
                case 142:
                  i.push(this.parseLiteral(this.state.value, "JSXText"));
                  break;
                case 5: {
                  let o = this.startNode();
                  this.setContext(C.brace), this.next(), this.match(21) ? i.push(this.jsxParseSpreadChild(o)) : i.push(this.jsxParseExpressionContainer(o, C.j_expr));
                  break;
                }
                default:
                  this.unexpected();
              }
              V2(r) && !V2(n) && n !== null ? this.raise(J2.MissingClosingTagFragment, n) : !V2(r) && V2(n) ? this.raise(J2.MissingClosingTagElement, n, { openingTagName: G(r.name) }) : !V2(r) && !V2(n) && G(n.name) !== G(r.name) && this.raise(J2.MissingClosingTagElement, n, { openingTagName: G(r.name) });
            }
            if (V2(r) ? (s.openingFragment = r, s.closingFragment = n) : (s.openingElement = r, s.closingElement = n), s.children = i, this.match(47)) throw this.raise(J2.UnwrappedAdjacentJSXElements, this.state.startLoc);
            return V2(r) ? this.finishNode(s, "JSXFragment") : this.finishNode(s, "JSXElement");
          }
          jsxParseElement() {
            let e = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(e);
          }
          setContext(e) {
            let { context: s } = this.state;
            s[s.length - 1] = e;
          }
          parseExprAtom(e) {
            return this.match(143) ? this.jsxParseElement() : this.match(47) && this.input.charCodeAt(this.state.pos) !== 33 ? (this.replaceToken(143), this.jsxParseElement()) : super.parseExprAtom(e);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(e) {
            let s = this.curContext();
            if (s === C.j_expr) {
              this.jsxReadToken();
              return;
            }
            if (s === C.j_oTag || s === C.j_cTag) {
              if (R2(e)) {
                this.jsxReadWord();
                return;
              }
              if (e === 62) {
                ++this.state.pos, this.finishToken(144);
                return;
              }
              if ((e === 34 || e === 39) && s === C.j_oTag) {
                this.jsxReadString(e);
                return;
              }
            }
            if (e === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
              ++this.state.pos, this.finishToken(143);
              return;
            }
            super.getTokenFromCode(e);
          }
          updateContext(e) {
            let { context: s, type: i } = this.state;
            if (i === 56 && e === 143) s.splice(-2, 2, C.j_cTag), this.state.canStartJSXElement = false;
            else if (i === 143) s.push(C.j_oTag);
            else if (i === 144) {
              let r = s[s.length - 1];
              r === C.j_oTag && e === 56 || r === C.j_cTag ? (s.pop(), this.state.canStartJSXElement = s[s.length - 1] === C.j_expr) : (this.setContext(C.j_expr), this.state.canStartJSXElement = true);
            } else this.state.canStartJSXElement = ai2(i);
          }
        }, rt2 = class extends ue2 {
          constructor(...t) {
            super(...t), this.tsNames = /* @__PURE__ */ new Map();
          }
        }, at2 = class extends fe2 {
          constructor(...t) {
            super(...t), this.importsStack = [];
          }
          createScope(t) {
            return this.importsStack.push(/* @__PURE__ */ new Set()), new rt2(t);
          }
          enter(t) {
            t === 256 && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(t);
          }
          exit() {
            let t = super.exit();
            return t === 256 && this.importsStack.pop(), t;
          }
          hasImport(t, e) {
            let s = this.importsStack.length;
            if (this.importsStack[s - 1].has(t)) return true;
            if (!e && s > 1) {
              for (let i = 0; i < s - 1; i++) if (this.importsStack[i].has(t)) return true;
            }
            return false;
          }
          declareName(t, e, s) {
            if (e & 4096) {
              this.hasImport(t, true) && this.parser.raise(p.VarRedeclaration, s, { identifierName: t }), this.importsStack[this.importsStack.length - 1].add(t);
              return;
            }
            let i = this.currentScope(), r = i.tsNames.get(t) || 0;
            if (e & 1024) {
              this.maybeExportDefined(i, t), i.tsNames.set(t, r | 16);
              return;
            }
            super.declareName(t, e, s), e & 2 && (e & 1 || (this.checkRedeclarationInScope(i, t, e, s), this.maybeExportDefined(i, t)), r = r | 1), e & 256 && (r = r | 2), e & 512 && (r = r | 4), e & 128 && (r = r | 8), r && i.tsNames.set(t, r);
          }
          isRedeclaredInScope(t, e, s) {
            let i = t.tsNames.get(e);
            if ((i & 2) > 0) {
              if (s & 256) {
                let r = !!(s & 512), n = (i & 4) > 0;
                return r !== n;
              }
              return true;
            }
            return s & 128 && (i & 8) > 0 ? t.names.get(e) & 2 ? !!(s & 1) : false : s & 2 && (i & 1) > 0 ? true : super.isRedeclaredInScope(t, e, s);
          }
          checkLocalExport(t) {
            let { name: e } = t;
            if (this.hasImport(e)) return;
            let s = this.scopeStack.length;
            for (let i = s - 1; i >= 0; i--) {
              let n = this.scopeStack[i].tsNames.get(e);
              if ((n & 1) > 0 || (n & 16) > 0) return;
            }
            super.checkLocalExport(t);
          }
        }, es = (a) => a.type === "ParenthesizedExpression" ? es(a.expression) : a, nt2 = class extends it2 {
          toAssignable(t, e = false) {
            var s, i;
            let r;
            switch ((t.type === "ParenthesizedExpression" || (s = t.extra) != null && s.parenthesized) && (r = es(t), e ? r.type === "Identifier" ? this.expressionScope.recordArrowParameterBindingError(p.InvalidParenthesizedAssignment, t) : r.type !== "MemberExpression" && !this.isOptionalMemberExpression(r) && this.raise(p.InvalidParenthesizedAssignment, t) : this.raise(p.InvalidParenthesizedAssignment, t)), t.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                t.type = "ObjectPattern";
                for (let o = 0, h = t.properties.length, l = h - 1; o < h; o++) {
                  var n;
                  let c = t.properties[o], u = o === l;
                  this.toAssignableObjectExpressionProp(c, u, e), u && c.type === "RestElement" && (n = t.extra) != null && n.trailingCommaLoc && this.raise(p.RestTrailingComma, t.extra.trailingCommaLoc);
                }
                break;
              case "ObjectProperty": {
                let { key: o, value: h } = t;
                this.isPrivateName(o) && this.classScope.usePrivateName(this.getPrivateNameSV(o), o.loc.start), this.toAssignable(h, e);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                t.type = "ArrayPattern", this.toAssignableList(t.elements, (i = t.extra) == null ? void 0 : i.trailingCommaLoc, e);
                break;
              case "AssignmentExpression":
                t.operator !== "=" && this.raise(p.MissingEqInAssignment, t.left.loc.end), t.type = "AssignmentPattern", delete t.operator, this.toAssignable(t.left, e);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(r, e);
                break;
            }
          }
          toAssignableObjectExpressionProp(t, e, s) {
            if (t.type === "ObjectMethod") this.raise(t.kind === "get" || t.kind === "set" ? p.PatternHasAccessor : p.PatternHasMethod, t.key);
            else if (t.type === "SpreadElement") {
              t.type = "RestElement";
              let i = t.argument;
              this.checkToRestConversion(i, false), this.toAssignable(i, s), e || this.raise(p.RestTrailingComma, t);
            } else this.toAssignable(t, s);
          }
          toAssignableList(t, e, s) {
            let i = t.length - 1;
            for (let r = 0; r <= i; r++) {
              let n = t[r];
              if (n) {
                if (n.type === "SpreadElement") {
                  n.type = "RestElement";
                  let o = n.argument;
                  this.checkToRestConversion(o, true), this.toAssignable(o, s);
                } else this.toAssignable(n, s);
                n.type === "RestElement" && (r < i ? this.raise(p.RestTrailingComma, n) : e && this.raise(p.RestTrailingComma, e));
              }
            }
          }
          isAssignable(t, e) {
            switch (t.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                let s = t.properties.length - 1;
                return t.properties.every((i, r) => i.type !== "ObjectMethod" && (r === s || i.type !== "SpreadElement") && this.isAssignable(i));
              }
              case "ObjectProperty":
                return this.isAssignable(t.value);
              case "SpreadElement":
                return this.isAssignable(t.argument);
              case "ArrayExpression":
                return t.elements.every((s) => s === null || this.isAssignable(s));
              case "AssignmentExpression":
                return t.operator === "=";
              case "ParenthesizedExpression":
                return this.isAssignable(t.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !e;
              default:
                return false;
            }
          }
          toReferencedList(t, e) {
            return t;
          }
          toReferencedListDeep(t, e) {
            this.toReferencedList(t, e);
            for (let s of t) (s == null ? void 0 : s.type) === "ArrayExpression" && this.toReferencedListDeep(s.elements);
          }
          parseSpread(t) {
            let e = this.startNode();
            return this.next(), e.argument = this.parseMaybeAssignAllowIn(t, void 0), this.finishNode(e, "SpreadElement");
          }
          parseRestBinding() {
            let t = this.startNode();
            return this.next(), t.argument = this.parseBindingAtom(), this.finishNode(t, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                let t = this.startNode();
                return this.next(), t.elements = this.parseBindingList(3, 93, 1), this.finishNode(t, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(t, e, s) {
            let i = s & 1, r = [], n = true;
            for (; !this.eat(t); ) if (n ? n = false : this.expect(12), i && this.match(12)) r.push(null);
            else {
              if (this.eat(t)) break;
              if (this.match(21)) {
                let o = this.parseRestBinding();
                if ((this.hasPlugin("flow") || s & 2) && (o = this.parseFunctionParamType(o)), r.push(o), !this.checkCommaAfterRest(e)) {
                  this.expect(t);
                  break;
                }
              } else {
                let o = [];
                for (this.match(26) && this.hasPlugin("decorators") && this.raise(p.UnsupportedParameterDecorator, this.state.startLoc); this.match(26); ) o.push(this.parseDecorator());
                r.push(this.parseAssignableListItem(s, o));
              }
            }
            return r;
          }
          parseBindingRestProperty(t) {
            return this.next(), t.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(t, "RestElement");
          }
          parseBindingProperty() {
            let { type: t, startLoc: e } = this.state;
            if (t === 21) return this.parseBindingRestProperty(this.startNode());
            let s = this.startNode();
            return t === 139 ? (this.expectPlugin("destructuringPrivate", e), this.classScope.usePrivateName(this.state.value, e), s.key = this.parsePrivateName()) : this.parsePropertyName(s), s.method = false, this.parseObjPropValue(s, e, false, false, true, false);
          }
          parseAssignableListItem(t, e) {
            let s = this.parseMaybeDefault();
            (this.hasPlugin("flow") || t & 2) && this.parseFunctionParamType(s);
            let i = this.parseMaybeDefault(s.loc.start, s);
            return e.length && (s.decorators = e), i;
          }
          parseFunctionParamType(t) {
            return t;
          }
          parseMaybeDefault(t, e) {
            var i;
            if (t != null || (t = this.state.startLoc), e = (i = e) != null ? i : this.parseBindingAtom(), !this.eat(29)) return e;
            let r = this.startNodeAt(t);
            return r.left = e, r.right = this.parseMaybeAssignAllowIn(), this.finishNode(r, "AssignmentPattern");
          }
          isValidLVal(t, e, s) {
            switch (t) {
              case "AssignmentPattern":
                return "left";
              case "RestElement":
                return "argument";
              case "ObjectProperty":
                return "value";
              case "ParenthesizedExpression":
                return "expression";
              case "ArrayPattern":
                return "elements";
              case "ObjectPattern":
                return "properties";
            }
            return false;
          }
          isOptionalMemberExpression(t) {
            return t.type === "OptionalMemberExpression";
          }
          checkLVal(t, e, s = 64, i = false, r = false, n = false) {
            var o;
            let h = t.type;
            if (this.isObjectMethod(t)) return;
            let l = this.isOptionalMemberExpression(t);
            if (l || h === "MemberExpression") {
              l && (this.expectPlugin("optionalChainingAssign", t.loc.start), e.type !== "AssignmentExpression" && this.raise(p.InvalidLhsOptionalChaining, t, { ancestor: e })), s !== 64 && this.raise(p.InvalidPropertyBindingPattern, t);
              return;
            }
            if (h === "Identifier") {
              this.checkIdentifier(t, s, r);
              let { name: S2 } = t;
              i && (i.has(S2) ? this.raise(p.ParamDupe, t) : i.add(S2));
              return;
            }
            let c = this.isValidLVal(h, !(n || (o = t.extra) != null && o.parenthesized) && e.type === "AssignmentExpression", s);
            if (c === true) return;
            if (c === false) {
              let S2 = s === 64 ? p.InvalidLhs : p.InvalidLhsBinding;
              this.raise(S2, t, { ancestor: e });
              return;
            }
            let u, f;
            typeof c == "string" ? (u = c, f = h === "ParenthesizedExpression") : [u, f] = c;
            let d = h === "ArrayPattern" || h === "ObjectPattern" ? { type: h } : e, x2 = t[u];
            if (Array.isArray(x2)) for (let S2 of x2) S2 && this.checkLVal(S2, d, s, i, r, f);
            else x2 && this.checkLVal(x2, d, s, i, r, f);
          }
          checkIdentifier(t, e, s = false) {
            this.state.strict && (s ? Xt2(t.name, this.inModule) : Wt2(t.name)) && (e === 64 ? this.raise(p.StrictEvalArguments, t, { referenceName: t.name }) : this.raise(p.StrictEvalArgumentsBinding, t, { bindingName: t.name })), e & 8192 && t.name === "let" && this.raise(p.LetInLexicalBinding, t), e & 64 || this.declareNameFromIdentifier(t, e);
          }
          declareNameFromIdentifier(t, e) {
            this.scope.declareName(t.name, e, t.loc.start);
          }
          checkToRestConversion(t, e) {
            switch (t.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(t.expression, e);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (e) break;
              default:
                this.raise(p.InvalidRestAssignmentPattern, t);
            }
          }
          checkCommaAfterRest(t) {
            return this.match(12) ? (this.raise(this.lookaheadCharCode() === t ? p.RestTrailingComma : p.ElementAfterRest, this.state.startLoc), true) : false;
          }
        };
        function Vi2(a) {
          if (a == null) throw new Error(`Unexpected ${a} value.`);
          return a;
        }
        function Rt2(a) {
          if (!a) throw new Error("Assert fail");
        }
        var y2 = _2`typescript`({ AbstractMethodHasImplementation: ({ methodName: a }) => `Method '${a}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName: a }) => `Property '${a}' cannot have an initializer because it is marked abstract.`, AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.", AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind: a }) => `'declare' is not allowed in ${a}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier: a }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier: a }) => `Duplicate modifier: '${a}'.`, EmptyHeritageClauseType: ({ token: a }) => `'${a}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: ({ modifiers: a }) => `'${a[0]}' modifier cannot be used with '${a[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier: a }) => `Index signatures cannot have an accessibility modifier ('${a}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier: a }) => `'${a}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier: a }) => `'${a}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier: a }) => `'${a}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers: a }) => `'${a[0]}' modifier must precede '${a[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier: a }) => `Private elements cannot have an accessibility modifier ('${a}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName: a }) => `Single type parameter ${a} should have a trailing comma. Example usage: <${a},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type: a }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${a}.` });
        function qi2(a) {
          switch (a) {
            case "any":
              return "TSAnyKeyword";
            case "boolean":
              return "TSBooleanKeyword";
            case "bigint":
              return "TSBigIntKeyword";
            case "never":
              return "TSNeverKeyword";
            case "number":
              return "TSNumberKeyword";
            case "object":
              return "TSObjectKeyword";
            case "string":
              return "TSStringKeyword";
            case "symbol":
              return "TSSymbolKeyword";
            case "undefined":
              return "TSUndefinedKeyword";
            case "unknown":
              return "TSUnknownKeyword";
            default:
              return;
          }
        }
        function _t2(a) {
          return a === "private" || a === "public" || a === "protected";
        }
        function Ki2(a) {
          return a === "in" || a === "out";
        }
        var Hi2 = (a) => class extends a {
          constructor(...e) {
            super(...e), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out"], disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: y2.InvalidModifierOnTypeParameter }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, { allowedModifiers: ["const"], disallowedModifiers: ["in", "out"], errorTemplate: y2.InvalidModifierOnTypeParameterPositions }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out", "const"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: y2.InvalidModifierOnTypeParameter });
          }
          getScopeHandler() {
            return at2;
          }
          tsIsIdentifier() {
            return E(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
          }
          tsNextTokenOnSameLineAndCanFollowModifier() {
            return this.next(), this.hasPrecedingLineBreak() ? false : this.tsTokenCanFollowModifier();
          }
          tsNextTokenCanFollowModifier() {
            return this.match(106) ? (this.next(), this.tsTokenCanFollowModifier()) : this.tsNextTokenOnSameLineAndCanFollowModifier();
          }
          tsParseModifier(e, s) {
            if (!E(this.state.type) && this.state.type !== 58 && this.state.type !== 75) return;
            let i = this.state.value;
            if (e.includes(i)) {
              if (s && this.tsIsStartOfStaticBlocks()) return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return i;
            }
          }
          tsParseModifiers({ allowedModifiers: e, disallowedModifiers: s, stopOnStartOfClassStaticBlock: i, errorTemplate: r = y2.InvalidModifierOnTypeMember }, n) {
            let o = (l, c, u, f) => {
              c === u && n[f] && this.raise(y2.InvalidModifiersOrder, l, { orderedModifiers: [u, f] });
            }, h = (l, c, u, f) => {
              (n[u] && c === f || n[f] && c === u) && this.raise(y2.IncompatibleModifiers, l, { modifiers: [u, f] });
            };
            for (; ; ) {
              let { startLoc: l } = this.state, c = this.tsParseModifier(e.concat(s ?? []), i);
              if (!c) break;
              _t2(c) ? n.accessibility ? this.raise(y2.DuplicateAccessibilityModifier, l, { modifier: c }) : (o(l, c, c, "override"), o(l, c, c, "static"), o(l, c, c, "readonly"), n.accessibility = c) : Ki2(c) ? (n[c] && this.raise(y2.DuplicateModifier, l, { modifier: c }), n[c] = true, o(l, c, "in", "out")) : (hasOwnProperty.call(n, c) ? this.raise(y2.DuplicateModifier, l, { modifier: c }) : (o(l, c, "static", "readonly"), o(l, c, "static", "override"), o(l, c, "override", "readonly"), o(l, c, "abstract", "override"), h(l, c, "declare", "override"), h(l, c, "static", "abstract")), n[c] = true), s != null && s.includes(c) && this.raise(r, l, { modifier: c });
            }
          }
          tsIsListTerminator(e) {
            switch (e) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
          }
          tsParseList(e, s) {
            let i = [];
            for (; !this.tsIsListTerminator(e); ) i.push(s());
            return i;
          }
          tsParseDelimitedList(e, s, i) {
            return Vi2(this.tsParseDelimitedListWorker(e, s, true, i));
          }
          tsParseDelimitedListWorker(e, s, i, r) {
            let n = [], o = -1;
            for (; !this.tsIsListTerminator(e); ) {
              o = -1;
              let h = s();
              if (h == null) return;
              if (n.push(h), this.eat(12)) {
                o = this.state.lastTokStartLoc.index;
                continue;
              }
              if (this.tsIsListTerminator(e)) break;
              i && this.expect(12);
              return;
            }
            return r && (r.value = o), n;
          }
          tsParseBracketedList(e, s, i, r, n) {
            r || (i ? this.expect(0) : this.expect(47));
            let o = this.tsParseDelimitedList(e, s, n);
            return i ? this.expect(3) : this.expect(48), o;
          }
          tsParseImportType() {
            let e = this.startNode();
            return this.expect(83), this.expect(10), this.match(134) ? e.argument = this.parseStringLiteral(this.state.value) : (this.raise(y2.UnsupportedImportTypeArgument, this.state.startLoc), e.argument = super.parseExprAtom()), this.eat(12) && !this.match(11) ? (e.options = super.parseMaybeAssignAllowIn(), this.eat(12)) : e.options = null, this.expect(11), this.eat(16) && (e.qualifier = this.tsParseEntityName(3)), this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSImportType");
          }
          tsParseEntityName(e) {
            let s;
            if (e & 1 && this.match(78)) if (e & 2) s = this.parseIdentifier(true);
            else {
              let i = this.startNode();
              this.next(), s = this.finishNode(i, "ThisExpression");
            }
            else s = this.parseIdentifier(!!(e & 1));
            for (; this.eat(16); ) {
              let i = this.startNodeAtNode(s);
              i.left = s, i.right = this.parseIdentifier(!!(e & 1)), s = this.finishNode(i, "TSQualifiedName");
            }
            return s;
          }
          tsParseTypeReference() {
            let e = this.startNode();
            return e.typeName = this.tsParseEntityName(1), !this.hasPrecedingLineBreak() && this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSTypeReference");
          }
          tsParseThisTypePredicate(e) {
            this.next();
            let s = this.startNodeAtNode(e);
            return s.parameterName = e, s.typeAnnotation = this.tsParseTypeAnnotation(false), s.asserts = false, this.finishNode(s, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            let e = this.startNode();
            return this.next(), this.finishNode(e, "TSThisType");
          }
          tsParseTypeQuery() {
            let e = this.startNode();
            return this.expect(87), this.match(83) ? e.exprName = this.tsParseImportType() : e.exprName = this.tsParseEntityName(3), !this.hasPrecedingLineBreak() && this.match(47) && (e.typeParameters = this.tsParseTypeArguments()), this.finishNode(e, "TSTypeQuery");
          }
          tsParseTypeParameter(e) {
            let s = this.startNode();
            return e(s), s.name = this.tsParseTypeParameterName(), s.constraint = this.tsEatThenParseType(81), s.default = this.tsEatThenParseType(29), this.finishNode(s, "TSTypeParameter");
          }
          tsTryParseTypeParameters(e) {
            if (this.match(47)) return this.tsParseTypeParameters(e);
          }
          tsParseTypeParameters(e) {
            let s = this.startNode();
            this.match(47) || this.match(143) ? this.next() : this.unexpected();
            let i = { value: -1 };
            return s.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, e), false, true, i), s.params.length === 0 && this.raise(y2.EmptyTypeParameters, s), i.value !== -1 && this.addExtra(s, "trailingComma", i.value), this.finishNode(s, "TSTypeParameterDeclaration");
          }
          tsFillSignature(e, s) {
            let i = e === 19, r = "parameters", n = "typeAnnotation";
            s.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), s[r] = this.tsParseBindingListForSignature(), i ? s[n] = this.tsParseTypeOrTypePredicateAnnotation(e) : this.match(e) && (s[n] = this.tsParseTypeOrTypePredicateAnnotation(e));
          }
          tsParseBindingListForSignature() {
            let e = super.parseBindingList(11, 41, 2);
            for (let s of e) {
              let { type: i } = s;
              (i === "AssignmentPattern" || i === "TSParameterProperty") && this.raise(y2.UnsupportedSignatureParameterKind, s, { type: i });
            }
            return e;
          }
          tsParseTypeMemberSemicolon() {
            !this.eat(12) && !this.isLineTerminator() && this.expect(13);
          }
          tsParseSignatureMember(e, s) {
            return this.tsFillSignature(14, s), this.tsParseTypeMemberSemicolon(), this.finishNode(s, e);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), E(this.state.type) ? (this.next(), this.match(14)) : false;
          }
          tsTryParseIndexSignature(e) {
            if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) return;
            this.expect(0);
            let s = this.parseIdentifier();
            s.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(s), this.expect(3), e.parameters = [s];
            let i = this.tsTryParseTypeAnnotation();
            return i && (e.typeAnnotation = i), this.tsParseTypeMemberSemicolon(), this.finishNode(e, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(e, s) {
            this.eat(17) && (e.optional = true);
            let i = e;
            if (this.match(10) || this.match(47)) {
              s && this.raise(y2.ReadonlyForMethodSignature, e);
              let r = i;
              r.kind && this.match(47) && this.raise(y2.AccessorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, r), this.tsParseTypeMemberSemicolon();
              let n = "parameters", o = "typeAnnotation";
              if (r.kind === "get") r[n].length > 0 && (this.raise(p.BadGetterArity, this.state.curPosition()), this.isThisParam(r[n][0]) && this.raise(y2.AccessorCannotDeclareThisParameter, this.state.curPosition()));
              else if (r.kind === "set") {
                if (r[n].length !== 1) this.raise(p.BadSetterArity, this.state.curPosition());
                else {
                  let h = r[n][0];
                  this.isThisParam(h) && this.raise(y2.AccessorCannotDeclareThisParameter, this.state.curPosition()), h.type === "Identifier" && h.optional && this.raise(y2.SetAccessorCannotHaveOptionalParameter, this.state.curPosition()), h.type === "RestElement" && this.raise(y2.SetAccessorCannotHaveRestParameter, this.state.curPosition());
                }
                r[o] && this.raise(y2.SetAccessorCannotHaveReturnType, r[o]);
              } else r.kind = "method";
              return this.finishNode(r, "TSMethodSignature");
            } else {
              let r = i;
              s && (r.readonly = true);
              let n = this.tsTryParseTypeAnnotation();
              return n && (r.typeAnnotation = n), this.tsParseTypeMemberSemicolon(), this.finishNode(r, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            let e = this.startNode();
            if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", e);
            if (this.match(77)) {
              let i = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", e) : (e.key = this.createIdentifier(i, "new"), this.tsParsePropertyOrMethodSignature(e, false));
            }
            this.tsParseModifiers({ allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] }, e);
            let s = this.tsTryParseIndexSignature(e);
            return s || (super.parsePropertyName(e), !e.computed && e.key.type === "Identifier" && (e.key.name === "get" || e.key.name === "set") && this.tsTokenCanFollowModifier() && (e.kind = e.key.name, super.parsePropertyName(e)), this.tsParsePropertyOrMethodSignature(e, !!e.readonly));
          }
          tsParseTypeLiteral() {
            let e = this.startNode();
            return e.members = this.tsParseObjectTypeMembers(), this.finishNode(e, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            let e = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), e;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !this.match(0) || (this.next(), !this.tsIsIdentifier()) ? false : (this.next(), this.match(58)));
          }
          tsParseMappedType() {
            let e = this.startNode();
            this.expect(5), this.match(53) ? (e.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) && (e.readonly = true), this.expect(0);
            {
              let s = this.startNode();
              s.name = this.tsParseTypeParameterName(), s.constraint = this.tsExpectThenParseType(58), e.typeParameter = this.finishNode(s, "TSTypeParameter");
            }
            return e.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (e.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (e.optional = true), e.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(e, "TSMappedType");
          }
          tsParseTupleType() {
            let e = this.startNode();
            e.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let s = false;
            return e.elementTypes.forEach((i) => {
              let { type: r } = i;
              s && r !== "TSRestType" && r !== "TSOptionalType" && !(r === "TSNamedTupleMember" && i.optional) && this.raise(y2.OptionalTypeBeforeRequired, i), s || (s = r === "TSNamedTupleMember" && i.optional || r === "TSOptionalType");
            }), this.finishNode(e, "TSTupleType");
          }
          tsParseTupleElementType() {
            let e = this.state.startLoc, s = this.eat(21), { startLoc: i } = this.state, r, n, o, h, c = D(this.state.type) ? this.lookaheadCharCode() : null;
            if (c === 58) r = true, o = false, n = this.parseIdentifier(true), this.expect(14), h = this.tsParseType();
            else if (c === 63) {
              o = true;
              let u = this.state.value, f = this.tsParseNonArrayType();
              this.lookaheadCharCode() === 58 ? (r = true, n = this.createIdentifier(this.startNodeAt(i), u), this.expect(17), this.expect(14), h = this.tsParseType()) : (r = false, h = f, this.expect(17));
            } else h = this.tsParseType(), o = this.eat(17), r = this.eat(14);
            if (r) {
              let u;
              n ? (u = this.startNodeAt(i), u.optional = o, u.label = n, u.elementType = h, this.eat(17) && (u.optional = true, this.raise(y2.TupleOptionalAfterType, this.state.lastTokStartLoc))) : (u = this.startNodeAt(i), u.optional = o, this.raise(y2.InvalidTupleMemberLabel, h), u.label = h, u.elementType = this.tsParseType()), h = this.finishNode(u, "TSNamedTupleMember");
            } else if (o) {
              let u = this.startNodeAt(i);
              u.typeAnnotation = h, h = this.finishNode(u, "TSOptionalType");
            }
            if (s) {
              let u = this.startNodeAt(e);
              u.typeAnnotation = h, h = this.finishNode(u, "TSRestType");
            }
            return h;
          }
          tsParseParenthesizedType() {
            let e = this.startNode();
            return this.expect(10), e.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(e, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(e, s) {
            let i = this.startNode();
            return e === "TSConstructorType" && (i.abstract = !!s, s && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, i)), this.finishNode(i, e);
          }
          tsParseLiteralTypeNode() {
            let e = this.startNode();
            switch (this.state.type) {
              case 135:
              case 136:
              case 134:
              case 85:
              case 86:
                e.literal = super.parseExprAtom();
                break;
              default:
                this.unexpected();
            }
            return this.finishNode(e, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            {
              let e = this.startNode();
              return e.literal = super.parseTemplate(false), this.finishNode(e, "TSLiteralType");
            }
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            let e = this.tsParseThisTypeNode();
            return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(e) : e;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 134:
              case 135:
              case 136:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if (this.state.value === "-") {
                  let e = this.startNode(), s = this.lookahead();
                  return s.type !== 135 && s.type !== 136 && this.unexpected(), e.literal = this.parseMaybeUnary(), this.finishNode(e, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                let { type: e } = this.state;
                if (E(e) || e === 88 || e === 84) {
                  let s = e === 88 ? "TSVoidKeyword" : e === 84 ? "TSNullKeyword" : qi2(this.state.value);
                  if (s !== void 0 && this.lookaheadCharCode() !== 46) {
                    let i = this.startNode();
                    return this.next(), this.finishNode(i, s);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let { startLoc: e } = this.state, s = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); ) if (this.match(3)) {
              let i = this.startNodeAt(e);
              i.elementType = s, this.expect(3), s = this.finishNode(i, "TSArrayType");
            } else {
              let i = this.startNodeAt(e);
              i.objectType = s, i.indexType = this.tsParseType(), this.expect(3), s = this.finishNode(i, "TSIndexedAccessType");
            }
            return s;
          }
          tsParseTypeOperator() {
            let e = this.startNode(), s = this.state.value;
            return this.next(), e.operator = s, e.typeAnnotation = this.tsParseTypeOperatorOrHigher(), s === "readonly" && this.tsCheckTypeAnnotationForReadOnly(e), this.finishNode(e, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(e) {
            switch (e.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(y2.UnexpectedReadonly, e);
            }
          }
          tsParseInferType() {
            let e = this.startNode();
            this.expectContextual(115);
            let s = this.startNode();
            return s.name = this.tsParseTypeParameterName(), s.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), e.typeParameter = this.finishNode(s, "TSTypeParameter"), this.finishNode(e, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              let e = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return e;
            }
          }
          tsParseTypeOperatorOrHigher() {
            return pi2(this.state.type) && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(e, s, i) {
            let r = this.startNode(), n = this.eat(i), o = [];
            do
              o.push(s());
            while (this.eat(i));
            return o.length === 1 && !n ? o[0] : (r.types = o, this.finishNode(r, e));
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return this.match(47) ? true : this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (E(this.state.type) || this.match(78)) return this.next(), true;
            if (this.match(5)) {
              let { errors: e } = this.state, s = e.length;
              try {
                return this.parseObjectLike(8, true), e.length === s;
              } catch {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              let { errors: e } = this.state, s = e.length;
              try {
                return super.parseBindingList(3, 93, 1), e.length === s;
              } catch {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            return this.next(), !!(this.match(11) || this.match(21) || this.tsSkipParameterStart() && (this.match(14) || this.match(12) || this.match(17) || this.match(29) || this.match(11) && (this.next(), this.match(19))));
          }
          tsParseTypeOrTypePredicateAnnotation(e) {
            return this.tsInType(() => {
              let s = this.startNode();
              this.expect(e);
              let i = this.startNode(), r = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (r && this.match(78)) {
                let h = this.tsParseThisTypeOrThisTypePredicate();
                return h.type === "TSThisType" ? (i.parameterName = h, i.asserts = true, i.typeAnnotation = null, h = this.finishNode(i, "TSTypePredicate")) : (this.resetStartLocationFromNode(h, i), h.asserts = true), s.typeAnnotation = h, this.finishNode(s, "TSTypeAnnotation");
              }
              let n = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!n) return r ? (i.parameterName = this.parseIdentifier(), i.asserts = r, i.typeAnnotation = null, s.typeAnnotation = this.finishNode(i, "TSTypePredicate"), this.finishNode(s, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, s);
              let o = this.tsParseTypeAnnotation(false);
              return i.parameterName = n, i.typeAnnotation = o, i.asserts = r, s.typeAnnotation = this.finishNode(i, "TSTypePredicate"), this.finishNode(s, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            if (this.match(14)) return this.tsParseTypeOrTypePredicateAnnotation(14);
          }
          tsTryParseTypeAnnotation() {
            if (this.match(14)) return this.tsParseTypeAnnotation();
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            let e = this.parseIdentifier();
            if (this.isContextual(116) && !this.hasPrecedingLineBreak()) return this.next(), e;
          }
          tsParseTypePredicateAsserts() {
            if (this.state.type !== 109) return false;
            let e = this.state.containsEsc;
            return this.next(), !E(this.state.type) && !this.match(78) ? false : (e && this.raise(p.InvalidEscapedReservedWord, this.state.lastTokStartLoc, { reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(e = true, s = this.startNode()) {
            return this.tsInType(() => {
              e && this.expect(14), s.typeAnnotation = this.tsParseType();
            }), this.finishNode(s, "TSTypeAnnotation");
          }
          tsParseType() {
            Rt2(this.state.inType);
            let e = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return e;
            let s = this.startNodeAtNode(e);
            return s.checkType = e, s.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), s.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), s.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(s, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(124) && this.lookahead().type === 77;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(y2.ReservedTypeAssertion, this.state.startLoc);
            let e = this.startNode();
            return e.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), e.expression = this.parseMaybeUnary(), this.finishNode(e, "TSTypeAssertion");
          }
          tsParseHeritageClause(e) {
            let s = this.state.startLoc, i = this.tsParseDelimitedList("HeritageClauseElement", () => {
              let r = this.startNode();
              return r.expression = this.tsParseEntityName(3), this.match(47) && (r.typeParameters = this.tsParseTypeArguments()), this.finishNode(r, "TSExpressionWithTypeArguments");
            });
            return i.length || this.raise(y2.EmptyHeritageClauseType, s, { token: e }), i;
          }
          tsParseInterfaceDeclaration(e, s = {}) {
            if (this.hasFollowingLineBreak()) return null;
            this.expectContextual(129), s.declare && (e.declare = true), E(this.state.type) ? (e.id = this.parseIdentifier(), this.checkIdentifier(e.id, 130)) : (e.id = null, this.raise(y2.MissingInterfaceName, this.state.startLoc)), e.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (e.extends = this.tsParseHeritageClause("extends"));
            let i = this.startNode();
            return i.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), e.body = this.finishNode(i, "TSInterfaceBody"), this.finishNode(e, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(e) {
            return e.id = this.parseIdentifier(), this.checkIdentifier(e.id, 2), e.typeAnnotation = this.tsInType(() => {
              if (e.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && this.lookahead().type !== 16) {
                let s = this.startNode();
                return this.next(), this.finishNode(s, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(e, "TSTypeAliasDeclaration");
          }
          tsInTopLevelContext(e) {
            if (this.curContext() !== C.brace) {
              let s = this.state.context;
              this.state.context = [s[0]];
              try {
                return e();
              } finally {
                this.state.context = s;
              }
            } else return e();
          }
          tsInType(e) {
            let s = this.state.inType;
            this.state.inType = true;
            try {
              return e();
            } finally {
              this.state.inType = s;
            }
          }
          tsInDisallowConditionalTypesContext(e) {
            let s = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return e();
            } finally {
              this.state.inDisallowConditionalTypesContext = s;
            }
          }
          tsInAllowConditionalTypesContext(e) {
            let s = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return e();
            } finally {
              this.state.inDisallowConditionalTypesContext = s;
            }
          }
          tsEatThenParseType(e) {
            if (this.match(e)) return this.tsNextThenParseType();
          }
          tsExpectThenParseType(e) {
            return this.tsInType(() => (this.expect(e), this.tsParseType()));
          }
          tsNextThenParseType() {
            return this.tsInType(() => (this.next(), this.tsParseType()));
          }
          tsParseEnumMember() {
            let e = this.startNode();
            return e.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (e.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(e, "TSEnumMember");
          }
          tsParseEnumDeclaration(e, s = {}) {
            return s.const && (e.const = true), s.declare && (e.declare = true), this.expectContextual(126), e.id = this.parseIdentifier(), this.checkIdentifier(e.id, e.const ? 8971 : 8459), this.expect(5), e.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(e, "TSEnumDeclaration");
          }
          tsParseEnumBody() {
            let e = this.startNode();
            return this.expect(5), e.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(e, "TSEnumBody");
          }
          tsParseModuleBlock() {
            let e = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(e.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(e, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(e, s = false) {
            if (e.id = this.parseIdentifier(), s || this.checkIdentifier(e.id, 1024), this.eat(16)) {
              let i = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(i, true), e.body = i;
            } else this.scope.enter(256), this.prodParam.enter(0), e.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(e, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(e) {
            return this.isContextual(112) ? (e.kind = "global", e.global = true, e.id = this.parseIdentifier()) : this.match(134) ? (e.kind = "module", e.id = super.parseStringLiteral(this.state.value)) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), e.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(e, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(e, s, i) {
            e.isExport = i || false, e.id = s || this.parseIdentifier(), this.checkIdentifier(e.id, 4096), this.expect(29);
            let r = this.tsParseModuleReference();
            return e.importKind === "type" && r.type !== "TSExternalModuleReference" && this.raise(y2.ImportAliasHasImportType, r), e.moduleReference = r, this.semicolon(), this.finishNode(e, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(119) && this.lookaheadCharCode() === 40;
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(0);
          }
          tsParseExternalModuleReference() {
            let e = this.startNode();
            return this.expectContextual(119), this.expect(10), this.match(134) || this.unexpected(), e.expression = super.parseExprAtom(), this.expect(11), this.sawUnambiguousESM = true, this.finishNode(e, "TSExternalModuleReference");
          }
          tsLookAhead(e) {
            let s = this.state.clone(), i = e();
            return this.state = s, i;
          }
          tsTryParseAndCatch(e) {
            let s = this.tryParse((i) => e() || i());
            if (!(s.aborted || !s.node)) return s.error && (this.state = s.failState), s.node;
          }
          tsTryParse(e) {
            let s = this.state.clone(), i = e();
            if (i !== void 0 && i !== false) return i;
            this.state = s;
          }
          tsTryParseDeclare(e) {
            if (this.isLineTerminator()) return;
            let s = this.state.type, i;
            return this.isContextual(100) && (s = 74, i = "let"), this.tsInAmbientContext(() => {
              switch (s) {
                case 68:
                  return e.declare = true, super.parseFunctionStatement(e, false, false);
                case 80:
                  return e.declare = true, this.parseClass(e, true, false);
                case 126:
                  return this.tsParseEnumDeclaration(e, { declare: true });
                case 112:
                  return this.tsParseAmbientExternalModuleDeclaration(e);
                case 75:
                case 74:
                  return !this.match(75) || !this.isLookaheadContextual("enum") ? (e.declare = true, this.parseVarStatement(e, i || this.state.value, true)) : (this.expect(75), this.tsParseEnumDeclaration(e, { const: true, declare: true }));
                case 129: {
                  let r = this.tsParseInterfaceDeclaration(e, { declare: true });
                  if (r) return r;
                }
                default:
                  if (E(s)) return this.tsParseDeclaration(e, this.state.value, true, null);
              }
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
          }
          tsParseExpressionStatement(e, s, i) {
            switch (s.name) {
              case "declare": {
                let r = this.tsTryParseDeclare(e);
                return r && (r.declare = true), r;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  let r = e;
                  return r.kind = "global", e.global = true, r.id = s, r.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(r, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(e, s.name, false, i);
            }
          }
          tsParseDeclaration(e, s, i, r) {
            switch (s) {
              case "abstract":
                if (this.tsCheckLineTerminator(i) && (this.match(80) || E(this.state.type))) return this.tsParseAbstractDeclaration(e, r);
                break;
              case "module":
                if (this.tsCheckLineTerminator(i)) {
                  if (this.match(134)) return this.tsParseAmbientExternalModuleDeclaration(e);
                  if (E(this.state.type)) return e.kind = "module", this.tsParseModuleOrNamespaceDeclaration(e);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(i) && E(this.state.type)) return e.kind = "namespace", this.tsParseModuleOrNamespaceDeclaration(e);
                break;
              case "type":
                if (this.tsCheckLineTerminator(i) && E(this.state.type)) return this.tsParseTypeAliasDeclaration(e);
                break;
            }
          }
          tsCheckLineTerminator(e) {
            return e ? this.hasFollowingLineBreak() ? false : (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(e) {
            if (!this.match(47)) return;
            let s = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            let i = this.tsTryParseAndCatch(() => {
              let r = this.startNodeAt(e);
              return r.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(r), r.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), r;
            });
            if (this.state.maybeInArrowParameters = s, !!i) return super.parseArrowExpression(i, null, true);
          }
          tsParseTypeArgumentsInExpression() {
            if (this.reScan_lt() === 47) return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            let e = this.startNode();
            return e.params = this.tsInType(() => this.tsInTopLevelContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), e.params.length === 0 ? this.raise(y2.EmptyTypeArguments, e) : !this.state.inType && this.curContext() === C.brace && this.reScan_lt_gt(), this.expect(48), this.finishNode(e, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return ui2(this.state.type);
          }
          isExportDefaultSpecifier() {
            return this.tsIsDeclarationStart() ? false : super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(e, s) {
            let i = this.state.startLoc, r = {};
            this.tsParseModifiers({ allowedModifiers: ["public", "private", "protected", "override", "readonly"] }, r);
            let n = r.accessibility, o = r.override, h = r.readonly;
            !(e & 4) && (n || h || o) && this.raise(y2.UnexpectedParameterModifier, i);
            let l = this.parseMaybeDefault();
            e & 2 && this.parseFunctionParamType(l);
            let c = this.parseMaybeDefault(l.loc.start, l);
            if (n || h || o) {
              let u = this.startNodeAt(i);
              return s.length && (u.decorators = s), n && (u.accessibility = n), h && (u.readonly = h), o && (u.override = o), c.type !== "Identifier" && c.type !== "AssignmentPattern" && this.raise(y2.UnsupportedParameterPropertyKind, u), u.parameter = c, this.finishNode(u, "TSParameterProperty");
            }
            return s.length && (l.decorators = s), c;
          }
          isSimpleParameter(e) {
            return e.type === "TSParameterProperty" && super.isSimpleParameter(e.parameter) || super.isSimpleParameter(e);
          }
          tsDisallowOptionalPattern(e) {
            for (let s of e.params) s.type !== "Identifier" && s.optional && !this.state.isAmbientContext && this.raise(y2.PatternIsOptional, s);
          }
          setArrowFunctionParameters(e, s, i) {
            super.setArrowFunctionParameters(e, s, i), this.tsDisallowOptionalPattern(e);
          }
          parseFunctionBodyAndFinish(e, s, i = false) {
            this.match(14) && (e.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            let r = s === "FunctionDeclaration" ? "TSDeclareFunction" : s === "ClassMethod" || s === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
            return r && !this.match(5) && this.isLineTerminator() ? this.finishNode(e, r) : r === "TSDeclareFunction" && this.state.isAmbientContext && (this.raise(y2.DeclareFunctionHasImplementation, e), e.declare) ? super.parseFunctionBodyAndFinish(e, r, i) : (this.tsDisallowOptionalPattern(e), super.parseFunctionBodyAndFinish(e, s, i));
          }
          registerFunctionStatementId(e) {
            !e.body && e.id ? this.checkIdentifier(e.id, 1024) : super.registerFunctionStatementId(e);
          }
          tsCheckForInvalidTypeCasts(e) {
            e.forEach((s) => {
              (s == null ? void 0 : s.type) === "TSTypeCastExpression" && this.raise(y2.UnexpectedTypeAnnotation, s.typeAnnotation);
            });
          }
          toReferencedList(e, s) {
            return this.tsCheckForInvalidTypeCasts(e), e;
          }
          parseArrayLike(e, s, i, r) {
            let n = super.parseArrayLike(e, s, i, r);
            return n.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(n.elements), n;
          }
          parseSubscript(e, s, i, r) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              let o = this.startNodeAt(s);
              return o.expression = e, this.finishNode(o, "TSNonNullExpression");
            }
            let n = false;
            if (this.match(18) && this.lookaheadCharCode() === 60) {
              if (i) return r.stop = true, e;
              r.optionalChainMember = n = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let o, h = this.tsTryParseAndCatch(() => {
                if (!i && this.atPossibleAsyncArrow(e)) {
                  let f = this.tsTryParseGenericAsyncArrowFunction(s);
                  if (f) return f;
                }
                let l = this.tsParseTypeArgumentsInExpression();
                if (!l) return;
                if (n && !this.match(10)) {
                  o = this.state.curPosition();
                  return;
                }
                if (Ne2(this.state.type)) {
                  let f = super.parseTaggedTemplateExpression(e, s, r);
                  return f.typeParameters = l, f;
                }
                if (!i && this.eat(10)) {
                  let f = this.startNodeAt(s);
                  return f.callee = e, f.arguments = this.parseCallExpressionArguments(11), this.tsCheckForInvalidTypeCasts(f.arguments), f.typeParameters = l, r.optionalChainMember && (f.optional = n), this.finishCallExpression(f, r.optionalChainMember);
                }
                let c = this.state.type;
                if (c === 48 || c === 52 || c !== 10 && Ve2(c) && !this.hasPrecedingLineBreak()) return;
                let u = this.startNodeAt(s);
                return u.expression = e, u.typeParameters = l, this.finishNode(u, "TSInstantiationExpression");
              });
              if (o && this.unexpected(o, 10), h) return h.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) && this.raise(y2.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), h;
            }
            return super.parseSubscript(e, s, i, r);
          }
          parseNewCallee(e) {
            var s;
            super.parseNewCallee(e);
            let { callee: i } = e;
            i.type === "TSInstantiationExpression" && !((s = i.extra) != null && s.parenthesized) && (e.typeParameters = i.typeParameters, e.callee = i.expression);
          }
          parseExprOp(e, s, i) {
            let r;
            if (Ce2(58) > i && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (r = this.isContextual(120)))) {
              let n = this.startNodeAt(s);
              return n.expression = e, n.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (r && this.raise(p.UnexpectedKeyword, this.state.startLoc, { keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(n, r ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(n, s, i);
            }
            return super.parseExprOp(e, s, i);
          }
          checkReservedWord(e, s, i, r) {
            this.state.isAmbientContext || super.checkReservedWord(e, s, i, r);
          }
          checkImportReflection(e) {
            super.checkImportReflection(e), e.module && e.importKind !== "value" && this.raise(y2.ImportReflectionHasImportType, e.specifiers[0].loc.start);
          }
          checkDuplicateExports() {
          }
          isPotentialImportPhase(e) {
            if (super.isPotentialImportPhase(e)) return true;
            if (this.isContextual(130)) {
              let s = this.lookaheadCharCode();
              return e ? s === 123 || s === 42 : s !== 61;
            }
            return !e && this.isContextual(87);
          }
          applyImportPhase(e, s, i, r) {
            super.applyImportPhase(e, s, i, r), s ? e.exportKind = i === "type" ? "type" : "value" : e.importKind = i === "type" || i === "typeof" ? i : "value";
          }
          parseImport(e) {
            if (this.match(134)) return e.importKind = "value", super.parseImport(e);
            let s;
            if (E(this.state.type) && this.lookaheadCharCode() === 61) return e.importKind = "value", this.tsParseImportEqualsDeclaration(e);
            if (this.isContextual(130)) {
              let i = this.parseMaybeImportPhase(e, false);
              if (this.lookaheadCharCode() === 61) return this.tsParseImportEqualsDeclaration(e, i);
              s = super.parseImportSpecifiersAndAfter(e, i);
            } else s = super.parseImport(e);
            return s.importKind === "type" && s.specifiers.length > 1 && s.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(y2.TypeImportCannotSpecifyDefaultAndNamed, s), s;
          }
          parseExport(e, s) {
            if (this.match(83)) {
              let i = e;
              this.next();
              let r = null;
              return this.isContextual(130) && this.isPotentialImportPhase(false) ? r = this.parseMaybeImportPhase(i, false) : i.importKind = "value", this.tsParseImportEqualsDeclaration(i, r, true);
            } else if (this.eat(29)) {
              let i = e;
              return i.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = true, this.finishNode(i, "TSExportAssignment");
            } else if (this.eatContextual(93)) {
              let i = e;
              return this.expectContextual(128), i.id = this.parseIdentifier(), this.semicolon(), this.finishNode(i, "TSNamespaceExportDeclaration");
            } else return super.parseExport(e, s);
          }
          isAbstractClass() {
            return this.isContextual(124) && this.lookahead().type === 80;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              let e = this.startNode();
              return this.next(), e.abstract = true, this.parseClass(e, true, true);
            }
            if (this.match(129)) {
              let e = this.tsParseInterfaceDeclaration(this.startNode());
              if (e) return e;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(e, s, i = false) {
            let { isAmbientContext: r } = this.state, n = super.parseVarStatement(e, s, i || r);
            if (!r) return n;
            for (let { id: o, init: h } of n.declarations) h && (s !== "const" || o.typeAnnotation ? this.raise(y2.InitializerNotAllowedInAmbientContext, h) : Wi(h, this.hasPlugin("estree")) || this.raise(y2.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, h));
            return n;
          }
          parseStatementContent(e, s) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              let i = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(i, { const: true });
            }
            if (this.isContextual(126)) return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(129)) {
              let i = this.tsParseInterfaceDeclaration(this.startNode());
              if (i) return i;
            }
            return super.parseStatementContent(e, s);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(e, s) {
            return s.some((i) => _t2(i) ? e.accessibility === i : !!e[i]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(106) && this.lookaheadCharCode() === 123;
          }
          parseClassMember(e, s, i) {
            let r = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ allowedModifiers: r, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: y2.InvalidModifierOnTypeParameterPositions }, s);
            let n = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(s, r) && this.raise(y2.StaticBlockCannotHaveModifier, this.state.curPosition()), super.parseClassStaticBlock(e, s)) : this.parseClassMemberWithIsStatic(e, s, i, !!s.static);
            };
            s.declare ? this.tsInAmbientContext(n) : n();
          }
          parseClassMemberWithIsStatic(e, s, i, r) {
            let n = this.tsTryParseIndexSignature(s);
            if (n) {
              e.body.push(n), s.abstract && this.raise(y2.IndexSignatureHasAbstract, s), s.accessibility && this.raise(y2.IndexSignatureHasAccessibility, s, { modifier: s.accessibility }), s.declare && this.raise(y2.IndexSignatureHasDeclare, s), s.override && this.raise(y2.IndexSignatureHasOverride, s);
              return;
            }
            !this.state.inAbstractClass && s.abstract && this.raise(y2.NonAbstractClassHasAbstractMethod, s), s.override && (i.hadSuperClass || this.raise(y2.OverrideNotInSubClass, s)), super.parseClassMemberWithIsStatic(e, s, i, r);
          }
          parsePostMemberNameModifiers(e) {
            this.eat(17) && (e.optional = true), e.readonly && this.match(10) && this.raise(y2.ClassMethodHasReadonly, e), e.declare && this.match(10) && this.raise(y2.ClassMethodHasDeclare, e);
          }
          parseExpressionStatement(e, s, i) {
            return (s.type === "Identifier" ? this.tsParseExpressionStatement(e, s, i) : void 0) || super.parseExpressionStatement(e, s, i);
          }
          shouldParseExportDeclaration() {
            return this.tsIsDeclarationStart() ? true : super.shouldParseExportDeclaration();
          }
          parseConditional(e, s, i) {
            if (!this.state.maybeInArrowParameters || !this.match(17)) return super.parseConditional(e, s, i);
            let r = this.tryParse(() => super.parseConditional(e, s));
            return r.node ? (r.error && (this.state = r.failState), r.node) : (r.error && super.setOptionalParametersError(i, r.error), e);
          }
          parseParenItem(e, s) {
            let i = super.parseParenItem(e, s);
            if (this.eat(17) && (i.optional = true, this.resetEndLocation(e)), this.match(14)) {
              let r = this.startNodeAt(s);
              return r.expression = e, r.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(r, "TSTypeCastExpression");
            }
            return e;
          }
          parseExportDeclaration(e) {
            if (!this.state.isAmbientContext && this.isContextual(125)) return this.tsInAmbientContext(() => this.parseExportDeclaration(e));
            let s = this.state.startLoc, i = this.eatContextual(125);
            if (i && (this.isContextual(125) || !this.shouldParseExportDeclaration())) throw this.raise(y2.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
            let n = E(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(e);
            return n ? ((n.type === "TSInterfaceDeclaration" || n.type === "TSTypeAliasDeclaration" || i) && (e.exportKind = "type"), i && n.type !== "TSImportEqualsDeclaration" && (this.resetStartLocation(n, s), n.declare = true), n) : null;
          }
          parseClassId(e, s, i, r) {
            if ((!s || i) && this.isContextual(113)) return;
            super.parseClassId(e, s, i, e.declare ? 1024 : 8331);
            let n = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
            n && (e.typeParameters = n);
          }
          parseClassPropertyAnnotation(e) {
            e.optional || (this.eat(35) ? e.definite = true : this.eat(17) && (e.optional = true));
            let s = this.tsTryParseTypeAnnotation();
            s && (e.typeAnnotation = s);
          }
          parseClassProperty(e) {
            if (this.parseClassPropertyAnnotation(e), this.state.isAmbientContext && !(e.readonly && !e.typeAnnotation) && this.match(29) && this.raise(y2.DeclareClassFieldHasInitializer, this.state.startLoc), e.abstract && this.match(29)) {
              let { key: s } = e;
              this.raise(y2.AbstractPropertyHasInitializer, this.state.startLoc, { propertyName: s.type === "Identifier" && !e.computed ? s.name : `[${this.input.slice(this.offsetToSourcePos(s.start), this.offsetToSourcePos(s.end))}]` });
            }
            return super.parseClassProperty(e);
          }
          parseClassPrivateProperty(e) {
            return e.abstract && this.raise(y2.PrivateElementHasAbstract, e), e.accessibility && this.raise(y2.PrivateElementHasAccessibility, e, { modifier: e.accessibility }), this.parseClassPropertyAnnotation(e), super.parseClassPrivateProperty(e);
          }
          parseClassAccessorProperty(e) {
            return this.parseClassPropertyAnnotation(e), e.optional && this.raise(y2.AccessorCannotBeOptional, e), super.parseClassAccessorProperty(e);
          }
          pushClassMethod(e, s, i, r, n, o) {
            let h = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            h && n && this.raise(y2.ConstructorHasTypeParameters, h);
            let { declare: l = false, kind: c } = s;
            l && (c === "get" || c === "set") && this.raise(y2.DeclareAccessor, s, { kind: c }), h && (s.typeParameters = h), super.pushClassMethod(e, s, i, r, n, o);
          }
          pushClassPrivateMethod(e, s, i, r) {
            let n = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            n && (s.typeParameters = n), super.pushClassPrivateMethod(e, s, i, r);
          }
          declareClassPrivateMethodInScope(e, s) {
            e.type !== "TSDeclareMethod" && (e.type === "MethodDefinition" && !hasOwnProperty.call(e.value, "body") || super.declareClassPrivateMethodInScope(e, s));
          }
          parseClassSuper(e) {
            super.parseClassSuper(e), e.superClass && (this.match(47) || this.match(51)) && (e.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(113) && (e.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(e, s, i, r, n, o, h) {
            let l = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            return l && (e.typeParameters = l), super.parseObjPropValue(e, s, i, r, n, o, h);
          }
          parseFunctionParams(e, s) {
            let i = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            i && (e.typeParameters = i), super.parseFunctionParams(e, s);
          }
          parseVarId(e, s) {
            super.parseVarId(e, s), e.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35) && (e.definite = true);
            let i = this.tsTryParseTypeAnnotation();
            i && (e.id.typeAnnotation = i, this.resetEndLocation(e.id));
          }
          parseAsyncArrowFromCallExpression(e, s) {
            return this.match(14) && (e.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(e, s);
          }
          parseMaybeAssign(e, s) {
            var i, r, n, o, h;
            let l, c, u;
            if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
              if (l = this.state.clone(), c = this.tryParse(() => super.parseMaybeAssign(e, s), l), !c.error) return c.node;
              let { context: x2 } = this.state, S2 = x2[x2.length - 1];
              (S2 === C.j_oTag || S2 === C.j_expr) && x2.pop();
            }
            if (!((i = c) != null && i.error) && !this.match(47)) return super.parseMaybeAssign(e, s);
            (!l || l === this.state) && (l = this.state.clone());
            let f, d = this.tryParse((x2) => {
              var S2, N2;
              f = this.tsParseTypeParameters(this.tsParseConstModifier);
              let w2 = super.parseMaybeAssign(e, s);
              return (w2.type !== "ArrowFunctionExpression" || (S2 = w2.extra) != null && S2.parenthesized) && x2(), ((N2 = f) == null ? void 0 : N2.params.length) !== 0 && this.resetStartLocationFromNode(w2, f), w2.typeParameters = f, w2;
            }, l);
            if (!d.error && !d.aborted) return f && this.reportReservedArrowTypeParam(f), d.node;
            if (!c && (Rt2(!this.hasPlugin("jsx")), u = this.tryParse(() => super.parseMaybeAssign(e, s), l), !u.error)) return u.node;
            if ((r = c) != null && r.node) return this.state = c.failState, c.node;
            if (d.node) return this.state = d.failState, f && this.reportReservedArrowTypeParam(f), d.node;
            if ((n = u) != null && n.node) return this.state = u.failState, u.node;
            throw ((o = c) == null ? void 0 : o.error) || d.error || ((h = u) == null ? void 0 : h.error);
          }
          reportReservedArrowTypeParam(e) {
            var s;
            e.params.length === 1 && !e.params[0].constraint && !((s = e.extra) != null && s.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(y2.ReservedArrowTypeParam, e);
          }
          parseMaybeUnary(e, s) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(e, s);
          }
          parseArrow(e) {
            if (this.match(14)) {
              let s = this.tryParse((i) => {
                let r = this.tsParseTypeOrTypePredicateAnnotation(14);
                return (this.canInsertSemicolon() || !this.match(19)) && i(), r;
              });
              if (s.aborted) return;
              s.thrown || (s.error && (this.state = s.failState), e.returnType = s.node);
            }
            return super.parseArrow(e);
          }
          parseFunctionParamType(e) {
            this.eat(17) && (e.optional = true);
            let s = this.tsTryParseTypeAnnotation();
            return s && (e.typeAnnotation = s), this.resetEndLocation(e), e;
          }
          isAssignable(e, s) {
            switch (e.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(e.expression, s);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(e, s);
            }
          }
          toAssignable(e, s = false) {
            switch (e.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(e, s);
                break;
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                s ? this.expressionScope.recordArrowParameterBindingError(y2.UnexpectedTypeCastInParameter, e) : this.raise(y2.UnexpectedTypeCastInParameter, e), this.toAssignable(e.expression, s);
                break;
              case "AssignmentExpression":
                !s && e.left.type === "TSTypeCastExpression" && (e.left = this.typeCastToParameter(e.left));
              default:
                super.toAssignable(e, s);
            }
          }
          toAssignableParenthesizedExpression(e, s) {
            switch (e.expression.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(e.expression, s);
                break;
              default:
                super.toAssignable(e, s);
            }
          }
          checkToRestConversion(e, s) {
            switch (e.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(e.expression, false);
                break;
              default:
                super.checkToRestConversion(e, s);
            }
          }
          isValidLVal(e, s, i) {
            switch (e) {
              case "TSTypeCastExpression":
                return true;
              case "TSParameterProperty":
                return "parameter";
              case "TSNonNullExpression":
              case "TSInstantiationExpression":
                return "expression";
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
                return (i !== 64 || !s) && ["expression", true];
              default:
                return super.isValidLVal(e, s, i);
            }
          }
          parseBindingAtom() {
            return this.state.type === 78 ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(e, s) {
            if (this.match(47) || this.match(51)) {
              let i = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                let r = super.parseMaybeDecoratorArguments(e, s);
                return r.typeParameters = i, r;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(e, s);
          }
          checkCommaAfterRest(e) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === e ? (this.next(), false) : super.checkCommaAfterRest(e);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(e, s) {
            let i = super.parseMaybeDefault(e, s);
            return i.type === "AssignmentPattern" && i.typeAnnotation && i.right.start < i.typeAnnotation.start && this.raise(y2.TypeAnnotationAfterAssign, i.typeAnnotation), i;
          }
          getTokenFromCode(e) {
            if (this.state.inType) {
              if (e === 62) {
                this.finishOp(48, 1);
                return;
              }
              if (e === 60) {
                this.finishOp(47, 1);
                return;
              }
            }
            super.getTokenFromCode(e);
          }
          reScan_lt_gt() {
            let { type: e } = this.state;
            e === 47 ? (this.state.pos -= 1, this.readToken_lt()) : e === 48 && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            let { type: e } = this.state;
            return e === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : e;
          }
          toAssignableList(e, s, i) {
            for (let r = 0; r < e.length; r++) {
              let n = e[r];
              (n == null ? void 0 : n.type) === "TSTypeCastExpression" && (e[r] = this.typeCastToParameter(n));
            }
            super.toAssignableList(e, s, i);
          }
          typeCastToParameter(e) {
            return e.expression.typeAnnotation = e.typeAnnotation, this.resetEndLocation(e.expression, e.typeAnnotation.loc.end), e.expression;
          }
          shouldParseArrow(e) {
            return this.match(14) ? e.every((s) => this.isAssignable(s, true)) : super.shouldParseArrow(e);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(e) {
            if (this.match(47) || this.match(51)) {
              let s = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              s && (e.typeParameters = s);
            }
            return super.jsxParseOpeningElementAfterName(e);
          }
          getGetterSetterExpectedParamCount(e) {
            let s = super.getGetterSetterExpectedParamCount(e), r = this.getObjectOrClassMethodParams(e)[0];
            return r && this.isThisParam(r) ? s + 1 : s;
          }
          parseCatchClauseParam() {
            let e = super.parseCatchClauseParam(), s = this.tsTryParseTypeAnnotation();
            return s && (e.typeAnnotation = s, this.resetEndLocation(e)), e;
          }
          tsInAmbientContext(e) {
            let { isAmbientContext: s, strict: i } = this.state;
            this.state.isAmbientContext = true, this.state.strict = false;
            try {
              return e();
            } finally {
              this.state.isAmbientContext = s, this.state.strict = i;
            }
          }
          parseClass(e, s, i) {
            let r = this.state.inAbstractClass;
            this.state.inAbstractClass = !!e.abstract;
            try {
              return super.parseClass(e, s, i);
            } finally {
              this.state.inAbstractClass = r;
            }
          }
          tsParseAbstractDeclaration(e, s) {
            if (this.match(80)) return e.abstract = true, this.maybeTakeDecorators(s, this.parseClass(e, true, false));
            if (this.isContextual(129)) {
              if (!this.hasFollowingLineBreak()) return e.abstract = true, this.raise(y2.NonClassMethodPropertyHasAbstractModifer, e), this.tsParseInterfaceDeclaration(e);
            } else this.unexpected(null, 80);
          }
          parseMethod(e, s, i, r, n, o, h) {
            let l = super.parseMethod(e, s, i, r, n, o, h);
            if (l.abstract && (this.hasPlugin("estree") ? l.value : l).body) {
              let { key: f } = l;
              this.raise(y2.AbstractMethodHasImplementation, l, { methodName: f.type === "Identifier" && !l.computed ? f.name : `[${this.input.slice(this.offsetToSourcePos(f.start), this.offsetToSourcePos(f.end))}]` });
            }
            return l;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(e, s, i, r) {
            return !s && r ? (this.parseTypeOnlyImportExportSpecifier(e, false, i), this.finishNode(e, "ExportSpecifier")) : (e.exportKind = "value", super.parseExportSpecifier(e, s, i, r));
          }
          parseImportSpecifier(e, s, i, r, n) {
            return !s && r ? (this.parseTypeOnlyImportExportSpecifier(e, true, i), this.finishNode(e, "ImportSpecifier")) : (e.importKind = "value", super.parseImportSpecifier(e, s, i, r, i ? 4098 : 4096));
          }
          parseTypeOnlyImportExportSpecifier(e, s, i) {
            let r = s ? "imported" : "local", n = s ? "local" : "exported", o = e[r], h, l = false, c = true, u = o.loc.start;
            if (this.isContextual(93)) {
              let d = this.parseIdentifier();
              if (this.isContextual(93)) {
                let x2 = this.parseIdentifier();
                D(this.state.type) ? (l = true, o = d, h = s ? this.parseIdentifier() : this.parseModuleExportName(), c = false) : (h = x2, c = false);
              } else D(this.state.type) ? (c = false, h = s ? this.parseIdentifier() : this.parseModuleExportName()) : (l = true, o = d);
            } else D(this.state.type) && (l = true, s ? (o = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(o.name, o.loc.start, true, true)) : o = this.parseModuleExportName());
            l && i && this.raise(s ? y2.TypeModifierIsUsedInTypeImports : y2.TypeModifierIsUsedInTypeExports, u), e[r] = o, e[n] = h;
            let f = s ? "importKind" : "exportKind";
            e[f] = l ? "type" : "value", c && this.eatContextual(93) && (e[n] = s ? this.parseIdentifier() : this.parseModuleExportName()), e[n] || (e[n] = U2(e[r])), s && this.checkIdentifier(e[n], l ? 4098 : 4096);
          }
        };
        function Ji2(a) {
          if (a.type !== "MemberExpression") return false;
          let { computed: t, property: e } = a;
          return t && e.type !== "StringLiteral" && (e.type !== "TemplateLiteral" || e.expressions.length > 0) ? false : ss(a.object);
        }
        function Wi(a, t) {
          var e;
          let { type: s } = a;
          if ((e = a.extra) != null && e.parenthesized) return false;
          if (t) {
            if (s === "Literal") {
              let { value: i } = a;
              if (typeof i == "string" || typeof i == "boolean") return true;
            }
          } else if (s === "StringLiteral" || s === "BooleanLiteral") return true;
          return !!(ts(a, t) || Xi2(a, t) || s === "TemplateLiteral" && a.expressions.length === 0 || Ji2(a));
        }
        function ts(a, t) {
          return t ? a.type === "Literal" && (typeof a.value == "number" || "bigint" in a) : a.type === "NumericLiteral" || a.type === "BigIntLiteral";
        }
        function Xi2(a, t) {
          if (a.type === "UnaryExpression") {
            let { operator: e, argument: s } = a;
            if (e === "-" && ts(s, t)) return true;
          }
          return false;
        }
        function ss(a) {
          return a.type === "Identifier" ? true : a.type !== "MemberExpression" || a.computed ? false : ss(a.object);
        }
        var Ut2 = _2`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." }), Gi2 = (a) => class extends a {
          parsePlaceholder(e) {
            if (this.match(133)) {
              let s = this.startNode();
              return this.next(), this.assertNoSpace(), s.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(133), this.finishPlaceholder(s, e);
            }
          }
          finishPlaceholder(e, s) {
            let i = e;
            return (!i.expectedNode || !i.type) && (i = this.finishNode(i, "Placeholder")), i.expectedNode = s, i;
          }
          getTokenFromCode(e) {
            e === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(133, 2) : super.getTokenFromCode(e);
          }
          parseExprAtom(e) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(e);
          }
          parseIdentifier(e) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(e);
          }
          checkReservedWord(e, s, i, r) {
            e !== void 0 && super.checkReservedWord(e, s, i, r);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(e, s, i) {
            return e === "Placeholder" || super.isValidLVal(e, s, i);
          }
          toAssignable(e, s) {
            e && e.type === "Placeholder" && e.expectedNode === "Expression" ? e.expectedNode = "Pattern" : super.toAssignable(e, s);
          }
          chStartsBindingIdentifier(e, s) {
            return !!(super.chStartsBindingIdentifier(e, s) || this.lookahead().type === 133);
          }
          verifyBreakContinue(e, s) {
            e.label && e.label.type === "Placeholder" || super.verifyBreakContinue(e, s);
          }
          parseExpressionStatement(e, s) {
            var i;
            if (s.type !== "Placeholder" || (i = s.extra) != null && i.parenthesized) return super.parseExpressionStatement(e, s);
            if (this.match(14)) {
              let n = e;
              return n.label = this.finishPlaceholder(s, "Identifier"), this.next(), n.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(n, "LabeledStatement");
            }
            this.semicolon();
            let r = e;
            return r.name = s.name, this.finishPlaceholder(r, "Statement");
          }
          parseBlock(e, s, i) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(e, s, i);
          }
          parseFunctionId(e) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(e);
          }
          parseClass(e, s, i) {
            let r = s ? "ClassDeclaration" : "ClassExpression";
            this.next();
            let n = this.state.strict, o = this.parsePlaceholder("Identifier");
            if (o) if (this.match(81) || this.match(133) || this.match(5)) e.id = o;
            else {
              if (i || !s) return e.id = null, e.body = this.finishPlaceholder(o, "ClassBody"), this.finishNode(e, r);
              throw this.raise(Ut2.ClassNameIsRequired, this.state.startLoc);
            }
            else this.parseClassId(e, s, i);
            return super.parseClassSuper(e), e.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!e.superClass, n), this.finishNode(e, r);
          }
          parseExport(e, s) {
            let i = this.parsePlaceholder("Identifier");
            if (!i) return super.parseExport(e, s);
            let r = e;
            if (!this.isContextual(98) && !this.match(12)) return r.specifiers = [], r.source = null, r.declaration = this.finishPlaceholder(i, "Declaration"), this.finishNode(r, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            let n = this.startNode();
            return n.exported = i, r.specifiers = [this.finishNode(n, "ExportDefaultSpecifier")], super.parseExport(r, s);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              let e = this.nextTokenStart();
              if (this.isUnparsedContextual(e, "from") && this.input.startsWith(q2(133), this.nextTokenStartSince(e + 4))) return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(e, s) {
            var i;
            return (i = e.specifiers) != null && i.length ? true : super.maybeParseExportDefaultSpecifier(e, s);
          }
          checkExport(e) {
            let { specifiers: s } = e;
            s != null && s.length && (e.specifiers = s.filter((i) => i.exported.type === "Placeholder")), super.checkExport(e), e.specifiers = s;
          }
          parseImport(e) {
            let s = this.parsePlaceholder("Identifier");
            if (!s) return super.parseImport(e);
            if (e.specifiers = [], !this.isContextual(98) && !this.match(12)) return e.source = this.finishPlaceholder(s, "StringLiteral"), this.semicolon(), this.finishNode(e, "ImportDeclaration");
            let i = this.startNodeAtNode(s);
            return i.local = s, e.specifiers.push(this.finishNode(i, "ImportDefaultSpecifier")), this.eat(12) && (this.maybeParseStarImportSpecifier(e) || this.parseNamedImportSpecifiers(e)), this.expectContextual(98), e.source = this.parseImportSource(), this.semicolon(), this.finishNode(e, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index) && this.raise(Ut2.UnexpectedSpace, this.state.lastTokEndLoc);
          }
        }, Yi2 = (a) => class extends a {
          parseV8Intrinsic() {
            if (this.match(54)) {
              let e = this.state.startLoc, s = this.startNode();
              if (this.next(), E(this.state.type)) {
                let i = this.parseIdentifierName(), r = this.createIdentifier(s, i);
                if (r.type = "V8IntrinsicIdentifier", this.match(10)) return r;
              }
              this.unexpected(e);
            }
          }
          parseExprAtom(e) {
            return this.parseV8Intrinsic() || super.parseExprAtom(e);
          }
        }, jt2 = ["minimal", "fsharp", "hack", "smart"], $t2 = ["^^", "@@", "^", "%", "#"];
        function Qi2(a) {
          if (a.has("decorators")) {
            if (a.has("decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
            let e = a.get("decorators").decoratorsBeforeExport;
            if (e != null && typeof e != "boolean") throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
            let s = a.get("decorators").allowCallParenthesized;
            if (s != null && typeof s != "boolean") throw new Error("'allowCallParenthesized' must be a boolean.");
          }
          if (a.has("flow") && a.has("typescript")) throw new Error("Cannot combine flow and typescript plugins.");
          if (a.has("placeholders") && a.has("v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
          if (a.has("pipelineOperator")) {
            var t;
            let e = a.get("pipelineOperator").proposal;
            if (!jt2.includes(e)) {
              let i = jt2.map((r) => `"${r}"`).join(", ");
              throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${i}.`);
            }
            let s = ((t = a.get("recordAndTuple")) == null ? void 0 : t.syntaxType) === "hash";
            if (e === "hack") {
              if (a.has("placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
              if (a.has("v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
              let i = a.get("pipelineOperator").topicToken;
              if (!$t2.includes(i)) {
                let r = $t2.map((n) => `"${n}"`).join(", ");
                throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${r}.`);
              }
              if (i === "#" && s) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", a.get("recordAndTuple")])}\`.`);
            } else if (e === "smart" && s) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", a.get("recordAndTuple")])}\`.`);
          }
          if (a.has("moduleAttributes")) {
            if (a.has("deprecatedImportAssert") || a.has("importAssertions")) throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
            if (a.get("moduleAttributes").version !== "may-2020") throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
          }
          if (a.has("importAssertions") && a.has("deprecatedImportAssert")) throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
          if (!a.has("deprecatedImportAssert") && a.has("importAttributes") && a.get("importAttributes").deprecatedAssertSyntax && a.set("deprecatedImportAssert", {}), a.has("recordAndTuple")) {
            let e = a.get("recordAndTuple").syntaxType;
            if (e != null) {
              let s = ["hash", "bar"];
              if (!s.includes(e)) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + s.map((i) => `'${i}'`).join(", "));
            }
          }
          if (a.has("asyncDoExpressions") && !a.has("doExpressions")) {
            let e = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
            throw e.missingPlugins = "doExpressions", e;
          }
          if (a.has("optionalChainingAssign") && a.get("optionalChainingAssign").version !== "2023-07") throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
        }
        var is2 = { estree: ti2, jsx: zi2, flow: $i2, typescript: Hi2, v8intrinsic: Yi2, placeholders: Gi2 }, Zi2 = Object.keys(is2), ot2 = class extends nt2 {
          checkProto(t, e, s, i) {
            if (t.type === "SpreadElement" || this.isObjectMethod(t) || t.computed || t.shorthand) return;
            let r = t.key;
            if ((r.type === "Identifier" ? r.name : r.value) === "__proto__") {
              if (e) {
                this.raise(p.RecordNoProto, r);
                return;
              }
              s.used && (i ? i.doubleProtoLoc === null && (i.doubleProtoLoc = r.loc.start) : this.raise(p.DuplicateProto, r)), s.used = true;
            }
          }
          shouldExitDescending(t, e) {
            return t.type === "ArrowFunctionExpression" && this.offsetToSourcePos(t.start) === e;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            let t = this.parseExpression();
            return this.match(140) || this.unexpected(), this.finalizeRemainingComments(), t.comments = this.comments, t.errors = this.state.errors, this.optionFlags & 128 && (t.tokens = this.tokens), t;
          }
          parseExpression(t, e) {
            return t ? this.disallowInAnd(() => this.parseExpressionBase(e)) : this.allowInAnd(() => this.parseExpressionBase(e));
          }
          parseExpressionBase(t) {
            let e = this.state.startLoc, s = this.parseMaybeAssign(t);
            if (this.match(12)) {
              let i = this.startNodeAt(e);
              for (i.expressions = [s]; this.eat(12); ) i.expressions.push(this.parseMaybeAssign(t));
              return this.toReferencedList(i.expressions), this.finishNode(i, "SequenceExpression");
            }
            return s;
          }
          parseMaybeAssignDisallowIn(t, e) {
            return this.disallowInAnd(() => this.parseMaybeAssign(t, e));
          }
          parseMaybeAssignAllowIn(t, e) {
            return this.allowInAnd(() => this.parseMaybeAssign(t, e));
          }
          setOptionalParametersError(t, e) {
            var s;
            t.optionalParametersLoc = (s = e == null ? void 0 : e.loc) != null ? s : this.state.startLoc;
          }
          parseMaybeAssign(t, e) {
            let s = this.state.startLoc;
            if (this.isContextual(108) && this.prodParam.hasYield) {
              let o = this.parseYield();
              return e && (o = e.call(this, o, s)), o;
            }
            let i;
            t ? i = false : (t = new Z2(), i = true);
            let { type: r } = this.state;
            (r === 10 || E(r)) && (this.state.potentialArrowAt = this.state.start);
            let n = this.parseMaybeConditional(t);
            if (e && (n = e.call(this, n, s)), ni2(this.state.type)) {
              let o = this.startNodeAt(s), h = this.state.value;
              if (o.operator = h, this.match(29)) {
                this.toAssignable(n, true), o.left = n;
                let l = s.index;
                t.doubleProtoLoc != null && t.doubleProtoLoc.index >= l && (t.doubleProtoLoc = null), t.shorthandAssignLoc != null && t.shorthandAssignLoc.index >= l && (t.shorthandAssignLoc = null), t.privateKeyLoc != null && t.privateKeyLoc.index >= l && (this.checkDestructuringPrivate(t), t.privateKeyLoc = null);
              } else o.left = n;
              return this.next(), o.right = this.parseMaybeAssign(), this.checkLVal(n, this.finishNode(o, "AssignmentExpression")), o;
            } else i && this.checkExpressionErrors(t, true);
            return n;
          }
          parseMaybeConditional(t) {
            let e = this.state.startLoc, s = this.state.potentialArrowAt, i = this.parseExprOps(t);
            return this.shouldExitDescending(i, s) ? i : this.parseConditional(i, e, t);
          }
          parseConditional(t, e, s) {
            if (this.eat(17)) {
              let i = this.startNodeAt(e);
              return i.test = t, i.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), i.alternate = this.parseMaybeAssign(), this.finishNode(i, "ConditionalExpression");
            }
            return t;
          }
          parseMaybeUnaryOrPrivate(t) {
            return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(t);
          }
          parseExprOps(t) {
            let e = this.state.startLoc, s = this.state.potentialArrowAt, i = this.parseMaybeUnaryOrPrivate(t);
            return this.shouldExitDescending(i, s) ? i : this.parseExprOp(i, e, -1);
          }
          parseExprOp(t, e, s) {
            if (this.isPrivateName(t)) {
              let r = this.getPrivateNameSV(t);
              (s >= Ce2(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(p.PrivateInExpectedIn, t, { identifierName: r }), this.classScope.usePrivateName(r, t.loc.start);
            }
            let i = this.state.type;
            if (hi2(i) && (this.prodParam.hasIn || !this.match(58))) {
              let r = Ce2(i);
              if (r > s) {
                if (i === 39) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody) return t;
                  this.checkPipelineAtInfixOperator(t, e);
                }
                let n = this.startNodeAt(e);
                n.left = t, n.operator = this.state.value;
                let o = i === 41 || i === 42, h = i === 40;
                if (h && (r = Ce2(42)), this.next(), i === 39 && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && this.state.type === 96 && this.prodParam.hasAwait) throw this.raise(p.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
                n.right = this.parseExprOpRightExpr(i, r);
                let l = this.finishNode(n, o || h ? "LogicalExpression" : "BinaryExpression"), c = this.state.type;
                if (h && (c === 41 || c === 42) || o && c === 40) throw this.raise(p.MixingCoalesceWithLogical, this.state.startLoc);
                return this.parseExprOp(l, e, s);
              }
            }
            return t;
          }
          parseExprOpRightExpr(t, e) {
            let s = this.state.startLoc;
            switch (t) {
              case 39:
                switch (this.getPluginOption("pipelineOperator", "proposal")) {
                  case "hack":
                    return this.withTopicBindingContext(() => this.parseHackPipeBody());
                  case "fsharp":
                    return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(e));
                }
                if (this.getPluginOption("pipelineOperator", "proposal") === "smart") return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(108)) throw this.raise(p.PipeBodyIsTighter, this.state.startLoc);
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(t, e), s);
                });
              default:
                return this.parseExprOpBaseRightExpr(t, e);
            }
          }
          parseExprOpBaseRightExpr(t, e) {
            let s = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), s, fi2(t) ? e - 1 : e);
          }
          parseHackPipeBody() {
            var t;
            let { startLoc: e } = this.state, s = this.parseMaybeAssign();
            return Ws.has(s.type) && !((t = s.extra) != null && t.parenthesized) && this.raise(p.PipeUnparenthesizedBody, e, { type: s.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(p.PipeTopicUnused, e), s;
          }
          checkExponentialAfterUnary(t) {
            this.match(57) && this.raise(p.UnexpectedTokenUnaryExponentiation, t.argument);
          }
          parseMaybeUnary(t, e) {
            let s = this.state.startLoc, i = this.isContextual(96);
            if (i && this.recordAwaitIfAllowed()) {
              this.next();
              let h = this.parseAwait(s);
              return e || this.checkExponentialAfterUnary(h), h;
            }
            let r = this.match(34), n = this.startNode();
            if (ci2(this.state.type)) {
              n.operator = this.state.value, n.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              let h = this.match(89);
              if (this.next(), n.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(t, true), this.state.strict && h) {
                let l = n.argument;
                l.type === "Identifier" ? this.raise(p.StrictDelete, n) : this.hasPropertyAsPrivateName(l) && this.raise(p.DeletePrivateField, n);
              }
              if (!r) return e || this.checkExponentialAfterUnary(n), this.finishNode(n, "UnaryExpression");
            }
            let o = this.parseUpdate(n, r, t);
            if (i) {
              let { type: h } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? Ve2(h) : Ve2(h) && !this.match(54)) && !this.isAmbiguousAwait()) return this.raiseOverwrite(p.AwaitNotInAsyncContext, s), this.parseAwait(s);
            }
            return o;
          }
          parseUpdate(t, e, s) {
            if (e) {
              let n = t;
              return this.checkLVal(n.argument, this.finishNode(n, "UpdateExpression")), t;
            }
            let i = this.state.startLoc, r = this.parseExprSubscripts(s);
            if (this.checkExpressionErrors(s, false)) return r;
            for (; li2(this.state.type) && !this.canInsertSemicolon(); ) {
              let n = this.startNodeAt(i);
              n.operator = this.state.value, n.prefix = false, n.argument = r, this.next(), this.checkLVal(r, r = this.finishNode(n, "UpdateExpression"));
            }
            return r;
          }
          parseExprSubscripts(t) {
            let e = this.state.startLoc, s = this.state.potentialArrowAt, i = this.parseExprAtom(t);
            return this.shouldExitDescending(i, s) ? i : this.parseSubscripts(i, e);
          }
          parseSubscripts(t, e, s) {
            let i = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(t), stop: false };
            do
              t = this.parseSubscript(t, e, s, i), i.maybeAsyncArrow = false;
            while (!i.stop);
            return t;
          }
          parseSubscript(t, e, s, i) {
            let { type: r } = this.state;
            if (!s && r === 15) return this.parseBind(t, e, s, i);
            if (Ne2(r)) return this.parseTaggedTemplateExpression(t, e, i);
            let n = false;
            if (r === 18) {
              if (s && (this.raise(p.OptionalChainingNoNew, this.state.startLoc), this.lookaheadCharCode() === 40)) return i.stop = true, t;
              i.optionalChainMember = n = true, this.next();
            }
            if (!s && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(t, e, i, n);
            {
              let o = this.eat(0);
              return o || n || this.eat(16) ? this.parseMember(t, e, i, o, n) : (i.stop = true, t);
            }
          }
          parseMember(t, e, s, i, r) {
            let n = this.startNodeAt(e);
            return n.object = t, n.computed = i, i ? (n.property = this.parseExpression(), this.expect(3)) : this.match(139) ? (t.type === "Super" && this.raise(p.SuperPrivateField, e), this.classScope.usePrivateName(this.state.value, this.state.startLoc), n.property = this.parsePrivateName()) : n.property = this.parseIdentifier(true), s.optionalChainMember ? (n.optional = r, this.finishNode(n, "OptionalMemberExpression")) : this.finishNode(n, "MemberExpression");
          }
          parseBind(t, e, s, i) {
            let r = this.startNodeAt(e);
            return r.object = t, this.next(), r.callee = this.parseNoCallExpr(), i.stop = true, this.parseSubscripts(this.finishNode(r, "BindExpression"), e, s);
          }
          parseCoverCallAndAsyncArrowHead(t, e, s, i) {
            let r = this.state.maybeInArrowParameters, n = null;
            this.state.maybeInArrowParameters = true, this.next();
            let o = this.startNodeAt(e);
            o.callee = t;
            let { maybeAsyncArrow: h, optionalChainMember: l } = s;
            h && (this.expressionScope.enter(Mi2()), n = new Z2()), l && (o.optional = i), i ? o.arguments = this.parseCallExpressionArguments(11) : o.arguments = this.parseCallExpressionArguments(11, t.type !== "Super", o, n);
            let c = this.finishCallExpression(o, l);
            return h && this.shouldParseAsyncArrow() && !i ? (s.stop = true, this.checkDestructuringPrivate(n), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), c = this.parseAsyncArrowFromCallExpression(this.startNodeAt(e), c)) : (h && (this.checkExpressionErrors(n, true), this.expressionScope.exit()), this.toReferencedArguments(c)), this.state.maybeInArrowParameters = r, c;
          }
          toReferencedArguments(t, e) {
            this.toReferencedListDeep(t.arguments, e);
          }
          parseTaggedTemplateExpression(t, e, s) {
            let i = this.startNodeAt(e);
            return i.tag = t, i.quasi = this.parseTemplate(true), s.optionalChainMember && this.raise(p.OptionalChainingNoTemplate, e), this.finishNode(i, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(t) {
            return t.type === "Identifier" && t.name === "async" && this.state.lastTokEndLoc.index === t.end && !this.canInsertSemicolon() && t.end - t.start === 5 && this.offsetToSourcePos(t.start) === this.state.potentialArrowAt;
          }
          finishCallExpression(t, e) {
            if (t.callee.type === "Import") if (t.arguments.length === 0 || t.arguments.length > 2) this.raise(p.ImportCallArity, t);
            else for (let s of t.arguments) s.type === "SpreadElement" && this.raise(p.ImportCallSpreadArgument, s);
            return this.finishNode(t, e ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(t, e, s, i) {
            let r = [], n = true, o = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(t); ) {
              if (n) n = false;
              else if (this.expect(12), this.match(t)) {
                s && this.addTrailingCommaExtraToNode(s), this.next();
                break;
              }
              r.push(this.parseExprListItem(false, i, e));
            }
            return this.state.inFSharpPipelineDirectBody = o, r;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(t, e) {
            var s;
            return this.resetPreviousNodeTrailingComments(e), this.expect(19), this.parseArrowExpression(t, e.arguments, true, (s = e.extra) == null ? void 0 : s.trailingCommaLoc), e.innerComments && de2(t, e.innerComments), e.callee.trailingComments && de2(t, e.callee.trailingComments), t;
          }
          parseNoCallExpr() {
            let t = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), t, true);
          }
          parseExprAtom(t) {
            let e, s = null, { type: i } = this.state;
            switch (i) {
              case 79:
                return this.parseSuper();
              case 83:
                return e = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(e) : this.match(10) ? this.optionFlags & 256 ? this.parseImportCall(e) : this.finishNode(e, "Import") : (this.raise(p.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(e, "Import"));
              case 78:
                return e = this.startNode(), this.next(), this.finishNode(e, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 135:
                return this.parseNumericLiteral(this.state.value);
              case 136:
                return this.parseBigIntLiteral(this.state.value);
              case 134:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                let r = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(r);
              }
              case 2:
              case 1:
                return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, t);
              case 6:
              case 7:
                return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, t);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                s = this.parseDecorators();
              case 80:
                return this.parseClass(this.maybeTakeDecorators(s, this.startNode()), false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                e = this.startNode(), this.next(), e.object = null;
                let r = e.callee = this.parseNoCallExpr();
                if (r.type === "MemberExpression") return this.finishNode(e, "BindExpression");
                throw this.raise(p.UnsupportedBind, r);
              }
              case 139:
                return this.raise(p.PrivateInExpectedIn, this.state.startLoc, { identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                let r = this.getPluginOption("pipelineOperator", "proposal");
                if (r) return this.parseTopicReference(r);
                this.unexpected();
                break;
              }
              case 47: {
                let r = this.input.codePointAt(this.nextTokenStart());
                R2(r) || r === 62 ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
                break;
              }
              default:
                if (i === 137) return this.parseDecimalLiteral(this.state.value);
                if (E(i)) {
                  if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) return this.parseModuleExpression();
                  let r = this.state.potentialArrowAt === this.state.start, n = this.state.containsEsc, o = this.parseIdentifier();
                  if (!n && o.name === "async" && !this.canInsertSemicolon()) {
                    let { type: h } = this.state;
                    if (h === 68) return this.resetPreviousNodeTrailingComments(o), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(o));
                    if (E(h)) return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(o)) : o;
                    if (h === 90) return this.resetPreviousNodeTrailingComments(o), this.parseDo(this.startNodeAtNode(o), true);
                  }
                  return r && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(o), [o], false)) : o;
                } else this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(t, e) {
            let s = this.getPluginOption("pipelineOperator", "proposal");
            if (s) return this.state.type = t, this.state.value = e, this.state.pos--, this.state.end--, this.state.endLoc = v(this.state.endLoc, -1), this.parseTopicReference(s);
            this.unexpected();
          }
          parseTopicReference(t) {
            let e = this.startNode(), s = this.state.startLoc, i = this.state.type;
            return this.next(), this.finishTopicReference(e, s, t, i);
          }
          finishTopicReference(t, e, s, i) {
            if (this.testTopicReferenceConfiguration(s, e, i)) return s === "hack" ? (this.topicReferenceIsAllowedInCurrentContext() || this.raise(p.PipeTopicUnbound, e), this.registerTopicReference(), this.finishNode(t, "TopicReference")) : (this.topicReferenceIsAllowedInCurrentContext() || this.raise(p.PrimaryTopicNotAllowed, e), this.registerTopicReference(), this.finishNode(t, "PipelinePrimaryTopicReference"));
            throw this.raise(p.PipeTopicUnconfiguredToken, e, { token: q2(i) });
          }
          testTopicReferenceConfiguration(t, e, s) {
            switch (t) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: q2(s) }]);
              case "smart":
                return s === 27;
              default:
                throw this.raise(p.PipeTopicRequiresHackPipes, e);
            }
          }
          parseAsyncArrowUnaryFunction(t) {
            this.prodParam.enter(Ee2(true, this.prodParam.hasYield));
            let e = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(p.LineTerminatorBeforeArrow, this.state.curPosition()), this.expect(19), this.parseArrowExpression(t, e, true);
          }
          parseDo(t, e) {
            this.expectPlugin("doExpressions"), e && this.expectPlugin("asyncDoExpressions"), t.async = e, this.next();
            let s = this.state.labels;
            return this.state.labels = [], e ? (this.prodParam.enter(2), t.body = this.parseBlock(), this.prodParam.exit()) : t.body = this.parseBlock(), this.state.labels = s, this.finishNode(t, "DoExpression");
          }
          parseSuper() {
            let t = this.startNode();
            return this.next(), this.match(10) && !this.scope.allowDirectSuper && !(this.optionFlags & 16) ? this.raise(p.SuperNotAllowed, t) : !this.scope.allowSuper && !(this.optionFlags & 16) && this.raise(p.UnexpectedSuper, t), !this.match(10) && !this.match(0) && !this.match(16) && this.raise(p.UnsupportedSuper, t), this.finishNode(t, "Super");
          }
          parsePrivateName() {
            let t = this.startNode(), e = this.startNodeAt(v(this.state.startLoc, 1)), s = this.state.value;
            return this.next(), t.id = this.createIdentifier(e, s), this.finishNode(t, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            let t = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              let e = this.createIdentifier(this.startNodeAtNode(t), "function");
              return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(t, e, "sent");
            }
            return this.parseFunction(t);
          }
          parseMetaProperty(t, e, s) {
            t.meta = e;
            let i = this.state.containsEsc;
            return t.property = this.parseIdentifier(true), (t.property.name !== s || i) && this.raise(p.UnsupportedMetaProperty, t.property, { target: e.name, onlyValidPropertyName: s }), this.finishNode(t, "MetaProperty");
          }
          parseImportMetaProperty(t) {
            let e = this.createIdentifier(this.startNodeAtNode(t), "import");
            if (this.next(), this.isContextual(101)) this.inModule || this.raise(p.ImportMetaOutsideModule, e), this.sawUnambiguousESM = true;
            else if (this.isContextual(105) || this.isContextual(97)) {
              let s = this.isContextual(105);
              if (this.expectPlugin(s ? "sourcePhaseImports" : "deferredImportEvaluation"), !(this.optionFlags & 256)) throw this.raise(p.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, { phase: this.state.value });
              return this.next(), t.phase = s ? "source" : "defer", this.parseImportCall(t);
            }
            return this.parseMetaProperty(t, e, "meta");
          }
          parseLiteralAtNode(t, e, s) {
            return this.addExtra(s, "rawValue", t), this.addExtra(s, "raw", this.input.slice(this.offsetToSourcePos(s.start), this.state.end)), s.value = t, this.next(), this.finishNode(s, e);
          }
          parseLiteral(t, e) {
            let s = this.startNode();
            return this.parseLiteralAtNode(t, e, s);
          }
          parseStringLiteral(t) {
            return this.parseLiteral(t, "StringLiteral");
          }
          parseNumericLiteral(t) {
            return this.parseLiteral(t, "NumericLiteral");
          }
          parseBigIntLiteral(t) {
            return this.parseLiteral(t, "BigIntLiteral");
          }
          parseDecimalLiteral(t) {
            return this.parseLiteral(t, "DecimalLiteral");
          }
          parseRegExpLiteral(t) {
            let e = this.startNode();
            return this.addExtra(e, "raw", this.input.slice(this.offsetToSourcePos(e.start), this.state.end)), e.pattern = t.pattern, e.flags = t.flags, this.next(), this.finishNode(e, "RegExpLiteral");
          }
          parseBooleanLiteral(t) {
            let e = this.startNode();
            return e.value = t, this.next(), this.finishNode(e, "BooleanLiteral");
          }
          parseNullLiteral() {
            let t = this.startNode();
            return this.next(), this.finishNode(t, "NullLiteral");
          }
          parseParenAndDistinguishExpression(t) {
            let e = this.state.startLoc, s;
            this.next(), this.expressionScope.enter(Di());
            let i = this.state.maybeInArrowParameters, r = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            let n = this.state.startLoc, o = [], h = new Z2(), l = true, c, u;
            for (; !this.match(11); ) {
              if (l) l = false;
              else if (this.expect(12, h.optionalParametersLoc === null ? null : h.optionalParametersLoc), this.match(11)) {
                u = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                let x2 = this.state.startLoc;
                if (c = this.state.startLoc, o.push(this.parseParenItem(this.parseRestBinding(), x2)), !this.checkCommaAfterRest(41)) break;
              } else o.push(this.parseMaybeAssignAllowIn(h, this.parseParenItem));
            }
            let f = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = i, this.state.inFSharpPipelineDirectBody = r;
            let d = this.startNodeAt(e);
            return t && this.shouldParseArrow(o) && (d = this.parseArrow(d)) ? (this.checkDestructuringPrivate(h), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(d, o, false), d) : (this.expressionScope.exit(), o.length || this.unexpected(this.state.lastTokStartLoc), u && this.unexpected(u), c && this.unexpected(c), this.checkExpressionErrors(h, true), this.toReferencedListDeep(o, true), o.length > 1 ? (s = this.startNodeAt(n), s.expressions = o, this.finishNode(s, "SequenceExpression"), this.resetEndLocation(s, f)) : s = o[0], this.wrapParenthesis(e, s));
          }
          wrapParenthesis(t, e) {
            if (!(this.optionFlags & 512)) return this.addExtra(e, "parenthesized", true), this.addExtra(e, "parenStart", t.index), this.takeSurroundingComments(e, t.index, this.state.lastTokEndLoc.index), e;
            let s = this.startNodeAt(t);
            return s.expression = e, this.finishNode(s, "ParenthesizedExpression");
          }
          shouldParseArrow(t) {
            return !this.canInsertSemicolon();
          }
          parseArrow(t) {
            if (this.eat(19)) return t;
          }
          parseParenItem(t, e) {
            return t;
          }
          parseNewOrNewTarget() {
            let t = this.startNode();
            if (this.next(), this.match(16)) {
              let e = this.createIdentifier(this.startNodeAtNode(t), "new");
              this.next();
              let s = this.parseMetaProperty(t, e, "target");
              return !this.scope.inNonArrowFunction && !this.scope.inClass && !(this.optionFlags & 4) && this.raise(p.UnexpectedNewTarget, s), s;
            }
            return this.parseNew(t);
          }
          parseNew(t) {
            if (this.parseNewCallee(t), this.eat(10)) {
              let e = this.parseExprList(11);
              this.toReferencedList(e), t.arguments = e;
            } else t.arguments = [];
            return this.finishNode(t, "NewExpression");
          }
          parseNewCallee(t) {
            let e = this.match(83), s = this.parseNoCallExpr();
            t.callee = s, e && (s.type === "Import" || s.type === "ImportExpression") && this.raise(p.ImportCallNotNewExpression, s);
          }
          parseTemplateElement(t) {
            let { start: e, startLoc: s, end: i, value: r } = this.state, n = e + 1, o = this.startNodeAt(v(s, 1));
            r === null && (t || this.raise(p.InvalidEscapeSequenceTemplate, v(this.state.firstInvalidTemplateEscapePos, 1)));
            let h = this.match(24), l = h ? -1 : -2, c = i + l;
            o.value = { raw: this.input.slice(n, c).replace(/\r\n?/g, `
`), cooked: r === null ? null : r.slice(1, l) }, o.tail = h, this.next();
            let u = this.finishNode(o, "TemplateElement");
            return this.resetEndLocation(u, v(this.state.lastTokEndLoc, l)), u;
          }
          parseTemplate(t) {
            let e = this.startNode(), s = this.parseTemplateElement(t), i = [s], r = [];
            for (; !s.tail; ) r.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), i.push(s = this.parseTemplateElement(t));
            return e.expressions = r, e.quasis = i, this.finishNode(e, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(t, e, s, i) {
            s && this.expectPlugin("recordAndTuple");
            let r = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            let n = /* @__PURE__ */ Object.create(null), o = true, h = this.startNode();
            for (h.properties = [], this.next(); !this.match(t); ) {
              if (o) o = false;
              else if (this.expect(12), this.match(t)) {
                this.addTrailingCommaExtraToNode(h);
                break;
              }
              let c;
              e ? c = this.parseBindingProperty() : (c = this.parsePropertyDefinition(i), this.checkProto(c, s, n, i)), s && !this.isObjectProperty(c) && c.type !== "SpreadElement" && this.raise(p.InvalidRecordProperty, c), c.shorthand && this.addExtra(c, "shorthand", true), h.properties.push(c);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = r;
            let l = "ObjectExpression";
            return e ? l = "ObjectPattern" : s && (l = "RecordExpression"), this.finishNode(h, l);
          }
          addTrailingCommaExtraToNode(t) {
            this.addExtra(t, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(t, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(t) {
            return !t.computed && t.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(t) {
            let e = [];
            if (this.match(26)) for (this.hasPlugin("decorators") && this.raise(p.UnsupportedPropertyDecorator, this.state.startLoc); this.match(26); ) e.push(this.parseDecorator());
            let s = this.startNode(), i = false, r = false, n;
            if (this.match(21)) return e.length && this.unexpected(), this.parseSpread();
            e.length && (s.decorators = e, e = []), s.method = false, t && (n = this.state.startLoc);
            let o = this.eat(55);
            this.parsePropertyNamePrefixOperator(s);
            let h = this.state.containsEsc;
            if (this.parsePropertyName(s, t), !o && !h && this.maybeAsyncOrAccessorProp(s)) {
              let { key: l } = s, c = l.name;
              c === "async" && !this.hasPrecedingLineBreak() && (i = true, this.resetPreviousNodeTrailingComments(l), o = this.eat(55), this.parsePropertyName(s)), (c === "get" || c === "set") && (r = true, this.resetPreviousNodeTrailingComments(l), s.kind = c, this.match(55) && (o = true, this.raise(p.AccessorIsGenerator, this.state.curPosition(), { kind: c }), this.next()), this.parsePropertyName(s));
            }
            return this.parseObjPropValue(s, n, o, i, false, r, t);
          }
          getGetterSetterExpectedParamCount(t) {
            return t.kind === "get" ? 0 : 1;
          }
          getObjectOrClassMethodParams(t) {
            return t.params;
          }
          checkGetterSetterParams(t) {
            var e;
            let s = this.getGetterSetterExpectedParamCount(t), i = this.getObjectOrClassMethodParams(t);
            i.length !== s && this.raise(t.kind === "get" ? p.BadGetterArity : p.BadSetterArity, t), t.kind === "set" && ((e = i[i.length - 1]) == null ? void 0 : e.type) === "RestElement" && this.raise(p.BadSetterRestParameter, t);
          }
          parseObjectMethod(t, e, s, i, r) {
            if (r) {
              let n = this.parseMethod(t, e, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(n), n;
            }
            if (s || e || this.match(10)) return i && this.unexpected(), t.kind = "method", t.method = true, this.parseMethod(t, e, s, false, false, "ObjectMethod");
          }
          parseObjectProperty(t, e, s, i) {
            if (t.shorthand = false, this.eat(14)) return t.value = s ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(i), this.finishNode(t, "ObjectProperty");
            if (!t.computed && t.key.type === "Identifier") {
              if (this.checkReservedWord(t.key.name, t.key.loc.start, true, false), s) t.value = this.parseMaybeDefault(e, U2(t.key));
              else if (this.match(29)) {
                let r = this.state.startLoc;
                i != null ? i.shorthandAssignLoc === null && (i.shorthandAssignLoc = r) : this.raise(p.InvalidCoverInitializedName, r), t.value = this.parseMaybeDefault(e, U2(t.key));
              } else t.value = U2(t.key);
              return t.shorthand = true, this.finishNode(t, "ObjectProperty");
            }
          }
          parseObjPropValue(t, e, s, i, r, n, o) {
            let h = this.parseObjectMethod(t, s, i, r, n) || this.parseObjectProperty(t, e, r, o);
            return h || this.unexpected(), h;
          }
          parsePropertyName(t, e) {
            if (this.eat(0)) t.computed = true, t.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              let { type: s, value: i } = this.state, r;
              if (D(s)) r = this.parseIdentifier(true);
              else switch (s) {
                case 135:
                  r = this.parseNumericLiteral(i);
                  break;
                case 134:
                  r = this.parseStringLiteral(i);
                  break;
                case 136:
                  r = this.parseBigIntLiteral(i);
                  break;
                case 139: {
                  let n = this.state.startLoc;
                  e != null ? e.privateKeyLoc === null && (e.privateKeyLoc = n) : this.raise(p.UnexpectedPrivateField, n), r = this.parsePrivateName();
                  break;
                }
                default:
                  if (s === 137) {
                    r = this.parseDecimalLiteral(i);
                    break;
                  }
                  this.unexpected();
              }
              t.key = r, s !== 139 && (t.computed = false);
            }
          }
          initFunction(t, e) {
            t.id = null, t.generator = false, t.async = e;
          }
          parseMethod(t, e, s, i, r, n, o = false) {
            this.initFunction(t, s), t.generator = e, this.scope.enter(18 | (o ? 64 : 0) | (r ? 32 : 0)), this.prodParam.enter(Ee2(s, t.generator)), this.parseFunctionParams(t, i);
            let h = this.parseFunctionBodyAndFinish(t, n, true);
            return this.prodParam.exit(), this.scope.exit(), h;
          }
          parseArrayLike(t, e, s, i) {
            s && this.expectPlugin("recordAndTuple");
            let r = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            let n = this.startNode();
            return this.next(), n.elements = this.parseExprList(t, !s, i, n), this.state.inFSharpPipelineDirectBody = r, this.finishNode(n, s ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(t, e, s, i) {
            this.scope.enter(6);
            let r = Ee2(s, false);
            !this.match(5) && this.prodParam.hasIn && (r |= 8), this.prodParam.enter(r), this.initFunction(t, s);
            let n = this.state.maybeInArrowParameters;
            return e && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(t, e, i)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(t, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = n, this.finishNode(t, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(t, e, s) {
            this.toAssignableList(e, s, false), t.params = e;
          }
          parseFunctionBodyAndFinish(t, e, s = false) {
            return this.parseFunctionBody(t, false, s), this.finishNode(t, e);
          }
          parseFunctionBody(t, e, s = false) {
            let i = e && !this.match(5);
            if (this.expressionScope.enter(Zt2()), i) t.body = this.parseMaybeAssign(), this.checkParams(t, false, e, false);
            else {
              let r = this.state.strict, n = this.state.labels;
              this.state.labels = [], this.prodParam.enter(this.prodParam.currentFlags() | 4), t.body = this.parseBlock(true, false, (o) => {
                let h = !this.isSimpleParamList(t.params);
                o && h && this.raise(p.IllegalLanguageModeDirective, (t.kind === "method" || t.kind === "constructor") && t.key ? t.key.loc.end : t);
                let l = !r && this.state.strict;
                this.checkParams(t, !this.state.strict && !e && !s && !h, e, l), this.state.strict && t.id && this.checkIdentifier(t.id, 65, l);
              }), this.prodParam.exit(), this.state.labels = n;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(t) {
            return t.type === "Identifier";
          }
          isSimpleParamList(t) {
            for (let e = 0, s = t.length; e < s; e++) if (!this.isSimpleParameter(t[e])) return false;
            return true;
          }
          checkParams(t, e, s, i = true) {
            let r = !e && /* @__PURE__ */ new Set(), n = { type: "FormalParameters" };
            for (let o of t.params) this.checkLVal(o, n, 5, r, i);
          }
          parseExprList(t, e, s, i) {
            let r = [], n = true;
            for (; !this.eat(t); ) {
              if (n) n = false;
              else if (this.expect(12), this.match(t)) {
                i && this.addTrailingCommaExtraToNode(i), this.next();
                break;
              }
              r.push(this.parseExprListItem(e, s));
            }
            return r;
          }
          parseExprListItem(t, e, s) {
            let i;
            if (this.match(12)) t || this.raise(p.UnexpectedToken, this.state.curPosition(), { unexpected: "," }), i = null;
            else if (this.match(21)) {
              let r = this.state.startLoc;
              i = this.parseParenItem(this.parseSpread(e), r);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), s || this.raise(p.UnexpectedArgumentPlaceholder, this.state.startLoc);
              let r = this.startNode();
              this.next(), i = this.finishNode(r, "ArgumentPlaceholder");
            } else i = this.parseMaybeAssignAllowIn(e, this.parseParenItem);
            return i;
          }
          parseIdentifier(t) {
            let e = this.startNode(), s = this.parseIdentifierName(t);
            return this.createIdentifier(e, s);
          }
          createIdentifier(t, e) {
            return t.name = e, t.loc.identifierName = e, this.finishNode(t, "Identifier");
          }
          parseIdentifierName(t) {
            let e, { startLoc: s, type: i } = this.state;
            D(i) ? e = this.state.value : this.unexpected();
            let r = ri2(i);
            return t ? r && this.replaceToken(132) : this.checkReservedWord(e, s, r, false), this.next(), e;
          }
          checkReservedWord(t, e, s, i) {
            if (t.length > 10 || !Si2(t)) return;
            if (s && Ti2(t)) {
              this.raise(p.UnexpectedKeyword, e, { keyword: t });
              return;
            }
            if ((this.state.strict ? i ? Xt2 : Jt2 : Ht2)(t, this.inModule)) {
              this.raise(p.UnexpectedReservedWord, e, { reservedWord: t });
              return;
            } else if (t === "yield") {
              if (this.prodParam.hasYield) {
                this.raise(p.YieldBindingIdentifier, e);
                return;
              }
            } else if (t === "await") {
              if (this.prodParam.hasAwait) {
                this.raise(p.AwaitBindingIdentifier, e);
                return;
              }
              if (this.scope.inStaticBlock) {
                this.raise(p.AwaitBindingIdentifierInStaticBlock, e);
                return;
              }
              this.expressionScope.recordAsyncArrowParametersError(e);
            } else if (t === "arguments" && this.scope.inClassAndNotInNonArrowFunction) {
              this.raise(p.ArgumentsInClass, e);
              return;
            }
          }
          recordAwaitIfAllowed() {
            let t = this.prodParam.hasAwait || this.optionFlags & 1 && !this.scope.inFunction;
            return t && !this.scope.inFunction && (this.state.hasTopLevelAwait = true), t;
          }
          parseAwait(t) {
            let e = this.startNodeAt(t);
            return this.expressionScope.recordParameterInitializerError(p.AwaitExpressionFormalParameter, e), this.eat(55) && this.raise(p.ObsoleteAwaitStar, e), !this.scope.inFunction && !(this.optionFlags & 1) && (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (e.argument = this.parseMaybeUnary(null, true)), this.finishNode(e, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak()) return true;
            let { type: t } = this.state;
            return t === 53 || t === 10 || t === 0 || Ne2(t) || t === 102 && !this.state.containsEsc || t === 138 || t === 56 || this.hasPlugin("v8intrinsic") && t === 54;
          }
          parseYield() {
            let t = this.startNode();
            this.expressionScope.recordParameterInitializerError(p.YieldInParameter, t), this.next();
            let e = false, s = null;
            if (!this.hasPrecedingLineBreak()) switch (e = this.eat(55), this.state.type) {
              case 13:
              case 140:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!e) break;
              default:
                s = this.parseMaybeAssign();
            }
            return t.delegate = e, t.argument = s, this.finishNode(t, "YieldExpression");
          }
          parseImportCall(t) {
            if (this.next(), t.source = this.parseMaybeAssignAllowIn(), t.options = null, this.eat(12) && !this.match(11) && (t.options = this.parseMaybeAssignAllowIn(), this.eat(12) && !this.match(11))) {
              do
                this.parseMaybeAssignAllowIn();
              while (this.eat(12) && !this.match(11));
              this.raise(p.ImportCallArity, t);
            }
            return this.expect(11), this.finishNode(t, "ImportExpression");
          }
          checkPipelineAtInfixOperator(t, e) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && t.type === "SequenceExpression" && this.raise(p.PipelineHeadSequenceExpression, e);
          }
          parseSmartPipelineBodyInStyle(t, e) {
            if (this.isSimpleReference(t)) {
              let s = this.startNodeAt(e);
              return s.callee = t, this.finishNode(s, "PipelineBareFunction");
            } else {
              let s = this.startNodeAt(e);
              return this.checkSmartPipeTopicBodyEarlyErrors(e), s.expression = t, this.finishNode(s, "PipelineTopicExpression");
            }
          }
          isSimpleReference(t) {
            switch (t.type) {
              case "MemberExpression":
                return !t.computed && this.isSimpleReference(t.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(t) {
            if (this.match(19)) throw this.raise(p.PipelineBodyNoArrow, this.state.startLoc);
            this.topicReferenceWasUsedInCurrentContext() || this.raise(p.PipelineTopicUnused, t);
          }
          withTopicBindingContext(t) {
            let e = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return t();
            } finally {
              this.state.topicContext = e;
            }
          }
          withSmartMixTopicForbiddingContext(t) {
            if (this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) {
              let e = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return t();
              } finally {
                this.state.topicContext = e;
              }
            } else return t();
          }
          withSoloAwaitPermittingContext(t) {
            let e = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return t();
            } finally {
              this.state.soloAwait = e;
            }
          }
          allowInAnd(t) {
            let e = this.prodParam.currentFlags();
            if (8 & ~e) {
              this.prodParam.enter(e | 8);
              try {
                return t();
              } finally {
                this.prodParam.exit();
              }
            }
            return t();
          }
          disallowInAnd(t) {
            let e = this.prodParam.currentFlags();
            if (8 & e) {
              this.prodParam.enter(e & -9);
              try {
                return t();
              } finally {
                this.prodParam.exit();
              }
            }
            return t();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(t) {
            let e = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            let s = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            let i = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), e, t);
            return this.state.inFSharpPipelineDirectBody = s, i;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            let t = this.startNode();
            this.next(), this.match(5) || this.unexpected(null, 5);
            let e = this.startNodeAt(this.state.endLoc);
            this.next();
            let s = this.initializeScopes(true);
            this.enterInitialScopes();
            try {
              t.body = this.parseProgram(e, 8, "module");
            } finally {
              s();
            }
            return this.finishNode(t, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(t) {
          }
        }, $e = { kind: 1 }, er2 = { kind: 2 }, tr2 = /[\uD800-\uDFFF]/u, ze2 = /in(?:stanceof)?/y;
        function sr2(a, t, e) {
          for (let s = 0; s < a.length; s++) {
            let i = a[s], { type: r } = i;
            if (typeof r == "number") {
              {
                if (r === 139) {
                  let { loc: n, start: o, value: h, end: l } = i, c = o + 1, u = v(n.start, 1);
                  a.splice(s, 1, new M2({ type: F(27), value: "#", start: o, end: c, startLoc: n.start, endLoc: u }), new M2({ type: F(132), value: h, start: c, end: l, startLoc: u, endLoc: n.end })), s++;
                  continue;
                }
                if (Ne2(r)) {
                  let { loc: n, start: o, value: h, end: l } = i, c = o + 1, u = v(n.start, 1), f;
                  t.charCodeAt(o - e) === 96 ? f = new M2({ type: F(22), value: "`", start: o, end: c, startLoc: n.start, endLoc: u }) : f = new M2({ type: F(8), value: "}", start: o, end: c, startLoc: n.start, endLoc: u });
                  let d, x2, S2, N2;
                  r === 24 ? (x2 = l - 1, S2 = v(n.end, -1), d = h === null ? null : h.slice(1, -1), N2 = new M2({ type: F(22), value: "`", start: x2, end: l, startLoc: S2, endLoc: n.end })) : (x2 = l - 2, S2 = v(n.end, -2), d = h === null ? null : h.slice(1, -2), N2 = new M2({ type: F(23), value: "${", start: x2, end: l, startLoc: S2, endLoc: n.end })), a.splice(s, 1, f, new M2({ type: F(20), value: d, start: c, end: x2, startLoc: u, endLoc: S2 }), N2), s += 2;
                  continue;
                }
              }
              i.type = F(r);
            }
          }
          return a;
        }
        var ht2 = class extends ot2 {
          parseTopLevel(t, e) {
            return t.program = this.parseProgram(e), t.comments = this.comments, this.optionFlags & 128 && (t.tokens = sr2(this.tokens, this.input, this.startIndex)), this.finishNode(t, "File");
          }
          parseProgram(t, e = 140, s = this.options.sourceType) {
            if (t.sourceType = s, t.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(t, true, true, e), this.inModule) {
              if (!(this.optionFlags & 32) && this.scope.undefinedExports.size > 0) for (let [r, n] of Array.from(this.scope.undefinedExports)) this.raise(p.ModuleExportUndefined, n, { localName: r });
              this.addExtra(t, "topLevelAwait", this.state.hasTopLevelAwait);
            }
            let i;
            return e === 140 ? i = this.finishNode(t, "Program") : i = this.finishNodeAt(t, "Program", v(this.state.startLoc, -1)), i;
          }
          stmtToDirective(t) {
            let e = t;
            e.type = "Directive", e.value = e.expression, delete e.expression;
            let s = e.value, i = s.value, r = this.input.slice(this.offsetToSourcePos(s.start), this.offsetToSourcePos(s.end)), n = s.value = r.slice(1, -1);
            return this.addExtra(s, "raw", r), this.addExtra(s, "rawValue", n), this.addExtra(s, "expressionValue", i), s.type = "DirectiveLiteral", e;
          }
          parseInterpreterDirective() {
            if (!this.match(28)) return null;
            let t = this.startNode();
            return t.value = this.state.value, this.next(), this.finishNode(t, "InterpreterDirective");
          }
          isLet() {
            return this.isContextual(100) ? this.hasFollowingBindingAtom() : false;
          }
          chStartsBindingIdentifier(t, e) {
            if (R2(t)) {
              if (ze2.lastIndex = e, ze2.test(this.input)) {
                let s = this.codePointAtPos(ze2.lastIndex);
                if (!Y2(s) && s !== 92) return false;
              }
              return true;
            } else return t === 92;
          }
          chStartsBindingPattern(t) {
            return t === 91 || t === 123;
          }
          hasFollowingBindingAtom() {
            let t = this.nextTokenStart(), e = this.codePointAtPos(t);
            return this.chStartsBindingPattern(e) || this.chStartsBindingIdentifier(e, t);
          }
          hasInLineFollowingBindingIdentifierOrBrace() {
            let t = this.nextTokenInLineStart(), e = this.codePointAtPos(t);
            return e === 123 || this.chStartsBindingIdentifier(e, t);
          }
          startsUsingForOf() {
            let { type: t, containsEsc: e } = this.lookahead();
            if (t === 102 && !e) return false;
            if (E(t) && !this.hasFollowingLineBreak()) return this.expectPlugin("explicitResourceManagement"), true;
          }
          startsAwaitUsing() {
            let t = this.nextTokenInLineStart();
            if (this.isUnparsedContextual(t, "using")) {
              t = this.nextTokenInLineStartSince(t + 5);
              let e = this.codePointAtPos(t);
              if (this.chStartsBindingIdentifier(e, t)) return this.expectPlugin("explicitResourceManagement"), true;
            }
            return false;
          }
          parseModuleItem() {
            return this.parseStatementLike(15);
          }
          parseStatementListItem() {
            return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
          }
          parseStatementOrSloppyAnnexBFunctionDeclaration(t = false) {
            let e = 0;
            return this.options.annexB && !this.state.strict && (e |= 4, t && (e |= 8)), this.parseStatementLike(e);
          }
          parseStatement() {
            return this.parseStatementLike(0);
          }
          parseStatementLike(t) {
            let e = null;
            return this.match(26) && (e = this.parseDecorators(true)), this.parseStatementContent(t, e);
          }
          parseStatementContent(t, e) {
            let s = this.state.type, i = this.startNode(), r = !!(t & 2), n = !!(t & 4), o = t & 1;
            switch (s) {
              case 60:
                return this.parseBreakContinueStatement(i, true);
              case 63:
                return this.parseBreakContinueStatement(i, false);
              case 64:
                return this.parseDebuggerStatement(i);
              case 90:
                return this.parseDoWhileStatement(i);
              case 91:
                return this.parseForStatement(i);
              case 68:
                if (this.lookaheadCharCode() === 46) break;
                return n || this.raise(this.state.strict ? p.StrictFunction : this.options.annexB ? p.SloppyFunctionAnnexB : p.SloppyFunction, this.state.startLoc), this.parseFunctionStatement(i, false, !r && n);
              case 80:
                return r || this.unexpected(), this.parseClass(this.maybeTakeDecorators(e, i), true);
              case 69:
                return this.parseIfStatement(i);
              case 70:
                return this.parseReturnStatement(i);
              case 71:
                return this.parseSwitchStatement(i);
              case 72:
                return this.parseThrowStatement(i);
              case 73:
                return this.parseTryStatement(i);
              case 96:
                if (!this.state.containsEsc && this.startsAwaitUsing()) return this.recordAwaitIfAllowed() ? r || this.raise(p.UnexpectedLexicalDeclaration, i) : this.raise(p.AwaitUsingNotInAsyncContext, i), this.next(), this.parseVarStatement(i, "await using");
                break;
              case 107:
                if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) break;
                return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(p.UnexpectedUsingDeclaration, this.state.startLoc) : r || this.raise(p.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(i, "using");
              case 100: {
                if (this.state.containsEsc) break;
                let c = this.nextTokenStart(), u = this.codePointAtPos(c);
                if (u !== 91 && (!r && this.hasFollowingLineBreak() || !this.chStartsBindingIdentifier(u, c) && u !== 123)) break;
              }
              case 75:
                r || this.raise(p.UnexpectedLexicalDeclaration, this.state.startLoc);
              case 74: {
                let c = this.state.value;
                return this.parseVarStatement(i, c);
              }
              case 92:
                return this.parseWhileStatement(i);
              case 76:
                return this.parseWithStatement(i);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(i);
              case 83: {
                let c = this.lookaheadCharCode();
                if (c === 40 || c === 46) break;
              }
              case 82: {
                !(this.optionFlags & 8) && !o && this.raise(p.UnexpectedImportExport, this.state.startLoc), this.next();
                let c;
                return s === 83 ? (c = this.parseImport(i), c.type === "ImportDeclaration" && (!c.importKind || c.importKind === "value") && (this.sawUnambiguousESM = true)) : (c = this.parseExport(i, e), (c.type === "ExportNamedDeclaration" && (!c.exportKind || c.exportKind === "value") || c.type === "ExportAllDeclaration" && (!c.exportKind || c.exportKind === "value") || c.type === "ExportDefaultDeclaration") && (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(c), c;
              }
              default:
                if (this.isAsyncFunction()) return r || this.raise(p.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(i, true, !r && n);
            }
            let h = this.state.value, l = this.parseExpression();
            return E(s) && l.type === "Identifier" && this.eat(14) ? this.parseLabeledStatement(i, h, l, t) : this.parseExpressionStatement(i, l, e);
          }
          assertModuleNodeAllowed(t) {
            !(this.optionFlags & 8) && !this.inModule && this.raise(p.ImportOutsideModule, t);
          }
          decoratorsEnabledBeforeExport() {
            return this.hasPlugin("decorators-legacy") ? true : this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
          }
          maybeTakeDecorators(t, e, s) {
            if (t) {
              var i;
              (i = e.decorators) != null && i.length ? (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") != "boolean" && this.raise(p.DecoratorsBeforeAfterExport, e.decorators[0]), e.decorators.unshift(...t)) : e.decorators = t, this.resetStartLocationFromNode(e, t[0]), s && this.resetStartLocationFromNode(s, e);
            }
            return e;
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(t) {
            let e = [];
            do
              e.push(this.parseDecorator());
            while (this.match(26));
            if (this.match(82)) t || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(p.DecoratorExportClass, this.state.startLoc);
            else if (!this.canHaveLeadingDecorator()) throw this.raise(p.UnexpectedLeadingDecorator, this.state.startLoc);
            return e;
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            let t = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              let e = this.state.startLoc, s;
              if (this.match(10)) {
                let i = this.state.startLoc;
                this.next(), s = this.parseExpression(), this.expect(11), s = this.wrapParenthesis(i, s);
                let r = this.state.startLoc;
                t.expression = this.parseMaybeDecoratorArguments(s, i), this.getPluginOption("decorators", "allowCallParenthesized") === false && t.expression !== s && this.raise(p.DecoratorArgumentsOutsideParentheses, r);
              } else {
                for (s = this.parseIdentifier(false); this.eat(16); ) {
                  let i = this.startNodeAt(e);
                  i.object = s, this.match(139) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), i.property = this.parsePrivateName()) : i.property = this.parseIdentifier(true), i.computed = false, s = this.finishNode(i, "MemberExpression");
                }
                t.expression = this.parseMaybeDecoratorArguments(s, e);
              }
            } else t.expression = this.parseExprSubscripts();
            return this.finishNode(t, "Decorator");
          }
          parseMaybeDecoratorArguments(t, e) {
            if (this.eat(10)) {
              let s = this.startNodeAt(e);
              return s.callee = t, s.arguments = this.parseCallExpressionArguments(11), this.toReferencedList(s.arguments), this.finishNode(s, "CallExpression");
            }
            return t;
          }
          parseBreakContinueStatement(t, e) {
            return this.next(), this.isLineTerminator() ? t.label = null : (t.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(t, e), this.finishNode(t, e ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(t, e) {
            let s;
            for (s = 0; s < this.state.labels.length; ++s) {
              let i = this.state.labels[s];
              if ((t.label == null || i.name === t.label.name) && (i.kind != null && (e || i.kind === 1) || t.label && e)) break;
            }
            if (s === this.state.labels.length) {
              let i = e ? "BreakStatement" : "ContinueStatement";
              this.raise(p.IllegalBreakContinue, t, { type: i });
            }
          }
          parseDebuggerStatement(t) {
            return this.next(), this.semicolon(), this.finishNode(t, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            let t = this.parseExpression();
            return this.expect(11), t;
          }
          parseDoWhileStatement(t) {
            return this.next(), this.state.labels.push($e), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), t.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(t, "DoWhileStatement");
          }
          parseForStatement(t) {
            this.next(), this.state.labels.push($e);
            let e = null;
            if (this.isContextual(96) && this.recordAwaitIfAllowed() && (e = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10), this.match(13)) return e !== null && this.unexpected(e), this.parseFor(t, null);
            let s = this.isContextual(100);
            {
              let h = this.isContextual(96) && this.startsAwaitUsing(), l = h || this.isContextual(107) && this.startsUsingForOf(), c = s && this.hasFollowingBindingAtom() || l;
              if (this.match(74) || this.match(75) || c) {
                let u = this.startNode(), f;
                h ? (f = "await using", this.recordAwaitIfAllowed() || this.raise(p.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) : f = this.state.value, this.next(), this.parseVar(u, true, f);
                let d = this.finishNode(u, "VariableDeclaration"), x2 = this.match(58);
                return x2 && l && this.raise(p.ForInUsing, d), (x2 || this.isContextual(102)) && d.declarations.length === 1 ? this.parseForIn(t, d, e) : (e !== null && this.unexpected(e), this.parseFor(t, d));
              }
            }
            let i = this.isContextual(95), r = new Z2(), n = this.parseExpression(true, r), o = this.isContextual(102);
            if (o && (s && this.raise(p.ForOfLet, n), e === null && i && n.type === "Identifier" && this.raise(p.ForOfAsync, n)), o || this.match(58)) {
              this.checkDestructuringPrivate(r), this.toAssignable(n, true);
              let h = o ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(n, { type: h }), this.parseForIn(t, n, e);
            } else this.checkExpressionErrors(r, true);
            return e !== null && this.unexpected(e), this.parseFor(t, n);
          }
          parseFunctionStatement(t, e, s) {
            return this.next(), this.parseFunction(t, 1 | (s ? 2 : 0) | (e ? 8 : 0));
          }
          parseIfStatement(t) {
            return this.next(), t.test = this.parseHeaderExpression(), t.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), t.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(t, "IfStatement");
          }
          parseReturnStatement(t) {
            return !this.prodParam.hasReturn && !(this.optionFlags & 2) && this.raise(p.IllegalReturn, this.state.startLoc), this.next(), this.isLineTerminator() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, "ReturnStatement");
          }
          parseSwitchStatement(t) {
            this.next(), t.discriminant = this.parseHeaderExpression();
            let e = t.cases = [];
            this.expect(5), this.state.labels.push(er2), this.scope.enter(0);
            let s;
            for (let i; !this.match(8); ) if (this.match(61) || this.match(65)) {
              let r = this.match(61);
              s && this.finishNode(s, "SwitchCase"), e.push(s = this.startNode()), s.consequent = [], this.next(), r ? s.test = this.parseExpression() : (i && this.raise(p.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), i = true, s.test = null), this.expect(14);
            } else s ? s.consequent.push(this.parseStatementListItem()) : this.unexpected();
            return this.scope.exit(), s && this.finishNode(s, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(t, "SwitchStatement");
          }
          parseThrowStatement(t) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(p.NewlineAfterThrow, this.state.lastTokEndLoc), t.argument = this.parseExpression(), this.semicolon(), this.finishNode(t, "ThrowStatement");
          }
          parseCatchClauseParam() {
            let t = this.parseBindingAtom();
            return this.scope.enter(this.options.annexB && t.type === "Identifier" ? 8 : 0), this.checkLVal(t, { type: "CatchClause" }, 9), t;
          }
          parseTryStatement(t) {
            if (this.next(), t.block = this.parseBlock(), t.handler = null, this.match(62)) {
              let e = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), e.param = this.parseCatchClauseParam(), this.expect(11)) : (e.param = null, this.scope.enter(0)), e.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), t.handler = this.finishNode(e, "CatchClause");
            }
            return t.finalizer = this.eat(67) ? this.parseBlock() : null, !t.handler && !t.finalizer && this.raise(p.NoCatchOrFinally, t), this.finishNode(t, "TryStatement");
          }
          parseVarStatement(t, e, s = false) {
            return this.next(), this.parseVar(t, false, e, s), this.semicolon(), this.finishNode(t, "VariableDeclaration");
          }
          parseWhileStatement(t) {
            return this.next(), t.test = this.parseHeaderExpression(), this.state.labels.push($e), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(t, "WhileStatement");
          }
          parseWithStatement(t) {
            return this.state.strict && this.raise(p.StrictWith, this.state.startLoc), this.next(), t.object = this.parseHeaderExpression(), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(t, "WithStatement");
          }
          parseEmptyStatement(t) {
            return this.next(), this.finishNode(t, "EmptyStatement");
          }
          parseLabeledStatement(t, e, s, i) {
            for (let n of this.state.labels) n.name === e && this.raise(p.LabelRedeclaration, s, { labelName: e });
            let r = oi2(this.state.type) ? 1 : this.match(71) ? 2 : null;
            for (let n = this.state.labels.length - 1; n >= 0; n--) {
              let o = this.state.labels[n];
              if (o.statementStart === t.start) o.statementStart = this.sourceToOffsetPos(this.state.start), o.kind = r;
              else break;
            }
            return this.state.labels.push({ name: e, kind: r, statementStart: this.sourceToOffsetPos(this.state.start) }), t.body = i & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement(), this.state.labels.pop(), t.label = s, this.finishNode(t, "LabeledStatement");
          }
          parseExpressionStatement(t, e, s) {
            return t.expression = e, this.semicolon(), this.finishNode(t, "ExpressionStatement");
          }
          parseBlock(t = false, e = true, s) {
            let i = this.startNode();
            return t && this.state.strictErrors.clear(), this.expect(5), e && this.scope.enter(0), this.parseBlockBody(i, t, false, 8, s), e && this.scope.exit(), this.finishNode(i, "BlockStatement");
          }
          isValidDirective(t) {
            return t.type === "ExpressionStatement" && t.expression.type === "StringLiteral" && !t.expression.extra.parenthesized;
          }
          parseBlockBody(t, e, s, i, r) {
            let n = t.body = [], o = t.directives = [];
            this.parseBlockOrModuleBlockBody(n, e ? o : void 0, s, i, r);
          }
          parseBlockOrModuleBlockBody(t, e, s, i, r) {
            let n = this.state.strict, o = false, h = false;
            for (; !this.match(i); ) {
              let l = s ? this.parseModuleItem() : this.parseStatementListItem();
              if (e && !h) {
                if (this.isValidDirective(l)) {
                  let c = this.stmtToDirective(l);
                  e.push(c), !o && c.value.value === "use strict" && (o = true, this.setStrict(true));
                  continue;
                }
                h = true, this.state.strictErrors.clear();
              }
              t.push(l);
            }
            r == null || r.call(this, o), n || this.setStrict(false), this.next();
          }
          parseFor(t, e) {
            return t.init = e, this.semicolon(false), t.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), t.update = this.match(11) ? null : this.parseExpression(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, "ForStatement");
          }
          parseForIn(t, e, s) {
            let i = this.match(58);
            return this.next(), i ? s !== null && this.unexpected(s) : t.await = s !== null, e.type === "VariableDeclaration" && e.declarations[0].init != null && (!i || !this.options.annexB || this.state.strict || e.kind !== "var" || e.declarations[0].id.type !== "Identifier") && this.raise(p.ForInOfLoopInitializer, e, { type: i ? "ForInStatement" : "ForOfStatement" }), e.type === "AssignmentPattern" && this.raise(p.InvalidLhs, e, { ancestor: { type: "ForStatement" } }), t.left = e, t.right = i ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), t.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, i ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(t, e, s, i = false) {
            let r = t.declarations = [];
            for (t.kind = s; ; ) {
              let n = this.startNode();
              if (this.parseVarId(n, s), n.init = this.eat(29) ? e ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, n.init === null && !i && (n.id.type !== "Identifier" && !(e && (this.match(58) || this.isContextual(102))) ? this.raise(p.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: "destructuring" }) : (s === "const" || s === "using" || s === "await using") && !(this.match(58) || this.isContextual(102)) && this.raise(p.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: s })), r.push(this.finishNode(n, "VariableDeclarator")), !this.eat(12)) break;
            }
            return t;
          }
          parseVarId(t, e) {
            let s = this.parseBindingAtom();
            (e === "using" || e === "await using") && (s.type === "ArrayPattern" || s.type === "ObjectPattern") && this.raise(p.UsingDeclarationHasBindingPattern, s.loc.start), this.checkLVal(s, { type: "VariableDeclarator" }, e === "var" ? 5 : 8201), t.id = s;
          }
          parseAsyncFunctionExpression(t) {
            return this.parseFunction(t, 8);
          }
          parseFunction(t, e = 0) {
            let s = e & 2, i = !!(e & 1), r = i && !(e & 4), n = !!(e & 8);
            this.initFunction(t, n), this.match(55) && (s && this.raise(p.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), t.generator = true), i && (t.id = this.parseFunctionId(r));
            let o = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(Ee2(n, t.generator)), i || (t.id = this.parseFunctionId()), this.parseFunctionParams(t, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(t, i ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), i && !s && this.registerFunctionStatementId(t), this.state.maybeInArrowParameters = o, t;
          }
          parseFunctionId(t) {
            return t || E(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(t, e) {
            this.expect(10), this.expressionScope.enter(Li2()), t.params = this.parseBindingList(11, 41, 2 | (e ? 4 : 0)), this.expressionScope.exit();
          }
          registerFunctionStatementId(t) {
            t.id && this.scope.declareName(t.id.name, !this.options.annexB || this.state.strict || t.generator || t.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, t.id.loc.start);
          }
          parseClass(t, e, s) {
            this.next();
            let i = this.state.strict;
            return this.state.strict = true, this.parseClassId(t, e, s), this.parseClassSuper(t), t.body = this.parseClassBody(!!t.superClass, i), this.finishNode(t, e ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          nameIsConstructor(t) {
            return t.type === "Identifier" && t.name === "constructor" || t.type === "StringLiteral" && t.value === "constructor";
          }
          isNonstaticConstructor(t) {
            return !t.computed && !t.static && this.nameIsConstructor(t.key);
          }
          parseClassBody(t, e) {
            this.classScope.enter();
            let s = { hadConstructor: false, hadSuperClass: t }, i = [], r = this.startNode();
            if (r.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (i.length > 0) throw this.raise(p.DecoratorSemicolon, this.state.lastTokEndLoc);
                  continue;
                }
                if (this.match(26)) {
                  i.push(this.parseDecorator());
                  continue;
                }
                let n = this.startNode();
                i.length && (n.decorators = i, this.resetStartLocationFromNode(n, i[0]), i = []), this.parseClassMember(r, n, s), n.kind === "constructor" && n.decorators && n.decorators.length > 0 && this.raise(p.DecoratorConstructor, n);
              }
            }), this.state.strict = e, this.next(), i.length) throw this.raise(p.TrailingDecorator, this.state.startLoc);
            return this.classScope.exit(), this.finishNode(r, "ClassBody");
          }
          parseClassMemberFromModifier(t, e) {
            let s = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              let i = e;
              return i.kind = "method", i.computed = false, i.key = s, i.static = false, this.pushClassMethod(t, i, false, false, false, false), true;
            } else if (this.isClassProperty()) {
              let i = e;
              return i.computed = false, i.key = s, i.static = false, t.body.push(this.parseClassProperty(i)), true;
            }
            return this.resetPreviousNodeTrailingComments(s), false;
          }
          parseClassMember(t, e, s) {
            let i = this.isContextual(106);
            if (i) {
              if (this.parseClassMemberFromModifier(t, e)) return;
              if (this.eat(5)) {
                this.parseClassStaticBlock(t, e);
                return;
              }
            }
            this.parseClassMemberWithIsStatic(t, e, s, i);
          }
          parseClassMemberWithIsStatic(t, e, s, i) {
            let r = e, n = e, o = e, h = e, l = e, c = r, u = r;
            if (e.static = i, this.parsePropertyNamePrefixOperator(e), this.eat(55)) {
              c.kind = "method";
              let w2 = this.match(139);
              if (this.parseClassElementName(c), w2) {
                this.pushClassPrivateMethod(t, n, true, false);
                return;
              }
              this.isNonstaticConstructor(r) && this.raise(p.ConstructorIsGenerator, r.key), this.pushClassMethod(t, r, true, false, false, false);
              return;
            }
            let f = !this.state.containsEsc && E(this.state.type), d = this.parseClassElementName(e), x2 = f ? d.name : null, S2 = this.isPrivateName(d), N2 = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(u), this.isClassMethod()) {
              if (c.kind = "method", S2) {
                this.pushClassPrivateMethod(t, n, false, false);
                return;
              }
              let w2 = this.isNonstaticConstructor(r), I2 = false;
              w2 && (r.kind = "constructor", s.hadConstructor && !this.hasPlugin("typescript") && this.raise(p.DuplicateConstructor, d), w2 && this.hasPlugin("typescript") && e.override && this.raise(p.OverrideOnConstructor, d), s.hadConstructor = true, I2 = s.hadSuperClass), this.pushClassMethod(t, r, false, false, w2, I2);
            } else if (this.isClassProperty()) S2 ? this.pushClassPrivateProperty(t, h) : this.pushClassProperty(t, o);
            else if (x2 === "async" && !this.isLineTerminator()) {
              this.resetPreviousNodeTrailingComments(d);
              let w2 = this.eat(55);
              u.optional && this.unexpected(N2), c.kind = "method";
              let I2 = this.match(139);
              this.parseClassElementName(c), this.parsePostMemberNameModifiers(u), I2 ? this.pushClassPrivateMethod(t, n, w2, true) : (this.isNonstaticConstructor(r) && this.raise(p.ConstructorIsAsync, r.key), this.pushClassMethod(t, r, w2, true, false, false));
            } else if ((x2 === "get" || x2 === "set") && !(this.match(55) && this.isLineTerminator())) {
              this.resetPreviousNodeTrailingComments(d), c.kind = x2;
              let w2 = this.match(139);
              this.parseClassElementName(r), w2 ? this.pushClassPrivateMethod(t, n, false, false) : (this.isNonstaticConstructor(r) && this.raise(p.ConstructorIsAccessor, r.key), this.pushClassMethod(t, r, false, false, false, false)), this.checkGetterSetterParams(r);
            } else if (x2 === "accessor" && !this.isLineTerminator()) {
              this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(d);
              let w2 = this.match(139);
              this.parseClassElementName(o), this.pushClassAccessorProperty(t, l, w2);
            } else this.isLineTerminator() ? S2 ? this.pushClassPrivateProperty(t, h) : this.pushClassProperty(t, o) : this.unexpected();
          }
          parseClassElementName(t) {
            let { type: e, value: s } = this.state;
            if ((e === 132 || e === 134) && t.static && s === "prototype" && this.raise(p.StaticPrototype, this.state.startLoc), e === 139) {
              s === "constructor" && this.raise(p.ConstructorClassPrivateField, this.state.startLoc);
              let i = this.parsePrivateName();
              return t.key = i, i;
            }
            return this.parsePropertyName(t), t.key;
          }
          parseClassStaticBlock(t, e) {
            var s;
            this.scope.enter(208);
            let i = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            let r = e.body = [];
            this.parseBlockOrModuleBlockBody(r, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = i, t.body.push(this.finishNode(e, "StaticBlock")), (s = e.decorators) != null && s.length && this.raise(p.DecoratorStaticBlock, e);
          }
          pushClassProperty(t, e) {
            !e.computed && this.nameIsConstructor(e.key) && this.raise(p.ConstructorClassField, e.key), t.body.push(this.parseClassProperty(e));
          }
          pushClassPrivateProperty(t, e) {
            let s = this.parseClassPrivateProperty(e);
            t.body.push(s), this.classScope.declarePrivateName(this.getPrivateNameSV(s.key), 0, s.key.loc.start);
          }
          pushClassAccessorProperty(t, e, s) {
            !s && !e.computed && this.nameIsConstructor(e.key) && this.raise(p.ConstructorClassField, e.key);
            let i = this.parseClassAccessorProperty(e);
            t.body.push(i), s && this.classScope.declarePrivateName(this.getPrivateNameSV(i.key), 0, i.key.loc.start);
          }
          pushClassMethod(t, e, s, i, r, n) {
            t.body.push(this.parseMethod(e, s, i, r, n, "ClassMethod", true));
          }
          pushClassPrivateMethod(t, e, s, i) {
            let r = this.parseMethod(e, s, i, false, false, "ClassPrivateMethod", true);
            t.body.push(r);
            let n = r.kind === "get" ? r.static ? 6 : 2 : r.kind === "set" ? r.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(r, n);
          }
          declareClassPrivateMethodInScope(t, e) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(t.key), e, t.key.loc.start);
          }
          parsePostMemberNameModifiers(t) {
          }
          parseClassPrivateProperty(t) {
            return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassPrivateProperty");
          }
          parseClassProperty(t) {
            return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassProperty");
          }
          parseClassAccessorProperty(t) {
            return this.parseInitializer(t), this.semicolon(), this.finishNode(t, "ClassAccessorProperty");
          }
          parseInitializer(t) {
            this.scope.enter(80), this.expressionScope.enter(Zt2()), this.prodParam.enter(0), t.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(t, e, s, i = 8331) {
            if (E(this.state.type)) t.id = this.parseIdentifier(), e && this.declareNameFromIdentifier(t.id, i);
            else if (s || !e) t.id = null;
            else throw this.raise(p.MissingClassName, this.state.startLoc);
          }
          parseClassSuper(t) {
            t.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(t, e) {
            let s = this.parseMaybeImportPhase(t, true), i = this.maybeParseExportDefaultSpecifier(t, s), r = !i || this.eat(12), n = r && this.eatExportStar(t), o = n && this.maybeParseExportNamespaceSpecifier(t), h = r && (!o || this.eat(12)), l = i || n;
            if (n && !o) {
              if (i && this.unexpected(), e) throw this.raise(p.UnsupportedDecoratorExport, t);
              return this.parseExportFrom(t, true), this.finishNode(t, "ExportAllDeclaration");
            }
            let c = this.maybeParseExportNamedSpecifiers(t);
            i && r && !n && !c && this.unexpected(null, 5), o && h && this.unexpected(null, 98);
            let u;
            if (l || c) {
              if (u = false, e) throw this.raise(p.UnsupportedDecoratorExport, t);
              this.parseExportFrom(t, l);
            } else u = this.maybeParseExportDeclaration(t);
            if (l || c || u) {
              var f;
              let d = t;
              if (this.checkExport(d, true, false, !!d.source), ((f = d.declaration) == null ? void 0 : f.type) === "ClassDeclaration") this.maybeTakeDecorators(e, d.declaration, d);
              else if (e) throw this.raise(p.UnsupportedDecoratorExport, t);
              return this.finishNode(d, "ExportNamedDeclaration");
            }
            if (this.eat(65)) {
              let d = t, x2 = this.parseExportDefaultExpression();
              if (d.declaration = x2, x2.type === "ClassDeclaration") this.maybeTakeDecorators(e, x2, d);
              else if (e) throw this.raise(p.UnsupportedDecoratorExport, t);
              return this.checkExport(d, true, true), this.finishNode(d, "ExportDefaultDeclaration");
            }
            this.unexpected(null, 5);
          }
          eatExportStar(t) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(t, e) {
            if (e || this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom", e == null ? void 0 : e.loc.start);
              let s = e || this.parseIdentifier(true), i = this.startNodeAtNode(s);
              return i.exported = s, t.specifiers = [this.finishNode(i, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(t) {
            if (this.isContextual(93)) {
              var e;
              (e = t).specifiers != null || (e.specifiers = []);
              let i = this.startNodeAt(this.state.lastTokStartLoc);
              return this.next(), i.exported = this.parseModuleExportName(), t.specifiers.push(this.finishNode(i, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(t) {
            if (this.match(5)) {
              let e = t;
              e.specifiers || (e.specifiers = []);
              let s = e.exportKind === "type";
              return e.specifiers.push(...this.parseExportSpecifiers(s)), e.source = null, e.declaration = null, this.hasPlugin("importAssertions") && (e.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(t) {
            return this.shouldParseExportDeclaration() ? (t.specifiers = [], t.source = null, this.hasPlugin("importAssertions") && (t.assertions = []), t.declaration = this.parseExportDeclaration(t), true) : false;
          }
          isAsyncFunction() {
            if (!this.isContextual(95)) return false;
            let t = this.nextTokenInLineStart();
            return this.isUnparsedContextual(t, "function");
          }
          parseExportDefaultExpression() {
            let t = this.startNode();
            if (this.match(68)) return this.next(), this.parseFunction(t, 5);
            if (this.isAsyncFunction()) return this.next(), this.next(), this.parseFunction(t, 13);
            if (this.match(80)) return this.parseClass(t, true, true);
            if (this.match(26)) return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true && this.raise(p.DecoratorBeforeExport, this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
            if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(p.UnsupportedDefaultExport, this.state.startLoc);
            let e = this.parseMaybeAssignAllowIn();
            return this.semicolon(), e;
          }
          parseExportDeclaration(t) {
            return this.match(80) ? this.parseClass(this.startNode(), true, false) : this.parseStatementListItem();
          }
          isExportDefaultSpecifier() {
            let { type: t } = this.state;
            if (E(t)) {
              if (t === 95 && !this.state.containsEsc || t === 100) return false;
              if ((t === 130 || t === 129) && !this.state.containsEsc) {
                let { type: i } = this.lookahead();
                if (E(i) && i !== 98 || i === 5) return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65)) return false;
            let e = this.nextTokenStart(), s = this.isUnparsedContextual(e, "from");
            if (this.input.charCodeAt(e) === 44 || E(this.state.type) && s) return true;
            if (this.match(65) && s) {
              let i = this.input.charCodeAt(this.nextTokenStartSince(e + 4));
              return i === 34 || i === 39;
            }
            return false;
          }
          parseExportFrom(t, e) {
            this.eatContextual(98) ? (t.source = this.parseImportSource(), this.checkExport(t), this.maybeParseImportAttributes(t), this.checkJSONModuleImport(t)) : e && this.unexpected(), this.semicolon();
          }
          shouldParseExportDeclaration() {
            let { type: t } = this.state;
            return t === 26 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (this.getPluginOption("decorators", "decoratorsBeforeExport") === true && this.raise(p.DecoratorBeforeExport, this.state.startLoc), true) : this.isContextual(107) ? (this.raise(p.UsingDeclarationExport, this.state.startLoc), true) : this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(p.UsingDeclarationExport, this.state.startLoc), true) : t === 74 || t === 75 || t === 68 || t === 80 || this.isLet() || this.isAsyncFunction();
          }
          checkExport(t, e, s, i) {
            if (e) {
              var r;
              if (s) {
                if (this.checkDuplicateExports(t, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var n;
                  let o = t.declaration;
                  o.type === "Identifier" && o.name === "from" && o.end - o.start === 4 && !((n = o.extra) != null && n.parenthesized) && this.raise(p.ExportDefaultFromAsIdentifier, o);
                }
              } else if ((r = t.specifiers) != null && r.length) for (let o of t.specifiers) {
                let { exported: h } = o, l = h.type === "Identifier" ? h.name : h.value;
                if (this.checkDuplicateExports(o, l), !i && o.local) {
                  let { local: c } = o;
                  c.type !== "Identifier" ? this.raise(p.ExportBindingIsString, o, { localName: c.value, exportName: l }) : (this.checkReservedWord(c.name, c.loc.start, true, false), this.scope.checkLocalExport(c));
                }
              }
              else if (t.declaration) {
                let o = t.declaration;
                if (o.type === "FunctionDeclaration" || o.type === "ClassDeclaration") {
                  let { id: h } = o;
                  if (!h) throw new Error("Assertion failure");
                  this.checkDuplicateExports(t, h.name);
                } else if (o.type === "VariableDeclaration") for (let h of o.declarations) this.checkDeclaration(h.id);
              }
            }
          }
          checkDeclaration(t) {
            if (t.type === "Identifier") this.checkDuplicateExports(t, t.name);
            else if (t.type === "ObjectPattern") for (let e of t.properties) this.checkDeclaration(e);
            else if (t.type === "ArrayPattern") for (let e of t.elements) e && this.checkDeclaration(e);
            else t.type === "ObjectProperty" ? this.checkDeclaration(t.value) : t.type === "RestElement" ? this.checkDeclaration(t.argument) : t.type === "AssignmentPattern" && this.checkDeclaration(t.left);
          }
          checkDuplicateExports(t, e) {
            this.exportedIdentifiers.has(e) && (e === "default" ? this.raise(p.DuplicateDefaultExport, t) : this.raise(p.DuplicateExport, t, { exportName: e })), this.exportedIdentifiers.add(e);
          }
          parseExportSpecifiers(t) {
            let e = [], s = true;
            for (this.expect(5); !this.eat(8); ) {
              if (s) s = false;
              else if (this.expect(12), this.eat(8)) break;
              let i = this.isContextual(130), r = this.match(134), n = this.startNode();
              n.local = this.parseModuleExportName(), e.push(this.parseExportSpecifier(n, r, t, i));
            }
            return e;
          }
          parseExportSpecifier(t, e, s, i) {
            return this.eatContextual(93) ? t.exported = this.parseModuleExportName() : e ? t.exported = Fi2(t.local) : t.exported || (t.exported = U2(t.local)), this.finishNode(t, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(134)) {
              let t = this.parseStringLiteral(this.state.value), e = tr2.exec(t.value);
              return e && this.raise(p.ModuleExportNameHasLoneSurrogate, t, { surrogateCharCode: e[0].charCodeAt(0) }), t;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(t) {
            return t.assertions != null ? t.assertions.some(({ key: e, value: s }) => s.value === "json" && (e.type === "Identifier" ? e.name === "type" : e.value === "type")) : false;
          }
          checkImportReflection(t) {
            let { specifiers: e } = t, s = e.length === 1 ? e[0].type : null;
            if (t.phase === "source") s !== "ImportDefaultSpecifier" && this.raise(p.SourcePhaseImportRequiresDefault, e[0].loc.start);
            else if (t.phase === "defer") s !== "ImportNamespaceSpecifier" && this.raise(p.DeferImportRequiresNamespace, e[0].loc.start);
            else if (t.module) {
              var i;
              s !== "ImportDefaultSpecifier" && this.raise(p.ImportReflectionNotBinding, e[0].loc.start), ((i = t.assertions) == null ? void 0 : i.length) > 0 && this.raise(p.ImportReflectionHasAssertion, e[0].loc.start);
            }
          }
          checkJSONModuleImport(t) {
            if (this.isJSONModuleImport(t) && t.type !== "ExportAllDeclaration") {
              let { specifiers: e } = t;
              if (e != null) {
                let s = e.find((i) => {
                  let r;
                  if (i.type === "ExportSpecifier" ? r = i.local : i.type === "ImportSpecifier" && (r = i.imported), r !== void 0) return r.type === "Identifier" ? r.name !== "default" : r.value !== "default";
                });
                s !== void 0 && this.raise(p.ImportJSONBindingNotDefault, s.loc.start);
              }
            }
          }
          isPotentialImportPhase(t) {
            return t ? false : this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
          }
          applyImportPhase(t, e, s, i) {
            e || (s === "module" ? (this.expectPlugin("importReflection", i), t.module = true) : this.hasPlugin("importReflection") && (t.module = false), s === "source" ? (this.expectPlugin("sourcePhaseImports", i), t.phase = "source") : s === "defer" ? (this.expectPlugin("deferredImportEvaluation", i), t.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (t.phase = null));
          }
          parseMaybeImportPhase(t, e) {
            if (!this.isPotentialImportPhase(e)) return this.applyImportPhase(t, e, null), null;
            let s = this.parseIdentifier(true), { type: i } = this.state;
            return (D(i) ? i !== 98 || this.lookaheadCharCode() === 102 : i !== 12) ? (this.resetPreviousIdentifierLeadingComments(s), this.applyImportPhase(t, e, s.name, s.loc.start), null) : (this.applyImportPhase(t, e, null), s);
          }
          isPrecedingIdImportPhase(t) {
            let { type: e } = this.state;
            return E(e) ? e !== 98 || this.lookaheadCharCode() === 102 : e !== 12;
          }
          parseImport(t) {
            return this.match(134) ? this.parseImportSourceAndAttributes(t) : this.parseImportSpecifiersAndAfter(t, this.parseMaybeImportPhase(t, false));
          }
          parseImportSpecifiersAndAfter(t, e) {
            t.specifiers = [];
            let i = !this.maybeParseDefaultImportSpecifier(t, e) || this.eat(12), r = i && this.maybeParseStarImportSpecifier(t);
            return i && !r && this.parseNamedImportSpecifiers(t), this.expectContextual(98), this.parseImportSourceAndAttributes(t);
          }
          parseImportSourceAndAttributes(t) {
            return t.specifiers != null || (t.specifiers = []), t.source = this.parseImportSource(), this.maybeParseImportAttributes(t), this.checkImportReflection(t), this.checkJSONModuleImport(t), this.semicolon(), this.finishNode(t, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(134) || this.unexpected(), this.parseExprAtom();
          }
          parseImportSpecifierLocal(t, e, s) {
            e.local = this.parseIdentifier(), t.specifiers.push(this.finishImportSpecifier(e, s));
          }
          finishImportSpecifier(t, e, s = 8201) {
            return this.checkLVal(t.local, { type: e }, s), this.finishNode(t, e);
          }
          parseImportAttributes() {
            this.expect(5);
            let t = [], e = /* @__PURE__ */ new Set();
            do {
              if (this.match(8)) break;
              let s = this.startNode(), i = this.state.value;
              if (e.has(i) && this.raise(p.ModuleAttributesWithDuplicateKeys, this.state.startLoc, { key: i }), e.add(i), this.match(134) ? s.key = this.parseStringLiteral(i) : s.key = this.parseIdentifier(true), this.expect(14), !this.match(134)) throw this.raise(p.ModuleAttributeInvalidValue, this.state.startLoc);
              s.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(s, "ImportAttribute"));
            } while (this.eat(12));
            return this.expect(8), t;
          }
          parseModuleAttributes() {
            let t = [], e = /* @__PURE__ */ new Set();
            do {
              let s = this.startNode();
              if (s.key = this.parseIdentifier(true), s.key.name !== "type" && this.raise(p.ModuleAttributeDifferentFromType, s.key), e.has(s.key.name) && this.raise(p.ModuleAttributesWithDuplicateKeys, s.key, { key: s.key.name }), e.add(s.key.name), this.expect(14), !this.match(134)) throw this.raise(p.ModuleAttributeInvalidValue, this.state.startLoc);
              s.value = this.parseStringLiteral(this.state.value), t.push(this.finishNode(s, "ImportAttribute"));
            } while (this.eat(12));
            return t;
          }
          maybeParseImportAttributes(t) {
            let e;
            var s = false;
            if (this.match(76)) {
              if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) return;
              this.next(), this.hasPlugin("moduleAttributes") ? e = this.parseModuleAttributes() : e = this.parseImportAttributes(), s = true;
            } else this.isContextual(94) && !this.hasPrecedingLineBreak() ? (!this.hasPlugin("deprecatedImportAssert") && !this.hasPlugin("importAssertions") && this.raise(p.ImportAttributesUseAssert, this.state.startLoc), this.hasPlugin("importAssertions") || this.addExtra(t, "deprecatedAssertSyntax", true), this.next(), e = this.parseImportAttributes()) : e = [];
            !s && this.hasPlugin("importAssertions") ? t.assertions = e : t.attributes = e;
          }
          maybeParseDefaultImportSpecifier(t, e) {
            if (e) {
              let s = this.startNodeAtNode(e);
              return s.local = e, t.specifiers.push(this.finishImportSpecifier(s, "ImportDefaultSpecifier")), true;
            } else if (D(this.state.type)) return this.parseImportSpecifierLocal(t, this.startNode(), "ImportDefaultSpecifier"), true;
            return false;
          }
          maybeParseStarImportSpecifier(t) {
            if (this.match(55)) {
              let e = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(t, e, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(t) {
            let e = true;
            for (this.expect(5); !this.eat(8); ) {
              if (e) e = false;
              else {
                if (this.eat(14)) throw this.raise(p.DestructureNamedImport, this.state.startLoc);
                if (this.expect(12), this.eat(8)) break;
              }
              let s = this.startNode(), i = this.match(134), r = this.isContextual(130);
              s.imported = this.parseModuleExportName();
              let n = this.parseImportSpecifier(s, i, t.importKind === "type" || t.importKind === "typeof", r, void 0);
              t.specifiers.push(n);
            }
          }
          parseImportSpecifier(t, e, s, i, r) {
            if (this.eatContextual(93)) t.local = this.parseIdentifier();
            else {
              let { imported: n } = t;
              if (e) throw this.raise(p.ImportBindingIsString, t, { importName: n.value });
              this.checkReservedWord(n.name, t.loc.start, true, true), t.local || (t.local = U2(n));
            }
            return this.finishImportSpecifier(t, "ImportSpecifier", r);
          }
          isThisParam(t) {
            return t.type === "Identifier" && t.name === "this";
          }
        }, ve2 = class extends ht2 {
          constructor(t, e, s) {
            t = Zs(t), super(t, e), this.options = t, this.initializeScopes(), this.plugins = s, this.filename = t.sourceFilename, this.startIndex = t.startIndex;
            let i = 0;
            t.allowAwaitOutsideFunction && (i |= 1), t.allowReturnOutsideFunction && (i |= 2), t.allowImportExportEverywhere && (i |= 8), t.allowSuperOutsideMethod && (i |= 16), t.allowUndeclaredExports && (i |= 32), t.allowNewTargetOutsideFunction && (i |= 4), t.ranges && (i |= 64), t.tokens && (i |= 128), t.createImportExpressions && (i |= 256), t.createParenthesizedExpressions && (i |= 512), t.errorRecovery && (i |= 1024), t.attachComment && (i |= 2048), t.annexB && (i |= 4096), this.optionFlags = i;
          }
          getScopeHandler() {
            return fe2;
          }
          parse() {
            this.enterInitialScopes();
            let t = this.startNode(), e = this.startNode();
            return this.nextToken(), t.errors = null, this.parseTopLevel(t, e), t.errors = this.state.errors, t.comments.length = this.state.commentsLen, t;
          }
        };
        function ir2(a, t) {
          var e;
          if (((e = t) == null ? void 0 : e.sourceType) === "unambiguous") {
            t = Object.assign({}, t);
            try {
              t.sourceType = "module";
              let s = ce2(t, a), i = s.parse();
              if (s.sawUnambiguousESM) return i;
              if (s.ambiguousScriptDifferentAst) try {
                return t.sourceType = "script", ce2(t, a).parse();
              } catch {
              }
              else i.program.sourceType = "script";
              return i;
            } catch (s) {
              try {
                return t.sourceType = "script", ce2(t, a).parse();
              } catch {
              }
              throw s;
            }
          } else return ce2(t, a).parse();
        }
        function rr2(a, t) {
          let e = ce2(t, a);
          return e.options.strictMode && (e.state.strict = true), e.getExpression();
        }
        function ar2(a) {
          let t = {};
          for (let e of Object.keys(a)) t[e] = F(a[e]);
          return t;
        }
        var nr2 = ar2(ii2);
        function ce2(a, t) {
          let e = ve2, s = /* @__PURE__ */ new Map();
          if (a != null && a.plugins) {
            for (let i of a.plugins) {
              let r, n;
              typeof i == "string" ? r = i : [r, n] = i, s.has(r) || s.set(r, n || {});
            }
            Qi2(s), e = or2(s);
          }
          return new e(a, t, s);
        }
        var zt2 = /* @__PURE__ */ new Map();
        function or2(a) {
          let t = [];
          for (let i of Zi2) a.has(i) && t.push(i);
          let e = t.join("|"), s = zt2.get(e);
          if (!s) {
            s = ve2;
            for (let i of t) s = is2[i](s);
            zt2.set(e, s);
          }
          return s;
        }
        me2.parse = ir2;
        me2.parseExpression = rr2;
        me2.tokTypes = nr2;
      });
      var Jr2 = {};
      zs(Jr2, { parsers: () => Hr2 });
      var Re2 = It2(gt2());
      function Le2(a) {
        return (t, e, s) => {
          let i = !!(s != null && s.backwards);
          if (e === false) return false;
          let { length: r } = t, n = e;
          for (; n >= 0 && n < r; ) {
            let o = t.charAt(n);
            if (a instanceof RegExp) {
              if (!a.test(o)) return n;
            } else if (!a.includes(o)) return n;
            i ? n-- : n++;
          }
          return n === -1 || n === r ? n : false;
        };
      }
      var rs = Le2(" 	"), as = Le2(/[^\n\r]/u);
      function hr2(a, t) {
        if (t === false) return false;
        if (a.charAt(t) === "/" && a.charAt(t + 1) === "*") {
          for (let e = t + 2; e < a.length; ++e) if (a.charAt(e) === "*" && a.charAt(e + 1) === "/") return e + 2;
        }
        return t;
      }
      var ns = hr2;
      function lr2(a, t, e) {
        let s = !!(e != null && e.backwards);
        if (t === false) return false;
        let i = a.charAt(t);
        if (s) {
          if (a.charAt(t - 1) === "\r" && i === `
`) return t - 2;
          if (i === `
` || i === "\r" || i === "\u2028" || i === "\u2029") return t - 1;
        } else {
          if (i === "\r" && a.charAt(t + 1) === `
`) return t + 2;
          if (i === `
` || i === "\r" || i === "\u2028" || i === "\u2029") return t + 1;
        }
        return t;
      }
      var os = lr2;
      function cr2(a, t) {
        return t === false ? false : a.charAt(t) === "/" && a.charAt(t + 1) === "/" ? as(a, t) : t;
      }
      var hs = cr2;
      function pr2(a, t) {
        let e = null, s = t;
        for (; s !== e; ) e = s, s = rs(a, s), s = ns(a, s), s = hs(a, s), s = os(a, s);
        return s;
      }
      var ls = pr2;
      function ur(a) {
        let t = [];
        for (let e of a) try {
          return e();
        } catch (s) {
          t.push(s);
        }
        throw Object.assign(new Error("All combinations failed"), { errors: t });
      }
      var cs = ur;
      function fr2(a) {
        if (!a.startsWith("#!")) return "";
        let t = a.indexOf(`
`);
        return t === -1 ? a : a.slice(0, t);
      }
      var De2 = fr2;
      var dr2 = (a, t, e) => {
        if (!(a && t == null)) return Array.isArray(t) || typeof t == "string" ? t[e < 0 ? t.length + e : e] : t.at(e);
      }, Tt2 = dr2;
      function mr2(a) {
        return Array.isArray(a) && a.length > 0;
      }
      var ye2 = mr2;
      function L2(a) {
        var s, i, r;
        let t = ((s = a.range) == null ? void 0 : s[0]) ?? a.start, e = (r = ((i = a.declaration) == null ? void 0 : i.decorators) ?? a.decorators) == null ? void 0 : r[0];
        return e ? Math.min(L2(e), t) : t;
      }
      function j(a) {
        var t;
        return ((t = a.range) == null ? void 0 : t[1]) ?? a.end;
      }
      function yr2(a) {
        let t = new Set(a);
        return (e) => t.has(e == null ? void 0 : e.type);
      }
      var ps = yr2;
      var xr2 = ps(["Block", "CommentBlock", "MultiLine"]), xe2 = xr2;
      function Pr2(a) {
        let t = `*${a.value}*`.split(`
`);
        return t.length > 1 && t.every((e) => e.trimStart()[0] === "*");
      }
      var bt2 = Pr2;
      function gr2(a) {
        return xe2(a) && a.value[0] === "*" && /@(?:type|satisfies)\b/u.test(a.value);
      }
      var us = gr2;
      var Pe2 = null;
      function ge2(a) {
        if (Pe2 !== null && typeof Pe2.property) {
          let t = Pe2;
          return Pe2 = ge2.prototype = null, t;
        }
        return Pe2 = ge2.prototype = a ?? /* @__PURE__ */ Object.create(null), new ge2();
      }
      var Tr = 10;
      for (let a = 0; a <= Tr; a++) ge2();
      function At2(a) {
        return ge2(a);
      }
      function br2(a, t = "type") {
        At2(a);
        function e(s) {
          let i = s[t], r = a[i];
          if (!Array.isArray(r)) throw Object.assign(new Error(`Missing visitor keys for '${i}'.`), { node: s });
          return r;
        }
        return e;
      }
      var fs = br2;
      var ds = { ArrayExpression: ["elements"], AssignmentExpression: ["left", "right"], BinaryExpression: ["left", "right"], InterpreterDirective: [], Directive: ["value"], DirectiveLiteral: [], BlockStatement: ["directives", "body"], BreakStatement: ["label"], CallExpression: ["callee", "arguments", "typeParameters", "typeArguments"], CatchClause: ["param", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExpressionStatement: ["expression"], File: ["program"], ForInStatement: ["left", "right", "body"], ForStatement: ["init", "test", "update", "body"], FunctionDeclaration: ["id", "typeParameters", "params", "predicate", "returnType", "body"], FunctionExpression: ["id", "typeParameters", "params", "returnType", "body"], Identifier: ["typeAnnotation", "decorators"], IfStatement: ["test", "consequent", "alternate"], LabeledStatement: ["label", "body"], StringLiteral: [], NumericLiteral: [], NullLiteral: [], BooleanLiteral: [], RegExpLiteral: [], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], NewExpression: ["callee", "arguments", "typeParameters", "typeArguments"], Program: ["directives", "body"], ObjectExpression: ["properties"], ObjectMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], ObjectProperty: ["key", "value", "decorators"], RestElement: ["argument", "typeAnnotation", "decorators"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], ParenthesizedExpression: ["expression"], SwitchCase: ["test", "consequent"], SwitchStatement: ["discriminant", "cases"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], AssignmentPattern: ["left", "right", "decorators", "typeAnnotation"], ArrayPattern: ["elements", "typeAnnotation", "decorators"], ArrowFunctionExpression: ["typeParameters", "params", "predicate", "returnType", "body"], ClassBody: ["body"], ClassExpression: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body", "superTypeArguments"], ClassDeclaration: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body", "superTypeArguments"], ExportAllDeclaration: ["source", "attributes", "exported"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source", "attributes"], ExportSpecifier: ["local", "exported"], ForOfStatement: ["left", "right", "body"], ImportDeclaration: ["specifiers", "source", "attributes"], ImportDefaultSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], ImportExpression: ["source", "options"], MetaProperty: ["meta", "property"], ClassMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], ObjectPattern: ["properties", "typeAnnotation", "decorators"], SpreadElement: ["argument"], Super: [], TaggedTemplateExpression: ["tag", "typeParameters", "quasi", "typeArguments"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], YieldExpression: ["argument"], AwaitExpression: ["argument"], BigIntLiteral: [], ExportNamespaceSpecifier: ["exported"], OptionalMemberExpression: ["object", "property"], OptionalCallExpression: ["callee", "arguments", "typeParameters", "typeArguments"], ClassProperty: ["decorators", "variance", "key", "typeAnnotation", "value"], ClassAccessorProperty: ["decorators", "key", "typeAnnotation", "value"], ClassPrivateProperty: ["decorators", "variance", "key", "typeAnnotation", "value"], ClassPrivateMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], PrivateName: ["id"], StaticBlock: ["body"], AnyTypeAnnotation: [], ArrayTypeAnnotation: ["elementType"], BooleanTypeAnnotation: [], BooleanLiteralTypeAnnotation: [], NullLiteralTypeAnnotation: [], ClassImplements: ["id", "typeParameters"], DeclareClass: ["id", "typeParameters", "extends", "mixins", "implements", "body"], DeclareFunction: ["id", "predicate"], DeclareInterface: ["id", "typeParameters", "extends", "body"], DeclareModule: ["id", "body"], DeclareModuleExports: ["typeAnnotation"], DeclareTypeAlias: ["id", "typeParameters", "right"], DeclareOpaqueType: ["id", "typeParameters", "supertype"], DeclareVariable: ["id"], DeclareExportDeclaration: ["declaration", "specifiers", "source", "attributes"], DeclareExportAllDeclaration: ["source", "attributes"], DeclaredPredicate: ["value"], ExistsTypeAnnotation: [], FunctionTypeAnnotation: ["typeParameters", "this", "params", "rest", "returnType"], FunctionTypeParam: ["name", "typeAnnotation"], GenericTypeAnnotation: ["id", "typeParameters"], InferredPredicate: [], InterfaceExtends: ["id", "typeParameters"], InterfaceDeclaration: ["id", "typeParameters", "extends", "body"], InterfaceTypeAnnotation: ["extends", "body"], IntersectionTypeAnnotation: ["types"], MixedTypeAnnotation: [], EmptyTypeAnnotation: [], NullableTypeAnnotation: ["typeAnnotation"], NumberLiteralTypeAnnotation: [], NumberTypeAnnotation: [], ObjectTypeAnnotation: ["properties", "indexers", "callProperties", "internalSlots"], ObjectTypeInternalSlot: ["id", "value"], ObjectTypeCallProperty: ["value"], ObjectTypeIndexer: ["variance", "id", "key", "value"], ObjectTypeProperty: ["key", "value", "variance"], ObjectTypeSpreadProperty: ["argument"], OpaqueType: ["id", "typeParameters", "supertype", "impltype"], QualifiedTypeIdentifier: ["qualification", "id"], StringLiteralTypeAnnotation: [], StringTypeAnnotation: [], SymbolTypeAnnotation: [], ThisTypeAnnotation: [], TupleTypeAnnotation: ["types", "elementTypes"], TypeofTypeAnnotation: ["argument", "typeArguments"], TypeAlias: ["id", "typeParameters", "right"], TypeAnnotation: ["typeAnnotation"], TypeCastExpression: ["expression", "typeAnnotation"], TypeParameter: ["bound", "default", "variance"], TypeParameterDeclaration: ["params"], TypeParameterInstantiation: ["params"], UnionTypeAnnotation: ["types"], Variance: [], VoidTypeAnnotation: [], EnumDeclaration: ["id", "body"], EnumBooleanBody: ["members"], EnumNumberBody: ["members"], EnumStringBody: ["members"], EnumSymbolBody: ["members"], EnumBooleanMember: ["id", "init"], EnumNumberMember: ["id", "init"], EnumStringMember: ["id", "init"], EnumDefaultedMember: ["id"], IndexedAccessType: ["objectType", "indexType"], OptionalIndexedAccessType: ["objectType", "indexType"], JSXAttribute: ["name", "value"], JSXClosingElement: ["name"], JSXElement: ["openingElement", "children", "closingElement"], JSXEmptyExpression: [], JSXExpressionContainer: ["expression"], JSXSpreadChild: ["expression"], JSXIdentifier: [], JSXMemberExpression: ["object", "property"], JSXNamespacedName: ["namespace", "name"], JSXOpeningElement: ["name", "typeParameters", "typeArguments", "attributes"], JSXSpreadAttribute: ["argument"], JSXText: [], JSXFragment: ["openingFragment", "children", "closingFragment"], JSXOpeningFragment: [], JSXClosingFragment: [], Noop: [], Placeholder: [], V8IntrinsicIdentifier: [], ArgumentPlaceholder: [], BindExpression: ["object", "callee"], ImportAttribute: ["key", "value"], Decorator: ["expression"], DoExpression: ["body"], ExportDefaultSpecifier: ["exported"], RecordExpression: ["properties"], TupleExpression: ["elements"], ModuleExpression: ["body"], TopicReference: [], PipelineTopicExpression: ["expression"], PipelineBareFunction: ["callee"], PipelinePrimaryTopicReference: [], TSParameterProperty: ["parameter", "decorators"], TSDeclareFunction: ["id", "typeParameters", "params", "returnType", "body"], TSDeclareMethod: ["decorators", "key", "typeParameters", "params", "returnType"], TSQualifiedName: ["left", "right"], TSCallSignatureDeclaration: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSConstructSignatureDeclaration: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSPropertySignature: ["key", "typeAnnotation"], TSMethodSignature: ["key", "typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSIndexSignature: ["parameters", "typeAnnotation"], TSAnyKeyword: [], TSBooleanKeyword: [], TSBigIntKeyword: [], TSIntrinsicKeyword: [], TSNeverKeyword: [], TSNullKeyword: [], TSNumberKeyword: [], TSObjectKeyword: [], TSStringKeyword: [], TSSymbolKeyword: [], TSUndefinedKeyword: [], TSUnknownKeyword: [], TSVoidKeyword: [], TSThisType: [], TSFunctionType: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSConstructorType: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSTypeReference: ["typeName", "typeParameters", "typeArguments"], TSTypePredicate: ["parameterName", "typeAnnotation"], TSTypeQuery: ["exprName", "typeParameters", "typeArguments"], TSTypeLiteral: ["members"], TSArrayType: ["elementType"], TSTupleType: ["elementTypes"], TSOptionalType: ["typeAnnotation"], TSRestType: ["typeAnnotation"], TSNamedTupleMember: ["label", "elementType"], TSUnionType: ["types"], TSIntersectionType: ["types"], TSConditionalType: ["checkType", "extendsType", "trueType", "falseType"], TSInferType: ["typeParameter"], TSParenthesizedType: ["typeAnnotation"], TSTypeOperator: ["typeAnnotation"], TSIndexedAccessType: ["objectType", "indexType"], TSMappedType: ["typeParameter", "nameType", "typeAnnotation"], TSTemplateLiteralType: ["quasis", "types"], TSLiteralType: ["literal"], TSExpressionWithTypeArguments: ["expression", "typeParameters"], TSInterfaceDeclaration: ["id", "typeParameters", "extends", "body"], TSInterfaceBody: ["body"], TSTypeAliasDeclaration: ["id", "typeParameters", "typeAnnotation"], TSInstantiationExpression: ["expression", "typeParameters", "typeArguments"], TSAsExpression: ["expression", "typeAnnotation"], TSSatisfiesExpression: ["expression", "typeAnnotation"], TSTypeAssertion: ["typeAnnotation", "expression"], TSEnumBody: ["members"], TSEnumDeclaration: ["id", "members"], TSEnumMember: ["id", "initializer"], TSModuleDeclaration: ["id", "body"], TSModuleBlock: ["body"], TSImportType: ["argument", "options", "qualifier", "typeParameters", "typeArguments"], TSImportEqualsDeclaration: ["id", "moduleReference"], TSExternalModuleReference: ["expression"], TSNonNullExpression: ["expression"], TSExportAssignment: ["expression"], TSNamespaceExportDeclaration: ["id"], TSTypeAnnotation: ["typeAnnotation"], TSTypeParameterInstantiation: ["params"], TSTypeParameterDeclaration: ["params"], TSTypeParameter: ["constraint", "default", "name"], ChainExpression: ["expression"], ExperimentalRestProperty: ["argument"], ExperimentalSpreadProperty: ["argument"], Literal: [], MethodDefinition: ["decorators", "key", "value"], PrivateIdentifier: [], Property: ["key", "value"], PropertyDefinition: ["decorators", "key", "typeAnnotation", "value", "variance"], AccessorProperty: ["decorators", "key", "typeAnnotation", "value"], TSAbstractAccessorProperty: ["decorators", "key", "typeAnnotation"], TSAbstractKeyword: [], TSAbstractMethodDefinition: ["key", "value"], TSAbstractPropertyDefinition: ["decorators", "key", "typeAnnotation"], TSAsyncKeyword: [], TSClassImplements: ["expression", "typeArguments", "typeParameters"], TSDeclareKeyword: [], TSEmptyBodyFunctionExpression: ["id", "typeParameters", "params", "returnType"], TSExportKeyword: [], TSInterfaceHeritage: ["expression", "typeArguments", "typeParameters"], TSPrivateKeyword: [], TSProtectedKeyword: [], TSPublicKeyword: [], TSReadonlyKeyword: [], TSStaticKeyword: [], AsConstExpression: ["expression"], AsExpression: ["expression", "typeAnnotation"], BigIntLiteralTypeAnnotation: [], BigIntTypeAnnotation: [], ComponentDeclaration: ["id", "params", "body", "typeParameters", "rendersType"], ComponentParameter: ["name", "local"], ComponentTypeAnnotation: ["params", "rest", "typeParameters", "rendersType"], ComponentTypeParameter: ["name", "typeAnnotation"], ConditionalTypeAnnotation: ["checkType", "extendsType", "trueType", "falseType"], DeclareComponent: ["id", "params", "rest", "typeParameters", "rendersType"], DeclareEnum: ["id", "body"], DeclareHook: ["id"], DeclareNamespace: ["id", "body"], EnumBigIntBody: ["members"], EnumBigIntMember: ["id", "init"], HookDeclaration: ["id", "params", "body", "typeParameters", "returnType"], HookTypeAnnotation: ["params", "returnType", "rest", "typeParameters"], InferTypeAnnotation: ["typeParameter"], KeyofTypeAnnotation: ["argument"], ObjectTypeMappedTypeProperty: ["keyTparam", "propType", "sourceType", "variance"], QualifiedTypeofIdentifier: ["qualification", "id"], TupleTypeLabeledElement: ["label", "elementType", "variance"], TupleTypeSpreadElement: ["label", "typeAnnotation"], TypeOperator: ["typeAnnotation"], TypePredicate: ["parameterName", "typeAnnotation", "asserts"], NGRoot: ["node"], NGPipeExpression: ["left", "right", "arguments"], NGChainedExpression: ["expressions"], NGEmptyExpression: [], NGMicrosyntax: ["body"], NGMicrosyntaxKey: [], NGMicrosyntaxExpression: ["expression", "alias"], NGMicrosyntaxKeyedExpression: ["key", "expression"], NGMicrosyntaxLet: ["key", "value"], NGMicrosyntaxAs: ["key", "alias"], JsExpressionRoot: ["node"], JsonRoot: ["node"], TSJSDocAllType: [], TSJSDocUnknownType: [], TSJSDocNullableType: ["typeAnnotation"], TSJSDocNonNullableType: ["typeAnnotation"], NeverTypeAnnotation: [], UndefinedTypeAnnotation: [], UnknownTypeAnnotation: [], SatisfiesExpression: ["expression", "typeAnnotation"] };
      var Ar2 = fs(ds), ms2 = Ar2;
      function St2(a, t) {
        if (!(a !== null && typeof a == "object")) return a;
        if (Array.isArray(a)) {
          for (let s = 0; s < a.length; s++) a[s] = St2(a[s], t);
          return a;
        }
        let e = ms2(a);
        for (let s = 0; s < e.length; s++) a[e[s]] = St2(a[e[s]], t);
        return t(a) || a;
      }
      var Me2 = St2;
      function Sr2(a, t) {
        let { parser: e, text: s } = t;
        if (a.type === "File" && a.program.interpreter) {
          let { program: { interpreter: i }, comments: r } = a;
          delete a.program.interpreter, r.unshift(i);
        }
        if (e === "babel") {
          let i = /* @__PURE__ */ new Set();
          a = Me2(a, (r) => {
            var n;
            (n = r.leadingComments) != null && n.some(us) && i.add(L2(r));
          }), a = Me2(a, (r) => {
            if (r.type === "ParenthesizedExpression") {
              let { expression: n } = r;
              if (n.type === "TypeCastExpression") return n.range = [...r.range], n;
              let o = L2(r);
              if (!i.has(o)) return n.extra = { ...n.extra, parenthesized: true }, n;
            }
          });
        }
        if (a = Me2(a, (i) => {
          switch (i.type) {
            case "LogicalExpression":
              if (ys(i)) return wt2(i);
              break;
            case "VariableDeclaration": {
              let r = Tt2(false, i.declarations, -1);
              r != null && r.init && s[j(r)] !== ";" && (i.range = [L2(i), j(r)]);
              break;
            }
            case "TSParenthesizedType":
              return i.typeAnnotation;
            case "TSTypeParameter":
              if (typeof i.name == "string") {
                let r = L2(i);
                i.name = { type: "Identifier", name: i.name, range: [r, r + i.name.length] };
              }
              break;
            case "TopicReference":
              a.extra = { ...a.extra, __isUsingHackPipeline: true };
              break;
            case "TSUnionType":
            case "TSIntersectionType":
              if (i.types.length === 1) return i.types[0];
              break;
          }
        }), ye2(a.comments)) {
          let i = Tt2(false, a.comments, -1);
          for (let r = a.comments.length - 2; r >= 0; r--) {
            let n = a.comments[r];
            j(n) === L2(i) && xe2(n) && xe2(i) && bt2(n) && bt2(i) && (a.comments.splice(r + 1, 1), n.value += "*//*" + i.value, n.range = [L2(n), j(i)]), i = n;
          }
        }
        return a.type === "Program" && (a.range = [0, s.length]), a;
      }
      function ys(a) {
        return a.type === "LogicalExpression" && a.right.type === "LogicalExpression" && a.operator === a.right.operator;
      }
      function wt2(a) {
        return ys(a) ? wt2({ type: "LogicalExpression", operator: a.operator, left: wt2({ type: "LogicalExpression", operator: a.operator, left: a.left, right: a.right.left, range: [L2(a.left), j(a.right.left)] }), right: a.right.right, range: [L2(a), j(a)] }) : a;
      }
      var xs = Sr2;
      function wr2(a, t) {
        let e = new SyntaxError(a + " (" + t.loc.start.line + ":" + t.loc.start.column + ")");
        return Object.assign(e, t);
      }
      var Oe2 = wr2;
      function Cr2(a) {
        let { message: t, loc: { line: e, column: s }, reasonCode: i } = a, r = a;
        (i === "MissingPlugin" || i === "MissingOneOfPlugins") && (t = "Unexpected token.", r = void 0);
        let n = ` (${e}:${s})`;
        return t.endsWith(n) && (t = t.slice(0, -n.length)), Oe2(t, { loc: { start: { line: e, column: s + 1 } }, cause: r });
      }
      var Fe2 = Cr2;
      var Er2 = (a, t, e, s) => {
        if (!(a && t == null)) return t.replaceAll ? t.replaceAll(e, s) : e.global ? t.replace(e, s) : t.split(e).join(s);
      }, ie2 = Er2;
      var Ir2 = /\*\/$/, Nr2 = /^\/\*\*?/, kr2 = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, vr2 = /(^|\s+)\/\/([^\n\r]*)/g, Ps = /^(\r?\n)+/, Lr2 = /(?:^|\r?\n) *(@[^\n\r]*?) *\r?\n *(?![^\n\r@]*\/\/[^]*)([^\s@][^\n\r@]+?) *\r?\n/g, gs = /(?:^|\r?\n) *@(\S+) *([^\n\r]*)/g, Dr2 = /(\r?\n|^) *\* ?/g, Mr2 = [];
      function Ts(a) {
        let t = a.match(kr2);
        return t ? t[0].trimStart() : "";
      }
      function bs(a) {
        let t = `
`;
        a = ie2(false, a.replace(Nr2, "").replace(Ir2, ""), Dr2, "$1");
        let e = "";
        for (; e !== a; ) e = a, a = ie2(false, a, Lr2, `${t}$1 $2${t}`);
        a = a.replace(Ps, "").trimEnd();
        let s = /* @__PURE__ */ Object.create(null), i = ie2(false, a, gs, "").replace(Ps, "").trimEnd(), r;
        for (; r = gs.exec(a); ) {
          let n = ie2(false, r[2], vr2, "");
          if (typeof s[r[1]] == "string" || Array.isArray(s[r[1]])) {
            let o = s[r[1]];
            s[r[1]] = [...Mr2, ...Array.isArray(o) ? o : [o], n];
          } else s[r[1]] = n;
        }
        return { comments: i, pragmas: s };
      }
      function Or2(a) {
        let t = De2(a);
        t && (a = a.slice(t.length + 1));
        let e = Ts(a), { pragmas: s, comments: i } = bs(e);
        return { shebang: t, text: a, pragmas: s, comments: i };
      }
      function As(a) {
        let { pragmas: t } = Or2(a);
        return Object.prototype.hasOwnProperty.call(t, "prettier") || Object.prototype.hasOwnProperty.call(t, "format");
      }
      function Fr2(a) {
        return a = typeof a == "function" ? { parse: a } : a, { astFormat: "estree", hasPragma: As, locStart: L2, locEnd: j, ...a };
      }
      var X = Fr2;
      function Br2(a) {
        let { filepath: t } = a;
        if (t) {
          if (t = t.toLowerCase(), t.endsWith(".cjs") || t.endsWith(".cts")) return "script";
          if (t.endsWith(".mjs") || t.endsWith(".mts")) return "module";
        }
      }
      var Ss = Br2;
      function Rr2(a, t) {
        let { type: e = "JsExpressionRoot", rootMarker: s, text: i } = t, { tokens: r, comments: n } = a;
        return delete a.tokens, delete a.comments, { tokens: r, comments: n, type: e, node: a, range: [0, i.length], rootMarker: s };
      }
      var Be2 = Rr2;
      var re2 = (a) => X(zr2(a)), _r2 = { sourceType: "module", allowImportExportEverywhere: true, allowReturnOutsideFunction: true, allowNewTargetOutsideFunction: true, allowSuperOutsideMethod: true, allowUndeclaredExports: true, errorRecovery: true, createParenthesizedExpressions: true, createImportExpressions: true, plugins: ["doExpressions", "exportDefaultFrom", "functionBind", "functionSent", "throwExpressions", "partialApplication", "decorators", "moduleBlocks", "asyncDoExpressions", "destructuringPrivate", "decoratorAutoAccessors", "explicitResourceManagement", "sourcePhaseImports", "deferredImportEvaluation", ["optionalChainingAssign", { version: "2023-07" }], "recordAndTuple"], tokens: true, ranges: true }, ws = "v8intrinsic", Cs = [["pipelineOperator", { proposal: "hack", topicToken: "%" }], ["pipelineOperator", { proposal: "fsharp" }]], $2 = (a, t = _r2) => ({ ...t, plugins: [...t.plugins, ...a] }), Ur2 = /@(?:no)?flow\b/u;
      function jr2(a, t) {
        var i;
        if ((i = t.filepath) != null && i.endsWith(".js.flow")) return true;
        let e = De2(a);
        e && (a = a.slice(e.length));
        let s = ls(a, 0);
        return s !== false && (a = a.slice(0, s)), Ur2.test(a);
      }
      function $r2(a, t, e) {
        let s = a(t, e), i = s.errors.find((r) => !Vr2.has(r.reasonCode));
        if (i) throw i;
        return s;
      }
      function zr2({ isExpression: a = false, optionsCombinations: t }) {
        return (e, s = {}) => {
          if ((s.parser === "babel" || s.parser === "__babel_estree") && jr2(e, s)) return s.parser = "babel-flow", Ls.parse(e, s);
          let i = t;
          (s.__babelSourceType ?? Ss(s)) === "script" && (i = i.map((l) => ({ ...l, sourceType: "script" })));
          let n = /%[A-Z]/u.test(e);
          e.includes("|>") ? i = (n ? [...Cs, ws] : Cs).flatMap((c) => i.map((u) => $2([c], u))) : n && (i = i.map((l) => $2([ws], l)));
          let o = a ? Re2.parseExpression : Re2.parse, h;
          try {
            h = cs(i.map((l) => () => $r2(o, e, l)));
          } catch ({ errors: [l] }) {
            throw Fe2(l);
          }
          return a && (h = Be2(h, { text: e, rootMarker: s.rootMarker })), xs(h, { parser: "babel", text: e });
        };
      }
      var Vr2 = /* @__PURE__ */ new Set(["StrictNumericEscape", "StrictWith", "StrictOctalLiteral", "StrictDelete", "StrictEvalArguments", "StrictEvalArgumentsBinding", "StrictFunction", "ForInOfLoopInitializer", "EmptyTypeArguments", "EmptyTypeParameters", "ConstructorHasTypeParameters", "UnsupportedParameterPropertyKind", "DecoratorExportClass", "ParamDupe", "InvalidDecimal", "RestTrailingComma", "UnsupportedParameterDecorator", "UnterminatedJsxContent", "UnexpectedReservedWord", "ModuleAttributesWithDuplicateKeys", "LineTerminatorBeforeArrow", "InvalidEscapeSequenceTemplate", "NonAbstractClassHasAbstractMethod", "OptionalTypeBeforeRequired", "PatternIsOptional", "OptionalBindingPattern", "DeclareClassFieldHasInitializer", "TypeImportCannotSpecifyDefaultAndNamed", "ConstructorClassField", "VarRedeclaration", "InvalidPrivateFieldResolution", "DuplicateExport", "ImportAttributesUseAssert"]), vs = [$2(["jsx"])], Es = re2({ optionsCombinations: vs }), Is = re2({ optionsCombinations: [$2(["jsx", "typescript"]), $2(["typescript"])] }), Ns = re2({ isExpression: true, optionsCombinations: [$2(["jsx"])] }), ks = re2({ isExpression: true, optionsCombinations: [$2(["typescript"])] }), Ls = re2({ optionsCombinations: [$2(["jsx", ["flow", { all: true }], "flowComments"])] }), qr2 = re2({ optionsCombinations: vs.map((a) => $2(["estree"], a)) }), Ds = { babel: Es, "babel-flow": Ls, "babel-ts": Is, __js_expression: Ns, __ts_expression: ks, __vue_expression: Ns, __vue_ts_expression: ks, __vue_event_binding: Es, __vue_ts_event_binding: Is, __babel_estree: qr2 };
      var Ms = It2(gt2());
      function Os(a = {}) {
        let { allowComments: t = true } = a;
        return function(s) {
          let i;
          try {
            i = (0, Ms.parseExpression)(s, { tokens: true, ranges: true, attachComment: false });
          } catch (r) {
            throw Fe2(r);
          }
          if (!t && ye2(i.comments)) throw K2(i.comments[0], "Comment");
          return ae(i), Be2(i, { type: "JsonRoot", text: s });
        };
      }
      function K2(a, t) {
        let [e, s] = [a.loc.start, a.loc.end].map(({ line: i, column: r }) => ({ line: i, column: r + 1 }));
        return Oe2(`${t} is not allowed in JSON.`, { loc: { start: e, end: s } });
      }
      function ae(a) {
        switch (a.type) {
          case "ArrayExpression":
            for (let t of a.elements) t !== null && ae(t);
            return;
          case "ObjectExpression":
            for (let t of a.properties) ae(t);
            return;
          case "ObjectProperty":
            if (a.computed) throw K2(a.key, "Computed key");
            if (a.shorthand) throw K2(a.key, "Shorthand property");
            a.key.type !== "Identifier" && ae(a.key), ae(a.value);
            return;
          case "UnaryExpression": {
            let { operator: t, argument: e } = a;
            if (t !== "+" && t !== "-") throw K2(a, `Operator '${a.operator}'`);
            if (e.type === "NumericLiteral" || e.type === "Identifier" && (e.name === "Infinity" || e.name === "NaN")) return;
            throw K2(e, `Operator '${t}' before '${e.type}'`);
          }
          case "Identifier":
            if (a.name !== "Infinity" && a.name !== "NaN" && a.name !== "undefined") throw K2(a, `Identifier '${a.name}'`);
            return;
          case "TemplateLiteral":
            if (ye2(a.expressions)) throw K2(a.expressions[0], "'TemplateLiteral' with expression");
            for (let t of a.quasis) ae(t);
            return;
          case "NullLiteral":
          case "BooleanLiteral":
          case "NumericLiteral":
          case "StringLiteral":
          case "TemplateElement":
            return;
          default:
            throw K2(a, `'${a.type}'`);
        }
      }
      var Ct2 = Os(), Kr2 = { json: X({ parse: Ct2, hasPragma() {
        return true;
      } }), json5: X(Ct2), jsonc: X(Ct2), "json-stringify": X({ parse: Os({ allowComments: false }), astFormat: "estree-json" }) }, Fs = Kr2;
      var Hr2 = { ...Ds, ...Fs };
      return Vs(Jr2);
    });
  })(babel);
  return babel.exports;
}
var babelExports = requireBabel();
function assert(message, condition) {
  if (!condition) {
    throw new Error(message);
  }
}
const BufferMap = /* @__PURE__ */ new Map();
function getBuffer(string_) {
  let buffer2 = BufferMap.get(string_);
  if (!buffer2) {
    buffer2 = Buffer.from(string_);
    BufferMap.set(string_, buffer2);
  }
  return buffer2;
}
function parse(file2, options2) {
  const preprocessor = new contentTag.Preprocessor();
  return preprocessor.parse(file2, options2);
}
function replaceContents(file2, options2) {
  const { contents, range } = options2;
  return [
    sliceByteRange(file2, 0, range.startByte),
    contents,
    sliceByteRange(file2, range.endByte)
  ].join("");
}
function sliceByteRange(string_, indexStart, indexEnd) {
  const buffer2 = getBuffer(string_);
  return buffer2.slice(indexStart, indexEnd).toString();
}
const PLACEHOLDER = "~";
function preprocessTemplateRange(template, code) {
  let prefix;
  let suffix;
  if (template.type === "class-member") {
    prefix = "static{/*";
    suffix = "*/}";
  } else {
    prefix = "{/*";
    suffix = "*/}";
    const nextToken = sliceByteRange(code, template.range.endByte).match(/\S+/);
    if (nextToken && (nextToken[0] === "as" || nextToken[0] === "satisfies")) {
      prefix = "(" + prefix;
      suffix = suffix + ")";
    }
  }
  const contents = template.contents.replaceAll("/", PLACEHOLDER);
  const templateLength = template.range.endByte - template.range.startByte;
  const spaces = templateLength - getBuffer(contents).length - prefix.length - suffix.length;
  return replaceContents(code, {
    contents: [prefix, contents, " ".repeat(spaces), suffix].join(""),
    range: template.range
  });
}
function codeToGlimmerAst(code, filename) {
  const contentTags = parse(code, { filename });
  const templates = contentTags.map((contentTag2) => {
    const { contentRange, contents, range, type } = contentTag2;
    const utf16Range = {
      end: sliceByteRange(code, 0, range.endByte).length,
      start: sliceByteRange(code, 0, range.startByte).length
    };
    return {
      contentRange,
      contents,
      range,
      type,
      utf16Range
    };
  });
  return templates;
}
function preprocess(code, fileName) {
  const templates = codeToGlimmerAst(code, fileName);
  for (const template of templates) {
    code = preprocessTemplateRange(template, code);
  }
  return { code, templates };
}
const typescript = babelExports.parsers["babel-ts"];
function convertNode(node2, rawTemplate) {
  node2.innerComments = [];
  node2.extra = Object.assign(node2.extra ?? {}, {
    isGlimmerTemplate: true,
    template: rawTemplate
  });
}
function convertAst(ast, templates) {
  libExports.traverse(ast, {
    enter(path2) {
      var _a, _b;
      const { node: node2 } = path2;
      switch (node2.type) {
        case "BlockStatement":
        case "ObjectExpression":
        case "StaticBlock": {
          assert("expected range", node2.range);
          const [start, end] = node2.range;
          const templateIndex = templates.findIndex((template) => {
            const { utf16Range } = template;
            if (utf16Range.start === start && utf16Range.end === end) {
              return true;
            }
            return node2.type === "ObjectExpression" && utf16Range.start === start - 1 && utf16Range.end === end + 1;
          });
          if (templateIndex === -1) {
            return null;
          }
          const rawTemplate = templates.splice(templateIndex, 1)[0];
          if (!rawTemplate) {
            throw new Error(
              "expected raw template because splice index came from findIndex"
            );
          }
          const index = ((_a = node2.innerComments) == null ? void 0 : _a[0]) && ((_b = ast.comments) == null ? void 0 : _b.indexOf(node2.innerComments[0]));
          if (ast.comments && index !== void 0 && index >= 0) {
            ast.comments.splice(index, 1);
          }
          convertNode(node2, rawTemplate);
        }
      }
      return null;
    }
  });
  if (templates.length > 0) {
    throw new Error(
      `failed to process all templates, ${templates.length} remaining`
    );
  }
}
const parser = {
  ...typescript,
  astFormat: PRINTER_NAME,
  async parse(code, options2) {
    const preprocessed = preprocess(code, options2.filepath);
    const ast = await typescript.parse(preprocessed.code, options2);
    assert("expected ast", ast);
    convertAst(ast, preprocessed.templates);
    return ast;
  }
};
var estree = { exports: {} };
var hasRequiredEstree;
function requireEstree() {
  if (hasRequiredEstree) return estree.exports;
  hasRequiredEstree = 1;
  (function(module2, exports2) {
    (function(f) {
      function e() {
        var i = f();
        return i.default || i;
      }
      module2.exports = e();
    })(function() {
      var wn2 = Object.defineProperty;
      var Ha = Object.getOwnPropertyDescriptor;
      var Va = Object.getOwnPropertyNames;
      var $a = Object.prototype.hasOwnProperty;
      var Ns = (e) => {
        throw TypeError(e);
      };
      var xr2 = (e, t) => {
        for (var r in t) wn2(e, r, { get: t[r], enumerable: true });
      }, Ka = (e, t, r, n) => {
        if (t && typeof t == "object" || typeof t == "function") for (let s of Va(t)) !$a.call(e, s) && s !== r && wn2(e, s, { get: () => t[s], enumerable: !(n = Ha(t, s)) || n.enumerable });
        return e;
      };
      var Qa = (e) => Ka(wn2({}, "__esModule", { value: true }), e);
      var Gs = (e, t, r) => t.has(e) || Ns("Cannot " + r);
      var ct2 = (e, t, r) => (Gs(e, t, "read from private field"), t.get(e)), Us = (e, t, r) => t.has(e) ? Ns("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, r), Ys = (e, t, r, n) => (Gs(e, t, "write to private field"), t.set(e, r), r);
      var Em = {};
      xr2(Em, { languages: () => fm, options: () => Na, printers: () => Dm });
      var Xs = [{ linguistLanguageId: 183, name: "JavaScript", type: "programming", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", color: "#f1e05a", aliases: ["js", "node"], extensions: [".js", "._js", ".bones", ".cjs", ".es", ".es6", ".frag", ".gs", ".jake", ".javascript", ".jsb", ".jscad", ".jsfl", ".jslib", ".jsm", ".jspre", ".jss", ".mjs", ".njs", ".pac", ".sjs", ".ssjs", ".xsjs", ".xsjslib", ".wxs"], filenames: ["Jakefile"], interpreters: ["chakra", "d8", "gjs", "js", "node", "nodejs", "qjs", "rhino", "v8", "v8-shell", "zx"], parsers: ["babel", "acorn", "espree", "meriyah", "babel-flow", "babel-ts", "flow", "typescript"], vscodeLanguageIds: ["javascript", "mongo"] }, { linguistLanguageId: 183, name: "Flow", type: "programming", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", color: "#f1e05a", aliases: [], extensions: [".js.flow"], filenames: [], interpreters: ["chakra", "d8", "gjs", "js", "node", "nodejs", "qjs", "rhino", "v8", "v8-shell"], parsers: ["flow", "babel-flow"], vscodeLanguageIds: ["javascript"] }, { linguistLanguageId: 183, name: "JSX", type: "programming", tmScope: "source.js.jsx", aceMode: "javascript", codemirrorMode: "jsx", codemirrorMimeType: "text/jsx", color: void 0, aliases: void 0, extensions: [".jsx"], filenames: void 0, interpreters: void 0, parsers: ["babel", "babel-flow", "babel-ts", "flow", "typescript", "espree", "meriyah"], vscodeLanguageIds: ["javascriptreact"], group: "JavaScript" }, { linguistLanguageId: 378, name: "TypeScript", type: "programming", color: "#3178c6", aliases: ["ts"], interpreters: ["deno", "ts-node"], extensions: [".ts", ".cts", ".mts"], tmScope: "source.ts", aceMode: "typescript", codemirrorMode: "javascript", codemirrorMimeType: "application/typescript", parsers: ["typescript", "babel-ts"], vscodeLanguageIds: ["typescript"] }, { linguistLanguageId: 94901924, name: "TSX", type: "programming", color: "#3178c6", group: "TypeScript", extensions: [".tsx"], tmScope: "source.tsx", aceMode: "javascript", codemirrorMode: "jsx", codemirrorMimeType: "text/jsx", parsers: ["typescript", "babel-ts"], vscodeLanguageIds: ["typescriptreact"] }];
      var js = {};
      xr2(js, { canAttachComment: () => Bp, embed: () => ri2, experimentalFeatures: () => om, getCommentChildNodes: () => bp, getVisitorKeys: () => br2, handleComments: () => Zn2, insertPragma: () => yi2, isBlockComment: () => ee2, isGap: () => Pp, massageAstNode: () => xu2, print: () => ja, printComment: () => Ou2, willPrintOwnComments: () => es });
      var za = (e, t, r, n) => {
        if (!(e && t == null)) return t.replaceAll ? t.replaceAll(r, n) : r.global ? t.replace(r, n) : t.split(r).join(n);
      }, Y2 = za;
      var Za = (e, t, r) => {
        if (!(e && t == null)) return Array.isArray(t) || typeof t == "string" ? t[r < 0 ? t.length + r : r] : t.at(r);
      }, M2 = Za;
      function eo2(e) {
        return e !== null && typeof e == "object";
      }
      var Hs = eo2;
      function* to2(e, t) {
        let { getVisitorKeys: r, filter: n = () => true } = t, s = (u) => Hs(u) && n(u);
        for (let u of r(e)) {
          let i = e[u];
          if (Array.isArray(i)) for (let a of i) s(a) && (yield a);
          else s(i) && (yield i);
        }
      }
      function* ro2(e, t) {
        let r = [e];
        for (let n = 0; n < r.length; n++) {
          let s = r[n];
          for (let u of to2(s, t)) yield u, r.push(u);
        }
      }
      function Vs(e, { getVisitorKeys: t, predicate: r }) {
        for (let n of ro2(e, { getVisitorKeys: t })) if (r(n)) return true;
        return false;
      }
      var $s = () => /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
      function Ks(e) {
        return e === 12288 || e >= 65281 && e <= 65376 || e >= 65504 && e <= 65510;
      }
      function Qs(e) {
        return e >= 4352 && e <= 4447 || e === 8986 || e === 8987 || e === 9001 || e === 9002 || e >= 9193 && e <= 9196 || e === 9200 || e === 9203 || e === 9725 || e === 9726 || e === 9748 || e === 9749 || e >= 9776 && e <= 9783 || e >= 9800 && e <= 9811 || e === 9855 || e >= 9866 && e <= 9871 || e === 9875 || e === 9889 || e === 9898 || e === 9899 || e === 9917 || e === 9918 || e === 9924 || e === 9925 || e === 9934 || e === 9940 || e === 9962 || e === 9970 || e === 9971 || e === 9973 || e === 9978 || e === 9981 || e === 9989 || e === 9994 || e === 9995 || e === 10024 || e === 10060 || e === 10062 || e >= 10067 && e <= 10069 || e === 10071 || e >= 10133 && e <= 10135 || e === 10160 || e === 10175 || e === 11035 || e === 11036 || e === 11088 || e === 11093 || e >= 11904 && e <= 11929 || e >= 11931 && e <= 12019 || e >= 12032 && e <= 12245 || e >= 12272 && e <= 12287 || e >= 12289 && e <= 12350 || e >= 12353 && e <= 12438 || e >= 12441 && e <= 12543 || e >= 12549 && e <= 12591 || e >= 12593 && e <= 12686 || e >= 12688 && e <= 12773 || e >= 12783 && e <= 12830 || e >= 12832 && e <= 12871 || e >= 12880 && e <= 42124 || e >= 42128 && e <= 42182 || e >= 43360 && e <= 43388 || e >= 44032 && e <= 55203 || e >= 63744 && e <= 64255 || e >= 65040 && e <= 65049 || e >= 65072 && e <= 65106 || e >= 65108 && e <= 65126 || e >= 65128 && e <= 65131 || e >= 94176 && e <= 94180 || e === 94192 || e === 94193 || e >= 94208 && e <= 100343 || e >= 100352 && e <= 101589 || e >= 101631 && e <= 101640 || e >= 110576 && e <= 110579 || e >= 110581 && e <= 110587 || e === 110589 || e === 110590 || e >= 110592 && e <= 110882 || e === 110898 || e >= 110928 && e <= 110930 || e === 110933 || e >= 110948 && e <= 110951 || e >= 110960 && e <= 111355 || e >= 119552 && e <= 119638 || e >= 119648 && e <= 119670 || e === 126980 || e === 127183 || e === 127374 || e >= 127377 && e <= 127386 || e >= 127488 && e <= 127490 || e >= 127504 && e <= 127547 || e >= 127552 && e <= 127560 || e === 127568 || e === 127569 || e >= 127584 && e <= 127589 || e >= 127744 && e <= 127776 || e >= 127789 && e <= 127797 || e >= 127799 && e <= 127868 || e >= 127870 && e <= 127891 || e >= 127904 && e <= 127946 || e >= 127951 && e <= 127955 || e >= 127968 && e <= 127984 || e === 127988 || e >= 127992 && e <= 128062 || e === 128064 || e >= 128066 && e <= 128252 || e >= 128255 && e <= 128317 || e >= 128331 && e <= 128334 || e >= 128336 && e <= 128359 || e === 128378 || e === 128405 || e === 128406 || e === 128420 || e >= 128507 && e <= 128591 || e >= 128640 && e <= 128709 || e === 128716 || e >= 128720 && e <= 128722 || e >= 128725 && e <= 128727 || e >= 128732 && e <= 128735 || e === 128747 || e === 128748 || e >= 128756 && e <= 128764 || e >= 128992 && e <= 129003 || e === 129008 || e >= 129292 && e <= 129338 || e >= 129340 && e <= 129349 || e >= 129351 && e <= 129535 || e >= 129648 && e <= 129660 || e >= 129664 && e <= 129673 || e >= 129679 && e <= 129734 || e >= 129742 && e <= 129756 || e >= 129759 && e <= 129769 || e >= 129776 && e <= 129784 || e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141;
      }
      var zs = (e) => !(Ks(e) || Qs(e));
      var no2 = /[^\x20-\x7F]/u;
      function so2(e) {
        if (!e) return 0;
        if (!no2.test(e)) return e.length;
        e = e.replace($s(), "  ");
        let t = 0;
        for (let r of e) {
          let n = r.codePointAt(0);
          n <= 31 || n >= 127 && n <= 159 || n >= 768 && n <= 879 || (t += zs(n) ? 1 : 2);
        }
        return t;
      }
      var rt2 = so2;
      function hr2(e) {
        return (t, r, n) => {
          let s = !!(n != null && n.backwards);
          if (r === false) return false;
          let { length: u } = t, i = r;
          for (; i >= 0 && i < u; ) {
            let a = t.charAt(i);
            if (e instanceof RegExp) {
              if (!e.test(a)) return i;
            } else if (!e.includes(a)) return i;
            s ? i-- : i++;
          }
          return i === -1 || i === u ? i : false;
        };
      }
      var Xe2 = hr2(" 	"), Zs = hr2(",; 	"), eu2 = hr2(/[^\n\r]/u);
      function uo2(e, t, r) {
        let n = !!(r != null && r.backwards);
        if (t === false) return false;
        let s = e.charAt(t);
        if (n) {
          if (e.charAt(t - 1) === "\r" && s === `
`) return t - 2;
          if (s === `
` || s === "\r" || s === "\u2028" || s === "\u2029") return t - 1;
        } else {
          if (s === "\r" && e.charAt(t + 1) === `
`) return t + 2;
          if (s === `
` || s === "\r" || s === "\u2028" || s === "\u2029") return t + 1;
        }
        return t;
      }
      var He2 = uo2;
      function io2(e, t, r = {}) {
        let n = Xe2(e, r.backwards ? t - 1 : t, r), s = He2(e, n, r);
        return n !== s;
      }
      var Z2 = io2;
      function ao2(e, t) {
        if (t === false) return false;
        if (e.charAt(t) === "/" && e.charAt(t + 1) === "*") {
          for (let r = t + 2; r < e.length; ++r) if (e.charAt(r) === "*" && e.charAt(r + 1) === "/") return r + 2;
        }
        return t;
      }
      var _t2 = ao2;
      function oo2(e, t) {
        return t === false ? false : e.charAt(t) === "/" && e.charAt(t + 1) === "/" ? eu2(e, t) : t;
      }
      var vt2 = oo2;
      function po(e, t) {
        let r = null, n = t;
        for (; n !== r; ) r = n, n = Zs(e, n), n = _t2(e, n), n = Xe2(e, n);
        return n = vt2(e, n), n = He2(e, n), n !== false && Z2(e, n);
      }
      var jt2 = po;
      function co(e) {
        return Array.isArray(e) && e.length > 0;
      }
      var O2 = co;
      var tu2 = new Proxy(() => {
      }, { get: () => tu2 }), Mt2 = tu2;
      var gr2 = "'", ru2 = '"';
      function lo2(e, t) {
        let r = t === true || t === gr2 ? gr2 : ru2, n = r === gr2 ? ru2 : gr2, s = 0, u = 0;
        for (let i of e) i === r ? s++ : i === n && u++;
        return s > u ? n : r;
      }
      var Sr2 = lo2;
      function mo(e, t, r) {
        let n = t === '"' ? "'" : '"', u = Y2(false, e, /\\(.)|(["'])/gsu, (i, a, o) => a === n ? a : o === t ? "\\" + o : o || (r && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(a) ? a : "\\" + a));
        return t + u + t;
      }
      var nu2 = mo;
      function yo(e, t) {
        Mt2.ok(/^(?<quote>["']).*\k<quote>$/su.test(e));
        let r = e.slice(1, -1), n = t.parser === "json" || t.parser === "jsonc" || t.parser === "json5" && t.quoteProps === "preserve" && !t.singleQuote ? '"' : t.__isInHtmlAttribute ? "'" : Sr2(r, t.singleQuote);
        return e.charAt(0) === n ? e : nu2(r, n, false);
      }
      var nt2 = yo;
      function q2(e) {
        var n, s, u;
        let t = ((n = e.range) == null ? void 0 : n[0]) ?? e.start, r = (u = ((s = e.declaration) == null ? void 0 : s.decorators) ?? e.decorators) == null ? void 0 : u[0];
        return r ? Math.min(q2(r), t) : t;
      }
      function k2(e) {
        var t;
        return ((t = e.range) == null ? void 0 : t[1]) ?? e.end;
      }
      function Pt2(e, t) {
        let r = q2(e);
        return Number.isInteger(r) && r === q2(t);
      }
      function Do2(e, t) {
        let r = k2(e);
        return Number.isInteger(r) && r === k2(t);
      }
      function su2(e, t) {
        return Pt2(e, t) && Do2(e, t);
      }
      var rr2 = null;
      function nr2(e) {
        if (rr2 !== null && typeof rr2.property) {
          let t = rr2;
          return rr2 = nr2.prototype = null, t;
        }
        return rr2 = nr2.prototype = e ?? /* @__PURE__ */ Object.create(null), new nr2();
      }
      var fo = 10;
      for (let e = 0; e <= fo; e++) nr2();
      function On2(e) {
        return nr2(e);
      }
      function Eo(e, t = "type") {
        On2(e);
        function r(n) {
          let s = n[t], u = e[s];
          if (!Array.isArray(u)) throw Object.assign(new Error(`Missing visitor keys for '${s}'.`), { node: n });
          return u;
        }
        return r;
      }
      var Br2 = Eo;
      var uu2 = { ArrayExpression: ["elements"], AssignmentExpression: ["left", "right"], BinaryExpression: ["left", "right"], InterpreterDirective: [], Directive: ["value"], DirectiveLiteral: [], BlockStatement: ["directives", "body"], BreakStatement: ["label"], CallExpression: ["callee", "arguments", "typeParameters", "typeArguments"], CatchClause: ["param", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExpressionStatement: ["expression"], File: ["program"], ForInStatement: ["left", "right", "body"], ForStatement: ["init", "test", "update", "body"], FunctionDeclaration: ["id", "typeParameters", "params", "predicate", "returnType", "body"], FunctionExpression: ["id", "typeParameters", "params", "returnType", "body"], Identifier: ["typeAnnotation", "decorators"], IfStatement: ["test", "consequent", "alternate"], LabeledStatement: ["label", "body"], StringLiteral: [], NumericLiteral: [], NullLiteral: [], BooleanLiteral: [], RegExpLiteral: [], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], NewExpression: ["callee", "arguments", "typeParameters", "typeArguments"], Program: ["directives", "body"], ObjectExpression: ["properties"], ObjectMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], ObjectProperty: ["key", "value", "decorators"], RestElement: ["argument", "typeAnnotation", "decorators"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], ParenthesizedExpression: ["expression"], SwitchCase: ["test", "consequent"], SwitchStatement: ["discriminant", "cases"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], AssignmentPattern: ["left", "right", "decorators", "typeAnnotation"], ArrayPattern: ["elements", "typeAnnotation", "decorators"], ArrowFunctionExpression: ["typeParameters", "params", "predicate", "returnType", "body"], ClassBody: ["body"], ClassExpression: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body", "superTypeArguments"], ClassDeclaration: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body", "superTypeArguments"], ExportAllDeclaration: ["source", "attributes", "exported"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source", "attributes"], ExportSpecifier: ["local", "exported"], ForOfStatement: ["left", "right", "body"], ImportDeclaration: ["specifiers", "source", "attributes"], ImportDefaultSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], ImportExpression: ["source", "options"], MetaProperty: ["meta", "property"], ClassMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], ObjectPattern: ["properties", "typeAnnotation", "decorators"], SpreadElement: ["argument"], Super: [], TaggedTemplateExpression: ["tag", "typeParameters", "quasi", "typeArguments"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], YieldExpression: ["argument"], AwaitExpression: ["argument"], BigIntLiteral: [], ExportNamespaceSpecifier: ["exported"], OptionalMemberExpression: ["object", "property"], OptionalCallExpression: ["callee", "arguments", "typeParameters", "typeArguments"], ClassProperty: ["decorators", "variance", "key", "typeAnnotation", "value"], ClassAccessorProperty: ["decorators", "key", "typeAnnotation", "value"], ClassPrivateProperty: ["decorators", "variance", "key", "typeAnnotation", "value"], ClassPrivateMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], PrivateName: ["id"], StaticBlock: ["body"], AnyTypeAnnotation: [], ArrayTypeAnnotation: ["elementType"], BooleanTypeAnnotation: [], BooleanLiteralTypeAnnotation: [], NullLiteralTypeAnnotation: [], ClassImplements: ["id", "typeParameters"], DeclareClass: ["id", "typeParameters", "extends", "mixins", "implements", "body"], DeclareFunction: ["id", "predicate"], DeclareInterface: ["id", "typeParameters", "extends", "body"], DeclareModule: ["id", "body"], DeclareModuleExports: ["typeAnnotation"], DeclareTypeAlias: ["id", "typeParameters", "right"], DeclareOpaqueType: ["id", "typeParameters", "supertype"], DeclareVariable: ["id"], DeclareExportDeclaration: ["declaration", "specifiers", "source", "attributes"], DeclareExportAllDeclaration: ["source", "attributes"], DeclaredPredicate: ["value"], ExistsTypeAnnotation: [], FunctionTypeAnnotation: ["typeParameters", "this", "params", "rest", "returnType"], FunctionTypeParam: ["name", "typeAnnotation"], GenericTypeAnnotation: ["id", "typeParameters"], InferredPredicate: [], InterfaceExtends: ["id", "typeParameters"], InterfaceDeclaration: ["id", "typeParameters", "extends", "body"], InterfaceTypeAnnotation: ["extends", "body"], IntersectionTypeAnnotation: ["types"], MixedTypeAnnotation: [], EmptyTypeAnnotation: [], NullableTypeAnnotation: ["typeAnnotation"], NumberLiteralTypeAnnotation: [], NumberTypeAnnotation: [], ObjectTypeAnnotation: ["properties", "indexers", "callProperties", "internalSlots"], ObjectTypeInternalSlot: ["id", "value"], ObjectTypeCallProperty: ["value"], ObjectTypeIndexer: ["variance", "id", "key", "value"], ObjectTypeProperty: ["key", "value", "variance"], ObjectTypeSpreadProperty: ["argument"], OpaqueType: ["id", "typeParameters", "supertype", "impltype"], QualifiedTypeIdentifier: ["qualification", "id"], StringLiteralTypeAnnotation: [], StringTypeAnnotation: [], SymbolTypeAnnotation: [], ThisTypeAnnotation: [], TupleTypeAnnotation: ["types", "elementTypes"], TypeofTypeAnnotation: ["argument", "typeArguments"], TypeAlias: ["id", "typeParameters", "right"], TypeAnnotation: ["typeAnnotation"], TypeCastExpression: ["expression", "typeAnnotation"], TypeParameter: ["bound", "default", "variance"], TypeParameterDeclaration: ["params"], TypeParameterInstantiation: ["params"], UnionTypeAnnotation: ["types"], Variance: [], VoidTypeAnnotation: [], EnumDeclaration: ["id", "body"], EnumBooleanBody: ["members"], EnumNumberBody: ["members"], EnumStringBody: ["members"], EnumSymbolBody: ["members"], EnumBooleanMember: ["id", "init"], EnumNumberMember: ["id", "init"], EnumStringMember: ["id", "init"], EnumDefaultedMember: ["id"], IndexedAccessType: ["objectType", "indexType"], OptionalIndexedAccessType: ["objectType", "indexType"], JSXAttribute: ["name", "value"], JSXClosingElement: ["name"], JSXElement: ["openingElement", "children", "closingElement"], JSXEmptyExpression: [], JSXExpressionContainer: ["expression"], JSXSpreadChild: ["expression"], JSXIdentifier: [], JSXMemberExpression: ["object", "property"], JSXNamespacedName: ["namespace", "name"], JSXOpeningElement: ["name", "typeParameters", "typeArguments", "attributes"], JSXSpreadAttribute: ["argument"], JSXText: [], JSXFragment: ["openingFragment", "children", "closingFragment"], JSXOpeningFragment: [], JSXClosingFragment: [], Noop: [], Placeholder: [], V8IntrinsicIdentifier: [], ArgumentPlaceholder: [], BindExpression: ["object", "callee"], ImportAttribute: ["key", "value"], Decorator: ["expression"], DoExpression: ["body"], ExportDefaultSpecifier: ["exported"], RecordExpression: ["properties"], TupleExpression: ["elements"], ModuleExpression: ["body"], TopicReference: [], PipelineTopicExpression: ["expression"], PipelineBareFunction: ["callee"], PipelinePrimaryTopicReference: [], TSParameterProperty: ["parameter", "decorators"], TSDeclareFunction: ["id", "typeParameters", "params", "returnType", "body"], TSDeclareMethod: ["decorators", "key", "typeParameters", "params", "returnType"], TSQualifiedName: ["left", "right"], TSCallSignatureDeclaration: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSConstructSignatureDeclaration: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSPropertySignature: ["key", "typeAnnotation"], TSMethodSignature: ["key", "typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSIndexSignature: ["parameters", "typeAnnotation"], TSAnyKeyword: [], TSBooleanKeyword: [], TSBigIntKeyword: [], TSIntrinsicKeyword: [], TSNeverKeyword: [], TSNullKeyword: [], TSNumberKeyword: [], TSObjectKeyword: [], TSStringKeyword: [], TSSymbolKeyword: [], TSUndefinedKeyword: [], TSUnknownKeyword: [], TSVoidKeyword: [], TSThisType: [], TSFunctionType: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSConstructorType: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSTypeReference: ["typeName", "typeParameters", "typeArguments"], TSTypePredicate: ["parameterName", "typeAnnotation"], TSTypeQuery: ["exprName", "typeParameters", "typeArguments"], TSTypeLiteral: ["members"], TSArrayType: ["elementType"], TSTupleType: ["elementTypes"], TSOptionalType: ["typeAnnotation"], TSRestType: ["typeAnnotation"], TSNamedTupleMember: ["label", "elementType"], TSUnionType: ["types"], TSIntersectionType: ["types"], TSConditionalType: ["checkType", "extendsType", "trueType", "falseType"], TSInferType: ["typeParameter"], TSParenthesizedType: ["typeAnnotation"], TSTypeOperator: ["typeAnnotation"], TSIndexedAccessType: ["objectType", "indexType"], TSMappedType: ["typeParameter", "nameType", "typeAnnotation"], TSTemplateLiteralType: ["quasis", "types"], TSLiteralType: ["literal"], TSExpressionWithTypeArguments: ["expression", "typeParameters"], TSInterfaceDeclaration: ["id", "typeParameters", "extends", "body"], TSInterfaceBody: ["body"], TSTypeAliasDeclaration: ["id", "typeParameters", "typeAnnotation"], TSInstantiationExpression: ["expression", "typeParameters", "typeArguments"], TSAsExpression: ["expression", "typeAnnotation"], TSSatisfiesExpression: ["expression", "typeAnnotation"], TSTypeAssertion: ["typeAnnotation", "expression"], TSEnumBody: ["members"], TSEnumDeclaration: ["id", "members"], TSEnumMember: ["id", "initializer"], TSModuleDeclaration: ["id", "body"], TSModuleBlock: ["body"], TSImportType: ["argument", "options", "qualifier", "typeParameters", "typeArguments"], TSImportEqualsDeclaration: ["id", "moduleReference"], TSExternalModuleReference: ["expression"], TSNonNullExpression: ["expression"], TSExportAssignment: ["expression"], TSNamespaceExportDeclaration: ["id"], TSTypeAnnotation: ["typeAnnotation"], TSTypeParameterInstantiation: ["params"], TSTypeParameterDeclaration: ["params"], TSTypeParameter: ["constraint", "default", "name"], ChainExpression: ["expression"], ExperimentalRestProperty: ["argument"], ExperimentalSpreadProperty: ["argument"], Literal: [], MethodDefinition: ["decorators", "key", "value"], PrivateIdentifier: [], Property: ["key", "value"], PropertyDefinition: ["decorators", "key", "typeAnnotation", "value", "variance"], AccessorProperty: ["decorators", "key", "typeAnnotation", "value"], TSAbstractAccessorProperty: ["decorators", "key", "typeAnnotation"], TSAbstractKeyword: [], TSAbstractMethodDefinition: ["key", "value"], TSAbstractPropertyDefinition: ["decorators", "key", "typeAnnotation"], TSAsyncKeyword: [], TSClassImplements: ["expression", "typeArguments", "typeParameters"], TSDeclareKeyword: [], TSEmptyBodyFunctionExpression: ["id", "typeParameters", "params", "returnType"], TSExportKeyword: [], TSInterfaceHeritage: ["expression", "typeArguments", "typeParameters"], TSPrivateKeyword: [], TSProtectedKeyword: [], TSPublicKeyword: [], TSReadonlyKeyword: [], TSStaticKeyword: [], AsConstExpression: ["expression"], AsExpression: ["expression", "typeAnnotation"], BigIntLiteralTypeAnnotation: [], BigIntTypeAnnotation: [], ComponentDeclaration: ["id", "params", "body", "typeParameters", "rendersType"], ComponentParameter: ["name", "local"], ComponentTypeAnnotation: ["params", "rest", "typeParameters", "rendersType"], ComponentTypeParameter: ["name", "typeAnnotation"], ConditionalTypeAnnotation: ["checkType", "extendsType", "trueType", "falseType"], DeclareComponent: ["id", "params", "rest", "typeParameters", "rendersType"], DeclareEnum: ["id", "body"], DeclareHook: ["id"], DeclareNamespace: ["id", "body"], EnumBigIntBody: ["members"], EnumBigIntMember: ["id", "init"], HookDeclaration: ["id", "params", "body", "typeParameters", "returnType"], HookTypeAnnotation: ["params", "returnType", "rest", "typeParameters"], InferTypeAnnotation: ["typeParameter"], KeyofTypeAnnotation: ["argument"], ObjectTypeMappedTypeProperty: ["keyTparam", "propType", "sourceType", "variance"], QualifiedTypeofIdentifier: ["qualification", "id"], TupleTypeLabeledElement: ["label", "elementType", "variance"], TupleTypeSpreadElement: ["label", "typeAnnotation"], TypeOperator: ["typeAnnotation"], TypePredicate: ["parameterName", "typeAnnotation", "asserts"], NGRoot: ["node"], NGPipeExpression: ["left", "right", "arguments"], NGChainedExpression: ["expressions"], NGEmptyExpression: [], NGMicrosyntax: ["body"], NGMicrosyntaxKey: [], NGMicrosyntaxExpression: ["expression", "alias"], NGMicrosyntaxKeyedExpression: ["key", "expression"], NGMicrosyntaxLet: ["key", "value"], NGMicrosyntaxAs: ["key", "alias"], JsExpressionRoot: ["node"], JsonRoot: ["node"], TSJSDocAllType: [], TSJSDocUnknownType: [], TSJSDocNullableType: ["typeAnnotation"], TSJSDocNonNullableType: ["typeAnnotation"], NeverTypeAnnotation: [], UndefinedTypeAnnotation: [], UnknownTypeAnnotation: [], SatisfiesExpression: ["expression", "typeAnnotation"] };
      var Fo = Br2(uu2), br2 = Fo;
      function Co(e) {
        let t = new Set(e);
        return (r) => t.has(r == null ? void 0 : r.type);
      }
      var R2 = Co;
      var Ao = R2(["Block", "CommentBlock", "MultiLine"]), ee2 = Ao;
      var To = R2(["AnyTypeAnnotation", "ThisTypeAnnotation", "NumberTypeAnnotation", "VoidTypeAnnotation", "BooleanTypeAnnotation", "BigIntTypeAnnotation", "SymbolTypeAnnotation", "StringTypeAnnotation", "NeverTypeAnnotation", "UndefinedTypeAnnotation", "UnknownTypeAnnotation", "EmptyTypeAnnotation", "MixedTypeAnnotation"]), Pr2 = To;
      function xo(e, t) {
        let r = t.split(".");
        for (let n = r.length - 1; n >= 0; n--) {
          let s = r[n];
          if (n === 0) return e.type === "Identifier" && e.name === s;
          if (e.type !== "MemberExpression" || e.optional || e.computed || e.property.type !== "Identifier" || e.property.name !== s) return false;
          e = e.object;
        }
      }
      function ho(e, t) {
        return t.some((r) => xo(e, r));
      }
      var iu2 = ho;
      function go({ type: e }) {
        return e.startsWith("TS") && e.endsWith("Keyword");
      }
      var kr2 = go;
      function ur(e, t) {
        return t(e) || Vs(e, { getVisitorKeys: br2, predicate: t });
      }
      function Jt2(e) {
        return e.type === "AssignmentExpression" || e.type === "BinaryExpression" || e.type === "LogicalExpression" || e.type === "NGPipeExpression" || e.type === "ConditionalExpression" || L2(e) || W2(e) || e.type === "SequenceExpression" || e.type === "TaggedTemplateExpression" || e.type === "BindExpression" || e.type === "UpdateExpression" && !e.prefix || Ae2(e) || e.type === "TSNonNullExpression" || e.type === "ChainExpression";
      }
      function pu2(e) {
        return e.expressions ? e.expressions[0] : e.left ?? e.test ?? e.callee ?? e.object ?? e.tag ?? e.argument ?? e.expression;
      }
      function Lr2(e) {
        if (e.expressions) return ["expressions", 0];
        if (e.left) return ["left"];
        if (e.test) return ["test"];
        if (e.object) return ["object"];
        if (e.callee) return ["callee"];
        if (e.tag) return ["tag"];
        if (e.argument) return ["argument"];
        if (e.expression) return ["expression"];
        throw new Error("Unexpected node has no left side.");
      }
      var At2 = R2(["Line", "CommentLine", "SingleLine", "HashbangComment", "HTMLOpen", "HTMLClose", "Hashbang", "InterpreterDirective"]), cu2 = R2(["ExportDefaultDeclaration", "DeclareExportDeclaration", "ExportNamedDeclaration", "ExportAllDeclaration", "DeclareExportAllDeclaration"]), U2 = R2(["ArrayExpression", "TupleExpression"]), se2 = R2(["ObjectExpression", "RecordExpression"]);
      function lu2(e) {
        return e.type === "LogicalExpression" && e.operator === "??";
      }
      function Fe2(e) {
        return e.type === "NumericLiteral" || e.type === "Literal" && typeof e.value == "number";
      }
      function Rn2(e) {
        return e.type === "UnaryExpression" && (e.operator === "+" || e.operator === "-") && Fe2(e.argument);
      }
      function te2(e) {
        return !!(e && (e.type === "StringLiteral" || e.type === "Literal" && typeof e.value == "string"));
      }
      function Jn2(e) {
        return e.type === "RegExpLiteral" || e.type === "Literal" && !!e.regex;
      }
      var wr2 = R2(["Literal", "BooleanLiteral", "BigIntLiteral", "DirectiveLiteral", "NullLiteral", "NumericLiteral", "RegExpLiteral", "StringLiteral"]), So = R2(["Identifier", "ThisExpression", "Super", "PrivateName", "PrivateIdentifier"]), Re2 = R2(["ObjectTypeAnnotation", "TSTypeLiteral", "TSMappedType"]), Rt2 = R2(["FunctionExpression", "ArrowFunctionExpression"]);
      function Bo(e) {
        return e.type === "FunctionExpression" || e.type === "ArrowFunctionExpression" && e.body.type === "BlockStatement";
      }
      function _n2(e) {
        return L2(e) && e.callee.type === "Identifier" && ["async", "inject", "fakeAsync", "waitForAsync"].includes(e.callee.name);
      }
      var X = R2(["JSXElement", "JSXFragment"]);
      function kt2(e) {
        return e.method && e.kind === "init" || e.kind === "get" || e.kind === "set";
      }
      function Or2(e) {
        return (e.type === "ObjectTypeProperty" || e.type === "ObjectTypeInternalSlot") && !e.static && !e.method && e.kind !== "get" && e.kind !== "set" && e.value.type === "FunctionTypeAnnotation";
      }
      function mu2(e) {
        return (e.type === "TypeAnnotation" || e.type === "TSTypeAnnotation") && e.typeAnnotation.type === "FunctionTypeAnnotation" && !e.static && !Pt2(e, e.typeAnnotation);
      }
      var De2 = R2(["BinaryExpression", "LogicalExpression", "NGPipeExpression"]);
      function Tt2(e) {
        return W2(e) || e.type === "BindExpression" && !!e.object;
      }
      var bo = R2(["TSThisType", "NullLiteralTypeAnnotation", "BooleanLiteralTypeAnnotation", "StringLiteralTypeAnnotation", "BigIntLiteralTypeAnnotation", "NumberLiteralTypeAnnotation", "TSLiteralType", "TSTemplateLiteralType"]);
      function qt2(e) {
        return kr2(e) || Pr2(e) || bo(e) || (e.type === "GenericTypeAnnotation" || e.type === "TSTypeReference") && !e.typeParameters && !e.typeArguments;
      }
      function Po(e) {
        return e.type === "Identifier" && (e.name === "beforeEach" || e.name === "beforeAll" || e.name === "afterEach" || e.name === "afterAll");
      }
      var ko = ["it", "it.only", "it.skip", "describe", "describe.only", "describe.skip", "test", "test.only", "test.skip", "test.step", "test.describe", "test.describe.only", "test.describe.parallel", "test.describe.parallel.only", "test.describe.serial", "test.describe.serial.only", "skip", "xit", "xdescribe", "xtest", "fit", "fdescribe", "ftest"];
      function Io(e) {
        return iu2(e, ko);
      }
      function It2(e, t) {
        if ((e == null ? void 0 : e.type) !== "CallExpression" || e.optional) return false;
        let r = pe2(e);
        if (r.length === 1) {
          if (_n2(e) && It2(t)) return Rt2(r[0]);
          if (Po(e.callee)) return _n2(r[0]);
        } else if ((r.length === 2 || r.length === 3) && (r[0].type === "TemplateLiteral" || te2(r[0])) && Io(e.callee)) return r[2] && !Fe2(r[2]) ? false : (r.length === 2 ? Rt2(r[1]) : Bo(r[1]) && z2(r[1]).length <= 1) || _n2(r[1]);
        return false;
      }
      var yu2 = (e) => (t) => ((t == null ? void 0 : t.type) === "ChainExpression" && (t = t.expression), e(t)), L2 = yu2(R2(["CallExpression", "OptionalCallExpression"])), W2 = yu2(R2(["MemberExpression", "OptionalMemberExpression"]));
      function qn2(e, t = 5) {
        return Du2(e, t) <= t;
      }
      function Du2(e, t) {
        let r = 0;
        for (let n in e) {
          let s = e[n];
          if (s && typeof s == "object" && typeof s.type == "string" && (r++, r += Du2(s, t - r)), r > t) return r;
        }
        return r;
      }
      var Lo = 0.25;
      function ir2(e, t) {
        let { printWidth: r } = t;
        if (T2(e)) return false;
        let n = r * Lo;
        if (e.type === "ThisExpression" || e.type === "Identifier" && e.name.length <= n || Rn2(e) && !T2(e.argument)) return true;
        let s = e.type === "Literal" && "regex" in e && e.regex.pattern || e.type === "RegExpLiteral" && e.pattern;
        return s ? s.length <= n : te2(e) ? nt2(fe2(e), t).length <= n : e.type === "TemplateLiteral" ? e.expressions.length === 0 && e.quasis[0].value.raw.length <= n && !e.quasis[0].value.raw.includes(`
`) : e.type === "UnaryExpression" ? ir2(e.argument, { printWidth: r }) : e.type === "CallExpression" && e.arguments.length === 0 && e.callee.type === "Identifier" ? e.callee.name.length <= n - 2 : wr2(e);
      }
      function Le2(e, t) {
        return X(t) ? Lt2(t) : T2(t, h.Leading, (r) => Z2(e, k2(r)));
      }
      function au2(e) {
        return e.quasis.some((t) => t.value.raw.includes(`
`));
      }
      function _r2(e, t) {
        return (e.type === "TemplateLiteral" && au2(e) || e.type === "TaggedTemplateExpression" && au2(e.quasi)) && !Z2(t, q2(e), { backwards: true });
      }
      function vr2(e) {
        if (!T2(e)) return false;
        let t = M2(false, lt2(e, h.Dangling), -1);
        return t && !ee2(t);
      }
      function fu2(e) {
        if (e.length <= 1) return false;
        let t = 0;
        for (let r of e) if (Rt2(r)) {
          if (t += 1, t > 1) return true;
        } else if (L2(r)) {
          for (let n of pe2(r)) if (Rt2(n)) return true;
        }
        return false;
      }
      function jr2(e) {
        let { node: t, parent: r, key: n } = e;
        return n === "callee" && L2(t) && L2(r) && r.arguments.length > 0 && t.arguments.length > r.arguments.length;
      }
      var wo = /* @__PURE__ */ new Set(["!", "-", "+", "~"]);
      function Ie2(e, t = 2) {
        if (t <= 0) return false;
        if (e.type === "ChainExpression" || e.type === "TSNonNullExpression") return Ie2(e.expression, t);
        let r = (n) => Ie2(n, t - 1);
        if (Jn2(e)) return rt2(e.pattern ?? e.regex.pattern) <= 5;
        if (wr2(e) || So(e) || e.type === "ArgumentPlaceholder") return true;
        if (e.type === "TemplateLiteral") return e.quasis.every((n) => !n.value.raw.includes(`
`)) && e.expressions.every(r);
        if (se2(e)) return e.properties.every((n) => !n.computed && (n.shorthand || n.value && r(n.value)));
        if (U2(e)) return e.elements.every((n) => n === null || r(n));
        if (mt2(e)) {
          if (e.type === "ImportExpression" || Ie2(e.callee, t)) {
            let n = pe2(e);
            return n.length <= t && n.every(r);
          }
          return false;
        }
        return W2(e) ? Ie2(e.object, t) && Ie2(e.property, t) : e.type === "UnaryExpression" && wo.has(e.operator) || e.type === "UpdateExpression" ? Ie2(e.argument, t) : false;
      }
      function fe2(e) {
        var t;
        return ((t = e.extra) == null ? void 0 : t.raw) ?? e.raw;
      }
      function Eu2(e) {
        return e;
      }
      function oe2(e, t = "es5") {
        return e.trailingComma === "es5" && t === "es5" || e.trailingComma === "all" && (t === "all" || t === "es5");
      }
      function ae(e, t) {
        switch (e.type) {
          case "BinaryExpression":
          case "LogicalExpression":
          case "AssignmentExpression":
          case "NGPipeExpression":
            return ae(e.left, t);
          case "MemberExpression":
          case "OptionalMemberExpression":
            return ae(e.object, t);
          case "TaggedTemplateExpression":
            return e.tag.type === "FunctionExpression" ? false : ae(e.tag, t);
          case "CallExpression":
          case "OptionalCallExpression":
            return e.callee.type === "FunctionExpression" ? false : ae(e.callee, t);
          case "ConditionalExpression":
            return ae(e.test, t);
          case "UpdateExpression":
            return !e.prefix && ae(e.argument, t);
          case "BindExpression":
            return e.object && ae(e.object, t);
          case "SequenceExpression":
            return ae(e.expressions[0], t);
          case "ChainExpression":
          case "TSSatisfiesExpression":
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "AsExpression":
          case "AsConstExpression":
          case "SatisfiesExpression":
            return ae(e.expression, t);
          default:
            return t(e);
        }
      }
      var ou2 = { "==": true, "!=": true, "===": true, "!==": true }, Ir2 = { "*": true, "/": true, "%": true }, Mn2 = { ">>": true, ">>>": true, "<<": true };
      function ar2(e, t) {
        return !(sr2(t) !== sr2(e) || e === "**" || ou2[e] && ou2[t] || t === "%" && Ir2[e] || e === "%" && Ir2[t] || t !== e && Ir2[t] && Ir2[e] || Mn2[e] && Mn2[t]);
      }
      var Oo = new Map([["|>"], ["??"], ["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]].flatMap((e, t) => e.map((r) => [r, t])));
      function sr2(e) {
        return Oo.get(e);
      }
      function Fu2(e) {
        return !!Mn2[e] || e === "|" || e === "^" || e === "&";
      }
      function Cu2(e) {
        var r;
        if (e.rest) return true;
        let t = z2(e);
        return ((r = M2(false, t, -1)) == null ? void 0 : r.type) === "RestElement";
      }
      var vn2 = /* @__PURE__ */ new WeakMap();
      function z2(e) {
        if (vn2.has(e)) return vn2.get(e);
        let t = [];
        return e.this && t.push(e.this), Array.isArray(e.parameters) ? t.push(...e.parameters) : Array.isArray(e.params) && t.push(...e.params), e.rest && t.push(e.rest), vn2.set(e, t), t;
      }
      function Au2(e, t) {
        let { node: r } = e, n = 0, s = (u) => t(u, n++);
        r.this && e.call(s, "this"), Array.isArray(r.parameters) ? e.each(s, "parameters") : Array.isArray(r.params) && e.each(s, "params"), r.rest && e.call(s, "rest");
      }
      var jn2 = /* @__PURE__ */ new WeakMap();
      function pe2(e) {
        if (jn2.has(e)) return jn2.get(e);
        if (e.type === "ChainExpression") return pe2(e.expression);
        let t = e.arguments;
        return e.type === "ImportExpression" && (t = [e.source], e.options && t.push(e.options)), jn2.set(e, t), t;
      }
      function Wt2(e, t) {
        let { node: r } = e;
        if (r.type === "ChainExpression") return e.call(() => Wt2(e, t), "expression");
        r.type === "ImportExpression" ? (e.call((n) => t(n, 0), "source"), r.options && e.call((n) => t(n, 1), "options")) : e.each(t, "arguments");
      }
      function Wn(e, t) {
        let r = [];
        if (e.type === "ChainExpression" && (e = e.expression, r.push("expression")), e.type === "ImportExpression") {
          if (t === 0 || t === (e.options ? -2 : -1)) return [...r, "source"];
          if (e.options && (t === 1 || t === -1)) return [...r, "options"];
          throw new RangeError("Invalid argument index");
        }
        if (t < 0 && (t = e.arguments.length + t), t < 0 || t >= e.arguments.length) throw new RangeError("Invalid argument index");
        return [...r, "arguments", t];
      }
      function or2(e) {
        return e.value.trim() === "prettier-ignore" && !e.unignore;
      }
      function Lt2(e) {
        return (e == null ? void 0 : e.prettierIgnore) || T2(e, h.PrettierIgnore);
      }
      var h = { Leading: 2, Trailing: 4, Dangling: 8, Block: 16, Line: 32, PrettierIgnore: 64, First: 128, Last: 256 }, Tu2 = (e, t) => {
        if (typeof e == "function" && (t = e, e = 0), e || t) return (r, n, s) => !(e & h.Leading && !r.leading || e & h.Trailing && !r.trailing || e & h.Dangling && (r.leading || r.trailing) || e & h.Block && !ee2(r) || e & h.Line && !At2(r) || e & h.First && n !== 0 || e & h.Last && n !== s.length - 1 || e & h.PrettierIgnore && !or2(r) || t && !t(r));
      };
      function T2(e, t, r) {
        if (!O2(e == null ? void 0 : e.comments)) return false;
        let n = Tu2(t, r);
        return n ? e.comments.some(n) : true;
      }
      function lt2(e, t, r) {
        if (!Array.isArray(e == null ? void 0 : e.comments)) return [];
        let n = Tu2(t, r);
        return n ? e.comments.filter(n) : e.comments;
      }
      var ce2 = (e, { originalText: t }) => jt2(t, k2(e));
      function mt2(e) {
        return L2(e) || e.type === "NewExpression" || e.type === "ImportExpression";
      }
      function Ce2(e) {
        return e && (e.type === "ObjectProperty" || e.type === "Property" && !kt2(e));
      }
      var Ae2 = R2(["TSAsExpression", "TSSatisfiesExpression", "AsExpression", "AsConstExpression", "SatisfiesExpression"]), we2 = R2(["TSUnionType", "UnionTypeAnnotation"]), Nt2 = R2(["TSIntersectionType", "IntersectionTypeAnnotation"]), Je2 = R2(["TSConditionalType", "ConditionalTypeAnnotation"]);
      var _o = /* @__PURE__ */ new Set(["range", "raw", "comments", "leadingComments", "trailingComments", "innerComments", "extra", "start", "end", "loc", "flags", "errors", "tokens"]), Gt2 = (e) => {
        for (let t of e.quasis) delete t.value;
      };
      function du2(e, t, r) {
        var s, u;
        if (e.type === "Program" && delete t.sourceType, (e.type === "BigIntLiteral" || e.type === "BigIntLiteralTypeAnnotation") && e.value && (t.value = e.value.toLowerCase()), (e.type === "BigIntLiteral" || e.type === "Literal") && e.bigint && (t.bigint = e.bigint.toLowerCase()), e.type === "EmptyStatement" || e.type === "JSXText" || e.type === "JSXExpressionContainer" && (e.expression.type === "Literal" || e.expression.type === "StringLiteral") && e.expression.value === " ") return null;
        if ((e.type === "Property" || e.type === "ObjectProperty" || e.type === "MethodDefinition" || e.type === "ClassProperty" || e.type === "ClassMethod" || e.type === "PropertyDefinition" || e.type === "TSDeclareMethod" || e.type === "TSPropertySignature" || e.type === "ObjectTypeProperty" || e.type === "ImportAttribute") && e.key && !e.computed) {
          let { key: i } = e;
          te2(i) || Fe2(i) ? t.key = String(i.value) : i.type === "Identifier" && (t.key = i.name);
        }
        if (e.type === "JSXElement" && e.openingElement.name.name === "style" && e.openingElement.attributes.some((i) => i.type === "JSXAttribute" && i.name.name === "jsx")) for (let { type: i, expression: a } of t.children) i === "JSXExpressionContainer" && a.type === "TemplateLiteral" && Gt2(a);
        e.type === "JSXAttribute" && e.name.name === "css" && e.value.type === "JSXExpressionContainer" && e.value.expression.type === "TemplateLiteral" && Gt2(t.value.expression), e.type === "JSXAttribute" && ((s = e.value) == null ? void 0 : s.type) === "Literal" && /["']|&quot;|&apos;/u.test(e.value.value) && (t.value.value = Y2(false, e.value.value, /["']|&quot;|&apos;/gu, '"'));
        let n = e.expression || e.callee;
        if (e.type === "Decorator" && n.type === "CallExpression" && n.callee.name === "Component" && n.arguments.length === 1) {
          let i = e.expression.arguments[0].properties;
          for (let [a, o] of t.expression.arguments[0].properties.entries()) switch (i[a].key.name) {
            case "styles":
              U2(o.value) && Gt2(o.value.elements[0]);
              break;
            case "template":
              o.value.type === "TemplateLiteral" && Gt2(o.value);
              break;
          }
        }
        e.type === "TaggedTemplateExpression" && (e.tag.type === "MemberExpression" || e.tag.type === "Identifier" && (e.tag.name === "gql" || e.tag.name === "graphql" || e.tag.name === "css" || e.tag.name === "md" || e.tag.name === "markdown" || e.tag.name === "html") || e.tag.type === "CallExpression") && Gt2(t.quasi), e.type === "TemplateLiteral" && ((u = e.leadingComments) != null && u.some((a) => ee2(a) && ["GraphQL", "HTML"].some((o) => a.value === ` ${o} `)) || r.type === "CallExpression" && r.callee.name === "graphql" || !e.leadingComments) && Gt2(t), e.type === "ChainExpression" && e.expression.type === "TSNonNullExpression" && (t.type = "TSNonNullExpression", t.expression.type = "ChainExpression"), e.type === "TSMappedType" && (delete t.key, delete t.constraint), e.type === "TSEnumDeclaration" && delete t.body;
      }
      du2.ignoredProperties = _o;
      var xu2 = du2;
      var qe2 = "string", he2 = "array", st2 = "cursor", Ve2 = "indent", $e = "align", Ke2 = "trim", me2 = "group", Oe2 = "fill", Te2 = "if-break", Qe2 = "indent-if-break", ze2 = "line-suffix", We2 = "line-suffix-boundary", ie2 = "line", ge2 = "label", _e2 = "break-parent", Mr2 = /* @__PURE__ */ new Set([st2, Ve2, $e, Ke2, me2, Oe2, Te2, Qe2, ze2, We2, ie2, ge2, _e2]);
      function vo(e) {
        if (typeof e == "string") return qe2;
        if (Array.isArray(e)) return he2;
        if (!e) return;
        let { type: t } = e;
        if (Mr2.has(t)) return t;
      }
      var Se2 = vo;
      var jo = (e) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e);
      function Mo(e) {
        let t = e === null ? "null" : typeof e;
        if (t !== "string" && t !== "object") return `Unexpected doc '${t}', 
Expected it to be 'string' or 'object'.`;
        if (Se2(e)) throw new Error("doc is valid.");
        let r = Object.prototype.toString.call(e);
        if (r !== "[object Object]") return `Unexpected doc '${r}'.`;
        let n = jo([...Mr2].map((s) => `'${s}'`));
        return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`;
      }
      var Nn2 = class extends Error {
        constructor(t) {
          super(Mo(t));
          __publicField(this, "name", "InvalidDocError");
          this.doc = t;
        }
      }, dt2 = Nn2;
      var hu2 = {};
      function Ro(e, t, r, n) {
        let s = [e];
        for (; s.length > 0; ) {
          let u = s.pop();
          if (u === hu2) {
            r(s.pop());
            continue;
          }
          r && s.push(u, hu2);
          let i = Se2(u);
          if (!i) throw new dt2(u);
          if ((t == null ? void 0 : t(u)) !== false) switch (i) {
            case he2:
            case Oe2: {
              let a = i === he2 ? u : u.parts;
              for (let o = a.length, p = o - 1; p >= 0; --p) s.push(a[p]);
              break;
            }
            case Te2:
              s.push(u.flatContents, u.breakContents);
              break;
            case me2:
              if (n && u.expandedStates) for (let a = u.expandedStates.length, o = a - 1; o >= 0; --o) s.push(u.expandedStates[o]);
              else s.push(u.contents);
              break;
            case $e:
            case Ve2:
            case Qe2:
            case ge2:
            case ze2:
              s.push(u.contents);
              break;
            case qe2:
            case st2:
            case Ke2:
            case We2:
            case ie2:
            case _e2:
              break;
            default:
              throw new dt2(u);
          }
        }
      }
      var pr2 = Ro;
      function yt(e, t) {
        if (typeof e == "string") return t(e);
        let r = /* @__PURE__ */ new Map();
        return n(e);
        function n(u) {
          if (r.has(u)) return r.get(u);
          let i = s(u);
          return r.set(u, i), i;
        }
        function s(u) {
          switch (Se2(u)) {
            case he2:
              return t(u.map(n));
            case Oe2:
              return t({ ...u, parts: u.parts.map(n) });
            case Te2:
              return t({ ...u, breakContents: n(u.breakContents), flatContents: n(u.flatContents) });
            case me2: {
              let { expandedStates: i, contents: a } = u;
              return i ? (i = i.map(n), a = i[0]) : a = n(a), t({ ...u, contents: a, expandedStates: i });
            }
            case $e:
            case Ve2:
            case Qe2:
            case ge2:
            case ze2:
              return t({ ...u, contents: n(u.contents) });
            case qe2:
            case st2:
            case Ke2:
            case We2:
            case ie2:
            case _e2:
              return t(u);
            default:
              throw new dt2(u);
          }
        }
      }
      function Su2(e, t, r) {
        let n = r, s = false;
        function u(i) {
          if (s) return false;
          let a = t(i);
          a !== void 0 && (s = true, n = a);
        }
        return pr2(e, u), n;
      }
      function Jo(e) {
        if (e.type === me2 && e.break || e.type === ie2 && e.hard || e.type === _e2) return true;
      }
      function re2(e) {
        return Su2(e, Jo, false);
      }
      function gu2(e) {
        if (e.length > 0) {
          let t = M2(false, e, -1);
          !t.expandedStates && !t.break && (t.break = "propagated");
        }
        return null;
      }
      function Bu2(e) {
        let t = /* @__PURE__ */ new Set(), r = [];
        function n(u) {
          if (u.type === _e2 && gu2(r), u.type === me2) {
            if (r.push(u), t.has(u)) return false;
            t.add(u);
          }
        }
        function s(u) {
          u.type === me2 && r.pop().break && gu2(r);
        }
        pr2(e, n, s, true);
      }
      function qo(e) {
        return e.type === ie2 && !e.hard ? e.soft ? "" : " " : e.type === Te2 ? e.flatContents : e;
      }
      function cr2(e) {
        return yt(e, qo);
      }
      function Wo(e) {
        switch (Se2(e)) {
          case Oe2:
            if (e.parts.every((t) => t === "")) return "";
            break;
          case me2:
            if (!e.contents && !e.id && !e.break && !e.expandedStates) return "";
            if (e.contents.type === me2 && e.contents.id === e.id && e.contents.break === e.break && e.contents.expandedStates === e.expandedStates) return e.contents;
            break;
          case $e:
          case Ve2:
          case Qe2:
          case ze2:
            if (!e.contents) return "";
            break;
          case Te2:
            if (!e.flatContents && !e.breakContents) return "";
            break;
          case he2: {
            let t = [];
            for (let r of e) {
              if (!r) continue;
              let [n, ...s] = Array.isArray(r) ? r : [r];
              typeof n == "string" && typeof M2(false, t, -1) == "string" ? t[t.length - 1] += n : t.push(n), t.push(...s);
            }
            return t.length === 0 ? "" : t.length === 1 ? t[0] : t;
          }
          case qe2:
          case st2:
          case Ke2:
          case We2:
          case ie2:
          case ge2:
          case _e2:
            break;
          default:
            throw new dt2(e);
        }
        return e;
      }
      function Ut2(e) {
        return yt(e, (t) => Wo(t));
      }
      function ve2(e, t = Rr2) {
        return yt(e, (r) => typeof r == "string" ? b(t, r.split(`
`)) : r);
      }
      function No(e) {
        if (e.type === ie2) return true;
      }
      function bu2(e) {
        return Su2(e, No, false);
      }
      function lr2(e, t) {
        return e.type === ge2 ? { ...e, contents: t(e.contents) } : t(e);
      }
      function Pu2(e) {
        let t = true;
        return pr2(e, (r) => {
          switch (Se2(r)) {
            case qe2:
              if (r === "") break;
            case Ke2:
            case We2:
            case ie2:
            case _e2:
              return t = false, false;
          }
        }), t;
      }
      var Gn2 = () => {
      }, Un2 = Gn2;
      function f(e) {
        return { type: Ve2, contents: e };
      }
      function Be2(e, t) {
        return { type: $e, contents: t, n: e };
      }
      function l(e, t = {}) {
        return Un2(t.expandedStates), { type: me2, id: t.id, contents: e, break: !!t.shouldBreak, expandedStates: t.expandedStates };
      }
      function Iu2(e) {
        return Be2(Number.NEGATIVE_INFINITY, e);
      }
      function Jr2(e) {
        return Be2(-1, e);
      }
      function et2(e, t) {
        return l(e[0], { ...t, expandedStates: e });
      }
      function qr2(e) {
        return { type: Oe2, parts: e };
      }
      function B2(e, t = "", r = {}) {
        return { type: Te2, breakContents: e, flatContents: t, groupId: r.groupId };
      }
      function xt2(e, t) {
        return { type: Qe2, contents: e, groupId: t.groupId, negate: t.negate };
      }
      function Yn2(e) {
        return { type: ze2, contents: e };
      }
      var je2 = { type: We2 }, Ee2 = { type: _e2 };
      var Xn2 = { type: ie2, hard: true }, Go = { type: ie2, hard: true, literal: true }, x2 = { type: ie2 }, E = { type: ie2, soft: true }, F = [Xn2, Ee2], Rr2 = [Go, Ee2], mr2 = { type: st2 };
      function b(e, t) {
        let r = [];
        for (let n = 0; n < t.length; n++) n !== 0 && r.push(e), r.push(t[n]);
        return r;
      }
      function Lu2(e, t, r) {
        let n = e;
        if (t > 0) {
          for (let s = 0; s < Math.floor(t / r); ++s) n = f(n);
          n = Be2(t % r, n), n = Be2(Number.NEGATIVE_INFINITY, n);
        }
        return n;
      }
      function ut2(e, t) {
        return e ? { type: ge2, label: e, contents: t } : t;
      }
      function Uo(e) {
        let t = `*${e.value}*`.split(`
`);
        return t.length > 1 && t.every((r) => r.trimStart()[0] === "*");
      }
      var wu2 = Uo;
      function Ou2(e, t) {
        let r = e.node;
        if (At2(r)) return t.originalText.slice(q2(r), k2(r)).trimEnd();
        if (ee2(r)) return wu2(r) ? Yo(r) : ["/*", ve2(r.value), "*/"];
        throw new Error("Not a comment: " + JSON.stringify(r));
      }
      function Yo(e) {
        let t = e.value.split(`
`);
        return ["/*", b(F, t.map((r, n) => n === 0 ? r.trimEnd() : " " + (n < t.length - 1 ? r.trim() : r.trimStart()))), "*/"];
      }
      var Zn2 = {};
      xr2(Zn2, { endOfLine: () => zo, ownLine: () => Qo, remaining: () => Zo });
      function Xo(e) {
        let t = e.type || e.kind || "(unknown type)", r = String(e.name || e.id && (typeof e.id == "object" ? e.id.name : e.id) || e.key && (typeof e.key == "object" ? e.key.name : e.key) || e.value && (typeof e.value == "object" ? "" : String(e.value)) || e.operator || "");
        return r.length > 20 && (r = r.slice(0, 19) + "…"), t + (r ? " " + r : "");
      }
      function Hn2(e, t) {
        (e.comments ?? (e.comments = [])).push(t), t.printed = false, t.nodeDescription = Xo(e);
      }
      function le2(e, t) {
        t.leading = true, t.trailing = false, Hn2(e, t);
      }
      function Me2(e, t, r) {
        t.leading = false, t.trailing = false, r && (t.marker = r), Hn2(e, t);
      }
      function V2(e, t) {
        t.leading = false, t.trailing = true, Hn2(e, t);
      }
      function Ho(e, t) {
        let r = null, n = t;
        for (; n !== r; ) r = n, n = Xe2(e, n), n = _t2(e, n), n = vt2(e, n), n = He2(e, n);
        return n;
      }
      var it2 = Ho;
      function Vo(e, t) {
        let r = it2(e, t);
        return r === false ? "" : e.charAt(r);
      }
      var be2 = Vo;
      function $o(e, t, r) {
        for (let n = t; n < r; ++n) if (e.charAt(n) === `
`) return true;
        return false;
      }
      var de2 = $o;
      function Ko(e) {
        return ee2(e) && e.value[0] === "*" && /@(?:type|satisfies)\b/u.test(e.value);
      }
      var Wr2 = Ko;
      function Qo(e) {
        return [Wu2, vu2, Ru2, cp, tp, $n2, Kn2, _u2, ju2, Dp, mp, zn2, qu2, fp, Mu2, Ju2, Qn2, rp, hp].some((t) => t(e));
      }
      function zo(e) {
        return [ep, Ru2, vu2, qu2, $n2, Kn2, _u2, ju2, Ju2, lp, yp, zn2, Cp, Qn2, dp, xp, gp].some((t) => t(e));
      }
      function Zo(e) {
        return [Wu2, $n2, Kn2, np, pp, Mu2, zn2, op, ap, Tp, Qn2, Ap].some((t) => t(e));
      }
      function wt2(e, t) {
        let r = (e.body || e.properties).find(({ type: n }) => n !== "EmptyStatement");
        r ? le2(r, t) : Me2(e, t);
      }
      function Vn2(e, t) {
        e.type === "BlockStatement" ? wt2(e, t) : le2(e, t);
      }
      function ep({ comment: e, followingNode: t }) {
        return t && Wr2(e) ? (le2(t, e), true) : false;
      }
      function $n2({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n, text: s }) {
        if ((r == null ? void 0 : r.type) !== "IfStatement" || !n) return false;
        if (be2(s, k2(e)) === ")") return V2(t, e), true;
        if (t === r.consequent && n === r.alternate) {
          let i = it2(s, k2(r.consequent));
          if (q2(e) < i || r.alternate.type === "BlockStatement") {
            if (t.type === "BlockStatement") V2(t, e);
            else {
              let a = At2(e) || e.loc.start.line === e.loc.end.line, o = e.loc.start.line === t.loc.start.line;
              a && o ? V2(t, e) : Me2(r, e);
            }
            return true;
          }
        }
        return n.type === "BlockStatement" ? (wt2(n, e), true) : n.type === "IfStatement" ? (Vn2(n.consequent, e), true) : r.consequent === n ? (le2(n, e), true) : false;
      }
      function Kn2({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n, text: s }) {
        return (r == null ? void 0 : r.type) !== "WhileStatement" || !n ? false : be2(s, k2(e)) === ")" ? (V2(t, e), true) : n.type === "BlockStatement" ? (wt2(n, e), true) : r.body === n ? (le2(n, e), true) : false;
      }
      function _u2({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n }) {
        return (r == null ? void 0 : r.type) !== "TryStatement" && (r == null ? void 0 : r.type) !== "CatchClause" || !n ? false : r.type === "CatchClause" && t ? (V2(t, e), true) : n.type === "BlockStatement" ? (wt2(n, e), true) : n.type === "TryStatement" ? (Vn2(n.finalizer, e), true) : n.type === "CatchClause" ? (Vn2(n.body, e), true) : false;
      }
      function tp({ comment: e, enclosingNode: t, followingNode: r }) {
        return W2(t) && (r == null ? void 0 : r.type) === "Identifier" ? (le2(t, e), true) : false;
      }
      function rp({ comment: e, enclosingNode: t, followingNode: r, options: n }) {
        return !n.experimentalTernaries || !((t == null ? void 0 : t.type) === "ConditionalExpression" || Je2(t)) ? false : (r == null ? void 0 : r.type) === "ConditionalExpression" || Je2(r) ? (Me2(t, e), true) : false;
      }
      function vu2({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n, text: s, options: u }) {
        let i = t && !de2(s, k2(t), q2(e));
        return (!t || !i) && ((r == null ? void 0 : r.type) === "ConditionalExpression" || Je2(r)) && n ? u.experimentalTernaries && r.alternate === n && !(ee2(e) && !de2(u.originalText, q2(e), k2(e))) ? (Me2(r, e), true) : (le2(n, e), true) : false;
      }
      function np({ comment: e, precedingNode: t, enclosingNode: r }) {
        return Ce2(r) && r.shorthand && r.key === t && r.value.type === "AssignmentPattern" ? (V2(r.value.left, e), true) : false;
      }
      var sp = /* @__PURE__ */ new Set(["ClassDeclaration", "ClassExpression", "DeclareClass", "DeclareInterface", "InterfaceDeclaration", "TSInterfaceDeclaration"]);
      function ju2({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n }) {
        if (sp.has(r == null ? void 0 : r.type)) {
          if (O2(r.decorators) && (n == null ? void 0 : n.type) !== "Decorator") return V2(M2(false, r.decorators, -1), e), true;
          if (r.body && n === r.body) return wt2(r.body, e), true;
          if (n) {
            if (r.superClass && n === r.superClass && t && (t === r.id || t === r.typeParameters)) return V2(t, e), true;
            for (let s of ["implements", "extends", "mixins"]) if (r[s] && n === r[s][0]) return t && (t === r.id || t === r.typeParameters || t === r.superClass) ? V2(t, e) : Me2(r, e, s), true;
          }
        }
        return false;
      }
      var up = /* @__PURE__ */ new Set(["ClassMethod", "ClassProperty", "PropertyDefinition", "TSAbstractPropertyDefinition", "TSAbstractMethodDefinition", "TSDeclareMethod", "MethodDefinition", "ClassAccessorProperty", "AccessorProperty", "TSAbstractAccessorProperty", "TSParameterProperty"]);
      function Mu2({ comment: e, precedingNode: t, enclosingNode: r, text: n }) {
        return r && t && be2(n, k2(e)) === "(" && (r.type === "Property" || r.type === "TSDeclareMethod" || r.type === "TSAbstractMethodDefinition") && t.type === "Identifier" && r.key === t && be2(n, k2(t)) !== ":" ? (V2(t, e), true) : (t == null ? void 0 : t.type) === "Decorator" && up.has(r == null ? void 0 : r.type) && (At2(e) || e.placement === "ownLine") ? (V2(t, e), true) : false;
      }
      var ip = /* @__PURE__ */ new Set(["FunctionDeclaration", "FunctionExpression", "ClassMethod", "MethodDefinition", "ObjectMethod"]);
      function ap({ comment: e, precedingNode: t, enclosingNode: r, text: n }) {
        return be2(n, k2(e)) !== "(" ? false : t && ip.has(r == null ? void 0 : r.type) ? (V2(t, e), true) : false;
      }
      function op({ comment: e, enclosingNode: t, text: r }) {
        if ((t == null ? void 0 : t.type) !== "ArrowFunctionExpression") return false;
        let n = it2(r, k2(e));
        return n !== false && r.slice(n, n + 2) === "=>" ? (Me2(t, e), true) : false;
      }
      function pp({ comment: e, enclosingNode: t, text: r }) {
        return be2(r, k2(e)) !== ")" ? false : t && (Nu2(t) && z2(t).length === 0 || mt2(t) && pe2(t).length === 0) ? (Me2(t, e), true) : ((t == null ? void 0 : t.type) === "MethodDefinition" || (t == null ? void 0 : t.type) === "TSAbstractMethodDefinition") && z2(t.value).length === 0 ? (Me2(t.value, e), true) : false;
      }
      function cp({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n, text: s }) {
        return (t == null ? void 0 : t.type) === "ComponentTypeParameter" && ((r == null ? void 0 : r.type) === "DeclareComponent" || (r == null ? void 0 : r.type) === "ComponentTypeAnnotation") && (n == null ? void 0 : n.type) !== "ComponentTypeParameter" ? (V2(t, e), true) : ((t == null ? void 0 : t.type) === "ComponentParameter" || (t == null ? void 0 : t.type) === "RestElement") && (r == null ? void 0 : r.type) === "ComponentDeclaration" && be2(s, k2(e)) === ")" ? (V2(t, e), true) : false;
      }
      function Ru2({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n, text: s }) {
        return (t == null ? void 0 : t.type) === "FunctionTypeParam" && (r == null ? void 0 : r.type) === "FunctionTypeAnnotation" && (n == null ? void 0 : n.type) !== "FunctionTypeParam" ? (V2(t, e), true) : ((t == null ? void 0 : t.type) === "Identifier" || (t == null ? void 0 : t.type) === "AssignmentPattern" || (t == null ? void 0 : t.type) === "ObjectPattern" || (t == null ? void 0 : t.type) === "ArrayPattern" || (t == null ? void 0 : t.type) === "RestElement" || (t == null ? void 0 : t.type) === "TSParameterProperty") && Nu2(r) && be2(s, k2(e)) === ")" ? (V2(t, e), true) : !ee2(e) && ((r == null ? void 0 : r.type) === "FunctionDeclaration" || (r == null ? void 0 : r.type) === "FunctionExpression" || (r == null ? void 0 : r.type) === "ObjectMethod") && (n == null ? void 0 : n.type) === "BlockStatement" && r.body === n && it2(s, k2(e)) === q2(n) ? (wt2(n, e), true) : false;
      }
      function Ju2({ comment: e, enclosingNode: t }) {
        return (t == null ? void 0 : t.type) === "LabeledStatement" ? (le2(t, e), true) : false;
      }
      function Qn2({ comment: e, enclosingNode: t }) {
        return ((t == null ? void 0 : t.type) === "ContinueStatement" || (t == null ? void 0 : t.type) === "BreakStatement") && !t.label ? (V2(t, e), true) : false;
      }
      function lp({ comment: e, precedingNode: t, enclosingNode: r }) {
        return L2(r) && t && r.callee === t && r.arguments.length > 0 ? (le2(r.arguments[0], e), true) : false;
      }
      function mp({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n }) {
        return we2(r) ? (or2(e) && (n.prettierIgnore = true, e.unignore = true), t ? (V2(t, e), true) : false) : (we2(n) && or2(e) && (n.types[0].prettierIgnore = true, e.unignore = true), false);
      }
      function yp({ comment: e, enclosingNode: t }) {
        return Ce2(t) ? (le2(t, e), true) : false;
      }
      function zn2({ comment: e, enclosingNode: t, ast: r, isLastComment: n }) {
        var s;
        return ((s = r == null ? void 0 : r.body) == null ? void 0 : s.length) === 0 ? (n ? Me2(r, e) : le2(r, e), true) : (t == null ? void 0 : t.type) === "Program" && t.body.length === 0 && !O2(t.directives) ? (n ? Me2(t, e) : le2(t, e), true) : false;
      }
      function Dp({ comment: e, enclosingNode: t }) {
        return (t == null ? void 0 : t.type) === "ForInStatement" || (t == null ? void 0 : t.type) === "ForOfStatement" ? (le2(t, e), true) : false;
      }
      function qu2({ comment: e, precedingNode: t, enclosingNode: r, text: n }) {
        if ((r == null ? void 0 : r.type) === "ImportSpecifier" || (r == null ? void 0 : r.type) === "ExportSpecifier") return le2(r, e), true;
        let s = (t == null ? void 0 : t.type) === "ImportSpecifier" && (r == null ? void 0 : r.type) === "ImportDeclaration", u = (t == null ? void 0 : t.type) === "ExportSpecifier" && (r == null ? void 0 : r.type) === "ExportNamedDeclaration";
        return (s || u) && Z2(n, k2(e)) ? (V2(t, e), true) : false;
      }
      function fp({ comment: e, enclosingNode: t }) {
        return (t == null ? void 0 : t.type) === "AssignmentPattern" ? (le2(t, e), true) : false;
      }
      var Ep = /* @__PURE__ */ new Set(["VariableDeclarator", "AssignmentExpression", "TypeAlias", "TSTypeAliasDeclaration"]), Fp = /* @__PURE__ */ new Set(["ObjectExpression", "RecordExpression", "ArrayExpression", "TupleExpression", "TemplateLiteral", "TaggedTemplateExpression", "ObjectTypeAnnotation", "TSTypeLiteral"]);
      function Cp({ comment: e, enclosingNode: t, followingNode: r }) {
        return Ep.has(t == null ? void 0 : t.type) && r && (Fp.has(r.type) || ee2(e)) ? (le2(r, e), true) : false;
      }
      function Ap({ comment: e, enclosingNode: t, followingNode: r, text: n }) {
        return !r && ((t == null ? void 0 : t.type) === "TSMethodSignature" || (t == null ? void 0 : t.type) === "TSDeclareFunction" || (t == null ? void 0 : t.type) === "TSAbstractMethodDefinition") && be2(n, k2(e)) === ";" ? (V2(t, e), true) : false;
      }
      function Wu2({ comment: e, enclosingNode: t, followingNode: r }) {
        if (or2(e) && (t == null ? void 0 : t.type) === "TSMappedType" && (r == null ? void 0 : r.type) === "TSTypeParameter" && r.constraint) return t.prettierIgnore = true, e.unignore = true, true;
      }
      function Tp({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n }) {
        return (r == null ? void 0 : r.type) !== "TSMappedType" ? false : (n == null ? void 0 : n.type) === "TSTypeParameter" && n.name ? (le2(n.name, e), true) : (t == null ? void 0 : t.type) === "TSTypeParameter" && t.constraint ? (V2(t.constraint, e), true) : false;
      }
      function dp({ comment: e, enclosingNode: t, followingNode: r }) {
        return !t || t.type !== "SwitchCase" || t.test || !r || r !== t.consequent[0] ? false : (r.type === "BlockStatement" && At2(e) ? wt2(r, e) : Me2(t, e), true);
      }
      function xp({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n }) {
        return we2(t) && ((r.type === "TSArrayType" || r.type === "ArrayTypeAnnotation") && !n || Nt2(r)) ? (V2(M2(false, t.types, -1), e), true) : false;
      }
      function hp({ comment: e, enclosingNode: t, precedingNode: r, followingNode: n }) {
        if (((t == null ? void 0 : t.type) === "ObjectPattern" || (t == null ? void 0 : t.type) === "ArrayPattern") && (n == null ? void 0 : n.type) === "TSTypeAnnotation") return r ? V2(r, e) : Me2(t, e), true;
      }
      function gp({ comment: e, precedingNode: t, enclosingNode: r, followingNode: n }) {
        var s;
        if (!n && (r == null ? void 0 : r.type) === "UnaryExpression" && ((t == null ? void 0 : t.type) === "LogicalExpression" || (t == null ? void 0 : t.type) === "BinaryExpression")) {
          let u = ((s = r.argument.loc) == null ? void 0 : s.start.line) !== t.right.loc.start.line, i = At2(e) || e.loc.start.line === e.loc.end.line, a = e.loc.start.line === t.right.loc.start.line;
          if (u && i && a) return V2(t.right, e), true;
        }
        return false;
      }
      var Nu2 = R2(["ArrowFunctionExpression", "FunctionExpression", "FunctionDeclaration", "ObjectMethod", "ClassMethod", "TSDeclareFunction", "TSCallSignatureDeclaration", "TSConstructSignatureDeclaration", "TSMethodSignature", "TSConstructorType", "TSFunctionType", "TSDeclareMethod"]);
      var Sp = /* @__PURE__ */ new Set(["EmptyStatement", "TemplateElement", "TSEmptyBodyFunctionExpression", "ChainExpression"]);
      function Bp(e) {
        return !Sp.has(e.type);
      }
      function bp(e, t) {
        var r;
        if ((t.parser === "typescript" || t.parser === "flow" || t.parser === "acorn" || t.parser === "espree" || t.parser === "meriyah" || t.parser === "__babel_estree") && e.type === "MethodDefinition" && ((r = e.value) == null ? void 0 : r.type) === "FunctionExpression" && z2(e.value).length === 0 && !e.value.returnType && !O2(e.value.typeParameters) && e.value.body) return [...e.decorators || [], e.key, e.value.body];
      }
      function es(e) {
        let { node: t, parent: r } = e;
        return (X(t) || r && (r.type === "JSXSpreadAttribute" || r.type === "JSXSpreadChild" || we2(r) || (r.type === "ClassDeclaration" || r.type === "ClassExpression") && r.superClass === t)) && (!Lt2(t) || we2(r));
      }
      function Pp(e, { parser: t }) {
        if (t === "flow" || t === "babel-flow") return e = Y2(false, e, /[\s(]/gu, ""), e === "" || e === "/*" || e === "/*::";
      }
      function Gu2(e) {
        switch (e) {
          case "cr":
            return "\r";
          case "crlf":
            return `\r
`;
          default:
            return `
`;
        }
      }
      var Pe2 = Symbol("MODE_BREAK"), at2 = Symbol("MODE_FLAT"), Yt2 = Symbol("cursor"), ts = Symbol("DOC_FILL_PRINTED_LENGTH");
      function Uu2() {
        return { value: "", length: 0, queue: [] };
      }
      function kp(e, t) {
        return rs(e, { type: "indent" }, t);
      }
      function Ip(e, t, r) {
        return t === Number.NEGATIVE_INFINITY ? e.root || Uu2() : t < 0 ? rs(e, { type: "dedent" }, r) : t ? t.type === "root" ? { ...e, root: e } : rs(e, { type: typeof t == "string" ? "stringAlign" : "numberAlign", n: t }, r) : e;
      }
      function rs(e, t, r) {
        let n = t.type === "dedent" ? e.queue.slice(0, -1) : [...e.queue, t], s = "", u = 0, i = 0, a = 0;
        for (let c of n) switch (c.type) {
          case "indent":
            y2(), r.useTabs ? o(1) : p(r.tabWidth);
            break;
          case "stringAlign":
            y2(), s += c.n, u += c.n.length;
            break;
          case "numberAlign":
            i += 1, a += c.n;
            break;
          default:
            throw new Error(`Unexpected type '${c.type}'`);
        }
        return m(), { ...e, value: s, length: u, queue: n };
        function o(c) {
          s += "	".repeat(c), u += r.tabWidth * c;
        }
        function p(c) {
          s += " ".repeat(c), u += c;
        }
        function y2() {
          r.useTabs ? D() : m();
        }
        function D() {
          i > 0 && o(i), C();
        }
        function m() {
          a > 0 && p(a), C();
        }
        function C() {
          i = 0, a = 0;
        }
      }
      function ns(e) {
        let t = 0, r = 0, n = e.length;
        e: for (; n--; ) {
          let s = e[n];
          if (s === Yt2) {
            r++;
            continue;
          }
          for (let u = s.length - 1; u >= 0; u--) {
            let i = s[u];
            if (i === " " || i === "	") t++;
            else {
              e[n] = s.slice(0, u + 1);
              break e;
            }
          }
        }
        if (t > 0 || r > 0) for (e.length = n + 1; r-- > 0; ) e.push(Yt2);
        return t;
      }
      function Nr2(e, t, r, n, s, u) {
        if (r === Number.POSITIVE_INFINITY) return true;
        let i = t.length, a = [e], o = [];
        for (; r >= 0; ) {
          if (a.length === 0) {
            if (i === 0) return true;
            a.push(t[--i]);
            continue;
          }
          let { mode: p, doc: y2 } = a.pop(), D = Se2(y2);
          switch (D) {
            case qe2:
              o.push(y2), r -= rt2(y2);
              break;
            case he2:
            case Oe2: {
              let m = D === he2 ? y2 : y2.parts, C = y2[ts] ?? 0;
              for (let c = m.length - 1; c >= C; c--) a.push({ mode: p, doc: m[c] });
              break;
            }
            case Ve2:
            case $e:
            case Qe2:
            case ge2:
              a.push({ mode: p, doc: y2.contents });
              break;
            case Ke2:
              r += ns(o);
              break;
            case me2: {
              if (u && y2.break) return false;
              let m = y2.break ? Pe2 : p, C = y2.expandedStates && m === Pe2 ? M2(false, y2.expandedStates, -1) : y2.contents;
              a.push({ mode: m, doc: C });
              break;
            }
            case Te2: {
              let C = (y2.groupId ? s[y2.groupId] || at2 : p) === Pe2 ? y2.breakContents : y2.flatContents;
              C && a.push({ mode: p, doc: C });
              break;
            }
            case ie2:
              if (p === Pe2 || y2.hard) return true;
              y2.soft || (o.push(" "), r--);
              break;
            case ze2:
              n = true;
              break;
            case We2:
              if (n) return false;
              break;
          }
        }
        return false;
      }
      function ss(e, t) {
        let r = {}, n = t.printWidth, s = Gu2(t.endOfLine), u = 0, i = [{ ind: Uu2(), mode: Pe2, doc: e }], a = [], o = false, p = [], y2 = 0;
        for (Bu2(e); i.length > 0; ) {
          let { ind: m, mode: C, doc: c } = i.pop();
          switch (Se2(c)) {
            case qe2: {
              let A2 = s !== `
` ? Y2(false, c, `
`, s) : c;
              a.push(A2), i.length > 0 && (u += rt2(A2));
              break;
            }
            case he2:
              for (let A2 = c.length - 1; A2 >= 0; A2--) i.push({ ind: m, mode: C, doc: c[A2] });
              break;
            case st2:
              if (y2 >= 2) throw new Error("There are too many 'cursor' in doc.");
              a.push(Yt2), y2++;
              break;
            case Ve2:
              i.push({ ind: kp(m, t), mode: C, doc: c.contents });
              break;
            case $e:
              i.push({ ind: Ip(m, c.n, t), mode: C, doc: c.contents });
              break;
            case Ke2:
              u -= ns(a);
              break;
            case me2:
              switch (C) {
                case at2:
                  if (!o) {
                    i.push({ ind: m, mode: c.break ? Pe2 : at2, doc: c.contents });
                    break;
                  }
                case Pe2: {
                  o = false;
                  let A2 = { ind: m, mode: at2, doc: c.contents }, d = n - u, S2 = p.length > 0;
                  if (!c.break && Nr2(A2, i, d, S2, r)) i.push(A2);
                  else if (c.expandedStates) {
                    let g = M2(false, c.expandedStates, -1);
                    if (c.break) {
                      i.push({ ind: m, mode: Pe2, doc: g });
                      break;
                    } else for (let _2 = 1; _2 < c.expandedStates.length + 1; _2++) if (_2 >= c.expandedStates.length) {
                      i.push({ ind: m, mode: Pe2, doc: g });
                      break;
                    } else {
                      let v = c.expandedStates[_2], j = { ind: m, mode: at2, doc: v };
                      if (Nr2(j, i, d, S2, r)) {
                        i.push(j);
                        break;
                      }
                    }
                  } else i.push({ ind: m, mode: Pe2, doc: c.contents });
                  break;
                }
              }
              c.id && (r[c.id] = M2(false, i, -1).mode);
              break;
            case Oe2: {
              let A2 = n - u, d = c[ts] ?? 0, { parts: S2 } = c, g = S2.length - d;
              if (g === 0) break;
              let _2 = S2[d + 0], v = S2[d + 1], j = { ind: m, mode: at2, doc: _2 }, I2 = { ind: m, mode: Pe2, doc: _2 }, G = Nr2(j, [], A2, p.length > 0, r, true);
              if (g === 1) {
                G ? i.push(j) : i.push(I2);
                break;
              }
              let P2 = { ind: m, mode: at2, doc: v }, N2 = { ind: m, mode: Pe2, doc: v };
              if (g === 2) {
                G ? i.push(P2, j) : i.push(N2, I2);
                break;
              }
              let ue2 = S2[d + 2], Q2 = { ind: m, mode: C, doc: { ...c, [ts]: d + 2 } };
              Nr2({ ind: m, mode: at2, doc: [_2, v, ue2] }, [], A2, p.length > 0, r, true) ? i.push(Q2, P2, j) : G ? i.push(Q2, N2, j) : i.push(Q2, N2, I2);
              break;
            }
            case Te2:
            case Qe2: {
              let A2 = c.groupId ? r[c.groupId] : C;
              if (A2 === Pe2) {
                let d = c.type === Te2 ? c.breakContents : c.negate ? c.contents : f(c.contents);
                d && i.push({ ind: m, mode: C, doc: d });
              }
              if (A2 === at2) {
                let d = c.type === Te2 ? c.flatContents : c.negate ? f(c.contents) : c.contents;
                d && i.push({ ind: m, mode: C, doc: d });
              }
              break;
            }
            case ze2:
              p.push({ ind: m, mode: C, doc: c.contents });
              break;
            case We2:
              p.length > 0 && i.push({ ind: m, mode: C, doc: Xn2 });
              break;
            case ie2:
              switch (C) {
                case at2:
                  if (c.hard) o = true;
                  else {
                    c.soft || (a.push(" "), u += 1);
                    break;
                  }
                case Pe2:
                  if (p.length > 0) {
                    i.push({ ind: m, mode: C, doc: c }, ...p.reverse()), p.length = 0;
                    break;
                  }
                  c.literal ? m.root ? (a.push(s, m.root.value), u = m.root.length) : (a.push(s), u = 0) : (u -= ns(a), a.push(s + m.value), u = m.length);
                  break;
              }
              break;
            case ge2:
              i.push({ ind: m, mode: C, doc: c.contents });
              break;
            case _e2:
              break;
            default:
              throw new dt2(c);
          }
          i.length === 0 && p.length > 0 && (i.push(...p.reverse()), p.length = 0);
        }
        let D = a.indexOf(Yt2);
        if (D !== -1) {
          let m = a.indexOf(Yt2, D + 1);
          if (m === -1) return { formatted: a.filter((d) => d !== Yt2).join("") };
          let C = a.slice(0, D).join(""), c = a.slice(D + 1, m).join(""), A2 = a.slice(m + 1).join("");
          return { formatted: C + c + A2, cursorNodeStart: C.length, cursorNodeText: c };
        }
        return { formatted: a.join("") };
      }
      function Lp(e, t, r = 0) {
        let n = 0;
        for (let s = r; s < e.length; ++s) e[s] === "	" ? n = n + t - n % t : n++;
        return n;
      }
      var Yu2 = Lp;
      function wp(e, t) {
        let r = e.lastIndexOf(`
`);
        return r === -1 ? 0 : Yu2(e.slice(r + 1).match(/^[\t ]*/u)[0], t);
      }
      var Xu2 = wp;
      function Gr2(e, t, r) {
        let { node: n } = e;
        if (n.type === "TemplateLiteral" && vp(e)) {
          let p = Op(e, r, t);
          if (p) return p;
        }
        let u = "expressions";
        n.type === "TSTemplateLiteralType" && (u = "types");
        let i = [], a = e.map(t, u);
        i.push(je2, "`");
        let o = 0;
        return e.each(({ index: p, node: y2 }) => {
          if (i.push(t()), y2.tail) return;
          let { tabWidth: D } = r, m = y2.value.raw, C = m.includes(`
`) ? Xu2(m, D) : o;
          o = C;
          let c = a[p], A2 = n[u][p], d = de2(r.originalText, k2(y2), q2(n.quasis[p + 1]));
          if (!d) {
            let g = ss(c, { ...r, printWidth: Number.POSITIVE_INFINITY }).formatted;
            g.includes(`
`) ? d = true : c = g;
          }
          d && (T2(A2) || A2.type === "Identifier" || W2(A2) || A2.type === "ConditionalExpression" || A2.type === "SequenceExpression" || Ae2(A2) || De2(A2)) && (c = [f([E, c]), E]);
          let S2 = C === 0 && m.endsWith(`
`) ? Be2(Number.NEGATIVE_INFINITY, c) : Lu2(c, C, D);
          i.push(l(["${", S2, je2, "}"]));
        }, "quasis"), i.push("`"), i;
      }
      function Hu2(e, t) {
        let r = t("quasi");
        return ut2(r.label && { tagged: true, ...r.label }, [t("tag"), t(e.node.typeArguments ? "typeArguments" : "typeParameters"), je2, r]);
      }
      function Op(e, t, r) {
        let { node: n } = e, s = n.quasis[0].value.raw.trim().split(/\s*\|\s*/u);
        if (s.length > 1 || s.some((u) => u.length > 0)) {
          t.__inJestEach = true;
          let u = e.map(r, "expressions");
          t.__inJestEach = false;
          let i = [], a = u.map((m) => "${" + ss(m, { ...t, printWidth: Number.POSITIVE_INFINITY, endOfLine: "lf" }).formatted + "}"), o = [{ hasLineBreak: false, cells: [] }];
          for (let m = 1; m < n.quasis.length; m++) {
            let C = M2(false, o, -1), c = a[m - 1];
            C.cells.push(c), c.includes(`
`) && (C.hasLineBreak = true), n.quasis[m].value.raw.includes(`
`) && o.push({ hasLineBreak: false, cells: [] });
          }
          let p = Math.max(s.length, ...o.map((m) => m.cells.length)), y2 = Array.from({ length: p }).fill(0), D = [{ cells: s }, ...o.filter((m) => m.cells.length > 0)];
          for (let { cells: m } of D.filter((C) => !C.hasLineBreak)) for (let [C, c] of m.entries()) y2[C] = Math.max(y2[C], rt2(c));
          return i.push(je2, "`", f([F, b(F, D.map((m) => b(" | ", m.cells.map((C, c) => m.hasLineBreak ? C : C + " ".repeat(y2[c] - rt2(C))))))]), F, "`"), i;
        }
      }
      function _p(e, t) {
        let { node: r } = e, n = t();
        return T2(r) && (n = l([f([E, n]), E])), ["${", n, je2, "}"];
      }
      function Xt2(e, t) {
        return e.map((r) => _p(r, t), "expressions");
      }
      function Ur2(e, t) {
        return yt(e, (r) => typeof r == "string" ? t ? Y2(false, r, /(\\*)`/gu, "$1$1\\`") : us(r) : r);
      }
      function us(e) {
        return Y2(false, e, /([\\`]|\$\{)/gu, String.raw`\$1`);
      }
      function vp({ node: e, parent: t }) {
        let r = /^[fx]?(?:describe|it|test)$/u;
        return t.type === "TaggedTemplateExpression" && t.quasi === e && t.tag.type === "MemberExpression" && t.tag.property.type === "Identifier" && t.tag.property.name === "each" && (t.tag.object.type === "Identifier" && r.test(t.tag.object.name) || t.tag.object.type === "MemberExpression" && t.tag.object.property.type === "Identifier" && (t.tag.object.property.name === "only" || t.tag.object.property.name === "skip") && t.tag.object.object.type === "Identifier" && r.test(t.tag.object.object.name));
      }
      var as = [(e, t) => e.type === "ObjectExpression" && t === "properties", (e, t) => e.type === "CallExpression" && e.callee.type === "Identifier" && e.callee.name === "Component" && t === "arguments", (e, t) => e.type === "Decorator" && t === "expression"];
      function Vu2(e) {
        let t = (n) => n.type === "TemplateLiteral", r = (n, s) => Ce2(n) && !n.computed && n.key.type === "Identifier" && n.key.name === "styles" && s === "value";
        return e.match(t, (n, s) => U2(n) && s === "elements", r, ...as) || e.match(t, r, ...as);
      }
      function $u2(e) {
        return e.match((t) => t.type === "TemplateLiteral", (t, r) => Ce2(t) && !t.computed && t.key.type === "Identifier" && t.key.name === "template" && r === "value", ...as);
      }
      function is2(e, t) {
        return T2(e, h.Block | h.Leading, ({ value: r }) => r === ` ${t} `);
      }
      function Yr2({ node: e, parent: t }, r) {
        return is2(e, r) || jp(t) && is2(t, r) || t.type === "ExpressionStatement" && is2(t, r);
      }
      function jp(e) {
        return e.type === "AsConstExpression" || e.type === "TSAsExpression" && e.typeAnnotation.type === "TSTypeReference" && e.typeAnnotation.typeName.type === "Identifier" && e.typeAnnotation.typeName.name === "const";
      }
      async function Mp(e, t, r) {
        let { node: n } = r, s = n.quasis.map((y2) => y2.value.raw), u = 0, i = s.reduce((y2, D, m) => m === 0 ? D : y2 + "@prettier-placeholder-" + u++ + "-id" + D, ""), a = await e(i, { parser: "scss" }), o = Xt2(r, t), p = Rp(a, o);
        if (!p) throw new Error("Couldn't insert all the expressions");
        return ["`", f([F, p]), E, "`"];
      }
      function Rp(e, t) {
        if (!O2(t)) return e;
        let r = 0, n = yt(Ut2(e), (s) => typeof s != "string" || !s.includes("@prettier-placeholder") ? s : s.split(/@prettier-placeholder-(\d+)-id/u).map((u, i) => i % 2 === 0 ? ve2(u) : (r++, t[u])));
        return t.length === r ? n : null;
      }
      function Jp({ node: e, parent: t, grandparent: r }) {
        return r && e.quasis && t.type === "JSXExpressionContainer" && r.type === "JSXElement" && r.openingElement.name.name === "style" && r.openingElement.attributes.some((n) => n.type === "JSXAttribute" && n.name.name === "jsx") || (t == null ? void 0 : t.type) === "TaggedTemplateExpression" && t.tag.type === "Identifier" && t.tag.name === "css" || (t == null ? void 0 : t.type) === "TaggedTemplateExpression" && t.tag.type === "MemberExpression" && t.tag.object.name === "css" && (t.tag.property.name === "global" || t.tag.property.name === "resolve");
      }
      function Xr2(e) {
        return e.type === "Identifier" && e.name === "styled";
      }
      function Ku2(e) {
        return /^[A-Z]/u.test(e.object.name) && e.property.name === "extend";
      }
      function qp({ parent: e }) {
        if (!e || e.type !== "TaggedTemplateExpression") return false;
        let t = e.tag.type === "ParenthesizedExpression" ? e.tag.expression : e.tag;
        switch (t.type) {
          case "MemberExpression":
            return Xr2(t.object) || Ku2(t);
          case "CallExpression":
            return Xr2(t.callee) || t.callee.type === "MemberExpression" && (t.callee.object.type === "MemberExpression" && (Xr2(t.callee.object.object) || Ku2(t.callee.object)) || t.callee.object.type === "CallExpression" && Xr2(t.callee.object.callee));
          case "Identifier":
            return t.name === "css";
          default:
            return false;
        }
      }
      function Wp({ parent: e, grandparent: t }) {
        return (t == null ? void 0 : t.type) === "JSXAttribute" && e.type === "JSXExpressionContainer" && t.name.type === "JSXIdentifier" && t.name.name === "css";
      }
      function Np(e) {
        if (Jp(e) || qp(e) || Wp(e) || Vu2(e)) return Mp;
      }
      var Qu2 = Np;
      async function Gp(e, t, r) {
        let { node: n } = r, s = n.quasis.length, u = Xt2(r, t), i = [];
        for (let a = 0; a < s; a++) {
          let o = n.quasis[a], p = a === 0, y2 = a === s - 1, D = o.value.cooked, m = D.split(`
`), C = m.length, c = u[a], A2 = C > 2 && m[0].trim() === "" && m[1].trim() === "", d = C > 2 && m[C - 1].trim() === "" && m[C - 2].trim() === "", S2 = m.every((_2) => /^\s*(?:#[^\n\r]*)?$/u.test(_2));
          if (!y2 && /#[^\n\r]*$/u.test(m[C - 1])) return null;
          let g = null;
          S2 ? g = Up(m) : g = await e(D, { parser: "graphql" }), g ? (g = Ur2(g, false), !p && A2 && i.push(""), i.push(g), !y2 && d && i.push("")) : !p && !y2 && A2 && i.push(""), c && i.push(c);
        }
        return ["`", f([F, b(F, i)]), F, "`"];
      }
      function Up(e) {
        let t = [], r = false, n = e.map((s) => s.trim());
        for (let [s, u] of n.entries()) u !== "" && (n[s - 1] === "" && r ? t.push([F, u]) : t.push(u), r = true);
        return t.length === 0 ? null : b(F, t);
      }
      function Yp({ node: e, parent: t }) {
        return Yr2({ node: e, parent: t }, "GraphQL") || t && (t.type === "TaggedTemplateExpression" && (t.tag.type === "MemberExpression" && t.tag.object.name === "graphql" && t.tag.property.name === "experimental" || t.tag.type === "Identifier" && (t.tag.name === "gql" || t.tag.name === "graphql")) || t.type === "CallExpression" && t.callee.type === "Identifier" && t.callee.name === "graphql");
      }
      function Xp(e) {
        if (Yp(e)) return Gp;
      }
      var zu2 = Xp;
      var os = 0;
      async function Zu2(e, t, r, n, s) {
        let { node: u } = n, i = os;
        os = os + 1 >>> 0;
        let a = (S2) => `PRETTIER_HTML_PLACEHOLDER_${S2}_${i}_IN_JS`, o = u.quasis.map((S2, g, _2) => g === _2.length - 1 ? S2.value.cooked : S2.value.cooked + a(g)).join(""), p = Xt2(n, r), y2 = new RegExp(a(String.raw`(\d+)`), "gu"), D = 0, m = await t(o, { parser: e, __onHtmlRoot(S2) {
          D = S2.children.length;
        } }), C = yt(m, (S2) => {
          if (typeof S2 != "string") return S2;
          let g = [], _2 = S2.split(y2);
          for (let v = 0; v < _2.length; v++) {
            let j = _2[v];
            if (v % 2 === 0) {
              j && (j = us(j), s.__embeddedInHtml && (j = Y2(false, j, /<\/(?=script\b)/giu, String.raw`<\/`)), g.push(j));
              continue;
            }
            let I2 = Number(j);
            g.push(p[I2]);
          }
          return g;
        }), c = /^\s/u.test(o) ? " " : "", A2 = /\s$/u.test(o) ? " " : "", d = s.htmlWhitespaceSensitivity === "ignore" ? F : c && A2 ? x2 : null;
        return d ? l(["`", f([d, l(C)]), d, "`"]) : ut2({ hug: false }, l(["`", c, D > 1 ? f(l(C)) : l(C), A2, "`"]));
      }
      function Hp(e) {
        return Yr2(e, "HTML") || e.match((t) => t.type === "TemplateLiteral", (t, r) => t.type === "TaggedTemplateExpression" && t.tag.type === "Identifier" && t.tag.name === "html" && r === "quasi");
      }
      var Vp = Zu2.bind(void 0, "html"), $p = Zu2.bind(void 0, "angular");
      function Kp(e) {
        if (Hp(e)) return Vp;
        if ($u2(e)) return $p;
      }
      var ei2 = Kp;
      async function Qp(e, t, r) {
        let { node: n } = r, s = Y2(false, n.quasis[0].value.raw, /((?:\\\\)*)\\`/gu, (o, p) => "\\".repeat(p.length / 2) + "`"), u = zp(s), i = u !== "";
        i && (s = Y2(false, s, new RegExp(`^${u}`, "gmu"), ""));
        let a = Ur2(await e(s, { parser: "markdown", __inJsTemplate: true }), true);
        return ["`", i ? f([E, a]) : [Rr2, Iu2(a)], E, "`"];
      }
      function zp(e) {
        let t = e.match(/^([^\S\n]*)\S/mu);
        return t === null ? "" : t[1];
      }
      function Zp(e) {
        if (ec(e)) return Qp;
      }
      function ec({ node: e, parent: t }) {
        return (t == null ? void 0 : t.type) === "TaggedTemplateExpression" && e.quasis.length === 1 && t.tag.type === "Identifier" && (t.tag.name === "md" || t.tag.name === "markdown");
      }
      var ti2 = Zp;
      function tc(e) {
        let { node: t } = e;
        if (t.type !== "TemplateLiteral" || rc(t)) return;
        let r;
        for (let n of [Qu2, zu2, ei2, ti2]) if (r = n(e), !!r) return t.quasis.length === 1 && t.quasis[0].value.raw.trim() === "" ? "``" : async (...s) => {
          let u = await r(...s);
          return u && ut2({ embed: true, ...u.label }, u);
        };
      }
      function rc({ quasis: e }) {
        return e.some(({ value: { cooked: t } }) => t === null);
      }
      var ri2 = tc;
      var nc = /\*\/$/, sc = /^\/\*\*?/, ii2 = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, uc = /(^|\s+)\/\/([^\n\r]*)/g, ni2 = /^(\r?\n)+/, ic = /(?:^|\r?\n) *(@[^\n\r]*?) *\r?\n *(?![^\n\r@]*\/\/[^]*)([^\s@][^\n\r@]+?) *\r?\n/g, si2 = /(?:^|\r?\n) *@(\S+) *([^\n\r]*)/g, ac = /(\r?\n|^) *\* ?/g, ai2 = [];
      function oi2(e) {
        let t = e.match(ii2);
        return t ? t[0].trimStart() : "";
      }
      function pi2(e) {
        let t = e.match(ii2), r = t == null ? void 0 : t[0];
        return r == null ? e : e.slice(r.length);
      }
      function ci2(e) {
        let t = `
`;
        e = Y2(false, e.replace(sc, "").replace(nc, ""), ac, "$1");
        let r = "";
        for (; r !== e; ) r = e, e = Y2(false, e, ic, `${t}$1 $2${t}`);
        e = e.replace(ni2, "").trimEnd();
        let n = /* @__PURE__ */ Object.create(null), s = Y2(false, e, si2, "").replace(ni2, "").trimEnd(), u;
        for (; u = si2.exec(e); ) {
          let i = Y2(false, u[2], uc, "");
          if (typeof n[u[1]] == "string" || Array.isArray(n[u[1]])) {
            let a = n[u[1]];
            n[u[1]] = [...ai2, ...Array.isArray(a) ? a : [a], i];
          } else n[u[1]] = i;
        }
        return { comments: s, pragmas: n };
      }
      function li2({ comments: e = "", pragmas: t = {} }) {
        let r = `
`, n = "/**", s = " *", u = " */", i = Object.keys(t), a = i.flatMap((p) => ui2(p, t[p])).map((p) => `${s} ${p}${r}`).join("");
        if (!e) {
          if (i.length === 0) return "";
          if (i.length === 1 && !Array.isArray(t[i[0]])) {
            let p = t[i[0]];
            return `${n} ${ui2(i[0], p)[0]}${u}`;
          }
        }
        let o = e.split(r).map((p) => `${s} ${p}`).join(r) + r;
        return n + r + (e ? o : "") + (e && i.length > 0 ? s + r : "") + a + u;
      }
      function ui2(e, t) {
        return [...ai2, ...Array.isArray(t) ? t : [t]].map((r) => `@${e} ${r}`.trim());
      }
      function oc(e) {
        if (!e.startsWith("#!")) return "";
        let t = e.indexOf(`
`);
        return t === -1 ? e : e.slice(0, t);
      }
      var mi2 = oc;
      function pc(e) {
        let t = mi2(e);
        t && (e = e.slice(t.length + 1));
        let r = oi2(e), { pragmas: n, comments: s } = ci2(r);
        return { shebang: t, text: e, pragmas: n, comments: s };
      }
      function yi2(e) {
        let { shebang: t, text: r, pragmas: n, comments: s } = pc(e), u = pi2(r), i = li2({ pragmas: { format: "", ...n }, comments: s.trimStart() });
        return (t ? `${t}
` : "") + i + (u.startsWith(`
`) ? `
` : `

`) + u;
      }
      function cc(e, t) {
        let { originalText: r, [Symbol.for("comments")]: n, locStart: s, locEnd: u, [Symbol.for("printedComments")]: i } = t, { node: a } = e, o = s(a), p = u(a);
        for (let y2 of n) s(y2) >= o && u(y2) <= p && i.add(y2);
        return r.slice(o, p);
      }
      var Di = cc;
      function ps(e, t) {
        var u, i, a, o, p, y2, D, m, C;
        if (e.isRoot) return false;
        let { node: r, key: n, parent: s } = e;
        if (t.__isInHtmlInterpolation && !t.bracketSpacing && Dc(r) && yr2(e)) return true;
        if (lc(r)) return false;
        if (r.type === "Identifier") {
          if ((u = r.extra) != null && u.parenthesized && /^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/u.test(r.name) || n === "left" && (r.name === "async" && !s.await || r.name === "let") && s.type === "ForOfStatement") return true;
          if (r.name === "let") {
            let c = (i = e.findAncestor((A2) => A2.type === "ForOfStatement")) == null ? void 0 : i.left;
            if (c && ae(c, (A2) => A2 === r)) return true;
          }
          if (n === "object" && r.name === "let" && s.type === "MemberExpression" && s.computed && !s.optional) {
            let c = e.findAncestor((d) => d.type === "ExpressionStatement" || d.type === "ForStatement" || d.type === "ForInStatement"), A2 = c ? c.type === "ExpressionStatement" ? c.expression : c.type === "ForStatement" ? c.init : c.left : void 0;
            if (A2 && ae(A2, (d) => d === r)) return true;
          }
          if (n === "expression") switch (r.name) {
            case "await":
            case "interface":
            case "module":
            case "using":
            case "yield":
            case "let":
            case "component":
            case "hook":
            case "type": {
              let c = e.findAncestor((A2) => !Ae2(A2));
              if (c !== s && c.type === "ExpressionStatement") return true;
            }
          }
          return false;
        }
        if (r.type === "ObjectExpression" || r.type === "FunctionExpression" || r.type === "ClassExpression" || r.type === "DoExpression") {
          let c = (a = e.findAncestor((A2) => A2.type === "ExpressionStatement")) == null ? void 0 : a.expression;
          if (c && ae(c, (A2) => A2 === r)) return true;
        }
        if (r.type === "ObjectExpression") {
          let c = (o = e.findAncestor((A2) => A2.type === "ArrowFunctionExpression")) == null ? void 0 : o.body;
          if (c && c.type !== "SequenceExpression" && c.type !== "AssignmentExpression" && ae(c, (A2) => A2 === r)) return true;
        }
        switch (s.type) {
          case "ParenthesizedExpression":
            return false;
          case "ClassDeclaration":
          case "ClassExpression":
            if (n === "superClass" && (r.type === "ArrowFunctionExpression" || r.type === "AssignmentExpression" || r.type === "AwaitExpression" || r.type === "BinaryExpression" || r.type === "ConditionalExpression" || r.type === "LogicalExpression" || r.type === "NewExpression" || r.type === "ObjectExpression" || r.type === "SequenceExpression" || r.type === "TaggedTemplateExpression" || r.type === "UnaryExpression" || r.type === "UpdateExpression" || r.type === "YieldExpression" || r.type === "TSNonNullExpression" || r.type === "ClassExpression" && O2(r.decorators))) return true;
            break;
          case "ExportDefaultDeclaration":
            return fi2(e, t) || r.type === "SequenceExpression";
          case "Decorator":
            if (n === "expression" && !Ec(r)) return true;
            break;
          case "TypeAnnotation":
            if (e.match(void 0, void 0, (c, A2) => A2 === "returnType" && c.type === "ArrowFunctionExpression") && yc(r)) return true;
            break;
          case "BinaryExpression":
            if (n === "left" && (s.operator === "in" || s.operator === "instanceof") && r.type === "UnaryExpression") return true;
            break;
          case "VariableDeclarator":
            if (n === "init" && e.match(void 0, void 0, (c, A2) => A2 === "declarations" && c.type === "VariableDeclaration", (c, A2) => A2 === "left" && c.type === "ForInStatement")) return true;
            break;
        }
        switch (r.type) {
          case "UpdateExpression":
            if (s.type === "UnaryExpression") return r.prefix && (r.operator === "++" && s.operator === "+" || r.operator === "--" && s.operator === "-");
          case "UnaryExpression":
            switch (s.type) {
              case "UnaryExpression":
                return r.operator === s.operator && (r.operator === "+" || r.operator === "-");
              case "BindExpression":
                return true;
              case "MemberExpression":
              case "OptionalMemberExpression":
                return n === "object";
              case "TaggedTemplateExpression":
                return true;
              case "NewExpression":
              case "CallExpression":
              case "OptionalCallExpression":
                return n === "callee";
              case "BinaryExpression":
                return n === "left" && s.operator === "**";
              case "TSNonNullExpression":
                return true;
              default:
                return false;
            }
          case "BinaryExpression":
            if (s.type === "UpdateExpression" || r.operator === "in" && mc(e)) return true;
            if (r.operator === "|>" && ((p = r.extra) != null && p.parenthesized)) {
              let c = e.grandparent;
              if (c.type === "BinaryExpression" && c.operator === "|>") return true;
            }
          case "TSTypeAssertion":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "AsExpression":
          case "AsConstExpression":
          case "SatisfiesExpression":
          case "LogicalExpression":
            switch (s.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "AsExpression":
              case "AsConstExpression":
              case "SatisfiesExpression":
                return !Ae2(r);
              case "ConditionalExpression":
                return Ae2(r) || lu2(r);
              case "CallExpression":
              case "NewExpression":
              case "OptionalCallExpression":
                return n === "callee";
              case "ClassExpression":
              case "ClassDeclaration":
                return n === "superClass";
              case "TSTypeAssertion":
              case "TaggedTemplateExpression":
              case "UnaryExpression":
              case "JSXSpreadAttribute":
              case "SpreadElement":
              case "BindExpression":
              case "AwaitExpression":
              case "TSNonNullExpression":
              case "UpdateExpression":
                return true;
              case "MemberExpression":
              case "OptionalMemberExpression":
                return n === "object";
              case "AssignmentExpression":
              case "AssignmentPattern":
                return n === "left" && (r.type === "TSTypeAssertion" || Ae2(r));
              case "LogicalExpression":
                if (r.type === "LogicalExpression") return s.operator !== r.operator;
              case "BinaryExpression": {
                let { operator: c, type: A2 } = r;
                if (!c && A2 !== "TSTypeAssertion") return true;
                let d = sr2(c), S2 = s.operator, g = sr2(S2);
                return g > d || n === "right" && g === d || g === d && !ar2(S2, c) ? true : g < d && c === "%" ? S2 === "+" || S2 === "-" : !!Fu2(S2);
              }
              default:
                return false;
            }
          case "SequenceExpression":
            switch (s.type) {
              case "ReturnStatement":
                return false;
              case "ForStatement":
                return false;
              case "ExpressionStatement":
                return n !== "expression";
              case "ArrowFunctionExpression":
                return n !== "body";
              default:
                return true;
            }
          case "YieldExpression":
            if (s.type === "AwaitExpression" || s.type === "TSTypeAssertion") return true;
          case "AwaitExpression":
            switch (s.type) {
              case "TaggedTemplateExpression":
              case "UnaryExpression":
              case "LogicalExpression":
              case "SpreadElement":
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "AsExpression":
              case "AsConstExpression":
              case "SatisfiesExpression":
              case "BindExpression":
                return true;
              case "MemberExpression":
              case "OptionalMemberExpression":
                return n === "object";
              case "NewExpression":
              case "CallExpression":
              case "OptionalCallExpression":
                return n === "callee";
              case "ConditionalExpression":
                return n === "test";
              case "BinaryExpression":
                return !(!r.argument && s.operator === "|>");
              default:
                return false;
            }
          case "TSFunctionType":
            if (e.match((c) => c.type === "TSFunctionType", (c, A2) => A2 === "typeAnnotation" && c.type === "TSTypeAnnotation", (c, A2) => A2 === "returnType" && c.type === "ArrowFunctionExpression")) return true;
          case "TSConditionalType":
          case "TSConstructorType":
          case "ConditionalTypeAnnotation":
            if (n === "extendsType" && Je2(r) && s.type === r.type || n === "checkType" && Je2(s)) return true;
            if (n === "extendsType" && s.type === "TSConditionalType") {
              let { typeAnnotation: c } = r.returnType || r.typeAnnotation;
              if (c.type === "TSTypePredicate" && c.typeAnnotation && (c = c.typeAnnotation.typeAnnotation), c.type === "TSInferType" && c.typeParameter.constraint) return true;
            }
          case "TSUnionType":
          case "TSIntersectionType":
            if ((we2(s) || Nt2(s)) && s.types.length > 1 && (!r.types || r.types.length > 1)) return true;
          case "TSInferType":
            if (r.type === "TSInferType") {
              if (s.type === "TSRestType") return false;
              if (n === "types" && (s.type === "TSUnionType" || s.type === "TSIntersectionType") && r.typeParameter.type === "TSTypeParameter" && r.typeParameter.constraint) return true;
            }
          case "TSTypeOperator":
            return s.type === "TSArrayType" || s.type === "TSOptionalType" || s.type === "TSRestType" || n === "objectType" && s.type === "TSIndexedAccessType" || s.type === "TSTypeOperator" || s.type === "TSTypeAnnotation" && e.grandparent.type.startsWith("TSJSDoc");
          case "TSTypeQuery":
            return n === "objectType" && s.type === "TSIndexedAccessType" || n === "elementType" && s.type === "TSArrayType";
          case "TypeOperator":
            return s.type === "ArrayTypeAnnotation" || s.type === "NullableTypeAnnotation" || n === "objectType" && (s.type === "IndexedAccessType" || s.type === "OptionalIndexedAccessType") || s.type === "TypeOperator";
          case "TypeofTypeAnnotation":
            return n === "objectType" && (s.type === "IndexedAccessType" || s.type === "OptionalIndexedAccessType") || n === "elementType" && s.type === "ArrayTypeAnnotation";
          case "ArrayTypeAnnotation":
            return s.type === "NullableTypeAnnotation";
          case "IntersectionTypeAnnotation":
          case "UnionTypeAnnotation":
            return s.type === "TypeOperator" || s.type === "ArrayTypeAnnotation" || s.type === "NullableTypeAnnotation" || s.type === "IntersectionTypeAnnotation" || s.type === "UnionTypeAnnotation" || n === "objectType" && (s.type === "IndexedAccessType" || s.type === "OptionalIndexedAccessType");
          case "InferTypeAnnotation":
          case "NullableTypeAnnotation":
            return s.type === "ArrayTypeAnnotation" || n === "objectType" && (s.type === "IndexedAccessType" || s.type === "OptionalIndexedAccessType");
          case "ComponentTypeAnnotation":
          case "FunctionTypeAnnotation": {
            if (r.type === "ComponentTypeAnnotation" && (r.rendersType === null || r.rendersType === void 0)) return false;
            if (e.match(void 0, (A2, d) => d === "typeAnnotation" && A2.type === "TypeAnnotation", (A2, d) => d === "returnType" && A2.type === "ArrowFunctionExpression") || e.match(void 0, (A2, d) => d === "typeAnnotation" && A2.type === "TypePredicate", (A2, d) => d === "typeAnnotation" && A2.type === "TypeAnnotation", (A2, d) => d === "returnType" && A2.type === "ArrowFunctionExpression")) return true;
            let c = s.type === "NullableTypeAnnotation" ? e.grandparent : s;
            return c.type === "UnionTypeAnnotation" || c.type === "IntersectionTypeAnnotation" || c.type === "ArrayTypeAnnotation" || n === "objectType" && (c.type === "IndexedAccessType" || c.type === "OptionalIndexedAccessType") || n === "checkType" && s.type === "ConditionalTypeAnnotation" || n === "extendsType" && s.type === "ConditionalTypeAnnotation" && ((y2 = r.returnType) == null ? void 0 : y2.type) === "InferTypeAnnotation" && ((D = r.returnType) == null ? void 0 : D.typeParameter.bound) || c.type === "NullableTypeAnnotation" || s.type === "FunctionTypeParam" && s.name === null && z2(r).some((A2) => {
              var d;
              return ((d = A2.typeAnnotation) == null ? void 0 : d.type) === "NullableTypeAnnotation";
            });
          }
          case "OptionalIndexedAccessType":
            return n === "objectType" && s.type === "IndexedAccessType";
          case "StringLiteral":
          case "NumericLiteral":
          case "Literal":
            if (typeof r.value == "string" && s.type === "ExpressionStatement" && !s.directive) {
              let c = e.grandparent;
              return c.type === "Program" || c.type === "BlockStatement";
            }
            return n === "object" && s.type === "MemberExpression" && typeof r.value == "number";
          case "AssignmentExpression": {
            let c = e.grandparent;
            return n === "body" && s.type === "ArrowFunctionExpression" ? true : n === "key" && (s.type === "ClassProperty" || s.type === "PropertyDefinition") && s.computed || (n === "init" || n === "update") && s.type === "ForStatement" ? false : s.type === "ExpressionStatement" ? r.left.type === "ObjectPattern" : !(n === "key" && s.type === "TSPropertySignature" || s.type === "AssignmentExpression" || s.type === "SequenceExpression" && c.type === "ForStatement" && (c.init === s || c.update === s) || n === "value" && s.type === "Property" && c.type === "ObjectPattern" && c.properties.includes(s) || s.type === "NGChainedExpression" || n === "node" && s.type === "JsExpressionRoot");
          }
          case "ConditionalExpression":
            switch (s.type) {
              case "TaggedTemplateExpression":
              case "UnaryExpression":
              case "SpreadElement":
              case "BinaryExpression":
              case "LogicalExpression":
              case "NGPipeExpression":
              case "ExportDefaultDeclaration":
              case "AwaitExpression":
              case "JSXSpreadAttribute":
              case "TSTypeAssertion":
              case "TypeCastExpression":
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "AsExpression":
              case "AsConstExpression":
              case "SatisfiesExpression":
              case "TSNonNullExpression":
                return true;
              case "NewExpression":
              case "CallExpression":
              case "OptionalCallExpression":
                return n === "callee";
              case "ConditionalExpression":
                return t.experimentalTernaries ? false : n === "test";
              case "MemberExpression":
              case "OptionalMemberExpression":
                return n === "object";
              default:
                return false;
            }
          case "FunctionExpression":
            switch (s.type) {
              case "NewExpression":
              case "CallExpression":
              case "OptionalCallExpression":
                return n === "callee";
              case "TaggedTemplateExpression":
                return true;
              default:
                return false;
            }
          case "ArrowFunctionExpression":
            switch (s.type) {
              case "BinaryExpression":
                return s.operator !== "|>" || ((m = r.extra) == null ? void 0 : m.parenthesized);
              case "NewExpression":
              case "CallExpression":
              case "OptionalCallExpression":
                return n === "callee";
              case "MemberExpression":
              case "OptionalMemberExpression":
                return n === "object";
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "AsExpression":
              case "AsConstExpression":
              case "SatisfiesExpression":
              case "TSNonNullExpression":
              case "BindExpression":
              case "TaggedTemplateExpression":
              case "UnaryExpression":
              case "LogicalExpression":
              case "AwaitExpression":
              case "TSTypeAssertion":
                return true;
              case "ConditionalExpression":
                return n === "test";
              default:
                return false;
            }
          case "ClassExpression":
            switch (s.type) {
              case "NewExpression":
                return n === "callee";
              default:
                return false;
            }
          case "OptionalMemberExpression":
          case "OptionalCallExpression":
          case "CallExpression":
          case "MemberExpression":
            if (fc(e)) return true;
          case "TaggedTemplateExpression":
          case "TSNonNullExpression":
            if (n === "callee" && (s.type === "BindExpression" || s.type === "NewExpression")) {
              let c = r;
              for (; c; ) switch (c.type) {
                case "CallExpression":
                case "OptionalCallExpression":
                  return true;
                case "MemberExpression":
                case "OptionalMemberExpression":
                case "BindExpression":
                  c = c.object;
                  break;
                case "TaggedTemplateExpression":
                  c = c.tag;
                  break;
                case "TSNonNullExpression":
                  c = c.expression;
                  break;
                default:
                  return false;
              }
            }
            return false;
          case "BindExpression":
            return n === "callee" && (s.type === "BindExpression" || s.type === "NewExpression") || n === "object" && W2(s);
          case "NGPipeExpression":
            return !(s.type === "NGRoot" || s.type === "NGMicrosyntaxExpression" || s.type === "ObjectProperty" && !((C = r.extra) != null && C.parenthesized) || U2(s) || n === "arguments" && L2(s) || n === "right" && s.type === "NGPipeExpression" || n === "property" && s.type === "MemberExpression" || s.type === "AssignmentExpression");
          case "JSXFragment":
          case "JSXElement":
            return n === "callee" || n === "left" && s.type === "BinaryExpression" && s.operator === "<" || !U2(s) && s.type !== "ArrowFunctionExpression" && s.type !== "AssignmentExpression" && s.type !== "AssignmentPattern" && s.type !== "BinaryExpression" && s.type !== "NewExpression" && s.type !== "ConditionalExpression" && s.type !== "ExpressionStatement" && s.type !== "JsExpressionRoot" && s.type !== "JSXAttribute" && s.type !== "JSXElement" && s.type !== "JSXExpressionContainer" && s.type !== "JSXFragment" && s.type !== "LogicalExpression" && !L2(s) && !Ce2(s) && s.type !== "ReturnStatement" && s.type !== "ThrowStatement" && s.type !== "TypeCastExpression" && s.type !== "VariableDeclarator" && s.type !== "YieldExpression";
          case "TSInstantiationExpression":
            return n === "object" && W2(s);
        }
        return false;
      }
      var lc = R2(["BlockStatement", "BreakStatement", "ComponentDeclaration", "ClassBody", "ClassDeclaration", "ClassMethod", "ClassProperty", "PropertyDefinition", "ClassPrivateProperty", "ContinueStatement", "DebuggerStatement", "DeclareComponent", "DeclareClass", "DeclareExportAllDeclaration", "DeclareExportDeclaration", "DeclareFunction", "DeclareHook", "DeclareInterface", "DeclareModule", "DeclareModuleExports", "DeclareNamespace", "DeclareVariable", "DeclareEnum", "DoWhileStatement", "EnumDeclaration", "ExportAllDeclaration", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ExpressionStatement", "ForInStatement", "ForOfStatement", "ForStatement", "FunctionDeclaration", "HookDeclaration", "IfStatement", "ImportDeclaration", "InterfaceDeclaration", "LabeledStatement", "MethodDefinition", "ReturnStatement", "SwitchStatement", "ThrowStatement", "TryStatement", "TSDeclareFunction", "TSEnumDeclaration", "TSImportEqualsDeclaration", "TSInterfaceDeclaration", "TSModuleDeclaration", "TSNamespaceExportDeclaration", "TypeAlias", "VariableDeclaration", "WhileStatement", "WithStatement"]);
      function mc(e) {
        let t = 0, { node: r } = e;
        for (; r; ) {
          let n = e.getParentNode(t++);
          if ((n == null ? void 0 : n.type) === "ForStatement" && n.init === r) return true;
          r = n;
        }
        return false;
      }
      function yc(e) {
        return ur(e, (t) => t.type === "ObjectTypeAnnotation" && ur(t, (r) => r.type === "FunctionTypeAnnotation"));
      }
      function Dc(e) {
        return se2(e);
      }
      function yr2(e) {
        let { parent: t, key: r } = e;
        switch (t.type) {
          case "NGPipeExpression":
            if (r === "arguments" && e.isLast) return e.callParent(yr2);
            break;
          case "ObjectProperty":
            if (r === "value") return e.callParent(() => e.key === "properties" && e.isLast);
            break;
          case "BinaryExpression":
          case "LogicalExpression":
            if (r === "right") return e.callParent(yr2);
            break;
          case "ConditionalExpression":
            if (r === "alternate") return e.callParent(yr2);
            break;
          case "UnaryExpression":
            if (t.prefix) return e.callParent(yr2);
            break;
        }
        return false;
      }
      function fi2(e, t) {
        let { node: r, parent: n } = e;
        return r.type === "FunctionExpression" || r.type === "ClassExpression" ? n.type === "ExportDefaultDeclaration" || !ps(e, t) : !Jt2(r) || n.type !== "ExportDefaultDeclaration" && ps(e, t) ? false : e.call(() => fi2(e, t), ...Lr2(r));
      }
      function fc(e) {
        return !!(e.match(void 0, (t, r) => r === "expression" && t.type === "ChainExpression", (t, r) => r === "tag" && t.type === "TaggedTemplateExpression") || e.match((t) => t.type === "OptionalCallExpression" || t.type === "OptionalMemberExpression", (t, r) => r === "tag" && t.type === "TaggedTemplateExpression") || e.match((t) => t.type === "OptionalCallExpression" || t.type === "OptionalMemberExpression", (t, r) => r === "expression" && t.type === "TSNonNullExpression", (t, r) => r === "tag" && t.type === "TaggedTemplateExpression") || e.match(void 0, (t, r) => r === "expression" && t.type === "ChainExpression", (t, r) => r === "expression" && t.type === "TSNonNullExpression", (t, r) => r === "tag" && t.type === "TaggedTemplateExpression") || e.match(void 0, (t, r) => r === "expression" && t.type === "TSNonNullExpression", (t, r) => r === "expression" && t.type === "ChainExpression", (t, r) => r === "tag" && t.type === "TaggedTemplateExpression") || e.match((t) => t.type === "OptionalMemberExpression" || t.type === "OptionalCallExpression", (t, r) => r === "object" && t.type === "MemberExpression" || r === "callee" && (t.type === "CallExpression" || t.type === "NewExpression")) || e.match((t) => t.type === "OptionalMemberExpression" || t.type === "OptionalCallExpression", (t, r) => r === "expression" && t.type === "TSNonNullExpression", (t, r) => r === "object" && t.type === "MemberExpression" || r === "callee" && t.type === "CallExpression") || e.match((t) => t.type === "CallExpression" || t.type === "MemberExpression", (t, r) => r === "expression" && t.type === "ChainExpression") && (e.match(void 0, void 0, (t, r) => r === "callee" && (t.type === "CallExpression" && !t.optional || t.type === "NewExpression") || r === "object" && t.type === "MemberExpression" && !t.optional) || e.match(void 0, void 0, (t, r) => r === "expression" && t.type === "TSNonNullExpression", (t, r) => r === "object" && t.type === "MemberExpression" || r === "callee" && t.type === "CallExpression")) || e.match((t) => t.type === "CallExpression" || t.type === "MemberExpression", (t, r) => r === "expression" && t.type === "TSNonNullExpression", (t, r) => r === "expression" && t.type === "ChainExpression", (t, r) => r === "object" && t.type === "MemberExpression" || r === "callee" && t.type === "CallExpression"));
      }
      function cs(e) {
        return e.type === "Identifier" ? true : W2(e) ? !e.computed && !e.optional && e.property.type === "Identifier" && cs(e.object) : false;
      }
      function Ec(e) {
        return e.type === "ChainExpression" && (e = e.expression), cs(e) || L2(e) && !e.optional && cs(e.callee);
      }
      var ke2 = ps;
      function Fc(e, t) {
        let r = t - 1;
        r = Xe2(e, r, { backwards: true }), r = He2(e, r, { backwards: true }), r = Xe2(e, r, { backwards: true });
        let n = He2(e, r, { backwards: true });
        return r !== n;
      }
      var Ei2 = Fc;
      var Cc = () => true;
      function ls(e, t) {
        let r = e.node;
        return r.printed = true, t.printer.printComment(e, t);
      }
      function Ac(e, t) {
        var y2;
        let r = e.node, n = [ls(e, t)], { printer: s, originalText: u, locStart: i, locEnd: a } = t;
        if ((y2 = s.isBlockComment) == null ? void 0 : y2.call(s, r)) {
          let D = Z2(u, a(r)) ? Z2(u, i(r), { backwards: true }) ? F : x2 : " ";
          n.push(D);
        } else n.push(F);
        let p = He2(u, Xe2(u, a(r)));
        return p !== false && Z2(u, p) && n.push(F), n;
      }
      function Tc(e, t, r) {
        var p;
        let n = e.node, s = ls(e, t), { printer: u, originalText: i, locStart: a } = t, o = (p = u.isBlockComment) == null ? void 0 : p.call(u, n);
        if (r != null && r.hasLineSuffix && !(r != null && r.isBlock) || Z2(i, a(n), { backwards: true })) {
          let y2 = Ei2(i, a(n));
          return { doc: Yn2([F, y2 ? F : "", s]), isBlock: o, hasLineSuffix: true };
        }
        return !o || r != null && r.hasLineSuffix ? { doc: [Yn2([" ", s]), Ee2], isBlock: o, hasLineSuffix: true } : { doc: [" ", s], isBlock: o, hasLineSuffix: false };
      }
      function J2(e, t, r = {}) {
        let { node: n } = e;
        if (!O2(n == null ? void 0 : n.comments)) return "";
        let { indent: s = false, marker: u, filter: i = Cc } = r, a = [];
        if (e.each(({ node: p }) => {
          p.leading || p.trailing || p.marker !== u || !i(p) || a.push(ls(e, t));
        }, "comments"), a.length === 0) return "";
        let o = b(F, a);
        return s ? f([F, o]) : o;
      }
      function ms2(e, t) {
        let r = e.node;
        if (!r) return {};
        let n = t[Symbol.for("printedComments")];
        if ((r.comments || []).filter((o) => !n.has(o)).length === 0) return { leading: "", trailing: "" };
        let u = [], i = [], a;
        return e.each(() => {
          let o = e.node;
          if (n != null && n.has(o)) return;
          let { leading: p, trailing: y2 } = o;
          p ? u.push(Ac(e, t)) : y2 && (a = Tc(e, t, a), i.push(a.doc));
        }, "comments"), { leading: u, trailing: i };
      }
      function ye2(e, t, r) {
        let { leading: n, trailing: s } = ms2(e, r);
        return !n && !s ? t : lr2(t, (u) => [n, u, s]);
      }
      var ys = class extends Error {
        constructor(t, r, n = "type") {
          super(`Unexpected ${r} node ${n}: ${JSON.stringify(t[n])}.`);
          __publicField(this, "name", "UnexpectedNodeError");
          this.node = t;
        }
      }, Ne2 = ys;
      function Ds(e) {
        if (typeof e != "string") throw new TypeError("Expected a string");
        return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
      }
      var Ge2, fs = class {
        constructor(t) {
          Us(this, Ge2);
          Ys(this, Ge2, new Set(t));
        }
        getLeadingWhitespaceCount(t) {
          let r = ct2(this, Ge2), n = 0;
          for (let s = 0; s < t.length && r.has(t.charAt(s)); s++) n++;
          return n;
        }
        getTrailingWhitespaceCount(t) {
          let r = ct2(this, Ge2), n = 0;
          for (let s = t.length - 1; s >= 0 && r.has(t.charAt(s)); s--) n++;
          return n;
        }
        getLeadingWhitespace(t) {
          let r = this.getLeadingWhitespaceCount(t);
          return t.slice(0, r);
        }
        getTrailingWhitespace(t) {
          let r = this.getTrailingWhitespaceCount(t);
          return t.slice(t.length - r);
        }
        hasLeadingWhitespace(t) {
          return ct2(this, Ge2).has(t.charAt(0));
        }
        hasTrailingWhitespace(t) {
          return ct2(this, Ge2).has(M2(false, t, -1));
        }
        trimStart(t) {
          let r = this.getLeadingWhitespaceCount(t);
          return t.slice(r);
        }
        trimEnd(t) {
          let r = this.getTrailingWhitespaceCount(t);
          return t.slice(0, t.length - r);
        }
        trim(t) {
          return this.trimEnd(this.trimStart(t));
        }
        split(t, r = false) {
          let n = `[${Ds([...ct2(this, Ge2)].join(""))}]+`, s = new RegExp(r ? `(${n})` : n, "u");
          return t.split(s);
        }
        hasWhitespaceCharacter(t) {
          let r = ct2(this, Ge2);
          return Array.prototype.some.call(t, (n) => r.has(n));
        }
        hasNonWhitespaceCharacter(t) {
          let r = ct2(this, Ge2);
          return Array.prototype.some.call(t, (n) => !r.has(n));
        }
        isWhitespaceOnly(t) {
          let r = ct2(this, Ge2);
          return Array.prototype.every.call(t, (n) => r.has(n));
        }
      };
      Ge2 = /* @__PURE__ */ new WeakMap();
      var Fi2 = fs;
      var Hr2 = new Fi2(` 
\r	`), Es = (e) => e === "" || e === x2 || e === F || e === E;
      function dc(e, t, r) {
        var _2, v, j, I2, G;
        let { node: n } = e;
        if (n.type === "JSXElement" && vc(n)) return [r("openingElement"), r("closingElement")];
        let s = n.type === "JSXElement" ? r("openingElement") : r("openingFragment"), u = n.type === "JSXElement" ? r("closingElement") : r("closingFragment");
        if (n.children.length === 1 && n.children[0].type === "JSXExpressionContainer" && (n.children[0].expression.type === "TemplateLiteral" || n.children[0].expression.type === "TaggedTemplateExpression")) return [s, ...e.map(r, "children"), u];
        n.children = n.children.map((P2) => jc(P2) ? { type: "JSXText", value: " ", raw: " " } : P2);
        let i = n.children.some(X), a = n.children.filter((P2) => P2.type === "JSXExpressionContainer").length > 1, o = n.type === "JSXElement" && n.openingElement.attributes.length > 1, p = re2(s) || i || o || a, y2 = e.parent.rootMarker === "mdx", D = t.singleQuote ? "{' '}" : '{" "}', m = y2 ? x2 : B2([D, E], " "), C = ((v = (_2 = n.openingElement) == null ? void 0 : _2.name) == null ? void 0 : v.name) === "fbt", c = xc(e, t, r, m, C), A2 = n.children.some((P2) => Dr2(P2));
        for (let P2 = c.length - 2; P2 >= 0; P2--) {
          let N2 = c[P2] === "" && c[P2 + 1] === "", ue2 = c[P2] === F && c[P2 + 1] === "" && c[P2 + 2] === F, Q2 = (c[P2] === E || c[P2] === F) && c[P2 + 1] === "" && c[P2 + 2] === m, Bt2 = c[P2] === m && c[P2 + 1] === "" && (c[P2 + 2] === E || c[P2 + 2] === F), Ct2 = c[P2] === m && c[P2 + 1] === "" && c[P2 + 2] === m, w2 = c[P2] === E && c[P2 + 1] === "" && c[P2 + 2] === F || c[P2] === F && c[P2 + 1] === "" && c[P2 + 2] === E;
          ue2 && A2 || N2 || Q2 || Ct2 || w2 ? c.splice(P2, 2) : Bt2 && c.splice(P2 + 1, 2);
        }
        for (; c.length > 0 && Es(M2(false, c, -1)); ) c.pop();
        for (; c.length > 1 && Es(c[0]) && Es(c[1]); ) c.shift(), c.shift();
        let d = [""];
        for (let [P2, N2] of c.entries()) {
          if (N2 === m) {
            if (P2 === 1 && Pu2(c[P2 - 1])) {
              if (c.length === 2) {
                d.push([d.pop(), D]);
                continue;
              }
              d.push([D, F], "");
              continue;
            } else if (P2 === c.length - 1) {
              d.push([d.pop(), D]);
              continue;
            } else if (c[P2 - 1] === "" && c[P2 - 2] === F) {
              d.push([d.pop(), D]);
              continue;
            }
          }
          P2 % 2 === 0 ? d.push([d.pop(), N2]) : d.push(N2, ""), re2(N2) && (p = true);
        }
        let S2 = A2 ? qr2(d) : l(d, { shouldBreak: true });
        if (((j = t.cursorNode) == null ? void 0 : j.type) === "JSXText" && n.children.includes(t.cursorNode) ? S2 = [mr2, S2, mr2] : ((I2 = t.nodeBeforeCursor) == null ? void 0 : I2.type) === "JSXText" && n.children.includes(t.nodeBeforeCursor) ? S2 = [mr2, S2] : ((G = t.nodeAfterCursor) == null ? void 0 : G.type) === "JSXText" && n.children.includes(t.nodeAfterCursor) && (S2 = [S2, mr2]), y2) return S2;
        let g = l([s, f([F, S2]), F, u]);
        return p ? g : et2([l([s, ...c, u]), g]);
      }
      function xc(e, t, r, n, s) {
        let u = "", i = [u];
        function a(p) {
          u = p, i.push([i.pop(), p]);
        }
        function o(p) {
          p !== "" && (u = p, i.push(p, ""));
        }
        return e.each(({ node: p, next: y2 }) => {
          if (p.type === "JSXText") {
            let D = fe2(p);
            if (Dr2(p)) {
              let m = Hr2.split(D, true);
              m[0] === "" && (m.shift(), /\n/u.test(m[0]) ? o(Ai2(s, m[1], p, y2)) : o(n), m.shift());
              let C;
              if (M2(false, m, -1) === "" && (m.pop(), C = m.pop()), m.length === 0) return;
              for (let [c, A2] of m.entries()) c % 2 === 1 ? o(x2) : a(A2);
              C !== void 0 ? /\n/u.test(C) ? o(Ai2(s, u, p, y2)) : o(n) : o(Ci(s, u, p, y2));
            } else /\n/u.test(D) ? D.match(/\n/gu).length > 1 && o(F) : o(n);
          } else {
            let D = r();
            if (a(D), y2 && Dr2(y2)) {
              let C = Hr2.trim(fe2(y2)), [c] = Hr2.split(C);
              o(Ci(s, c, p, y2));
            } else o(F);
          }
        }, "children"), i;
      }
      function Ci(e, t, r, n) {
        return e ? "" : r.type === "JSXElement" && !r.closingElement || (n == null ? void 0 : n.type) === "JSXElement" && !n.closingElement ? t.length === 1 ? E : F : E;
      }
      function Ai2(e, t, r, n) {
        return e ? F : t.length === 1 ? r.type === "JSXElement" && !r.closingElement || (n == null ? void 0 : n.type) === "JSXElement" && !n.closingElement ? F : E : F;
      }
      var hc = /* @__PURE__ */ new Set(["ArrayExpression", "TupleExpression", "JSXAttribute", "JSXElement", "JSXExpressionContainer", "JSXFragment", "ExpressionStatement", "CallExpression", "OptionalCallExpression", "ConditionalExpression", "JsExpressionRoot"]);
      function gc(e, t, r) {
        let { parent: n } = e;
        if (hc.has(n.type)) return t;
        let s = e.match(void 0, (i) => i.type === "ArrowFunctionExpression", L2, (i) => i.type === "JSXExpressionContainer"), u = ke2(e, r);
        return l([u ? "" : B2("("), f([E, t]), E, u ? "" : B2(")")], { shouldBreak: s });
      }
      function Sc(e, t, r) {
        let { node: n } = e, s = [];
        if (s.push(r("name")), n.value) {
          let u;
          if (te2(n.value)) {
            let i = fe2(n.value), a = Y2(false, Y2(false, i.slice(1, -1), "&apos;", "'"), "&quot;", '"'), o = Sr2(a, t.jsxSingleQuote);
            a = o === '"' ? Y2(false, a, '"', "&quot;") : Y2(false, a, "'", "&apos;"), u = e.call(() => ye2(e, ve2(o + a + o), t), "value");
          } else u = r("value");
          s.push("=", u);
        }
        return s;
      }
      function Bc(e, t, r) {
        let { node: n } = e, s = (u, i) => u.type === "JSXEmptyExpression" || !T2(u) && (U2(u) || se2(u) || u.type === "ArrowFunctionExpression" || u.type === "AwaitExpression" && (s(u.argument, u) || u.argument.type === "JSXElement") || L2(u) || u.type === "ChainExpression" && L2(u.expression) || u.type === "FunctionExpression" || u.type === "TemplateLiteral" || u.type === "TaggedTemplateExpression" || u.type === "DoExpression" || X(i) && (u.type === "ConditionalExpression" || De2(u)));
        return s(n.expression, e.parent) ? l(["{", r("expression"), je2, "}"]) : l(["{", f([E, r("expression")]), E, je2, "}"]);
      }
      function bc(e, t, r) {
        var a, o;
        let { node: n } = e, s = T2(n.name) || T2(n.typeParameters) || T2(n.typeArguments);
        if (n.selfClosing && n.attributes.length === 0 && !s) return ["<", r("name"), n.typeArguments ? r("typeArguments") : r("typeParameters"), " />"];
        if (((a = n.attributes) == null ? void 0 : a.length) === 1 && te2(n.attributes[0].value) && !n.attributes[0].value.value.includes(`
`) && !s && !T2(n.attributes[0])) return l(["<", r("name"), n.typeArguments ? r("typeArguments") : r("typeParameters"), " ", ...e.map(r, "attributes"), n.selfClosing ? " />" : ">"]);
        let u = (o = n.attributes) == null ? void 0 : o.some((p) => te2(p.value) && p.value.value.includes(`
`)), i = t.singleAttributePerLine && n.attributes.length > 1 ? F : x2;
        return l(["<", r("name"), n.typeArguments ? r("typeArguments") : r("typeParameters"), f(e.map(() => [i, r()], "attributes")), ...Pc(n, t, s)], { shouldBreak: u });
      }
      function Pc(e, t, r) {
        return e.selfClosing ? [x2, "/>"] : kc(e, t, r) ? [">"] : [E, ">"];
      }
      function kc(e, t, r) {
        let n = e.attributes.length > 0 && T2(M2(false, e.attributes, -1), h.Trailing);
        return e.attributes.length === 0 && !r || (t.bracketSameLine || t.jsxBracketSameLine) && (!r || e.attributes.length > 0) && !n;
      }
      function Ic(e, t, r) {
        let { node: n } = e, s = [];
        s.push("</");
        let u = r("name");
        return T2(n.name, h.Leading | h.Line) ? s.push(f([F, u]), F) : T2(n.name, h.Leading | h.Block) ? s.push(" ", u) : s.push(u), s.push(">"), s;
      }
      function Lc(e, t) {
        let { node: r } = e, n = T2(r), s = T2(r, h.Line), u = r.type === "JSXOpeningFragment";
        return [u ? "<" : "</", f([s ? F : n && !u ? " " : "", J2(e, t)]), s ? F : "", ">"];
      }
      function wc(e, t, r) {
        let n = ye2(e, dc(e, t, r), t);
        return gc(e, n, t);
      }
      function Oc(e, t) {
        let { node: r } = e, n = T2(r, h.Line);
        return [J2(e, t, { indent: n }), n ? F : ""];
      }
      function _c(e, t, r) {
        let { node: n } = e;
        return ["{", e.call(({ node: s }) => {
          let u = ["...", r()];
          return !T2(s) || !es(e) ? u : [f([E, ye2(e, u, t)]), E];
        }, n.type === "JSXSpreadAttribute" ? "argument" : "expression"), "}"];
      }
      function Ti2(e, t, r) {
        let { node: n } = e;
        if (n.type.startsWith("JSX")) switch (n.type) {
          case "JSXAttribute":
            return Sc(e, t, r);
          case "JSXIdentifier":
            return n.name;
          case "JSXNamespacedName":
            return b(":", [r("namespace"), r("name")]);
          case "JSXMemberExpression":
            return b(".", [r("object"), r("property")]);
          case "JSXSpreadAttribute":
          case "JSXSpreadChild":
            return _c(e, t, r);
          case "JSXExpressionContainer":
            return Bc(e, t, r);
          case "JSXFragment":
          case "JSXElement":
            return wc(e, t, r);
          case "JSXOpeningElement":
            return bc(e, t, r);
          case "JSXClosingElement":
            return Ic(e, t, r);
          case "JSXOpeningFragment":
          case "JSXClosingFragment":
            return Lc(e, t);
          case "JSXEmptyExpression":
            return Oc(e, t);
          case "JSXText":
            throw new Error("JSXText should be handled by JSXElement");
          default:
            throw new Ne2(n, "JSX");
        }
      }
      function vc(e) {
        if (e.children.length === 0) return true;
        if (e.children.length > 1) return false;
        let t = e.children[0];
        return t.type === "JSXText" && !Dr2(t);
      }
      function Dr2(e) {
        return e.type === "JSXText" && (Hr2.hasNonWhitespaceCharacter(fe2(e)) || !/\n/u.test(fe2(e)));
      }
      function jc(e) {
        return e.type === "JSXExpressionContainer" && te2(e.expression) && e.expression.value === " " && !T2(e.expression);
      }
      function di2(e) {
        let { node: t, parent: r } = e;
        if (!X(t) || !X(r)) return false;
        let { index: n, siblings: s } = e, u;
        for (let i = n; i > 0; i--) {
          let a = s[i - 1];
          if (!(a.type === "JSXText" && !Dr2(a))) {
            u = a;
            break;
          }
        }
        return (u == null ? void 0 : u.type) === "JSXExpressionContainer" && u.expression.type === "JSXEmptyExpression" && Lt2(u.expression);
      }
      function Mc(e) {
        return Lt2(e.node) || di2(e);
      }
      var Vr2 = Mc;
      var Rc = 0;
      function $r2(e, t, r) {
        var v;
        let { node: n, parent: s, grandparent: u, key: i } = e, a = i !== "body" && (s.type === "IfStatement" || s.type === "WhileStatement" || s.type === "SwitchStatement" || s.type === "DoWhileStatement"), o = n.operator === "|>" && ((v = e.root.extra) == null ? void 0 : v.__isUsingHackPipeline), p = Fs(e, r, t, false, a);
        if (a) return p;
        if (o) return l(p);
        if (L2(s) && s.callee === n || s.type === "UnaryExpression" || W2(s) && !s.computed) return l([f([E, ...p]), E]);
        let y2 = s.type === "ReturnStatement" || s.type === "ThrowStatement" || s.type === "JSXExpressionContainer" && u.type === "JSXAttribute" || n.operator !== "|" && s.type === "JsExpressionRoot" || n.type !== "NGPipeExpression" && (s.type === "NGRoot" && t.parser === "__ng_binding" || s.type === "NGMicrosyntaxExpression" && u.type === "NGMicrosyntax" && u.body.length === 1) || n === s.body && s.type === "ArrowFunctionExpression" || n !== s.body && s.type === "ForStatement" || s.type === "ConditionalExpression" && u.type !== "ReturnStatement" && u.type !== "ThrowStatement" && !L2(u) || s.type === "TemplateLiteral", D = s.type === "AssignmentExpression" || s.type === "VariableDeclarator" || s.type === "ClassProperty" || s.type === "PropertyDefinition" || s.type === "TSAbstractPropertyDefinition" || s.type === "ClassPrivateProperty" || Ce2(s), m = De2(n.left) && ar2(n.operator, n.left.operator);
        if (y2 || Ht2(n) && !m || !Ht2(n) && D) return l(p);
        if (p.length === 0) return "";
        let C = X(n.right), c = p.findIndex((j) => typeof j != "string" && !Array.isArray(j) && j.type === me2), A2 = p.slice(0, c === -1 ? 1 : c + 1), d = p.slice(A2.length, C ? -1 : void 0), S2 = Symbol("logicalChain-" + ++Rc), g = l([...A2, f(d)], { id: S2 });
        if (!C) return g;
        let _2 = M2(false, p, -1);
        return l([g, xt2(_2, { groupId: S2 })]);
      }
      function Fs(e, t, r, n, s) {
        var S2;
        let { node: u } = e;
        if (!De2(u)) return [l(t())];
        let i = [];
        ar2(u.operator, u.left.operator) ? i = e.call((g) => Fs(g, t, r, true, s), "left") : i.push(l(t("left")));
        let a = Ht2(u), o = (u.operator === "|>" || u.type === "NGPipeExpression" || Jc(e, r)) && !Le2(r.originalText, u.right), y2 = !T2(u.right, h.Leading, Wr2) && Le2(r.originalText, u.right), D = u.type === "NGPipeExpression" ? "|" : u.operator, m = u.type === "NGPipeExpression" && u.arguments.length > 0 ? l(f([E, ": ", b([x2, ": "], e.map(() => Be2(2, l(t())), "arguments"))])) : "", C;
        if (a) C = [D, " ", t("right"), m];
        else {
          let _2 = D === "|>" && ((S2 = e.root.extra) == null ? void 0 : S2.__isUsingHackPipeline) ? e.call((v) => Fs(v, t, r, true, s), "right") : t("right");
          if (r.experimentalOperatorPosition === "start") {
            let v = "";
            if (y2) switch (Se2(_2)) {
              case he2:
                v = _2.splice(0, 1)[0];
                break;
              case ge2:
                v = _2.contents.splice(0, 1)[0];
                break;
            }
            C = [x2, v, D, " ", _2, m];
          } else C = [o ? x2 : "", D, o ? " " : x2, _2, m];
        }
        let { parent: c } = e, A2 = T2(u.left, h.Trailing | h.Line);
        if ((A2 || !(s && u.type === "LogicalExpression") && c.type !== u.type && u.left.type !== u.type && u.right.type !== u.type) && (C = l(C, { shouldBreak: A2 })), r.experimentalOperatorPosition === "start" ? i.push(a || y2 ? " " : "", C) : i.push(o ? "" : " ", C), n && T2(u)) {
          let g = Ut2(ye2(e, i, r));
          return g.type === Oe2 ? g.parts : Array.isArray(g) ? g : [g];
        }
        return i;
      }
      function Ht2(e) {
        return e.type !== "LogicalExpression" ? false : !!(se2(e.right) && e.right.properties.length > 0 || U2(e.right) && e.right.elements.length > 0 || X(e.right));
      }
      var xi = (e) => e.type === "BinaryExpression" && e.operator === "|";
      function Jc(e, t) {
        return (t.parser === "__vue_expression" || t.parser === "__vue_ts_expression") && xi(e.node) && !e.hasAncestor((r) => !xi(r) && r.type !== "JsExpressionRoot");
      }
      function gi2(e, t, r) {
        let { node: n } = e;
        if (n.type.startsWith("NG")) switch (n.type) {
          case "NGRoot":
            return [r("node"), T2(n.node) ? " //" + lt2(n.node)[0].value.trimEnd() : ""];
          case "NGPipeExpression":
            return $r2(e, t, r);
          case "NGChainedExpression":
            return l(b([";", x2], e.map(() => Wc(e) ? r() : ["(", r(), ")"], "expressions")));
          case "NGEmptyExpression":
            return "";
          case "NGMicrosyntax":
            return e.map(() => [e.isFirst ? "" : hi2(e) ? " " : [";", x2], r()], "body");
          case "NGMicrosyntaxKey":
            return /^[$_a-z][\w$]*(?:-[$_a-z][\w$])*$/iu.test(n.name) ? n.name : JSON.stringify(n.name);
          case "NGMicrosyntaxExpression":
            return [r("expression"), n.alias === null ? "" : [" as ", r("alias")]];
          case "NGMicrosyntaxKeyedExpression": {
            let { index: s, parent: u } = e, i = hi2(e) || (s === 1 && (n.key.name === "then" || n.key.name === "else" || n.key.name === "as") || (s === 2 || s === 3) && (n.key.name === "else" && u.body[s - 1].type === "NGMicrosyntaxKeyedExpression" && u.body[s - 1].key.name === "then" || n.key.name === "track")) && u.body[0].type === "NGMicrosyntaxExpression";
            return [r("key"), i ? " " : ": ", r("expression")];
          }
          case "NGMicrosyntaxLet":
            return ["let ", r("key"), n.value === null ? "" : [" = ", r("value")]];
          case "NGMicrosyntaxAs":
            return [r("key"), " as ", r("alias")];
          default:
            throw new Ne2(n, "Angular");
        }
      }
      function hi2({ node: e, index: t }) {
        return e.type === "NGMicrosyntaxKeyedExpression" && e.key.name === "of" && t === 1;
      }
      var qc = R2(["CallExpression", "OptionalCallExpression", "AssignmentExpression"]);
      function Wc({ node: e }) {
        return ur(e, qc);
      }
      function Cs(e, t, r) {
        let { node: n } = e;
        return l([b(x2, e.map(r, "decorators")), bi2(n, t) ? F : x2]);
      }
      function Si2(e, t, r) {
        return Pi2(e.node) ? [b(F, e.map(r, "declaration", "decorators")), F] : "";
      }
      function Bi2(e, t, r) {
        let { node: n, parent: s } = e, { decorators: u } = n;
        if (!O2(u) || Pi2(s) || Vr2(e)) return "";
        let i = n.type === "ClassExpression" || n.type === "ClassDeclaration" || bi2(n, t);
        return [e.key === "declaration" && cu2(s) ? F : i ? Ee2 : "", b(x2, e.map(r, "decorators")), x2];
      }
      function bi2(e, t) {
        return e.decorators.some((r) => Z2(t.originalText, k2(r)));
      }
      function Pi2(e) {
        var r;
        if (e.type !== "ExportDefaultDeclaration" && e.type !== "ExportNamedDeclaration" && e.type !== "DeclareExportDeclaration") return false;
        let t = (r = e.declaration) == null ? void 0 : r.decorators;
        return O2(t) && Pt2(e, t[0]);
      }
      var Dt2 = class extends Error {
        constructor() {
          super(...arguments);
          __publicField(this, "name", "ArgExpansionBailout");
        }
      };
      function Nc(e, t, r) {
        let { node: n } = e, s = pe2(n);
        if (s.length === 0) return ["(", J2(e, t), ")"];
        let u = s.length - 1;
        if (Yc(s)) {
          let D = ["("];
          return Wt2(e, (m, C) => {
            D.push(r()), C !== u && D.push(", ");
          }), D.push(")"), D;
        }
        let i = false, a = [];
        Wt2(e, ({ node: D }, m) => {
          let C = r();
          m === u || (ce2(D, t) ? (i = true, C = [C, ",", F, F]) : C = [C, ",", x2]), a.push(C);
        });
        let o = !t.parser.startsWith("__ng_") && n.type !== "ImportExpression" && oe2(t, "all") ? "," : "";
        function p() {
          return l(["(", f([x2, ...a]), o, x2, ")"], { shouldBreak: true });
        }
        if (i || e.parent.type !== "Decorator" && fu2(s)) return p();
        if (Uc(s)) {
          let D = a.slice(1);
          if (D.some(re2)) return p();
          let m;
          try {
            m = r(Wn(n, 0), { expandFirstArg: true });
          } catch (C) {
            if (C instanceof Dt2) return p();
            throw C;
          }
          return re2(m) ? [Ee2, et2([["(", l(m, { shouldBreak: true }), ", ", ...D, ")"], p()])] : et2([["(", m, ", ", ...D, ")"], ["(", l(m, { shouldBreak: true }), ", ", ...D, ")"], p()]);
        }
        if (Gc(s, a, t)) {
          let D = a.slice(0, -1);
          if (D.some(re2)) return p();
          let m;
          try {
            m = r(Wn(n, -1), { expandLastArg: true });
          } catch (C) {
            if (C instanceof Dt2) return p();
            throw C;
          }
          return re2(m) ? [Ee2, et2([["(", ...D, l(m, { shouldBreak: true }), ")"], p()])] : et2([["(", ...D, m, ")"], ["(", ...D, l(m, { shouldBreak: true }), ")"], p()]);
        }
        let y2 = ["(", f([E, ...a]), B2(o), E, ")"];
        return jr2(e) ? y2 : l(y2, { shouldBreak: a.some(re2) || i });
      }
      function fr2(e, t = false) {
        return se2(e) && (e.properties.length > 0 || T2(e)) || U2(e) && (e.elements.length > 0 || T2(e)) || e.type === "TSTypeAssertion" && fr2(e.expression) || Ae2(e) && fr2(e.expression) || e.type === "FunctionExpression" || e.type === "ArrowFunctionExpression" && (!e.returnType || !e.returnType.typeAnnotation || e.returnType.typeAnnotation.type !== "TSTypeReference" || Xc(e.body)) && (e.body.type === "BlockStatement" || e.body.type === "ArrowFunctionExpression" && fr2(e.body, true) || se2(e.body) || U2(e.body) || !t && (L2(e.body) || e.body.type === "ConditionalExpression") || X(e.body)) || e.type === "DoExpression" || e.type === "ModuleExpression";
      }
      function Gc(e, t, r) {
        var u, i;
        let n = M2(false, e, -1);
        if (e.length === 1) {
          let a = M2(false, t, -1);
          if ((u = a.label) != null && u.embed && ((i = a.label) == null ? void 0 : i.hug) !== false) return true;
        }
        let s = M2(false, e, -2);
        return !T2(n, h.Leading) && !T2(n, h.Trailing) && fr2(n) && (!s || s.type !== n.type) && (e.length !== 2 || s.type !== "ArrowFunctionExpression" || !U2(n)) && !(e.length > 1 && As(n, r));
      }
      function Uc(e) {
        if (e.length !== 2) return false;
        let [t, r] = e;
        return t.type === "ModuleExpression" && Hc(r) ? true : !T2(t) && (t.type === "FunctionExpression" || t.type === "ArrowFunctionExpression" && t.body.type === "BlockStatement") && r.type !== "FunctionExpression" && r.type !== "ArrowFunctionExpression" && r.type !== "ConditionalExpression" && Ii2(r) && !fr2(r);
      }
      function Ii2(e) {
        if (e.type === "ParenthesizedExpression") return Ii2(e.expression);
        if (Ae2(e) || e.type === "TypeCastExpression") {
          let { typeAnnotation: t } = e;
          if (t.type === "TypeAnnotation" && (t = t.typeAnnotation), t.type === "TSArrayType" && (t = t.elementType, t.type === "TSArrayType" && (t = t.elementType)), t.type === "GenericTypeAnnotation" || t.type === "TSTypeReference") {
            let r = t.typeArguments ?? t.typeParameters;
            (r == null ? void 0 : r.params.length) === 1 && (t = r.params[0]);
          }
          return qt2(t) && Ie2(e.expression, 1);
        }
        return mt2(e) && pe2(e).length > 1 ? false : De2(e) ? Ie2(e.left, 1) && Ie2(e.right, 1) : Jn2(e) || Ie2(e);
      }
      function Yc(e) {
        return e.length === 2 ? ki2(e, 0) : e.length === 3 ? e[0].type === "Identifier" && ki2(e, 1) : false;
      }
      function ki2(e, t) {
        let r = e[t], n = e[t + 1];
        return r.type === "ArrowFunctionExpression" && z2(r).length === 0 && r.body.type === "BlockStatement" && n.type === "ArrayExpression" && !e.some((s) => T2(s));
      }
      function Xc(e) {
        return e.type === "BlockStatement" && (e.body.some((t) => t.type !== "EmptyStatement") || T2(e, h.Dangling));
      }
      function Hc(e) {
        return e.type === "ObjectExpression" && e.properties.length === 1 && Ce2(e.properties[0]) && e.properties[0].key.type === "Identifier" && e.properties[0].key.name === "type" && te2(e.properties[0].value) && e.properties[0].value.value === "module";
      }
      var Er2 = Nc;
      var Vc = (e) => ((e.type === "ChainExpression" || e.type === "TSNonNullExpression") && (e = e.expression), L2(e) && pe2(e).length > 0);
      function Li2(e, t, r) {
        var p;
        let n = r("object"), s = Ts(e, t, r), { node: u } = e, i = e.findAncestor((y2) => !(W2(y2) || y2.type === "TSNonNullExpression")), a = e.findAncestor((y2) => !(y2.type === "ChainExpression" || y2.type === "TSNonNullExpression")), o = i && (i.type === "NewExpression" || i.type === "BindExpression" || i.type === "AssignmentExpression" && i.left.type !== "Identifier") || u.computed || u.object.type === "Identifier" && u.property.type === "Identifier" && !W2(a) || (a.type === "AssignmentExpression" || a.type === "VariableDeclarator") && (Vc(u.object) || ((p = n.label) == null ? void 0 : p.memberChain));
        return ut2(n.label, [n, o ? s : l(f([E, s]))]);
      }
      function Ts(e, t, r) {
        let n = r("property"), { node: s } = e, u = $2(e);
        return s.computed ? !s.property || Fe2(s.property) ? [u, "[", n, "]"] : l([u, "[", f([E, n]), E, "]"]) : [u, ".", n];
      }
      function wi(e, t, r) {
        if (e.node.type === "ChainExpression") return e.call(() => wi(e, t, r), "expression");
        let { parent: n } = e, s = !n || n.type === "ExpressionStatement", u = [];
        function i(w2) {
          let { originalText: ne2 } = t, xe2 = it2(ne2, k2(w2));
          return ne2.charAt(xe2) === ")" ? xe2 !== false && jt2(ne2, xe2 + 1) : ce2(w2, t);
        }
        function a() {
          let { node: w2 } = e;
          if (w2.type === "ChainExpression") return e.call(a, "expression");
          if (L2(w2) && (Tt2(w2.callee) || L2(w2.callee))) {
            let ne2 = i(w2);
            u.unshift({ node: w2, hasTrailingEmptyLine: ne2, printed: [ye2(e, [$2(e), tt2(e, t, r), Er2(e, t, r)], t), ne2 ? F : ""] }), e.call(a, "callee");
          } else Tt2(w2) ? (u.unshift({ node: w2, needsParens: ke2(e, t), printed: ye2(e, W2(w2) ? Ts(e, t, r) : Kr2(e, t, r), t) }), e.call(a, "object")) : w2.type === "TSNonNullExpression" ? (u.unshift({ node: w2, printed: ye2(e, "!", t) }), e.call(a, "expression")) : u.unshift({ node: w2, printed: r() });
        }
        let { node: o } = e;
        u.unshift({ node: o, printed: [$2(e), tt2(e, t, r), Er2(e, t, r)] }), o.callee && e.call(a, "callee");
        let p = [], y2 = [u[0]], D = 1;
        for (; D < u.length && (u[D].node.type === "TSNonNullExpression" || L2(u[D].node) || W2(u[D].node) && u[D].node.computed && Fe2(u[D].node.property)); ++D) y2.push(u[D]);
        if (!L2(u[0].node)) for (; D + 1 < u.length && (Tt2(u[D].node) && Tt2(u[D + 1].node)); ++D) y2.push(u[D]);
        p.push(y2), y2 = [];
        let m = false;
        for (; D < u.length; ++D) {
          if (m && Tt2(u[D].node)) {
            if (u[D].node.computed && Fe2(u[D].node.property)) {
              y2.push(u[D]);
              continue;
            }
            p.push(y2), y2 = [], m = false;
          }
          (L2(u[D].node) || u[D].node.type === "ImportExpression") && (m = true), y2.push(u[D]), T2(u[D].node, h.Trailing) && (p.push(y2), y2 = [], m = false);
        }
        y2.length > 0 && p.push(y2);
        function C(w2) {
          return /^[A-Z]|^[$_]+$/u.test(w2);
        }
        function c(w2) {
          return w2.length <= t.tabWidth;
        }
        function A2(w2) {
          var pt2;
          let ne2 = (pt2 = w2[1][0]) == null ? void 0 : pt2.node.computed;
          if (w2[0].length === 1) {
            let bt2 = w2[0][0].node;
            return bt2.type === "ThisExpression" || bt2.type === "Identifier" && (C(bt2.name) || s && c(bt2.name) || ne2);
          }
          let xe2 = M2(false, w2[0], -1).node;
          return W2(xe2) && xe2.property.type === "Identifier" && (C(xe2.property.name) || ne2);
        }
        let d = p.length >= 2 && !T2(p[1][0].node) && A2(p);
        function S2(w2) {
          let ne2 = w2.map((xe2) => xe2.printed);
          return w2.length > 0 && M2(false, w2, -1).needsParens ? ["(", ...ne2, ")"] : ne2;
        }
        function g(w2) {
          return w2.length === 0 ? "" : f([F, b(F, w2.map(S2))]);
        }
        let _2 = p.map(S2), v = _2, j = d ? 3 : 2, I2 = p.flat(), G = I2.slice(1, -1).some((w2) => T2(w2.node, h.Leading)) || I2.slice(0, -1).some((w2) => T2(w2.node, h.Trailing)) || p[j] && T2(p[j][0].node, h.Leading);
        if (p.length <= j && !G && !p.some((w2) => M2(false, w2, -1).hasTrailingEmptyLine)) return jr2(e) ? v : l(v);
        let P2 = M2(false, p[d ? 1 : 0], -1).node, N2 = !L2(P2) && i(P2), ue2 = [S2(p[0]), d ? p.slice(1, 2).map(S2) : "", N2 ? F : "", g(p.slice(d ? 2 : 1))], Q2 = u.map(({ node: w2 }) => w2).filter(L2);
        function Bt2() {
          let w2 = M2(false, M2(false, p, -1), -1).node, ne2 = M2(false, _2, -1);
          return L2(w2) && re2(ne2) && Q2.slice(0, -1).some((xe2) => xe2.arguments.some(Rt2));
        }
        let Ct2;
        return G || Q2.length > 2 && Q2.some((w2) => !w2.arguments.every((ne2) => Ie2(ne2))) || _2.slice(0, -1).some(re2) || Bt2() ? Ct2 = l(ue2) : Ct2 = [re2(v) || N2 ? Ee2 : "", et2([v, ue2])], ut2({ memberChain: true }, Ct2);
      }
      var Oi2 = wi;
      function Qr2(e, t, r) {
        var y2;
        let { node: n } = e, s = n.type === "NewExpression", u = n.type === "ImportExpression", i = $2(e), a = pe2(n), o = a.length === 1 && _r2(a[0], t.originalText);
        if (o || $c(e) || It2(n, e.parent)) {
          let D = [];
          if (Wt2(e, () => {
            D.push(r());
          }), !(o && ((y2 = D[0].label) != null && y2.embed))) return [s ? "new " : "", _i(e, r), i, tt2(e, t, r), "(", b(", ", D), ")"];
        }
        if (!u && !s && Tt2(n.callee) && !e.call((D) => ke2(D, t), "callee", ...n.callee.type === "ChainExpression" ? ["expression"] : [])) return Oi2(e, t, r);
        let p = [s ? "new " : "", _i(e, r), i, tt2(e, t, r), Er2(e, t, r)];
        return u || L2(n.callee) ? l(p) : p;
      }
      function _i(e, t) {
        let { node: r } = e;
        return r.type === "ImportExpression" ? `import${r.phase ? `.${r.phase}` : ""}` : t("callee");
      }
      function $c(e) {
        let { node: t } = e;
        if (t.type !== "CallExpression" || t.optional || t.callee.type !== "Identifier") return false;
        let r = pe2(t);
        return t.callee.name === "require" ? r.length === 1 && te2(r[0]) || r.length > 1 : t.callee.name === "define" && e.parent.type === "ExpressionStatement" ? r.length === 1 || r.length === 2 && r[0].type === "ArrayExpression" || r.length === 3 && te2(r[0]) && r[1].type === "ArrayExpression" : false;
      }
      function ht2(e, t, r, n, s, u) {
        let i = Kc(e, t, r, n, u), a = u ? r(u, { assignmentLayout: i }) : "";
        switch (i) {
          case "break-after-operator":
            return l([l(n), s, l(f([x2, a]))]);
          case "never-break-after-operator":
            return l([l(n), s, " ", a]);
          case "fluid": {
            let o = Symbol("assignment");
            return l([l(n), s, l(f(x2), { id: o }), je2, xt2(a, { groupId: o })]);
          }
          case "break-lhs":
            return l([n, s, " ", l(a)]);
          case "chain":
            return [l(n), s, x2, a];
          case "chain-tail":
            return [l(n), s, f([x2, a])];
          case "chain-tail-arrow-chain":
            return [l(n), s, a];
          case "only-left":
            return n;
        }
      }
      function ji2(e, t, r) {
        let { node: n } = e;
        return ht2(e, t, r, r("left"), [" ", n.operator], "right");
      }
      function Mi2(e, t, r) {
        return ht2(e, t, r, r("id"), " =", "init");
      }
      function Kc(e, t, r, n, s) {
        let { node: u } = e, i = u[s];
        if (!i) return "only-left";
        let a = !zr2(i);
        if (e.match(zr2, Ri2, (m) => !a || m.type !== "ExpressionStatement" && m.type !== "VariableDeclaration")) return a ? i.type === "ArrowFunctionExpression" && i.body.type === "ArrowFunctionExpression" ? "chain-tail-arrow-chain" : "chain-tail" : "chain";
        if (!a && zr2(i.right) || Le2(t.originalText, i)) return "break-after-operator";
        if (u.type === "ImportAttribute" || i.type === "CallExpression" && i.callee.name === "require" || t.parser === "json5" || t.parser === "jsonc" || t.parser === "json") return "never-break-after-operator";
        let y2 = bu2(n);
        if (zc(u) || rl(u) || ds(u) && y2) return "break-lhs";
        let D = sl(u, n, t);
        return e.call(() => Qc(e, t, r, D), s) ? "break-after-operator" : Zc(u) ? "break-lhs" : !y2 && (D || i.type === "TemplateLiteral" || i.type === "TaggedTemplateExpression" || i.type === "BooleanLiteral" || Fe2(i) || i.type === "ClassExpression") ? "never-break-after-operator" : "fluid";
      }
      function Qc(e, t, r, n) {
        let s = e.node;
        if (De2(s) && !Ht2(s)) return true;
        switch (s.type) {
          case "StringLiteralTypeAnnotation":
          case "SequenceExpression":
            return true;
          case "TSConditionalType":
          case "ConditionalTypeAnnotation":
            if (!t.experimentalTernaries && !al(s)) break;
            return true;
          case "ConditionalExpression": {
            if (!t.experimentalTernaries) {
              let { test: p } = s;
              return De2(p) && !Ht2(p);
            }
            let { consequent: a, alternate: o } = s;
            return a.type === "ConditionalExpression" || o.type === "ConditionalExpression";
          }
          case "ClassExpression":
            return O2(s.decorators);
        }
        if (n) return false;
        let u = s, i = [];
        for (; ; ) if (u.type === "UnaryExpression" || u.type === "AwaitExpression" || u.type === "YieldExpression" && u.argument !== null) u = u.argument, i.push("argument");
        else if (u.type === "TSNonNullExpression") u = u.expression, i.push("expression");
        else break;
        return !!(te2(u) || e.call(() => Ji2(e, t, r), ...i));
      }
      function zc(e) {
        if (Ri2(e)) {
          let t = e.left || e.id;
          return t.type === "ObjectPattern" && t.properties.length > 2 && t.properties.some((r) => {
            var n;
            return Ce2(r) && (!r.shorthand || ((n = r.value) == null ? void 0 : n.type) === "AssignmentPattern");
          });
        }
        return false;
      }
      function zr2(e) {
        return e.type === "AssignmentExpression";
      }
      function Ri2(e) {
        return zr2(e) || e.type === "VariableDeclarator";
      }
      function Zc(e) {
        let t = tl(e);
        if (O2(t)) {
          let r = e.type === "TSTypeAliasDeclaration" ? "constraint" : "bound";
          if (t.length > 1 && t.some((n) => n[r] || n.default)) return true;
        }
        return false;
      }
      var el = R2(["TSTypeAliasDeclaration", "TypeAlias"]);
      function tl(e) {
        var t;
        if (el(e)) return (t = e.typeParameters) == null ? void 0 : t.params;
      }
      function rl(e) {
        if (e.type !== "VariableDeclarator") return false;
        let { typeAnnotation: t } = e.id;
        if (!t || !t.typeAnnotation) return false;
        let r = vi2(t.typeAnnotation);
        return O2(r) && r.length > 1 && r.some((n) => O2(vi2(n)) || n.type === "TSConditionalType");
      }
      function ds(e) {
        var t;
        return e.type === "VariableDeclarator" && ((t = e.init) == null ? void 0 : t.type) === "ArrowFunctionExpression";
      }
      var nl = R2(["TSTypeReference", "GenericTypeAnnotation"]);
      function vi2(e) {
        var t;
        if (nl(e)) return (t = e.typeArguments ?? e.typeParameters) == null ? void 0 : t.params;
      }
      function Ji2(e, t, r, n = false) {
        var i;
        let { node: s } = e, u = () => Ji2(e, t, r, true);
        if (s.type === "ChainExpression" || s.type === "TSNonNullExpression") return e.call(u, "expression");
        if (L2(s)) {
          if ((i = Qr2(e, t, r).label) != null && i.memberChain) return false;
          let o = pe2(s);
          return !(o.length === 0 || o.length === 1 && ir2(o[0], t)) || ul(s, r) ? false : e.call(u, "callee");
        }
        return W2(s) ? e.call(u, "object") : n && (s.type === "Identifier" || s.type === "ThisExpression");
      }
      function sl(e, t, r) {
        return Ce2(e) ? (t = Ut2(t), typeof t == "string" && rt2(t) < r.tabWidth + 3) : false;
      }
      function ul(e, t) {
        let r = il(e);
        if (O2(r)) {
          if (r.length > 1) return true;
          if (r.length === 1) {
            let s = r[0];
            if (we2(s) || Nt2(s) || s.type === "TSTypeLiteral" || s.type === "ObjectTypeAnnotation") return true;
          }
          let n = e.typeParameters ? "typeParameters" : "typeArguments";
          if (re2(t(n))) return true;
        }
        return false;
      }
      function il(e) {
        var t;
        return (t = e.typeParameters ?? e.typeArguments) == null ? void 0 : t.params;
      }
      function al(e) {
        function t(r) {
          switch (r.type) {
            case "FunctionTypeAnnotation":
            case "GenericTypeAnnotation":
            case "TSFunctionType":
              return !!r.typeParameters;
            case "TSTypeReference":
              return !!(r.typeArguments ?? r.typeParameters);
            default:
              return false;
          }
        }
        return t(e.checkType) || t(e.extendsType);
      }
      function Ue2(e, t, r, n, s) {
        let u = e.node, i = z2(u), a = s ? tt2(e, r, t) : "";
        if (i.length === 0) return [a, "(", J2(e, r, { filter: (c) => be2(r.originalText, k2(c)) === ")" }), ")"];
        let { parent: o } = e, p = It2(o), y2 = xs(u), D = [];
        if (Au2(e, (c, A2) => {
          let d = A2 === i.length - 1;
          d && u.rest && D.push("..."), D.push(t()), !d && (D.push(","), p || y2 ? D.push(" ") : ce2(i[A2], r) ? D.push(F, F) : D.push(x2));
        }), n && !pl(e)) {
          if (re2(a) || re2(D)) throw new Dt2();
          return l([cr2(a), "(", cr2(D), ")"]);
        }
        let m = i.every((c) => !O2(c.decorators));
        return y2 && m ? [a, "(", ...D, ")"] : p ? [a, "(", ...D, ")"] : (Or2(o) || mu2(o) || o.type === "TypeAlias" || o.type === "UnionTypeAnnotation" || o.type === "IntersectionTypeAnnotation" || o.type === "FunctionTypeAnnotation" && o.returnType === u) && i.length === 1 && i[0].name === null && u.this !== i[0] && i[0].typeAnnotation && u.typeParameters === null && qt2(i[0].typeAnnotation) && !u.rest ? r.arrowParens === "always" || u.type === "HookTypeAnnotation" ? ["(", ...D, ")"] : D : [a, "(", f([E, ...D]), B2(!Cu2(u) && oe2(r, "all") ? "," : ""), E, ")"];
      }
      function xs(e) {
        if (!e) return false;
        let t = z2(e);
        if (t.length !== 1) return false;
        let [r] = t;
        return !T2(r) && (r.type === "ObjectPattern" || r.type === "ArrayPattern" || r.type === "Identifier" && r.typeAnnotation && (r.typeAnnotation.type === "TypeAnnotation" || r.typeAnnotation.type === "TSTypeAnnotation") && Re2(r.typeAnnotation.typeAnnotation) || r.type === "FunctionTypeParam" && Re2(r.typeAnnotation) && r !== e.rest || r.type === "AssignmentPattern" && (r.left.type === "ObjectPattern" || r.left.type === "ArrayPattern") && (r.right.type === "Identifier" || se2(r.right) && r.right.properties.length === 0 || U2(r.right) && r.right.elements.length === 0));
      }
      function ol(e) {
        let t;
        return e.returnType ? (t = e.returnType, t.typeAnnotation && (t = t.typeAnnotation)) : e.typeAnnotation && (t = e.typeAnnotation), t;
      }
      function ot2(e, t) {
        var s;
        let r = ol(e);
        if (!r) return false;
        let n = (s = e.typeParameters) == null ? void 0 : s.params;
        if (n) {
          if (n.length > 1) return false;
          if (n.length === 1) {
            let u = n[0];
            if (u.constraint || u.default) return false;
          }
        }
        return z2(e).length === 1 && (Re2(r) || re2(t));
      }
      function pl(e) {
        return e.match((t) => t.type === "ArrowFunctionExpression" && t.body.type === "BlockStatement", (t, r) => {
          if (t.type === "CallExpression" && r === "arguments" && t.arguments.length === 1 && t.callee.type === "CallExpression") {
            let n = t.callee.callee;
            return n.type === "Identifier" || n.type === "MemberExpression" && !n.computed && n.object.type === "Identifier" && n.property.type === "Identifier";
          }
          return false;
        }, (t, r) => t.type === "VariableDeclarator" && r === "init" || t.type === "ExportDefaultDeclaration" && r === "declaration" || t.type === "TSExportAssignment" && r === "expression" || t.type === "AssignmentExpression" && r === "right" && t.left.type === "MemberExpression" && t.left.object.type === "Identifier" && t.left.object.name === "module" && t.left.property.type === "Identifier" && t.left.property.name === "exports", (t) => t.type !== "VariableDeclaration" || t.kind === "const" && t.declarations.length === 1);
      }
      function qi2(e) {
        let t = z2(e);
        return t.length > 1 && t.some((r) => r.type === "TSParameterProperty");
      }
      var cl = R2(["VoidTypeAnnotation", "TSVoidKeyword", "NullLiteralTypeAnnotation", "TSNullKeyword"]), ll = R2(["ObjectTypeAnnotation", "TSTypeLiteral", "GenericTypeAnnotation", "TSTypeReference"]);
      function ml(e) {
        let { types: t } = e;
        if (t.some((n) => T2(n))) return false;
        let r = t.find((n) => ll(n));
        return r ? t.every((n) => n === r || cl(n)) : false;
      }
      function hs(e) {
        return qt2(e) || Re2(e) ? true : we2(e) ? ml(e) : false;
      }
      function Wi(e, t, r) {
        let n = t.semi ? ";" : "", { node: s } = e, u = [K2(e), "opaque type ", r("id"), r("typeParameters")];
        return s.supertype && u.push(": ", r("supertype")), s.impltype && u.push(" = ", r("impltype")), u.push(n), u;
      }
      function Zr2(e, t, r) {
        let n = t.semi ? ";" : "", { node: s } = e, u = [K2(e)];
        u.push("type ", r("id"), r("typeParameters"));
        let i = s.type === "TSTypeAliasDeclaration" ? "typeAnnotation" : "right";
        return [ht2(e, t, r, u, " =", i), n];
      }
      function en2(e, t, r) {
        let n = false;
        return l(e.map(({ isFirst: s, previous: u, node: i, index: a }) => {
          let o = r();
          if (s) return o;
          let p = Re2(i), y2 = Re2(u);
          return y2 && p ? [" & ", n ? f(o) : o] : !y2 && !p ? t.experimentalOperatorPosition === "start" ? f([x2, "& ", o]) : f([" &", x2, o]) : (a > 1 && (n = true), [" & ", a > 1 ? f(o) : o]);
        }, "types"));
      }
      function tn2(e, t, r) {
        let { node: n } = e, { parent: s } = e, u = s.type !== "TypeParameterInstantiation" && (!Je2(s) || !t.experimentalTernaries) && s.type !== "TSTypeParameterInstantiation" && s.type !== "GenericTypeAnnotation" && s.type !== "TSTypeReference" && s.type !== "TSTypeAssertion" && s.type !== "TupleTypeAnnotation" && s.type !== "TSTupleType" && !(s.type === "FunctionTypeParam" && !s.name && e.grandparent.this !== s) && !((s.type === "TypeAlias" || s.type === "VariableDeclarator" || s.type === "TSTypeAliasDeclaration") && Le2(t.originalText, n)), i = hs(n), a = e.map((y2) => {
          let D = r();
          return i || (D = Be2(2, D)), ye2(y2, D, t);
        }, "types");
        if (i) return b(" | ", a);
        let o = u && !Le2(t.originalText, n), p = [B2([o ? x2 : "", "| "]), b([x2, "| "], a)];
        return ke2(e, t) ? l([f(p), E]) : (s.type === "TupleTypeAnnotation" || s.type === "TSTupleType") && s[s.type === "TupleTypeAnnotation" && s.types ? "types" : "elementTypes"].length > 1 ? l([f([B2(["(", E]), p]), E, B2(")")]) : l(u ? f(p) : p);
      }
      function yl(e) {
        var n;
        let { node: t, parent: r } = e;
        return t.type === "FunctionTypeAnnotation" && (Or2(r) || !((r.type === "ObjectTypeProperty" || r.type === "ObjectTypeInternalSlot") && !r.variance && !r.optional && Pt2(r, t) || r.type === "ObjectTypeCallProperty" || ((n = e.getParentNode(2)) == null ? void 0 : n.type) === "DeclareFunction"));
      }
      function rn2(e, t, r) {
        let { node: n } = e, s = [Vt2(e)];
        (n.type === "TSConstructorType" || n.type === "TSConstructSignatureDeclaration") && s.push("new ");
        let u = Ue2(e, r, t, false, true), i = [];
        return n.type === "FunctionTypeAnnotation" ? i.push(yl(e) ? " => " : ": ", r("returnType")) : i.push(H2(e, r, n.returnType ? "returnType" : "typeAnnotation")), ot2(n, i) && (u = l(u)), s.push(u, i), l(s);
      }
      function nn2(e, t, r) {
        return [r("objectType"), $2(e), "[", r("indexType"), "]"];
      }
      function sn2(e, t, r) {
        return ["infer ", r("typeParameter")];
      }
      function gs(e, t, r) {
        let { node: n } = e;
        return [n.postfix ? "" : r, H2(e, t), n.postfix ? r : ""];
      }
      function un2(e, t, r) {
        let { node: n } = e;
        return ["...", ...n.type === "TupleTypeSpreadElement" && n.label ? [r("label"), ": "] : [], r("typeAnnotation")];
      }
      function an2(e, t, r) {
        let { node: n } = e;
        return [n.variance ? r("variance") : "", r("label"), n.optional ? "?" : "", ": ", r("elementType")];
      }
      var Dl = /* @__PURE__ */ new WeakSet();
      function H2(e, t, r = "typeAnnotation") {
        let { node: { [r]: n } } = e;
        if (!n) return "";
        let s = false;
        if (n.type === "TSTypeAnnotation" || n.type === "TypeAnnotation") {
          let u = e.call(Ni2, r);
          (u === "=>" || u === ":" && T2(n, h.Leading)) && (s = true), Dl.add(n);
        }
        return s ? [" ", t(r)] : t(r);
      }
      var Ni2 = (e) => e.match((t) => t.type === "TSTypeAnnotation", (t, r) => (r === "returnType" || r === "typeAnnotation") && (t.type === "TSFunctionType" || t.type === "TSConstructorType")) ? "=>" : e.match((t) => t.type === "TSTypeAnnotation", (t, r) => r === "typeAnnotation" && (t.type === "TSJSDocNullableType" || t.type === "TSJSDocNonNullableType" || t.type === "TSTypePredicate")) || e.match((t) => t.type === "TypeAnnotation", (t, r) => r === "typeAnnotation" && t.type === "Identifier", (t, r) => r === "id" && t.type === "DeclareFunction") || e.match((t) => t.type === "TypeAnnotation", (t, r) => r === "typeAnnotation" && t.type === "Identifier", (t, r) => r === "id" && t.type === "DeclareHook") || e.match((t) => t.type === "TypeAnnotation", (t, r) => r === "bound" && t.type === "TypeParameter" && t.usesExtendsBound) ? "" : ":";
      function on2(e, t, r) {
        let n = Ni2(e);
        return n ? [n, " ", r("typeAnnotation")] : r("typeAnnotation");
      }
      function pn2(e) {
        return [e("elementType"), "[]"];
      }
      function cn({ node: e }, t) {
        let r = e.type === "TSTypeQuery" ? "exprName" : "argument", n = e.type === "TypeofTypeAnnotation" || e.typeArguments ? "typeArguments" : "typeParameters";
        return ["typeof ", t(r), t(n)];
      }
      function ln2(e, t) {
        let { node: r } = e;
        return [r.type === "TSTypePredicate" && r.asserts ? "asserts " : r.type === "TypePredicate" && r.kind ? `${r.kind} ` : "", t("parameterName"), r.typeAnnotation ? [" is ", H2(e, t)] : ""];
      }
      function $2(e) {
        let { node: t } = e;
        return !t.optional || t.type === "Identifier" && t === e.parent.key ? "" : L2(t) || W2(t) && t.computed || t.type === "OptionalIndexedAccessType" ? "?." : "?";
      }
      function mn(e) {
        return e.node.definite || e.match(void 0, (t, r) => r === "id" && t.type === "VariableDeclarator" && t.definite) ? "!" : "";
      }
      var fl = /* @__PURE__ */ new Set(["DeclareClass", "DeclareComponent", "DeclareFunction", "DeclareHook", "DeclareVariable", "DeclareExportDeclaration", "DeclareExportAllDeclaration", "DeclareOpaqueType", "DeclareTypeAlias", "DeclareEnum", "DeclareInterface"]);
      function K2(e) {
        let { node: t } = e;
        return t.declare || fl.has(t.type) && e.parent.type !== "DeclareExportDeclaration" ? "declare " : "";
      }
      var El = /* @__PURE__ */ new Set(["TSAbstractMethodDefinition", "TSAbstractPropertyDefinition", "TSAbstractAccessorProperty"]);
      function Vt2({ node: e }) {
        return e.abstract || El.has(e.type) ? "abstract " : "";
      }
      function tt2(e, t, r) {
        let n = e.node;
        return n.typeArguments ? r("typeArguments") : n.typeParameters ? r("typeParameters") : "";
      }
      function Kr2(e, t, r) {
        return ["::", r("callee")];
      }
      function ft2(e, t, r) {
        return e.type === "EmptyStatement" ? ";" : e.type === "BlockStatement" || r ? [" ", t] : f([x2, t]);
      }
      function yn2(e, t) {
        return ["...", t("argument"), H2(e, t)];
      }
      function $t2(e) {
        return e.accessibility ? e.accessibility + " " : "";
      }
      function Fl(e, t, r, n) {
        let { node: s } = e, u = s.inexact ? "..." : "";
        return T2(s, h.Dangling) ? l([r, u, J2(e, t, { indent: true }), E, n]) : [r, u, n];
      }
      function Kt2(e, t, r) {
        let { node: n } = e, s = [], u = n.type === "TupleExpression" ? "#[" : "[", i = "]", a = n.type === "TupleTypeAnnotation" && n.types ? "types" : n.type === "TSTupleType" || n.type === "TupleTypeAnnotation" ? "elementTypes" : "elements", o = n[a];
        if (o.length === 0) s.push(Fl(e, t, u, i));
        else {
          let p = M2(false, o, -1), y2 = (p == null ? void 0 : p.type) !== "RestElement" && !n.inexact, D = p === null, m = Symbol("array"), C = !t.__inJestEach && o.length > 1 && o.every((d, S2, g) => {
            let _2 = d == null ? void 0 : d.type;
            if (!U2(d) && !se2(d)) return false;
            let v = g[S2 + 1];
            if (v && _2 !== v.type) return false;
            let j = U2(d) ? "elements" : "properties";
            return d[j] && d[j].length > 1;
          }), c = As(n, t), A2 = y2 ? D ? "," : oe2(t) ? c ? B2(",", "", { groupId: m }) : B2(",") : "" : "";
          s.push(l([u, f([E, c ? Al(e, t, r, A2) : [Cl(e, t, a, n.inexact, r), A2], J2(e, t)]), E, i], { shouldBreak: C, id: m }));
        }
        return s.push($2(e), H2(e, r)), s;
      }
      function As(e, t) {
        return U2(e) && e.elements.length > 1 && e.elements.every((r) => r && (Fe2(r) || Rn2(r) && !T2(r.argument)) && !T2(r, h.Trailing | h.Line, (n) => !Z2(t.originalText, q2(n), { backwards: true })));
      }
      function Gi2({ node: e }, { originalText: t }) {
        let r = (s) => _t2(t, vt2(t, s)), n = (s) => t[s] === "," ? s : n(r(s + 1));
        return jt2(t, n(k2(e)));
      }
      function Cl(e, t, r, n, s) {
        let u = [];
        return e.each(({ node: i, isLast: a }) => {
          u.push(i ? l(s()) : ""), (!a || n) && u.push([",", x2, i && Gi2(e, t) ? E : ""]);
        }, r), n && u.push("..."), u;
      }
      function Al(e, t, r, n) {
        let s = [];
        return e.each(({ isLast: u, next: i }) => {
          s.push([r(), u ? n : ","]), u || s.push(Gi2(e, t) ? [F, F] : T2(i, h.Leading | h.Line) ? F : x2);
        }, "elements"), qr2(s);
      }
      var Tl = /^[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC][\$0-9A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*$/, dl = (e) => Tl.test(e), Ui2 = dl;
      function xl(e) {
        return e.length === 1 ? e : e.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(?=\d)/u, "$1$2").replace(/^([+-]?[\d.]+)e[+-]?0+$/u, "$1").replace(/^([+-])?\./u, "$10.").replace(/(\.\d+?)0+(?=e|$)/u, "$1").replace(/\.(?=e|$)/u, "");
      }
      var Et2 = xl;
      var Dn2 = /* @__PURE__ */ new WeakMap();
      function Xi2(e) {
        return /^(?:\d+|\d+\.\d+)$/u.test(e);
      }
      function Yi2(e, t) {
        return t.parser === "json" || t.parser === "jsonc" || !te2(e.key) || nt2(fe2(e.key), t).slice(1, -1) !== e.key.value ? false : !!(Ui2(e.key.value) && !(t.parser === "babel-ts" && e.type === "ClassProperty" || t.parser === "typescript" && e.type === "PropertyDefinition") || Xi2(e.key.value) && String(Number(e.key.value)) === e.key.value && e.type !== "ImportAttribute" && (t.parser === "babel" || t.parser === "acorn" || t.parser === "espree" || t.parser === "meriyah" || t.parser === "__babel_estree"));
      }
      function hl(e, t) {
        let { key: r } = e.node;
        return (r.type === "Identifier" || Fe2(r) && Xi2(Et2(fe2(r))) && String(r.value) === Et2(fe2(r)) && !(t.parser === "typescript" || t.parser === "babel-ts")) && (t.parser === "json" || t.parser === "jsonc" || t.quoteProps === "consistent" && Dn2.get(e.parent));
      }
      function Ft2(e, t, r) {
        let { node: n } = e;
        if (n.computed) return ["[", r("key"), "]"];
        let { parent: s } = e, { key: u } = n;
        if (t.quoteProps === "consistent" && !Dn2.has(s)) {
          let i = e.siblings.some((a) => !a.computed && te2(a.key) && !Yi2(a, t));
          Dn2.set(s, i);
        }
        if (hl(e, t)) {
          let i = nt2(JSON.stringify(u.type === "Identifier" ? u.name : u.value.toString()), t);
          return e.call((a) => ye2(a, i, t), "key");
        }
        return Yi2(n, t) && (t.quoteProps === "as-needed" || t.quoteProps === "consistent" && !Dn2.get(s)) ? e.call((i) => ye2(i, /^\d/u.test(u.value) ? Et2(u.value) : u.value, t), "key") : r("key");
      }
      function fn2(e, t, r) {
        let { node: n } = e;
        return n.shorthand ? r("value") : ht2(e, t, r, Ft2(e, t, r), ":", "value");
      }
      var gl = ({ node: e, key: t, parent: r }) => t === "value" && e.type === "FunctionExpression" && (r.type === "ObjectMethod" || r.type === "ClassMethod" || r.type === "ClassPrivateMethod" || r.type === "MethodDefinition" || r.type === "TSAbstractMethodDefinition" || r.type === "TSDeclareMethod" || r.type === "Property" && kt2(r));
      function En2(e, t, r, n) {
        if (gl(e)) return Fn(e, r, t);
        let { node: s } = e, u = false;
        if ((s.type === "FunctionDeclaration" || s.type === "FunctionExpression") && (n != null && n.expandLastArg)) {
          let { parent: y2 } = e;
          L2(y2) && (pe2(y2).length > 1 || z2(s).every((D) => D.type === "Identifier" && !D.typeAnnotation)) && (u = true);
        }
        let i = [K2(e), s.async ? "async " : "", `function${s.generator ? "*" : ""} `, s.id ? t("id") : ""], a = Ue2(e, t, r, u), o = Qt2(e, t), p = ot2(s, o);
        return i.push(tt2(e, r, t), l([p ? l(a) : a, o]), s.body ? " " : "", t("body")), r.semi && (s.declare || !s.body) && i.push(";"), i;
      }
      function Fr2(e, t, r) {
        let { node: n } = e, { kind: s } = n, u = n.value || n, i = [];
        return !s || s === "init" || s === "method" || s === "constructor" ? u.async && i.push("async ") : (Mt2.ok(s === "get" || s === "set"), i.push(s, " ")), u.generator && i.push("*"), i.push(Ft2(e, t, r), n.optional || n.key.optional ? "?" : "", n === u ? Fn(e, t, r) : r("value")), i;
      }
      function Fn(e, t, r) {
        let { node: n } = e, s = Ue2(e, r, t), u = Qt2(e, r), i = qi2(n), a = ot2(n, u), o = [tt2(e, t, r), l([i ? l(s, { shouldBreak: true }) : a ? l(s) : s, u])];
        return n.body ? o.push(" ", r("body")) : o.push(t.semi ? ";" : ""), o;
      }
      function Sl(e) {
        let t = z2(e);
        return t.length === 1 && !e.typeParameters && !T2(e, h.Dangling) && t[0].type === "Identifier" && !t[0].typeAnnotation && !T2(t[0]) && !t[0].optional && !e.predicate && !e.returnType;
      }
      function Cn2(e, t) {
        if (t.arrowParens === "always") return false;
        if (t.arrowParens === "avoid") {
          let { node: r } = e;
          return Sl(r);
        }
        return false;
      }
      function Qt2(e, t) {
        let { node: r } = e, s = [H2(e, t, "returnType")];
        return r.predicate && s.push(t("predicate")), s;
      }
      function Hi2(e, t, r) {
        let { node: n } = e, s = t.semi ? ";" : "", u = [];
        if (n.argument) {
          let o = r("argument");
          Bl(t, n.argument) ? o = ["(", f([F, o]), F, ")"] : (De2(n.argument) || n.argument.type === "SequenceExpression" || t.experimentalTernaries && n.argument.type === "ConditionalExpression" && (n.argument.consequent.type === "ConditionalExpression" || n.argument.alternate.type === "ConditionalExpression")) && (o = l([B2("("), f([E, o]), E, B2(")")])), u.push(" ", o);
        }
        let i = T2(n, h.Dangling), a = s && i && T2(n, h.Last | h.Line);
        return a && u.push(s), i && u.push(" ", J2(e, t)), a || u.push(s), u;
      }
      function Vi2(e, t, r) {
        return ["return", Hi2(e, t, r)];
      }
      function $i2(e, t, r) {
        return ["throw", Hi2(e, t, r)];
      }
      function Bl(e, t) {
        if (Le2(e.originalText, t) || T2(t, h.Leading, (r) => de2(e.originalText, q2(r), k2(r))) && !X(t)) return true;
        if (Jt2(t)) {
          let r = t, n;
          for (; n = pu2(r); ) if (r = n, Le2(e.originalText, r)) return true;
        }
        return false;
      }
      var Ss = /* @__PURE__ */ new WeakMap();
      function Ki2(e) {
        return Ss.has(e) || Ss.set(e, e.type === "ConditionalExpression" && !ae(e, (t) => t.type === "ObjectExpression")), Ss.get(e);
      }
      var Qi2 = (e) => e.type === "SequenceExpression";
      function zi2(e, t, r, n = {}) {
        let s = [], u, i = [], a = false, o = !n.expandLastArg && e.node.body.type === "ArrowFunctionExpression", p;
        (function S2() {
          let { node: g } = e, _2 = bl(e, t, r, n);
          if (s.length === 0) s.push(_2);
          else {
            let { leading: v, trailing: j } = ms2(e, t);
            s.push([v, _2]), i.unshift(j);
          }
          o && (a || (a = g.returnType && z2(g).length > 0 || g.typeParameters || z2(g).some((v) => v.type !== "Identifier"))), !o || g.body.type !== "ArrowFunctionExpression" ? (u = r("body", n), p = g.body) : e.call(S2, "body");
        })();
        let y2 = !Le2(t.originalText, p) && (Qi2(p) || Pl(p, u, t) || !a && Ki2(p)), D = e.key === "callee" && mt2(e.parent), m = Symbol("arrow-chain"), C = kl(e, n, { signatureDocs: s, shouldBreak: a }), c = false, A2 = false, d = false;
        return o && (D || n.assignmentLayout) && (A2 = true, d = !T2(e.node, h.Leading & h.Line), c = n.assignmentLayout === "chain-tail-arrow-chain" || D && !y2), u = Il(e, t, n, { bodyDoc: u, bodyComments: i, functionBody: p, shouldPutBodyOnSameLine: y2 }), l([l(A2 ? f([d ? E : "", C]) : C, { shouldBreak: c, id: m }), " =>", o ? xt2(u, { groupId: m }) : l(u), o && D ? B2(E, "", { groupId: m }) : ""]);
      }
      function bl(e, t, r, n) {
        let { node: s } = e, u = [];
        if (s.async && u.push("async "), Cn2(e, t)) u.push(r(["params", 0]));
        else {
          let a = n.expandLastArg || n.expandFirstArg, o = Qt2(e, r);
          if (a) {
            if (re2(o)) throw new Dt2();
            o = l(cr2(o));
          }
          u.push(l([Ue2(e, r, t, a, true), o]));
        }
        let i = J2(e, t, { filter(a) {
          let o = it2(t.originalText, k2(a));
          return o !== false && t.originalText.slice(o, o + 2) === "=>";
        } });
        return i && u.push(" ", i), u;
      }
      function Pl(e, t, r) {
        var n, s;
        return U2(e) || se2(e) || e.type === "ArrowFunctionExpression" || e.type === "DoExpression" || e.type === "BlockStatement" || X(e) || ((n = t.label) == null ? void 0 : n.hug) !== false && (((s = t.label) == null ? void 0 : s.embed) || _r2(e, r.originalText));
      }
      function kl(e, t, { signatureDocs: r, shouldBreak: n }) {
        if (r.length === 1) return r[0];
        let { parent: s, key: u } = e;
        return u !== "callee" && mt2(s) || De2(s) ? l([r[0], " =>", f([x2, b([" =>", x2], r.slice(1))])], { shouldBreak: n }) : u === "callee" && mt2(s) || t.assignmentLayout ? l(b([" =>", x2], r), { shouldBreak: n }) : l(f(b([" =>", x2], r)), { shouldBreak: n });
      }
      function Il(e, t, r, { bodyDoc: n, bodyComments: s, functionBody: u, shouldPutBodyOnSameLine: i }) {
        let { node: a, parent: o } = e, p = r.expandLastArg && oe2(t, "all") ? B2(",") : "", y2 = (r.expandLastArg || o.type === "JSXExpressionContainer") && !T2(a) ? E : "";
        return i && Ki2(u) ? [" ", l([B2("", "("), f([E, n]), B2("", ")"), p, y2]), s] : (Qi2(u) && (n = l(["(", f([E, n]), E, ")"])), i ? [" ", n, s] : [f([x2, n, s]), p, y2]);
      }
      var Ll = (e, t, r) => {
        if (!(e && t == null)) {
          if (t.findLast) return t.findLast(r);
          for (let n = t.length - 1; n >= 0; n--) {
            let s = t[n];
            if (r(s, n, t)) return s;
          }
        }
      }, Zi2 = Ll;
      function Cr2(e, t, r, n) {
        let { node: s } = e, u = [], i = Zi2(false, s[n], (a) => a.type !== "EmptyStatement");
        return e.each(({ node: a }) => {
          a.type !== "EmptyStatement" && (u.push(r()), a !== i && (u.push(F), ce2(a, t) && u.push(F)));
        }, n), u;
      }
      function An2(e, t, r) {
        let n = wl(e, t, r), { node: s, parent: u } = e;
        if (s.type === "Program" && (u == null ? void 0 : u.type) !== "ModuleExpression") return n ? [n, F] : "";
        let i = [];
        if (s.type === "StaticBlock" && i.push("static "), i.push("{"), n) i.push(f([F, n]), F);
        else {
          let a = e.grandparent;
          u.type === "ArrowFunctionExpression" || u.type === "FunctionExpression" || u.type === "FunctionDeclaration" || u.type === "ComponentDeclaration" || u.type === "HookDeclaration" || u.type === "ObjectMethod" || u.type === "ClassMethod" || u.type === "ClassPrivateMethod" || u.type === "ForStatement" || u.type === "WhileStatement" || u.type === "DoWhileStatement" || u.type === "DoExpression" || u.type === "ModuleExpression" || u.type === "CatchClause" && !a.finalizer || u.type === "TSModuleDeclaration" || s.type === "StaticBlock" || i.push(F);
        }
        return i.push("}"), i;
      }
      function wl(e, t, r) {
        let { node: n } = e, s = O2(n.directives), u = n.body.some((o) => o.type !== "EmptyStatement"), i = T2(n, h.Dangling);
        if (!s && !u && !i) return "";
        let a = [];
        return s && (a.push(Cr2(e, t, r, "directives")), (u || i) && (a.push(F), ce2(M2(false, n.directives, -1), t) && a.push(F))), u && a.push(Cr2(e, t, r, "body")), i && a.push(J2(e, t)), a;
      }
      function Ol(e) {
        let t = /* @__PURE__ */ new WeakMap();
        return function(r) {
          return t.has(r) || t.set(r, Symbol(e)), t.get(r);
        };
      }
      var Tn2 = Ol;
      function _l(e) {
        switch (e) {
          case null:
            return "";
          case "PlusOptional":
            return "+?";
          case "MinusOptional":
            return "-?";
          case "Optional":
            return "?";
        }
      }
      function ea(e, t, r) {
        let { node: n } = e;
        return l([n.variance ? r("variance") : "", "[", f([r("keyTparam"), " in ", r("sourceType")]), "]", _l(n.optional), ": ", r("propType")]);
      }
      function Bs(e, t) {
        return e === "+" || e === "-" ? e + t : t;
      }
      function ta(e, t, r) {
        let { node: n } = e, s = t.objectWrap === "preserve" && de2(t.originalText, q2(n), q2(n.typeParameter));
        return l(["{", f([t.bracketSpacing ? x2 : E, l([r("typeParameter"), n.optional ? Bs(n.optional, "?") : "", n.typeAnnotation ? ": " : "", r("typeAnnotation")]), t.semi ? B2(";") : ""]), J2(e, t), t.bracketSpacing ? x2 : E, "}"], { shouldBreak: s });
      }
      var Ar2 = Tn2("typeParameters");
      function vl(e, t, r) {
        let { node: n } = e;
        return z2(n).length === 1 && n.type.startsWith("TS") && !n[r][0].constraint && e.parent.type === "ArrowFunctionExpression" && !(t.filepath && /\.ts$/u.test(t.filepath));
      }
      function Ot2(e, t, r, n) {
        let { node: s } = e;
        if (!s[n]) return "";
        if (!Array.isArray(s[n])) return r(n);
        let u = It2(e.grandparent), i = e.match((p) => !(p[n].length === 1 && Re2(p[n][0])), void 0, (p, y2) => y2 === "typeAnnotation", (p) => p.type === "Identifier", ds);
        if (s[n].length === 0 || !i && (u || s[n].length === 1 && (s[n][0].type === "NullableTypeAnnotation" || hs(s[n][0])))) return ["<", b(", ", e.map(r, n)), jl(e, t), ">"];
        let o = s.type === "TSTypeParameterInstantiation" ? "" : vl(e, t, n) ? "," : oe2(t) ? B2(",") : "";
        return l(["<", f([E, b([",", x2], e.map(r, n))]), o, E, ">"], { id: Ar2(s) });
      }
      function jl(e, t) {
        let { node: r } = e;
        if (!T2(r, h.Dangling)) return "";
        let n = !T2(r, h.Line), s = J2(e, t, { indent: !n });
        return n ? s : [s, F];
      }
      function dn2(e, t, r) {
        let { node: n, parent: s } = e, u = [n.const ? "const " : ""], i = n.type === "TSTypeParameter" ? r("name") : n.name;
        if (s.type === "TSMappedType") return s.readonly && u.push(Bs(s.readonly, "readonly"), " "), u.push("[", i), n.constraint && u.push(" in ", r("constraint")), s.nameType && u.push(" as ", e.callParent(() => r("nameType"))), u.push("]"), u;
        if (n.variance && u.push(r("variance")), n.in && u.push("in "), n.out && u.push("out "), u.push(i), n.bound && (n.usesExtendsBound && u.push(" extends "), u.push(H2(e, r, "bound"))), n.constraint) {
          let a = Symbol("constraint");
          u.push(" extends", l(f(x2), { id: a }), je2, xt2(r("constraint"), { groupId: a }));
        }
        return n.default && u.push(" = ", r("default")), l(u);
      }
      var ra = R2(["ClassProperty", "PropertyDefinition", "ClassPrivateProperty", "ClassAccessorProperty", "AccessorProperty", "TSAbstractPropertyDefinition", "TSAbstractAccessorProperty"]);
      function xn2(e, t, r) {
        let { node: n } = e, s = [K2(e), Vt2(e), "class"], u = T2(n.id, h.Trailing) || T2(n.typeParameters, h.Trailing) || T2(n.superClass) || O2(n.extends) || O2(n.mixins) || O2(n.implements), i = [], a = [];
        if (n.id && i.push(" ", r("id")), i.push(r("typeParameters")), n.superClass) {
          let y2 = [Rl(e, t, r), r(n.superTypeArguments ? "superTypeArguments" : "superTypeParameters")], D = e.call((m) => ["extends ", ye2(m, y2, t)], "superClass");
          u ? a.push(x2, l(D)) : a.push(" ", D);
        } else a.push(bs(e, t, r, "extends"));
        a.push(bs(e, t, r, "mixins"), bs(e, t, r, "implements"));
        let o;
        if (u) {
          let y2;
          ua(n) ? y2 = [...i, f(a)] : y2 = f([...i, a]), o = na(n), s.push(l(y2, { id: o }));
        } else s.push(...i, ...a);
        let p = n.body;
        return u && O2(p.body) ? s.push(B2(F, " ", { groupId: o })) : s.push(" "), s.push(r("body")), s;
      }
      var na = Tn2("heritageGroup");
      function sa(e) {
        return B2(F, "", { groupId: na(e) });
      }
      function Ml(e) {
        return ["extends", "mixins", "implements"].reduce((t, r) => t + (Array.isArray(e[r]) ? e[r].length : 0), e.superClass ? 1 : 0) > 1;
      }
      function ua(e) {
        return e.typeParameters && !T2(e.typeParameters, h.Trailing | h.Line) && !Ml(e);
      }
      function bs(e, t, r, n) {
        let { node: s } = e;
        if (!O2(s[n])) return "";
        let u = J2(e, t, { marker: n });
        return [ua(s) ? B2(" ", x2, { groupId: Ar2(s.typeParameters) }) : x2, u, u && F, n, l(f([x2, b([",", x2], e.map(r, n))]))];
      }
      function Rl(e, t, r) {
        let n = r("superClass"), { parent: s } = e;
        return s.type === "AssignmentExpression" ? l(B2(["(", f([E, n]), E, ")"], n)) : n;
      }
      function hn2(e, t, r) {
        let { node: n } = e, s = [];
        return O2(n.decorators) && s.push(Cs(e, t, r)), s.push($t2(n)), n.static && s.push("static "), s.push(Vt2(e)), n.override && s.push("override "), s.push(Fr2(e, t, r)), s;
      }
      function gn2(e, t, r) {
        let { node: n } = e, s = [], u = t.semi ? ";" : "";
        O2(n.decorators) && s.push(Cs(e, t, r)), s.push(K2(e), $t2(n)), n.static && s.push("static "), s.push(Vt2(e)), n.override && s.push("override "), n.readonly && s.push("readonly "), n.variance && s.push(r("variance")), (n.type === "ClassAccessorProperty" || n.type === "AccessorProperty" || n.type === "TSAbstractAccessorProperty") && s.push("accessor "), s.push(Ft2(e, t, r), $2(e), mn(e), H2(e, r));
        let i = n.type === "TSAbstractPropertyDefinition" || n.type === "TSAbstractAccessorProperty";
        return [ht2(e, t, r, s, " =", i ? void 0 : "value"), u];
      }
      function ia(e, t, r) {
        let { node: n } = e, s = [];
        return e.each(({ node: u, next: i, isLast: a }) => {
          s.push(r()), !t.semi && ra(u) && Jl(u, i) && s.push(";"), a || (s.push(F), ce2(u, t) && s.push(F));
        }, "body"), T2(n, h.Dangling) && s.push(J2(e, t)), ["{", s.length > 0 ? [f([F, s]), F] : "", "}"];
      }
      function Jl(e, t) {
        var s;
        let { type: r, name: n } = e.key;
        if (!e.computed && r === "Identifier" && (n === "static" || n === "get" || n === "set") && !e.value && !e.typeAnnotation) return true;
        if (!t || t.static || t.accessibility || t.readonly) return false;
        if (!t.computed) {
          let u = (s = t.key) == null ? void 0 : s.name;
          if (u === "in" || u === "instanceof") return true;
        }
        if (ra(t) && t.variance && !t.static && !t.declare) return true;
        switch (t.type) {
          case "ClassProperty":
          case "PropertyDefinition":
          case "TSAbstractPropertyDefinition":
            return t.computed;
          case "MethodDefinition":
          case "TSAbstractMethodDefinition":
          case "ClassMethod":
          case "ClassPrivateMethod": {
            if ((t.value ? t.value.async : t.async) || t.kind === "get" || t.kind === "set") return false;
            let i = t.value ? t.value.generator : t.generator;
            return !!(t.computed || i);
          }
          case "TSIndexSignature":
            return true;
        }
        return false;
      }
      var ql = R2(["TSAsExpression", "TSTypeAssertion", "TSNonNullExpression", "TSInstantiationExpression", "TSSatisfiesExpression"]);
      function Ps(e) {
        return ql(e) ? Ps(e.expression) : e;
      }
      var aa = R2(["FunctionExpression", "ArrowFunctionExpression"]);
      function oa(e) {
        return e.type === "MemberExpression" || e.type === "OptionalMemberExpression" || e.type === "Identifier" && e.name !== "undefined";
      }
      function pa(e, t) {
        if (t.semi || ks(e, t) || Is(e, t)) return false;
        let { node: r, key: n, parent: s } = e;
        return !!(r.type === "ExpressionStatement" && (n === "body" && (s.type === "Program" || s.type === "BlockStatement" || s.type === "StaticBlock" || s.type === "TSModuleBlock") || n === "consequent" && s.type === "SwitchCase") && e.call(() => ca(e, t), "expression"));
      }
      function ca(e, t) {
        let { node: r } = e;
        switch (r.type) {
          case "ParenthesizedExpression":
          case "TypeCastExpression":
          case "ArrayExpression":
          case "ArrayPattern":
          case "TemplateLiteral":
          case "TemplateElement":
          case "RegExpLiteral":
            return true;
          case "ArrowFunctionExpression":
            if (!Cn2(e, t)) return true;
            break;
          case "UnaryExpression": {
            let { prefix: n, operator: s } = r;
            if (n && (s === "+" || s === "-")) return true;
            break;
          }
          case "BindExpression":
            if (!r.object) return true;
            break;
          case "Literal":
            if (r.regex) return true;
            break;
          default:
            if (X(r)) return true;
        }
        return ke2(e, t) ? true : Jt2(r) ? e.call(() => ca(e, t), ...Lr2(r)) : false;
      }
      function ks({ node: e, parent: t }, r) {
        return (r.parentParser === "markdown" || r.parentParser === "mdx") && e.type === "ExpressionStatement" && X(e.expression) && t.type === "Program" && t.body.length === 1;
      }
      function Is({ node: e, parent: t }, r) {
        return (r.parser === "__vue_event_binding" || r.parser === "__vue_ts_event_binding") && e.type === "ExpressionStatement" && t.type === "Program" && t.body.length === 1;
      }
      function la(e, t, r) {
        let n = [r("expression")];
        if (Is(e, t)) {
          let s = Ps(e.node.expression);
          (aa(s) || oa(s)) && n.push(";");
        } else ks(e, t) || t.semi && n.push(";");
        return n;
      }
      function ma(e, t, r) {
        if (t.__isVueBindings || t.__isVueForBindingLeft) {
          let n = e.map(r, "program", "body", 0, "params");
          if (n.length === 1) return n[0];
          let s = b([",", x2], n);
          return t.__isVueForBindingLeft ? ["(", f([E, l(s)]), E, ")"] : s;
        }
        if (t.__isEmbeddedTypescriptGenericParameters) {
          let n = e.map(r, "program", "body", 0, "typeParameters", "params");
          return b([",", x2], n);
        }
      }
      function fa(e, t) {
        let { node: r } = e;
        switch (r.type) {
          case "RegExpLiteral":
            return ya(r);
          case "BigIntLiteral":
            return Sn2(r.extra.raw);
          case "NumericLiteral":
            return Et2(r.extra.raw);
          case "StringLiteral":
            return ve2(nt2(r.extra.raw, t));
          case "NullLiteral":
            return "null";
          case "BooleanLiteral":
            return String(r.value);
          case "DirectiveLiteral":
            return Da(r.extra.raw, t);
          case "Literal": {
            if (r.regex) return ya(r.regex);
            if (r.bigint) return Sn2(r.raw);
            let { value: n } = r;
            return typeof n == "number" ? Et2(r.raw) : typeof n == "string" ? Wl(e) ? Da(r.raw, t) : ve2(nt2(r.raw, t)) : String(n);
          }
        }
      }
      function Wl(e) {
        if (e.key !== "expression") return;
        let { parent: t } = e;
        return t.type === "ExpressionStatement" && t.directive;
      }
      function Sn2(e) {
        return e.toLowerCase();
      }
      function ya({ pattern: e, flags: t }) {
        return t = [...t].sort().join(""), `/${e}/${t}`;
      }
      function Da(e, t) {
        let r = e.slice(1, -1);
        if (r.includes('"') || r.includes("'")) return e;
        let n = t.singleQuote ? "'" : '"';
        return n + r + n;
      }
      function Nl(e, t, r) {
        let n = e.originalText.slice(t, r);
        for (let s of e[Symbol.for("comments")]) {
          let u = q2(s);
          if (u > r) break;
          let i = k2(s);
          if (i < t) continue;
          let a = i - u;
          n = n.slice(0, u - t) + " ".repeat(a) + n.slice(i - t);
        }
        return n;
      }
      var Ls = Nl;
      function Ea(e, t, r) {
        let { node: n } = e;
        return ["import", n.phase ? ` ${n.phase}` : "", Os(n), Aa(e, t, r), Ca(e, t, r), da(e, t, r), t.semi ? ";" : ""];
      }
      var Fa = (e) => e.type === "ExportDefaultDeclaration" || e.type === "DeclareExportDeclaration" && e.default;
      function Bn2(e, t, r) {
        let { node: n } = e, s = [Si2(e, t, r), K2(e), "export", Fa(n) ? " default" : ""], { declaration: u, exported: i } = n;
        return T2(n, h.Dangling) && (s.push(" ", J2(e, t)), vr2(n) && s.push(F)), u ? s.push(" ", r("declaration")) : (s.push(Yl(n)), n.type === "ExportAllDeclaration" || n.type === "DeclareExportAllDeclaration" ? (s.push(" *"), i && s.push(" as ", r("exported"))) : s.push(Aa(e, t, r)), s.push(Ca(e, t, r), da(e, t, r))), s.push(Ul(n, t)), s;
      }
      var Gl = R2(["ClassDeclaration", "ComponentDeclaration", "FunctionDeclaration", "TSInterfaceDeclaration", "DeclareClass", "DeclareComponent", "DeclareFunction", "DeclareHook", "HookDeclaration", "TSDeclareFunction", "EnumDeclaration"]);
      function Ul(e, t) {
        return t.semi && (!e.declaration || Fa(e) && !Gl(e.declaration)) ? ";" : "";
      }
      function ws(e, t = true) {
        return e && e !== "value" ? `${t ? " " : ""}${e}${t ? "" : " "}` : "";
      }
      function Os(e, t) {
        return ws(e.importKind, t);
      }
      function Yl(e) {
        return ws(e.exportKind);
      }
      function Ca(e, t, r) {
        let { node: n } = e;
        if (!n.source) return "";
        let s = [];
        return Ta(n, t) && s.push(" from"), s.push(" ", r("source")), s;
      }
      function Aa(e, t, r) {
        let { node: n } = e;
        if (!Ta(n, t)) return "";
        let s = [" "];
        if (O2(n.specifiers)) {
          let u = [], i = [];
          e.each(() => {
            let a = e.node.type;
            if (a === "ExportNamespaceSpecifier" || a === "ExportDefaultSpecifier" || a === "ImportNamespaceSpecifier" || a === "ImportDefaultSpecifier") u.push(r());
            else if (a === "ExportSpecifier" || a === "ImportSpecifier") i.push(r());
            else throw new Ne2(n, "specifier");
          }, "specifiers"), s.push(b(", ", u)), i.length > 0 && (u.length > 0 && s.push(", "), i.length > 1 || u.length > 0 || n.specifiers.some((o) => T2(o)) ? s.push(l(["{", f([t.bracketSpacing ? x2 : E, b([",", x2], i)]), B2(oe2(t) ? "," : ""), t.bracketSpacing ? x2 : E, "}"])) : s.push(["{", t.bracketSpacing ? " " : "", ...i, t.bracketSpacing ? " " : "", "}"]));
        } else s.push("{}");
        return s;
      }
      function Ta(e, t) {
        return e.type !== "ImportDeclaration" || O2(e.specifiers) || e.importKind === "type" ? true : Ls(t, q2(e), q2(e.source)).trimEnd().endsWith("from");
      }
      function Xl(e, t) {
        var n, s;
        if ((n = e.extra) != null && n.deprecatedAssertSyntax) return "assert";
        let r = Ls(t, k2(e.source), (s = e.attributes) != null && s[0] ? q2(e.attributes[0]) : k2(e)).trimStart();
        return r.startsWith("assert") ? "assert" : r.startsWith("with") || O2(e.attributes) ? "with" : void 0;
      }
      function da(e, t, r) {
        let { node: n } = e;
        if (!n.source) return "";
        let s = Xl(n, t);
        if (!s) return "";
        let u = [` ${s} {`];
        return O2(n.attributes) && (t.bracketSpacing && u.push(" "), u.push(b(", ", e.map(r, "attributes"))), t.bracketSpacing && u.push(" ")), u.push("}"), u;
      }
      function xa(e, t, r) {
        let { node: n } = e, { type: s } = n, u = s.startsWith("Import"), i = u ? "imported" : "local", a = u ? "local" : "exported", o = n[i], p = n[a], y2 = "", D = "";
        return s === "ExportNamespaceSpecifier" || s === "ImportNamespaceSpecifier" ? y2 = "*" : o && (y2 = r(i)), p && !Hl(n) && (D = r(a)), [ws(s === "ImportSpecifier" ? n.importKind : n.exportKind, false), y2, y2 && D ? " as " : "", D];
      }
      function Hl(e) {
        if (e.type !== "ImportSpecifier" && e.type !== "ExportSpecifier") return false;
        let { local: t, [e.type === "ImportSpecifier" ? "imported" : "exported"]: r } = e;
        if (t.type !== r.type || !su2(t, r)) return false;
        if (te2(t)) return t.value === r.value && fe2(t) === fe2(r);
        switch (t.type) {
          case "Identifier":
            return t.name === r.name;
          default:
            return false;
        }
      }
      function gt2(e, t, r) {
        var j;
        let n = t.semi ? ";" : "", { node: s } = e, u = s.type === "ObjectTypeAnnotation", i = s.type === "TSEnumDeclaration" || s.type === "EnumBooleanBody" || s.type === "EnumNumberBody" || s.type === "EnumBigIntBody" || s.type === "EnumStringBody" || s.type === "EnumSymbolBody", a = [s.type === "TSTypeLiteral" || i ? "members" : s.type === "TSInterfaceBody" ? "body" : "properties"];
        u && a.push("indexers", "callProperties", "internalSlots");
        let o = a.flatMap((I2) => e.map(({ node: G }) => ({ node: G, printed: r(), loc: q2(G) }), I2));
        a.length > 1 && o.sort((I2, G) => I2.loc - G.loc);
        let { parent: p, key: y2 } = e, D = u && y2 === "body" && (p.type === "InterfaceDeclaration" || p.type === "DeclareInterface" || p.type === "DeclareClass"), m = s.type === "TSInterfaceBody" || i || D || s.type === "ObjectPattern" && p.type !== "FunctionDeclaration" && p.type !== "FunctionExpression" && p.type !== "ArrowFunctionExpression" && p.type !== "ObjectMethod" && p.type !== "ClassMethod" && p.type !== "ClassPrivateMethod" && p.type !== "AssignmentPattern" && p.type !== "CatchClause" && s.properties.some((I2) => I2.value && (I2.value.type === "ObjectPattern" || I2.value.type === "ArrayPattern")) || s.type !== "ObjectPattern" && t.objectWrap === "preserve" && o.length > 0 && de2(t.originalText, q2(s), o[0].loc), C = D ? ";" : s.type === "TSInterfaceBody" || s.type === "TSTypeLiteral" ? B2(n, ";") : ",", c = s.type === "RecordExpression" ? "#{" : s.exact ? "{|" : "{", A2 = s.exact ? "|}" : "}", d = [], S2 = o.map((I2) => {
          let G = [...d, l(I2.printed)];
          return d = [C, x2], (I2.node.type === "TSPropertySignature" || I2.node.type === "TSMethodSignature" || I2.node.type === "TSConstructSignatureDeclaration" || I2.node.type === "TSCallSignatureDeclaration") && T2(I2.node, h.PrettierIgnore) && d.shift(), ce2(I2.node, t) && d.push(F), G;
        });
        if (s.inexact || s.hasUnknownMembers) {
          let I2;
          if (T2(s, h.Dangling)) {
            let G = T2(s, h.Line);
            I2 = [J2(e, t), G || Z2(t.originalText, k2(M2(false, lt2(s), -1))) ? F : x2, "..."];
          } else I2 = ["..."];
          S2.push([...d, ...I2]);
        }
        let g = (j = M2(false, o, -1)) == null ? void 0 : j.node, _2 = !(s.inexact || s.hasUnknownMembers || g && (g.type === "RestElement" || (g.type === "TSPropertySignature" || g.type === "TSCallSignatureDeclaration" || g.type === "TSMethodSignature" || g.type === "TSConstructSignatureDeclaration") && T2(g, h.PrettierIgnore))), v;
        if (S2.length === 0) {
          if (!T2(s, h.Dangling)) return [c, A2, H2(e, r)];
          v = l([c, J2(e, t, { indent: true }), E, A2, $2(e), H2(e, r)]);
        } else v = [D && O2(s.properties) ? sa(p) : "", c, f([t.bracketSpacing ? x2 : E, ...S2]), B2(_2 && (C !== "," || oe2(t)) ? C : ""), t.bracketSpacing ? x2 : E, A2, $2(e), H2(e, r)];
        return e.match((I2) => I2.type === "ObjectPattern" && !O2(I2.decorators), _s) || Re2(s) && (e.match(void 0, (I2, G) => G === "typeAnnotation", (I2, G) => G === "typeAnnotation", _s) || e.match(void 0, (I2, G) => I2.type === "FunctionTypeParam" && G === "typeAnnotation", _s)) || !m && e.match((I2) => I2.type === "ObjectPattern", (I2) => I2.type === "AssignmentExpression" || I2.type === "VariableDeclarator") ? v : l(v, { shouldBreak: m });
      }
      function _s(e, t) {
        return (t === "params" || t === "parameters" || t === "this" || t === "rest") && xs(e);
      }
      function Vl(e) {
        let t = [e];
        for (let r = 0; r < t.length; r++) {
          let n = t[r];
          for (let s of ["test", "consequent", "alternate"]) {
            let u = n[s];
            if (X(u)) return true;
            u.type === "ConditionalExpression" && t.push(u);
          }
        }
        return false;
      }
      function $l(e, t, r) {
        let { node: n } = e, s = n.type === "ConditionalExpression", u = s ? "alternate" : "falseType", { parent: i } = e, a = s ? r("test") : [r("checkType"), " ", "extends", " ", r("extendsType")];
        return i.type === n.type && i[u] === n ? Be2(2, a) : a;
      }
      var Kl = /* @__PURE__ */ new Map([["AssignmentExpression", "right"], ["VariableDeclarator", "init"], ["ReturnStatement", "argument"], ["ThrowStatement", "argument"], ["UnaryExpression", "argument"], ["YieldExpression", "argument"], ["AwaitExpression", "argument"]]);
      function Ql(e) {
        let { node: t } = e;
        if (t.type !== "ConditionalExpression") return false;
        let r, n = t;
        for (let s = 0; !r; s++) {
          let u = e.getParentNode(s);
          if (u.type === "ChainExpression" && u.expression === n || L2(u) && u.callee === n || W2(u) && u.object === n || u.type === "TSNonNullExpression" && u.expression === n) {
            n = u;
            continue;
          }
          u.type === "NewExpression" && u.callee === n || Ae2(u) && u.expression === n ? (r = e.getParentNode(s + 1), n = u) : r = u;
        }
        return n === t ? false : r[Kl.get(r.type)] === n;
      }
      function ha(e, t, r) {
        let { node: n } = e, s = n.type === "ConditionalExpression", u = s ? "consequent" : "trueType", i = s ? "alternate" : "falseType", a = s ? ["test"] : ["checkType", "extendsType"], o = n[u], p = n[i], y2 = [], D = false, { parent: m } = e, C = m.type === n.type && a.some((N2) => m[N2] === n), c = m.type === n.type && !C, A2, d, S2 = 0;
        do
          d = A2 || n, A2 = e.getParentNode(S2), S2++;
        while (A2 && A2.type === n.type && a.every((N2) => A2[N2] !== d));
        let g = A2 || m, _2 = d;
        if (s && (X(n[a[0]]) || X(o) || X(p) || Vl(_2))) {
          D = true, c = true;
          let N2 = (Q2) => [B2("("), f([E, Q2]), E, B2(")")], ue2 = (Q2) => Q2.type === "NullLiteral" || Q2.type === "Literal" && Q2.value === null || Q2.type === "Identifier" && Q2.name === "undefined";
          y2.push(" ? ", ue2(o) ? r(u) : N2(r(u)), " : ", p.type === n.type || ue2(p) ? r(i) : N2(r(i)));
        } else {
          let N2 = (Q2) => t.useTabs ? f(r(Q2)) : Be2(2, r(Q2)), ue2 = [x2, "? ", o.type === n.type ? B2("", "(") : "", N2(u), o.type === n.type ? B2("", ")") : "", x2, ": ", N2(i)];
          y2.push(m.type !== n.type || m[i] === n || C ? ue2 : t.useTabs ? Jr2(f(ue2)) : Be2(Math.max(0, t.tabWidth - 2), ue2));
        }
        let v = [u, i, ...a].some((N2) => T2(n[N2], (ue2) => ee2(ue2) && de2(t.originalText, q2(ue2), k2(ue2)))), j = (N2) => m === g ? l(N2, { shouldBreak: v }) : v ? [N2, Ee2] : N2, I2 = !D && (W2(m) || m.type === "NGPipeExpression" && m.left === n) && !m.computed, G = Ql(e), P2 = j([$l(e, t, r), c ? y2 : f(y2), s && I2 && !G ? E : ""]);
        return C || G ? l([f([E, P2]), E]) : P2;
      }
      function zl(e, t) {
        return (W2(t) || t.type === "NGPipeExpression" && t.left === e) && !t.computed;
      }
      function Zl(e, t, r, n) {
        return [...e.map((u) => lt2(u)), lt2(t), lt2(r)].flat().some((u) => ee2(u) && de2(n.originalText, q2(u), k2(u)));
      }
      var em = /* @__PURE__ */ new Map([["AssignmentExpression", "right"], ["VariableDeclarator", "init"], ["ReturnStatement", "argument"], ["ThrowStatement", "argument"], ["UnaryExpression", "argument"], ["YieldExpression", "argument"], ["AwaitExpression", "argument"]]);
      function tm(e) {
        let { node: t } = e;
        if (t.type !== "ConditionalExpression") return false;
        let r, n = t;
        for (let s = 0; !r; s++) {
          let u = e.getParentNode(s);
          if (u.type === "ChainExpression" && u.expression === n || L2(u) && u.callee === n || W2(u) && u.object === n || u.type === "TSNonNullExpression" && u.expression === n) {
            n = u;
            continue;
          }
          u.type === "NewExpression" && u.callee === n || Ae2(u) && u.expression === n ? (r = e.getParentNode(s + 1), n = u) : r = u;
        }
        return n === t ? false : r[em.get(r.type)] === n;
      }
      var vs = (e) => [B2("("), f([E, e]), E, B2(")")];
      function zt2(e, t, r, n) {
        if (!t.experimentalTernaries) return ha(e, t, r);
        let { node: s } = e, u = s.type === "ConditionalExpression", i = Je2(s), a = u ? "consequent" : "trueType", o = u ? "alternate" : "falseType", p = u ? ["test"] : ["checkType", "extendsType"], y2 = s[a], D = s[o], m = p.map((Ye2) => s[Ye2]), { parent: C } = e, c = C.type === s.type, A2 = c && p.some((Ye2) => C[Ye2] === s), d = c && C[o] === s, S2 = y2.type === s.type, g = D.type === s.type, _2 = g || d, v = t.tabWidth > 2 || t.useTabs, j, I2, G = 0;
        do
          I2 = j || s, j = e.getParentNode(G), G++;
        while (j && j.type === s.type && p.every((Ye2) => j[Ye2] !== I2));
        let P2 = j || C, N2 = n && n.assignmentLayout && n.assignmentLayout !== "break-after-operator" && (C.type === "AssignmentExpression" || C.type === "VariableDeclarator" || C.type === "ClassProperty" || C.type === "PropertyDefinition" || C.type === "ClassPrivateProperty" || C.type === "ObjectProperty" || C.type === "Property"), ue2 = (C.type === "ReturnStatement" || C.type === "ThrowStatement") && !(S2 || g), Q2 = u && P2.type === "JSXExpressionContainer" && e.grandparent.type !== "JSXAttribute", Bt2 = tm(e), Ct2 = zl(s, C), w2 = i && ke2(e, t), ne2 = v ? t.useTabs ? "	" : " ".repeat(t.tabWidth - 1) : "", xe2 = Zl(m, y2, D, t) || S2 || g, pt2 = !_2 && !c && !i && (Q2 ? y2.type === "NullLiteral" || y2.type === "Literal" && y2.value === null : ir2(y2, t) && qn2(s.test, 3)), bt2 = _2 || d || i && !c || c && u && qn2(s.test, 1) || pt2, Rs = [];
        !S2 && T2(y2, h.Dangling) && e.call((Ye2) => {
          Rs.push(J2(Ye2, t), F);
        }, "consequent");
        let er2 = [];
        T2(s.test, h.Dangling) && e.call((Ye2) => {
          er2.push(J2(Ye2, t));
        }, "test"), !g && T2(D, h.Dangling) && e.call((Ye2) => {
          er2.push(J2(Ye2, t));
        }, "alternate"), T2(s, h.Dangling) && er2.push(J2(e, t));
        let Js = Symbol("test"), Ga = Symbol("consequent"), Tr = Symbol("test-and-consequent"), Ua = u ? [vs(r("test")), s.test.type === "ConditionalExpression" ? Ee2 : ""] : [r("checkType"), " ", "extends", " ", Je2(s.extendsType) || s.extendsType.type === "TSMappedType" ? r("extendsType") : l(vs(r("extendsType")))], qs = l([Ua, " ?"], { id: Js }), Ya = r(a), dr2 = f([S2 || Q2 && (X(y2) || c || _2) ? F : x2, Rs, Ya]), Xa = bt2 ? l([qs, _2 ? dr2 : B2(dr2, l(dr2, { id: Ga }), { groupId: Js })], { id: Tr }) : [qs, dr2], Ln2 = r(o), Ws = pt2 ? B2(Ln2, Jr2(vs(Ln2)), { groupId: Tr }) : Ln2, tr2 = [Xa, er2.length > 0 ? [f([F, er2]), F] : g ? F : pt2 ? B2(x2, " ", { groupId: Tr }) : x2, ":", g ? " " : v ? bt2 ? B2(ne2, B2(_2 || pt2 ? " " : ne2, " "), { groupId: Tr }) : B2(ne2, " ") : " ", g ? Ws : l([f(Ws), Q2 && !pt2 ? E : ""]), Ct2 && !Bt2 ? E : "", xe2 ? Ee2 : ""];
        return N2 && !xe2 ? l(f([E, l(tr2)])) : N2 || ue2 ? l(f(tr2)) : Bt2 || i && A2 ? l([f([E, tr2]), w2 ? E : ""]) : C === P2 ? l(tr2) : tr2;
      }
      function ga(e, t, r, n) {
        let { node: s } = e;
        if (wr2(s)) return fa(e, t);
        let u = t.semi ? ";" : "", i = [];
        switch (s.type) {
          case "JsExpressionRoot":
            return r("node");
          case "JsonRoot":
            return [r("node"), F];
          case "File":
            return ma(e, t, r) ?? r("program");
          case "EmptyStatement":
            return "";
          case "ExpressionStatement":
            return la(e, t, r);
          case "ChainExpression":
            return r("expression");
          case "ParenthesizedExpression":
            return !T2(s.expression) && (se2(s.expression) || U2(s.expression)) ? ["(", r("expression"), ")"] : l(["(", f([E, r("expression")]), E, ")"]);
          case "AssignmentExpression":
            return ji2(e, t, r);
          case "VariableDeclarator":
            return Mi2(e, t, r);
          case "BinaryExpression":
          case "LogicalExpression":
            return $r2(e, t, r);
          case "AssignmentPattern":
            return [r("left"), " = ", r("right")];
          case "OptionalMemberExpression":
          case "MemberExpression":
            return Li2(e, t, r);
          case "MetaProperty":
            return [r("meta"), ".", r("property")];
          case "BindExpression":
            return s.object && i.push(r("object")), i.push(l(f([E, Kr2(e, t, r)]))), i;
          case "Identifier":
            return [s.name, $2(e), mn(e), H2(e, r)];
          case "V8IntrinsicIdentifier":
            return ["%", s.name];
          case "SpreadElement":
          case "SpreadElementPattern":
          case "SpreadPropertyPattern":
          case "RestElement":
            return yn2(e, r);
          case "FunctionDeclaration":
          case "FunctionExpression":
            return En2(e, r, t, n);
          case "ArrowFunctionExpression":
            return zi2(e, t, r, n);
          case "YieldExpression":
            return i.push("yield"), s.delegate && i.push("*"), s.argument && i.push(" ", r("argument")), i;
          case "AwaitExpression":
            if (i.push("await"), s.argument) {
              i.push(" ", r("argument"));
              let { parent: a } = e;
              if (L2(a) && a.callee === s || W2(a) && a.object === s) {
                i = [f([E, ...i]), E];
                let o = e.findAncestor((p) => p.type === "AwaitExpression" || p.type === "BlockStatement");
                if ((o == null ? void 0 : o.type) !== "AwaitExpression" || !ae(o.argument, (p) => p === s)) return l(i);
              }
            }
            return i;
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ExportAllDeclaration":
            return Bn2(e, t, r);
          case "ImportDeclaration":
            return Ea(e, t, r);
          case "ImportSpecifier":
          case "ExportSpecifier":
          case "ImportNamespaceSpecifier":
          case "ExportNamespaceSpecifier":
          case "ImportDefaultSpecifier":
          case "ExportDefaultSpecifier":
            return xa(e, t, r);
          case "ImportAttribute":
            return fn2(e, t, r);
          case "Program":
          case "BlockStatement":
          case "StaticBlock":
            return An2(e, t, r);
          case "ClassBody":
            return ia(e, t, r);
          case "ThrowStatement":
            return $i2(e, t, r);
          case "ReturnStatement":
            return Vi2(e, t, r);
          case "NewExpression":
          case "ImportExpression":
          case "OptionalCallExpression":
          case "CallExpression":
            return Qr2(e, t, r);
          case "ObjectExpression":
          case "ObjectPattern":
          case "RecordExpression":
            return gt2(e, t, r);
          case "Property":
            return kt2(s) ? Fr2(e, t, r) : fn2(e, t, r);
          case "ObjectProperty":
            return fn2(e, t, r);
          case "ObjectMethod":
            return Fr2(e, t, r);
          case "Decorator":
            return ["@", r("expression")];
          case "ArrayExpression":
          case "ArrayPattern":
          case "TupleExpression":
            return Kt2(e, t, r);
          case "SequenceExpression": {
            let { parent: a } = e;
            if (a.type === "ExpressionStatement" || a.type === "ForStatement") {
              let o = [];
              return e.each(({ isFirst: p }) => {
                p ? o.push(r()) : o.push(",", f([x2, r()]));
              }, "expressions"), l(o);
            }
            return l(b([",", x2], e.map(r, "expressions")));
          }
          case "ThisExpression":
            return "this";
          case "Super":
            return "super";
          case "Directive":
            return [r("value"), u];
          case "UnaryExpression":
            return i.push(s.operator), /[a-z]$/u.test(s.operator) && i.push(" "), T2(s.argument) ? i.push(l(["(", f([E, r("argument")]), E, ")"])) : i.push(r("argument")), i;
          case "UpdateExpression":
            return [s.prefix ? s.operator : "", r("argument"), s.prefix ? "" : s.operator];
          case "ConditionalExpression":
            return zt2(e, t, r, n);
          case "VariableDeclaration": {
            let a = e.map(r, "declarations"), o = e.parent, p = o.type === "ForStatement" || o.type === "ForInStatement" || o.type === "ForOfStatement", y2 = s.declarations.some((m) => m.init), D;
            return a.length === 1 && !T2(s.declarations[0]) ? D = a[0] : a.length > 0 && (D = f(a[0])), i = [K2(e), s.kind, D ? [" ", D] : "", f(a.slice(1).map((m) => [",", y2 && !p ? F : x2, m]))], p && o.body !== s || i.push(u), l(i);
          }
          case "WithStatement":
            return l(["with (", r("object"), ")", ft2(s.body, r("body"))]);
          case "IfStatement": {
            let a = ft2(s.consequent, r("consequent")), o = l(["if (", l([f([E, r("test")]), E]), ")", a]);
            if (i.push(o), s.alternate) {
              let p = T2(s.consequent, h.Trailing | h.Line) || vr2(s), y2 = s.consequent.type === "BlockStatement" && !p;
              i.push(y2 ? " " : F), T2(s, h.Dangling) && i.push(J2(e, t), p ? F : " "), i.push("else", l(ft2(s.alternate, r("alternate"), s.alternate.type === "IfStatement")));
            }
            return i;
          }
          case "ForStatement": {
            let a = ft2(s.body, r("body")), o = J2(e, t), p = o ? [o, E] : "";
            return !s.init && !s.test && !s.update ? [p, l(["for (;;)", a])] : [p, l(["for (", l([f([E, r("init"), ";", x2, r("test"), ";", x2, r("update")]), E]), ")", a])];
          }
          case "WhileStatement":
            return l(["while (", l([f([E, r("test")]), E]), ")", ft2(s.body, r("body"))]);
          case "ForInStatement":
            return l(["for (", r("left"), " in ", r("right"), ")", ft2(s.body, r("body"))]);
          case "ForOfStatement":
            return l(["for", s.await ? " await" : "", " (", r("left"), " of ", r("right"), ")", ft2(s.body, r("body"))]);
          case "DoWhileStatement": {
            let a = ft2(s.body, r("body"));
            return i = [l(["do", a])], s.body.type === "BlockStatement" ? i.push(" ") : i.push(F), i.push("while (", l([f([E, r("test")]), E]), ")", u), i;
          }
          case "DoExpression":
            return [s.async ? "async " : "", "do ", r("body")];
          case "BreakStatement":
          case "ContinueStatement":
            return i.push(s.type === "BreakStatement" ? "break" : "continue"), s.label && i.push(" ", r("label")), i.push(u), i;
          case "LabeledStatement":
            return s.body.type === "EmptyStatement" ? [r("label"), ":;"] : [r("label"), ": ", r("body")];
          case "TryStatement":
            return ["try ", r("block"), s.handler ? [" ", r("handler")] : "", s.finalizer ? [" finally ", r("finalizer")] : ""];
          case "CatchClause":
            if (s.param) {
              let a = T2(s.param, (p) => !ee2(p) || p.leading && Z2(t.originalText, k2(p)) || p.trailing && Z2(t.originalText, q2(p), { backwards: true })), o = r("param");
              return ["catch ", a ? ["(", f([E, o]), E, ") "] : ["(", o, ") "], r("body")];
            }
            return ["catch ", r("body")];
          case "SwitchStatement":
            return [l(["switch (", f([E, r("discriminant")]), E, ")"]), " {", s.cases.length > 0 ? f([F, b(F, e.map(({ node: a, isLast: o }) => [r(), !o && ce2(a, t) ? F : ""], "cases"))]) : "", F, "}"];
          case "SwitchCase": {
            s.test ? i.push("case ", r("test"), ":") : i.push("default:"), T2(s, h.Dangling) && i.push(" ", J2(e, t));
            let a = s.consequent.filter((o) => o.type !== "EmptyStatement");
            if (a.length > 0) {
              let o = Cr2(e, t, r, "consequent");
              i.push(a.length === 1 && a[0].type === "BlockStatement" ? [" ", o] : f([F, o]));
            }
            return i;
          }
          case "DebuggerStatement":
            return ["debugger", u];
          case "ClassDeclaration":
          case "ClassExpression":
            return xn2(e, t, r);
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "MethodDefinition":
            return hn2(e, t, r);
          case "ClassProperty":
          case "PropertyDefinition":
          case "ClassPrivateProperty":
          case "ClassAccessorProperty":
          case "AccessorProperty":
            return gn2(e, t, r);
          case "TemplateElement":
            return ve2(s.value.raw);
          case "TemplateLiteral":
            return Gr2(e, r, t);
          case "TaggedTemplateExpression":
            return Hu2(e, r);
          case "PrivateIdentifier":
            return ["#", s.name];
          case "PrivateName":
            return ["#", r("id")];
          case "TopicReference":
            return "%";
          case "ArgumentPlaceholder":
            return "?";
          case "ModuleExpression":
            return ["module ", r("body")];
          case "InterpreterDirective":
          default:
            throw new Ne2(s, "ESTree");
        }
      }
      function bn2(e, t, r) {
        let { parent: n, node: s, key: u } = e, i = [r("expression")];
        switch (s.type) {
          case "AsConstExpression":
            i.push(" as const");
            break;
          case "AsExpression":
          case "TSAsExpression":
            i.push(" as ", r("typeAnnotation"));
            break;
          case "SatisfiesExpression":
          case "TSSatisfiesExpression":
            i.push(" satisfies ", r("typeAnnotation"));
            break;
        }
        return u === "callee" && L2(n) || u === "object" && W2(n) ? l([f([E, ...i]), E]) : i;
      }
      function Sa(e, t, r) {
        let { node: n } = e, s = [K2(e), "component"];
        n.id && s.push(" ", r("id")), s.push(r("typeParameters"));
        let u = rm(e, r, t);
        return n.rendersType ? s.push(l([u, " ", r("rendersType")])) : s.push(l([u])), n.body && s.push(" ", r("body")), t.semi && n.type === "DeclareComponent" && s.push(";"), s;
      }
      function rm(e, t, r) {
        let { node: n } = e, s = n.params;
        if (n.rest && (s = [...s, n.rest]), s.length === 0) return ["(", J2(e, r, { filter: (i) => be2(r.originalText, k2(i)) === ")" }), ")"];
        let u = [];
        return sm(e, (i, a) => {
          let o = a === s.length - 1;
          o && n.rest && u.push("..."), u.push(t()), !o && (u.push(","), ce2(s[a], r) ? u.push(F, F) : u.push(x2));
        }), ["(", f([E, ...u]), B2(oe2(r, "all") && !nm(n, s) ? "," : ""), E, ")"];
      }
      function nm(e, t) {
        var r;
        return e.rest || ((r = M2(false, t, -1)) == null ? void 0 : r.type) === "RestElement";
      }
      function sm(e, t) {
        let { node: r } = e, n = 0, s = (u) => t(u, n++);
        e.each(s, "params"), r.rest && e.call(s, "rest");
      }
      function Ba(e, t, r) {
        let { node: n } = e;
        return n.shorthand ? r("local") : [r("name"), " as ", r("local")];
      }
      function ba(e, t, r) {
        let { node: n } = e, s = [];
        return n.name && s.push(r("name"), n.optional ? "?: " : ": "), s.push(r("typeAnnotation")), s;
      }
      function Pa(e, t, r) {
        return gt2(e, r, t);
      }
      function Pn2(e, t) {
        let { node: r } = e, n = t("id");
        r.computed && (n = ["[", n, "]"]);
        let s = "";
        return r.initializer && (s = t("initializer")), r.init && (s = t("init")), s ? [n, " = ", s] : n;
      }
      function ka(e, t, r) {
        let { node: n } = e, s;
        if (n.type === "EnumSymbolBody" || n.explicitType) switch (n.type) {
          case "EnumBooleanBody":
            s = "boolean";
            break;
          case "EnumNumberBody":
            s = "number";
            break;
          case "EnumBigIntBody":
            s = "bigint";
            break;
          case "EnumStringBody":
            s = "string";
            break;
          case "EnumSymbolBody":
            s = "symbol";
            break;
        }
        return [s ? `of ${s} ` : "", Pa(e, t, r)];
      }
      function kn2(e, t, r) {
        let { node: n } = e;
        return [K2(e), n.const ? "const " : "", "enum ", t("id"), " ", n.type === "TSEnumDeclaration" ? Pa(e, t, r) : t("body")];
      }
      function La(e, t, r) {
        let { node: n } = e, s = ["hook"];
        n.id && s.push(" ", r("id"));
        let u = Ue2(e, r, t, false, true), i = Qt2(e, r), a = ot2(n, i);
        return s.push(l([a ? l(u) : u, i]), n.body ? " " : "", r("body")), s;
      }
      function wa(e, t, r) {
        let { node: n } = e, s = [K2(e), "hook"];
        return n.id && s.push(" ", r("id")), t.semi && s.push(";"), s;
      }
      function Ia(e) {
        var r;
        let { node: t } = e;
        return t.type === "HookTypeAnnotation" && ((r = e.getParentNode(2)) == null ? void 0 : r.type) === "DeclareHook";
      }
      function Oa(e, t, r) {
        let { node: n } = e, s = [];
        s.push(Ia(e) ? "" : "hook ");
        let u = Ue2(e, r, t, false, true), i = [];
        return i.push(Ia(e) ? ": " : " => ", r("returnType")), ot2(n, i) && (u = l(u)), s.push(u, i), l(s);
      }
      function In2(e, t, r) {
        let { node: n } = e, s = [K2(e), "interface"], u = [], i = [];
        n.type !== "InterfaceTypeAnnotation" && u.push(" ", r("id"), r("typeParameters"));
        let a = n.typeParameters && !T2(n.typeParameters, h.Trailing | h.Line);
        return O2(n.extends) && i.push(a ? B2(" ", x2, { groupId: Ar2(n.typeParameters) }) : x2, "extends ", (n.extends.length === 1 ? Eu2 : f)(b([",", x2], e.map(r, "extends")))), T2(n.id, h.Trailing) || O2(n.extends) ? a ? s.push(l([...u, f(i)])) : s.push(l(f([...u, ...i]))) : s.push(...u, ...i), s.push(" ", r("body")), l(s);
      }
      function _a(e, t, r) {
        let { node: n } = e;
        if (Pr2(n)) return n.type.slice(0, -14).toLowerCase();
        let s = t.semi ? ";" : "";
        switch (n.type) {
          case "ComponentDeclaration":
          case "DeclareComponent":
          case "ComponentTypeAnnotation":
            return Sa(e, t, r);
          case "ComponentParameter":
            return Ba(e, t, r);
          case "ComponentTypeParameter":
            return ba(e, t, r);
          case "HookDeclaration":
            return La(e, t, r);
          case "DeclareHook":
            return wa(e, t, r);
          case "HookTypeAnnotation":
            return Oa(e, t, r);
          case "DeclareClass":
            return xn2(e, t, r);
          case "DeclareFunction":
            return [K2(e), "function ", r("id"), r("predicate"), s];
          case "DeclareModule":
            return ["declare module ", r("id"), " ", r("body")];
          case "DeclareModuleExports":
            return ["declare module.exports", H2(e, r), s];
          case "DeclareNamespace":
            return ["declare namespace ", r("id"), " ", r("body")];
          case "DeclareVariable":
            return [K2(e), n.kind ?? "var", " ", r("id"), s];
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
            return Bn2(e, t, r);
          case "DeclareOpaqueType":
          case "OpaqueType":
            return Wi(e, t, r);
          case "DeclareTypeAlias":
          case "TypeAlias":
            return Zr2(e, t, r);
          case "IntersectionTypeAnnotation":
            return en2(e, t, r);
          case "UnionTypeAnnotation":
            return tn2(e, t, r);
          case "ConditionalTypeAnnotation":
            return zt2(e, t, r);
          case "InferTypeAnnotation":
            return sn2(e, t, r);
          case "FunctionTypeAnnotation":
            return rn2(e, t, r);
          case "TupleTypeAnnotation":
            return Kt2(e, t, r);
          case "TupleTypeLabeledElement":
            return an2(e, t, r);
          case "TupleTypeSpreadElement":
            return un2(e, t, r);
          case "GenericTypeAnnotation":
            return [r("id"), Ot2(e, t, r, "typeParameters")];
          case "IndexedAccessType":
          case "OptionalIndexedAccessType":
            return nn2(e, t, r);
          case "TypeAnnotation":
            return on2(e, t, r);
          case "TypeParameter":
            return dn2(e, t, r);
          case "TypeofTypeAnnotation":
            return cn(e, r);
          case "ExistsTypeAnnotation":
            return "*";
          case "ArrayTypeAnnotation":
            return pn2(r);
          case "DeclareEnum":
          case "EnumDeclaration":
            return kn2(e, r, t);
          case "EnumBooleanBody":
          case "EnumNumberBody":
          case "EnumBigIntBody":
          case "EnumStringBody":
          case "EnumSymbolBody":
            return ka(e, r, t);
          case "EnumBooleanMember":
          case "EnumNumberMember":
          case "EnumBigIntMember":
          case "EnumStringMember":
          case "EnumDefaultedMember":
            return Pn2(e, r);
          case "FunctionTypeParam": {
            let u = n.name ? r("name") : e.parent.this === n ? "this" : "";
            return [u, $2(e), u ? ": " : "", r("typeAnnotation")];
          }
          case "DeclareInterface":
          case "InterfaceDeclaration":
          case "InterfaceTypeAnnotation":
            return In2(e, t, r);
          case "ClassImplements":
          case "InterfaceExtends":
            return [r("id"), r("typeParameters")];
          case "NullableTypeAnnotation":
            return ["?", r("typeAnnotation")];
          case "Variance": {
            let { kind: u } = n;
            return Mt2.ok(u === "plus" || u === "minus"), u === "plus" ? "+" : "-";
          }
          case "KeyofTypeAnnotation":
            return ["keyof ", r("argument")];
          case "ObjectTypeCallProperty":
            return [n.static ? "static " : "", r("value")];
          case "ObjectTypeMappedTypeProperty":
            return ea(e, t, r);
          case "ObjectTypeIndexer":
            return [n.static ? "static " : "", n.variance ? r("variance") : "", "[", r("id"), n.id ? ": " : "", r("key"), "]: ", r("value")];
          case "ObjectTypeProperty": {
            let u = "";
            return n.proto ? u = "proto " : n.static && (u = "static "), [u, n.kind !== "init" ? n.kind + " " : "", n.variance ? r("variance") : "", Ft2(e, t, r), $2(e), kt2(n) ? "" : ": ", r("value")];
          }
          case "ObjectTypeAnnotation":
            return gt2(e, t, r);
          case "ObjectTypeInternalSlot":
            return [n.static ? "static " : "", "[[", r("id"), "]]", $2(e), n.method ? "" : ": ", r("value")];
          case "ObjectTypeSpreadProperty":
            return yn2(e, r);
          case "QualifiedTypeofIdentifier":
          case "QualifiedTypeIdentifier":
            return [r("qualification"), ".", r("id")];
          case "NullLiteralTypeAnnotation":
            return "null";
          case "BooleanLiteralTypeAnnotation":
            return String(n.value);
          case "StringLiteralTypeAnnotation":
            return ve2(nt2(fe2(n), t));
          case "NumberLiteralTypeAnnotation":
            return Et2(n.raw ?? n.extra.raw);
          case "BigIntLiteralTypeAnnotation":
            return Sn2(n.raw ?? n.extra.raw);
          case "TypeCastExpression":
            return ["(", r("expression"), H2(e, r), ")"];
          case "TypePredicate":
            return ln2(e, r);
          case "TypeOperator":
            return [n.operator, " ", r("typeAnnotation")];
          case "TypeParameterDeclaration":
          case "TypeParameterInstantiation":
            return Ot2(e, t, r, "params");
          case "InferredPredicate":
          case "DeclaredPredicate":
            return [e.key === "predicate" && e.parent.type !== "DeclareFunction" && !e.parent.returnType ? ": " : " ", "%checks", ...n.type === "DeclaredPredicate" ? ["(", r("value"), ")"] : []];
          case "AsExpression":
          case "AsConstExpression":
          case "SatisfiesExpression":
            return bn2(e, t, r);
        }
      }
      function va(e, t, r) {
        var i;
        let { node: n } = e;
        if (!n.type.startsWith("TS")) return;
        if (kr2(n)) return n.type.slice(2, -7).toLowerCase();
        let s = t.semi ? ";" : "", u = [];
        switch (n.type) {
          case "TSThisType":
            return "this";
          case "TSTypeAssertion": {
            let a = !(U2(n.expression) || se2(n.expression)), o = l(["<", f([E, r("typeAnnotation")]), E, ">"]), p = [B2("("), f([E, r("expression")]), E, B2(")")];
            return a ? et2([[o, r("expression")], [o, l(p, { shouldBreak: true })], [o, r("expression")]]) : l([o, r("expression")]);
          }
          case "TSDeclareFunction":
            return En2(e, r, t);
          case "TSExportAssignment":
            return ["export = ", r("expression"), s];
          case "TSModuleBlock":
            return An2(e, t, r);
          case "TSInterfaceBody":
          case "TSTypeLiteral":
            return gt2(e, t, r);
          case "TSTypeAliasDeclaration":
            return Zr2(e, t, r);
          case "TSQualifiedName":
            return [r("left"), ".", r("right")];
          case "TSAbstractMethodDefinition":
          case "TSDeclareMethod":
            return hn2(e, t, r);
          case "TSAbstractAccessorProperty":
          case "TSAbstractPropertyDefinition":
            return gn2(e, t, r);
          case "TSInterfaceHeritage":
          case "TSClassImplements":
          case "TSExpressionWithTypeArguments":
          case "TSInstantiationExpression":
            return [r("expression"), r(n.typeArguments ? "typeArguments" : "typeParameters")];
          case "TSTemplateLiteralType":
            return Gr2(e, r, t);
          case "TSNamedTupleMember":
            return an2(e, t, r);
          case "TSRestType":
            return un2(e, t, r);
          case "TSOptionalType":
            return [r("typeAnnotation"), "?"];
          case "TSInterfaceDeclaration":
            return In2(e, t, r);
          case "TSTypeParameterDeclaration":
          case "TSTypeParameterInstantiation":
            return Ot2(e, t, r, "params");
          case "TSTypeParameter":
            return dn2(e, t, r);
          case "TSAsExpression":
          case "TSSatisfiesExpression":
            return bn2(e, t, r);
          case "TSArrayType":
            return pn2(r);
          case "TSPropertySignature":
            return [n.readonly ? "readonly " : "", Ft2(e, t, r), $2(e), H2(e, r)];
          case "TSParameterProperty":
            return [$t2(n), n.static ? "static " : "", n.override ? "override " : "", n.readonly ? "readonly " : "", r("parameter")];
          case "TSTypeQuery":
            return cn(e, r);
          case "TSIndexSignature": {
            let a = n.parameters.length > 1 ? B2(oe2(t) ? "," : "") : "", o = l([f([E, b([", ", E], e.map(r, "parameters"))]), a, E]), p = e.parent.type === "ClassBody" && e.key === "body";
            return [p && n.static ? "static " : "", n.readonly ? "readonly " : "", "[", n.parameters ? o : "", "]", H2(e, r), p ? s : ""];
          }
          case "TSTypePredicate":
            return ln2(e, r);
          case "TSNonNullExpression":
            return [r("expression"), "!"];
          case "TSImportType":
            return ["import(", r("argument"), ")", n.qualifier ? [".", r("qualifier")] : "", Ot2(e, t, r, n.typeArguments ? "typeArguments" : "typeParameters")];
          case "TSLiteralType":
            return r("literal");
          case "TSIndexedAccessType":
            return nn2(e, t, r);
          case "TSTypeOperator":
            return [n.operator, " ", r("typeAnnotation")];
          case "TSMappedType":
            return ta(e, t, r);
          case "TSMethodSignature": {
            let a = n.kind && n.kind !== "method" ? `${n.kind} ` : "";
            u.push($t2(n), a, n.computed ? "[" : "", r("key"), n.computed ? "]" : "", $2(e));
            let o = Ue2(e, r, t, false, true), p = n.returnType ? "returnType" : "typeAnnotation", y2 = n[p], D = y2 ? H2(e, r, p) : "", m = ot2(n, D);
            return u.push(m ? l(o) : o), y2 && u.push(l(D)), l(u);
          }
          case "TSNamespaceExportDeclaration":
            return ["export as namespace ", r("id"), t.semi ? ";" : ""];
          case "TSEnumDeclaration":
            return kn2(e, r, t);
          case "TSEnumMember":
            return Pn2(e, r);
          case "TSImportEqualsDeclaration":
            return [n.isExport ? "export " : "", "import ", Os(n, false), r("id"), " = ", r("moduleReference"), t.semi ? ";" : ""];
          case "TSExternalModuleReference":
            return ["require(", r("expression"), ")"];
          case "TSModuleDeclaration": {
            let { parent: a } = e, o = a.type === "TSModuleDeclaration", p = ((i = n.body) == null ? void 0 : i.type) === "TSModuleDeclaration";
            return o ? u.push(".") : (u.push(K2(e)), n.kind !== "global" && u.push(n.kind, " ")), u.push(r("id")), p ? u.push(r("body")) : n.body ? u.push(" ", l(r("body"))) : u.push(s), u;
          }
          case "TSConditionalType":
            return zt2(e, t, r);
          case "TSInferType":
            return sn2(e, t, r);
          case "TSIntersectionType":
            return en2(e, t, r);
          case "TSUnionType":
            return tn2(e, t, r);
          case "TSFunctionType":
          case "TSCallSignatureDeclaration":
          case "TSConstructorType":
          case "TSConstructSignatureDeclaration":
            return rn2(e, t, r);
          case "TSTupleType":
            return Kt2(e, t, r);
          case "TSTypeReference":
            return [r("typeName"), Ot2(e, t, r, n.typeArguments ? "typeArguments" : "typeParameters")];
          case "TSTypeAnnotation":
            return on2(e, t, r);
          case "TSEmptyBodyFunctionExpression":
            return Fn(e, t, r);
          case "TSJSDocAllType":
            return "*";
          case "TSJSDocUnknownType":
            return "?";
          case "TSJSDocNullableType":
            return gs(e, r, "?");
          case "TSJSDocNonNullableType":
            return gs(e, r, "!");
          case "TSParenthesizedType":
          default:
            throw new Ne2(n, "TypeScript");
        }
      }
      function um(e, t, r, n) {
        if (Vr2(e)) return Di(e, t);
        for (let s of [gi2, Ti2, _a, va, ga]) {
          let u = s(e, t, r, n);
          if (u !== void 0) return u;
        }
      }
      var im = R2(["ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassAccessorProperty", "AccessorProperty", "TSAbstractAccessorProperty", "PropertyDefinition", "TSAbstractPropertyDefinition", "ClassPrivateProperty", "MethodDefinition", "TSAbstractMethodDefinition", "TSDeclareMethod"]);
      function am(e, t, r, n) {
        var D;
        e.isRoot && ((D = t.__onHtmlBindingRoot) == null || D.call(t, e.node, t));
        let s = um(e, t, r, n);
        if (!s) return "";
        let { node: u } = e;
        if (im(u)) return s;
        let i = O2(u.decorators), a = Bi2(e, t, r), o = u.type === "ClassExpression";
        if (i && !o) return lr2(s, (m) => l([a, m]));
        let p = ke2(e, t), y2 = pa(e, t);
        return !a && !p && !y2 ? s : lr2(s, (m) => [y2 ? ";" : "", p ? "(" : "", p && o && i ? [f([x2, a, m]), x2] : [a, m], p ? ")" : ""]);
      }
      var ja = am;
      var om = { avoidAstMutation: true };
      var Ma = [{ linguistLanguageId: 174, name: "JSON.stringify", type: "data", color: "#292929", tmScope: "source.json", aceMode: "json", codemirrorMode: "javascript", codemirrorMimeType: "application/json", aliases: ["geojson", "jsonl", "topojson"], extensions: [".importmap"], filenames: ["package.json", "package-lock.json", "composer.json"], parsers: ["json-stringify"], vscodeLanguageIds: ["json"] }, { linguistLanguageId: 174, name: "JSON", type: "data", color: "#292929", tmScope: "source.json", aceMode: "json", codemirrorMode: "javascript", codemirrorMimeType: "application/json", aliases: ["geojson", "jsonl", "topojson"], extensions: [".json", ".4DForm", ".4DProject", ".avsc", ".geojson", ".gltf", ".har", ".ice", ".JSON-tmLanguage", ".mcmeta", ".tfstate", ".tfstate.backup", ".topojson", ".webapp", ".webmanifest", ".yy", ".yyp"], filenames: [".all-contributorsrc", ".arcconfig", ".auto-changelog", ".c8rc", ".htmlhintrc", ".imgbotconfig", ".nycrc", ".tern-config", ".tern-project", ".watchmanconfig", "Pipfile.lock", "composer.lock", "flake.lock", "mcmod.info", ".babelrc", ".jscsrc", ".jshintrc", ".jslintrc", ".swcrc"], parsers: ["json"], vscodeLanguageIds: ["json"] }, { linguistLanguageId: 423, name: "JSON with Comments", type: "data", color: "#292929", group: "JSON", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", aliases: ["jsonc"], extensions: [".jsonc", ".code-snippets", ".code-workspace", ".sublime-build", ".sublime-commands", ".sublime-completions", ".sublime-keymap", ".sublime-macro", ".sublime-menu", ".sublime-mousemap", ".sublime-project", ".sublime-settings", ".sublime-theme", ".sublime-workspace", ".sublime_metrics", ".sublime_session"], filenames: [], parsers: ["jsonc"], vscodeLanguageIds: ["jsonc"] }, { linguistLanguageId: 175, name: "JSON5", type: "data", color: "#267CB9", extensions: [".json5"], tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "application/json", parsers: ["json5"], vscodeLanguageIds: ["json5"] }];
      var Ms = {};
      xr2(Ms, { getVisitorKeys: () => Ja, massageAstNode: () => Wa, print: () => lm });
      var pm = { JsonRoot: ["node"], ArrayExpression: ["elements"], ObjectExpression: ["properties"], ObjectProperty: ["key", "value"], UnaryExpression: ["argument"], NullLiteral: [], BooleanLiteral: [], StringLiteral: [], NumericLiteral: [], Identifier: [], TemplateLiteral: ["quasis"], TemplateElement: [] }, Ra = pm;
      var cm = Br2(Ra), Ja = cm;
      function lm(e, t, r) {
        let { node: n } = e;
        switch (n.type) {
          case "JsonRoot":
            return [r("node"), F];
          case "ArrayExpression": {
            if (n.elements.length === 0) return "[]";
            let s = e.map(() => e.node === null ? "null" : r(), "elements");
            return ["[", f([F, b([",", F], s)]), F, "]"];
          }
          case "ObjectExpression":
            return n.properties.length === 0 ? "{}" : ["{", f([F, b([",", F], e.map(r, "properties"))]), F, "}"];
          case "ObjectProperty":
            return [r("key"), ": ", r("value")];
          case "UnaryExpression":
            return [n.operator === "+" ? "" : n.operator, r("argument")];
          case "NullLiteral":
            return "null";
          case "BooleanLiteral":
            return n.value ? "true" : "false";
          case "StringLiteral":
            return JSON.stringify(n.value);
          case "NumericLiteral":
            return qa(e) ? JSON.stringify(String(n.value)) : JSON.stringify(n.value);
          case "Identifier":
            return qa(e) ? JSON.stringify(n.name) : n.name;
          case "TemplateLiteral":
            return r(["quasis", 0]);
          case "TemplateElement":
            return JSON.stringify(n.value.cooked);
          default:
            throw new Ne2(n, "JSON");
        }
      }
      function qa(e) {
        return e.key === "key" && e.parent.type === "ObjectProperty";
      }
      var mm = /* @__PURE__ */ new Set(["start", "end", "extra", "loc", "comments", "leadingComments", "trailingComments", "innerComments", "errors", "range", "tokens"]);
      function Wa(e, t) {
        let { type: r } = e;
        if (r === "ObjectProperty") {
          let { key: n } = e;
          n.type === "Identifier" ? t.key = { type: "StringLiteral", value: n.name } : n.type === "NumericLiteral" && (t.key = { type: "StringLiteral", value: String(n.value) });
          return;
        }
        if (r === "UnaryExpression" && e.operator === "+") return t.argument;
        if (r === "ArrayExpression") {
          for (let [n, s] of e.elements.entries()) s === null && t.elements.splice(n, 0, { type: "NullLiteral" });
          return;
        }
        if (r === "TemplateLiteral") return { type: "StringLiteral", value: e.quasis[0].value.cooked };
      }
      Wa.ignoredProperties = mm;
      var Zt2 = { bracketSpacing: { category: "Common", type: "boolean", default: true, description: "Print spaces between brackets.", oppositeDescription: "Do not print spaces between brackets." }, objectWrap: { category: "Common", type: "choice", default: "preserve", description: "How to wrap object literals.", choices: [{ value: "preserve", description: "Keep as multi-line, if there is a newline between the opening brace and first property." }, { value: "collapse", description: "Fit to a single line when possible." }] }, singleQuote: { category: "Common", type: "boolean", default: false, description: "Use single quotes instead of double quotes." }, bracketSameLine: { category: "Common", type: "boolean", default: false, description: "Put > of opening tags on the last line instead of on a new line." }, singleAttributePerLine: { category: "Common", type: "boolean", default: false, description: "Enforce single attribute per line in HTML, Vue and JSX." } };
      var St2 = "JavaScript", ym = { arrowParens: { category: St2, type: "choice", default: "always", description: "Include parentheses around a sole arrow function parameter.", choices: [{ value: "always", description: "Always include parens. Example: `(x) => x`" }, { value: "avoid", description: "Omit parens when possible. Example: `x => x`" }] }, bracketSameLine: Zt2.bracketSameLine, objectWrap: Zt2.objectWrap, bracketSpacing: Zt2.bracketSpacing, jsxBracketSameLine: { category: St2, type: "boolean", description: "Put > on the last line instead of at a new line.", deprecated: "2.4.0" }, semi: { category: St2, type: "boolean", default: true, description: "Print semicolons.", oppositeDescription: "Do not print semicolons, except at the beginning of lines which may need them." }, experimentalOperatorPosition: { category: St2, type: "choice", default: "end", description: "Where to print operators when binary expressions wrap lines.", choices: [{ value: "start", description: "Print operators at the start of new lines." }, { value: "end", description: "Print operators at the end of previous lines." }] }, experimentalTernaries: { category: St2, type: "boolean", default: false, description: "Use curious ternaries, with the question mark after the condition.", oppositeDescription: "Default behavior of ternaries; keep question marks on the same line as the consequent." }, singleQuote: Zt2.singleQuote, jsxSingleQuote: { category: St2, type: "boolean", default: false, description: "Use single quotes in JSX." }, quoteProps: { category: St2, type: "choice", default: "as-needed", description: "Change when properties in objects are quoted.", choices: [{ value: "as-needed", description: "Only add quotes around object properties where required." }, { value: "consistent", description: "If at least one property in an object requires quotes, quote all properties." }, { value: "preserve", description: "Respect the input use of quotes in object properties." }] }, trailingComma: { category: St2, type: "choice", default: "all", description: "Print trailing commas wherever possible when multi-line.", choices: [{ value: "all", description: "Trailing commas wherever possible (including function arguments)." }, { value: "es5", description: "Trailing commas where valid in ES5 (objects, arrays, etc.)" }, { value: "none", description: "No trailing commas." }] }, singleAttributePerLine: Zt2.singleAttributePerLine }, Na = ym;
      var Dm = { estree: js, "estree-json": Ms }, fm = [...Xs, ...Ma];
      return Qa(Em);
    });
  })(estree);
  return estree.exports;
}
var estreeExports = requireEstree();
function isGlimmerTemplate(node2) {
  var _a;
  return ((_a = node2.extra) == null ? void 0 : _a["isGlimmerTemplate"]) === true;
}
function isGlimmerTemplateParent(node2) {
  if (!node2) return false;
  return isGlimmerStatementTS(node2) || isGlimmerExportDefaultDeclaration(node2) || isGlimmerExportDefaultDeclarationTS(node2);
}
function isGlimmerStatementTS(node2) {
  return node2.type === "ExpressionStatement" && node2.expression.type === "TSAsExpression" && node2.expression.expression.type === "ObjectExpression" && isGlimmerTemplate(node2.expression.expression);
}
function isGlimmerExportDefaultDeclaration(node2) {
  return node2.type === "ExportDefaultDeclaration" && node2.declaration.type === "ObjectExpression" && isGlimmerTemplate(node2.declaration);
}
function isGlimmerExportDefaultDeclarationTS(node2) {
  return node2.type === "ExportDefaultDeclaration" && node2.declaration.type === "TSAsExpression" && node2.declaration.expression.type === "ObjectExpression" && isGlimmerTemplate(node2.declaration.expression);
}
function flattenDoc(doc) {
  if (Array.isArray(doc)) {
    return doc.flatMap(flattenDoc);
  } else if (typeof doc === "string") {
    return [doc];
  } else if ("contents" in doc) {
    return flattenDoc(doc.contents);
  } else {
    return [];
  }
}
const estreePrinter$1 = estreeExports.printers["estree"];
function saveCurrentPrintOnSiblingNode(path2, printed) {
  const { index, siblings } = path2;
  if (index !== null) {
    const nextNode = siblings == null ? void 0 : siblings.slice(index + 1).find((n) => (n == null ? void 0 : n.type) !== "EmptyStatement");
    if (nextNode) {
      nextNode.extra = nextNode.extra || {};
      nextNode.extra["prevTemplatePrinted"] = printed;
    }
  }
}
function fixPreviousPrint(previousTemplatePrinted, path2, options2, print, args) {
  var _a;
  const printedSemiFalse = estreePrinter$1.print(
    path2,
    { ...options2, semi: false },
    print,
    args
  );
  const flat = flattenDoc(printedSemiFalse);
  const previousFlat = flattenDoc(previousTemplatePrinted);
  if (((_a = flat[0]) == null ? void 0 : _a.startsWith(";")) && previousFlat.at(-1) !== ";") {
    previousTemplatePrinted.push(";");
  }
}
var Au = Object.create;
var At = Object.defineProperty;
var vu = Object.getOwnPropertyDescriptor;
var Bu = Object.getOwnPropertyNames;
var wu = Object.getPrototypeOf, _u = Object.prototype.hasOwnProperty;
var dr = (e) => {
  throw TypeError(e);
};
var pr = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports), vt = (e, t) => {
  for (var r in t) At(e, r, { get: t[r], enumerable: true });
}, xu = (e, t, r, n) => {
  if (t && typeof t == "object" || typeof t == "function") for (let u of Bu(t)) !_u.call(e, u) && u !== r && At(e, u, { get: () => t[u], enumerable: !(n = vu(t, u)) || n.enumerable });
  return e;
};
var Me = (e, t, r) => (r = e != null ? Au(wu(e)) : {}, xu(At(r, "default", { value: e, enumerable: true }), e));
var bu = (e, t, r) => t.has(e) || dr("Cannot " + r);
var Fr = (e, t, r) => t.has(e) ? dr("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, r);
var pe = (e, t, r) => (bu(e, t, "access private method"), r);
var ot = pr((Da, mn) => {
  var Fn = new Proxy(String, { get: () => Fn });
  mn.exports = Fn;
});
var $n = pr((ur) => {
  Object.defineProperty(ur, "__esModule", { value: true });
  function wi() {
    return new Proxy({}, { get: () => (e) => e });
  }
  var Wn = /\r\n|[\n\r\u2028\u2029]/;
  function _i(e, t, r) {
    let n = Object.assign({ column: 0, line: -1 }, e.start), u = Object.assign({}, n, e.end), { linesAbove: i = 2, linesBelow: o = 3 } = r || {}, s = n.line, a = n.column, D = u.line, l = u.column, p = Math.max(s - (i + 1), 0), f = Math.min(t.length, D + o);
    s === -1 && (p = 0), D === -1 && (f = t.length);
    let d = D - s, c = {};
    if (d) for (let F = 0; F <= d; F++) {
      let m = F + s;
      if (!a) c[m] = true;
      else if (F === 0) {
        let h = t[m - 1].length;
        c[m] = [a, h - a + 1];
      } else if (F === d) c[m] = [0, l];
      else {
        let h = t[m - F].length;
        c[m] = [0, h];
      }
    }
    else a === l ? a ? c[s] = [a, 0] : c[s] = true : c[s] = [a, l - a];
    return { start: p, end: f, markerLines: c };
  }
  function xi(e, t, r = {}) {
    let u = wi(), i = e.split(Wn), { start: o, end: s, markerLines: a } = _i(t, i, r), D = t.start && typeof t.start.column == "number", l = String(s).length, f = e.split(Wn, s).slice(o, s).map((d, c) => {
      let F = o + 1 + c, h = ` ${` ${F}`.slice(-l)} |`, C = a[F], v = !a[F + 1];
      if (C) {
        let E = "";
        if (Array.isArray(C)) {
          let g = d.slice(0, Math.max(C[0] - 1, 0)).replace(/[^\t]/g, " "), j = C[1] || 1;
          E = [`
 `, u.gutter(h.replace(/\d/g, " ")), " ", g, u.marker("^").repeat(j)].join(""), v && r.message && (E += " " + u.message(r.message));
        }
        return [u.marker(">"), u.gutter(h), d.length > 0 ? ` ${d}` : "", E].join("");
      } else return ` ${u.gutter(h)}${d.length > 0 ? ` ${d}` : ""}`;
    }).join(`
`);
    return r.message && !D && (f = `${" ".repeat(l + 1)}${r.message}
${f}`), f;
  }
  ur.codeFrameColumns = xi;
});
var fr = {};
vt(fr, { __debug: () => lo, check: () => ao, doc: () => Dr, format: () => yu, formatWithCursor: () => gu, getSupportInfo: () => Do, util: () => cr, version: () => cu });
var Nu = (e, t, r, n) => {
  if (!(e && t == null)) return t.replaceAll ? t.replaceAll(r, n) : r.global ? t.replace(r, n) : t.split(r).join(n);
}, ne = Nu;
function U() {
}
U.prototype = { diff: function(t, r) {
  var n, u = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = u.callback;
  typeof u == "function" && (i = u, u = {});
  var o = this;
  function s(E) {
    return E = o.postProcess(E, u), i ? (setTimeout(function() {
      i(E);
    }, 0), true) : E;
  }
  t = this.castInput(t, u), r = this.castInput(r, u), t = this.removeEmpty(this.tokenize(t, u)), r = this.removeEmpty(this.tokenize(r, u));
  var a = r.length, D = t.length, l = 1, p = a + D;
  u.maxEditLength != null && (p = Math.min(p, u.maxEditLength));
  var f = (n = u.timeout) !== null && n !== void 0 ? n : 1 / 0, d = Date.now() + f, c = [{ oldPos: -1, lastComponent: void 0 }], F = this.extractCommon(c[0], r, t, 0, u);
  if (c[0].oldPos + 1 >= D && F + 1 >= a) return s(mr(o, c[0].lastComponent, r, t, o.useLongestToken));
  var m = -1 / 0, h = 1 / 0;
  function C() {
    for (var E = Math.max(m, -l); E <= Math.min(h, l); E += 2) {
      var g = void 0, j = c[E - 1], b = c[E + 1];
      j && (c[E - 1] = void 0);
      var X = false;
      if (b) {
        var ae = b.oldPos - E;
        X = b && 0 <= ae && ae < a;
      }
      var $e = j && j.oldPos + 1 < D;
      if (!X && !$e) {
        c[E] = void 0;
        continue;
      }
      if (!$e || X && j.oldPos < b.oldPos ? g = o.addToPath(b, true, false, 0, u) : g = o.addToPath(j, false, true, 1, u), F = o.extractCommon(g, r, t, E, u), g.oldPos + 1 >= D && F + 1 >= a) return s(mr(o, g.lastComponent, r, t, o.useLongestToken));
      c[E] = g, g.oldPos + 1 >= D && (h = Math.min(h, E - 1)), F + 1 >= a && (m = Math.max(m, E + 1));
    }
    l++;
  }
  if (i) (function E() {
    setTimeout(function() {
      if (l > p || Date.now() > d) return i();
      C() || E();
    }, 0);
  })();
  else for (; l <= p && Date.now() <= d; ) {
    var v = C();
    if (v) return v;
  }
}, addToPath: function(t, r, n, u, i) {
  var o = t.lastComponent;
  return o && !i.oneChangePerToken && o.added === r && o.removed === n ? { oldPos: t.oldPos + u, lastComponent: { count: o.count + 1, added: r, removed: n, previousComponent: o.previousComponent } } : { oldPos: t.oldPos + u, lastComponent: { count: 1, added: r, removed: n, previousComponent: o } };
}, extractCommon: function(t, r, n, u, i) {
  for (var o = r.length, s = n.length, a = t.oldPos, D = a - u, l = 0; D + 1 < o && a + 1 < s && this.equals(n[a + 1], r[D + 1], i); ) D++, a++, l++, i.oneChangePerToken && (t.lastComponent = { count: 1, previousComponent: t.lastComponent, added: false, removed: false });
  return l && !i.oneChangePerToken && (t.lastComponent = { count: l, previousComponent: t.lastComponent, added: false, removed: false }), t.oldPos = a, D;
}, equals: function(t, r, n) {
  return n.comparator ? n.comparator(t, r) : t === r || n.ignoreCase && t.toLowerCase() === r.toLowerCase();
}, removeEmpty: function(t) {
  for (var r = [], n = 0; n < t.length; n++) t[n] && r.push(t[n]);
  return r;
}, castInput: function(t) {
  return t;
}, tokenize: function(t) {
  return Array.from(t);
}, join: function(t) {
  return t.join("");
}, postProcess: function(t) {
  return t;
} };
function mr(e, t, r, n, u) {
  for (var i = [], o; t; ) i.push(t), o = t.previousComponent, delete t.previousComponent, t = o;
  i.reverse();
  for (var s = 0, a = i.length, D = 0, l = 0; s < a; s++) {
    var p = i[s];
    if (p.removed) p.value = e.join(n.slice(l, l + p.count)), l += p.count;
    else {
      if (!p.added && u) {
        var f = r.slice(D, D + p.count);
        f = f.map(function(d, c) {
          var F = n[l + c];
          return F.length > d.length ? F : d;
        }), p.value = e.join(f);
      } else p.value = e.join(r.slice(D, D + p.count));
      D += p.count, p.added || (l += p.count);
    }
  }
  return i;
}
function hr(e, t) {
  var r;
  for (r = 0; r < e.length && r < t.length; r++) if (e[r] != t[r]) return e.slice(0, r);
  return e.slice(0, r);
}
function Er(e, t) {
  var r;
  if (!e || !t || e[e.length - 1] != t[t.length - 1]) return "";
  for (r = 0; r < e.length && r < t.length; r++) if (e[e.length - (r + 1)] != t[t.length - (r + 1)]) return e.slice(-r);
  return e.slice(-r);
}
function Bt(e, t, r) {
  if (e.slice(0, t.length) != t) throw Error("string ".concat(JSON.stringify(e), " doesn't start with prefix ").concat(JSON.stringify(t), "; this is a bug"));
  return r + e.slice(t.length);
}
function wt(e, t, r) {
  if (!t) return e + r;
  if (e.slice(-t.length) != t) throw Error("string ".concat(JSON.stringify(e), " doesn't end with suffix ").concat(JSON.stringify(t), "; this is a bug"));
  return e.slice(0, -t.length) + r;
}
function _e(e, t) {
  return Bt(e, t, "");
}
function Ve(e, t) {
  return wt(e, t, "");
}
function Cr(e, t) {
  return t.slice(0, Ou(e, t));
}
function Ou(e, t) {
  var r = 0;
  e.length > t.length && (r = e.length - t.length);
  var n = t.length;
  e.length < t.length && (n = e.length);
  var u = Array(n), i = 0;
  u[0] = 0;
  for (var o = 1; o < n; o++) {
    for (t[o] == t[i] ? u[o] = u[i] : u[o] = i; i > 0 && t[o] != t[i]; ) i = u[i];
    t[o] == t[i] && i++;
  }
  i = 0;
  for (var s = r; s < e.length; s++) {
    for (; i > 0 && e[s] != t[i]; ) i = u[i];
    e[s] == t[i] && i++;
  }
  return i;
}
var Ue = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}", Su = new RegExp("[".concat(Ue, "]+|\\s+|[^").concat(Ue, "]"), "ug"), Ge = new U();
Ge.equals = function(e, t, r) {
  return r.ignoreCase && (e = e.toLowerCase(), t = t.toLowerCase()), e.trim() === t.trim();
};
Ge.tokenize = function(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r;
  if (t.intlSegmenter) {
    if (t.intlSegmenter.resolvedOptions().granularity != "word") throw new Error('The segmenter passed must have a granularity of "word"');
    r = Array.from(t.intlSegmenter.segment(e), function(i) {
      return i.segment;
    });
  } else r = e.match(Su) || [];
  var n = [], u = null;
  return r.forEach(function(i) {
    /\s/.test(i) ? u == null ? n.push(i) : n.push(n.pop() + i) : /\s/.test(u) ? n[n.length - 1] == u ? n.push(n.pop() + i) : n.push(u + i) : n.push(i), u = i;
  }), n;
};
Ge.join = function(e) {
  return e.map(function(t, r) {
    return r == 0 ? t : t.replace(/^\s+/, "");
  }).join("");
};
Ge.postProcess = function(e, t) {
  if (!e || t.oneChangePerToken) return e;
  var r = null, n = null, u = null;
  return e.forEach(function(i) {
    i.added ? n = i : i.removed ? u = i : ((n || u) && gr(r, u, n, i), r = i, n = null, u = null);
  }), (n || u) && gr(r, u, n, null), e;
};
function gr(e, t, r, n) {
  if (t && r) {
    var u = t.value.match(/^\s*/)[0], i = t.value.match(/\s*$/)[0], o = r.value.match(/^\s*/)[0], s = r.value.match(/\s*$/)[0];
    if (e) {
      var a = hr(u, o);
      e.value = wt(e.value, o, a), t.value = _e(t.value, a), r.value = _e(r.value, a);
    }
    if (n) {
      var D = Er(i, s);
      n.value = Bt(n.value, s, D), t.value = Ve(t.value, D), r.value = Ve(r.value, D);
    }
  } else if (r) e && (r.value = r.value.replace(/^\s*/, "")), n && (n.value = n.value.replace(/^\s*/, ""));
  else if (e && n) {
    var l = n.value.match(/^\s*/)[0], p = t.value.match(/^\s*/)[0], f = t.value.match(/\s*$/)[0], d = hr(l, p);
    t.value = _e(t.value, d);
    var c = Er(_e(l, d), f);
    t.value = Ve(t.value, c), n.value = Bt(n.value, l, c), e.value = wt(e.value, l, l.slice(0, l.length - c.length));
  } else if (n) {
    var F = n.value.match(/^\s*/)[0], m = t.value.match(/\s*$/)[0], h = Cr(m, F);
    t.value = Ve(t.value, h);
  } else if (e) {
    var C = e.value.match(/\s*$/)[0], v = t.value.match(/^\s*/)[0], E = Cr(C, v);
    t.value = _e(t.value, E);
  }
}
var Tu = new U();
Tu.tokenize = function(e) {
  var t = new RegExp("(\\r?\\n)|[".concat(Ue, "]+|[^\\S\\n\\r]+|[^").concat(Ue, "]"), "ug");
  return e.match(t) || [];
};
var bt = new U();
bt.tokenize = function(e, t) {
  t.stripTrailingCr && (e = e.replace(/\r\n/g, `
`));
  var r = [], n = e.split(/(\n|\r\n)/);
  n[n.length - 1] || n.pop();
  for (var u = 0; u < n.length; u++) {
    var i = n[u];
    u % 2 && !t.newlineIsToken ? r[r.length - 1] += i : r.push(i);
  }
  return r;
};
bt.equals = function(e, t, r) {
  return r.ignoreWhitespace ? ((!r.newlineIsToken || !e.includes(`
`)) && (e = e.trim()), (!r.newlineIsToken || !t.includes(`
`)) && (t = t.trim())) : r.ignoreNewlineAtEof && !r.newlineIsToken && (e.endsWith(`
`) && (e = e.slice(0, -1)), t.endsWith(`
`) && (t = t.slice(0, -1))), U.prototype.equals.call(this, e, t, r);
};
var ku = new U();
ku.tokenize = function(e) {
  return e.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var Lu = new U();
Lu.tokenize = function(e) {
  return e.split(/([{}:;,]|\s+)/);
};
function _t(e) {
  "@babel/helpers - typeof";
  return _t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, _t(e);
}
var xe = new U();
xe.useLongestToken = true;
xe.tokenize = bt.tokenize;
xe.castInput = function(e, t) {
  var r = t.undefinedReplacement, n = t.stringifyReplacer, u = n === void 0 ? function(i, o) {
    return typeof o > "u" ? r : o;
  } : n;
  return typeof e == "string" ? e : JSON.stringify(xt(e, null, null, u), u, "  ");
};
xe.equals = function(e, t, r) {
  return U.prototype.equals.call(xe, e.replace(/,([\r\n])/g, "$1"), t.replace(/,([\r\n])/g, "$1"), r);
};
function xt(e, t, r, n, u) {
  t = t || [], r = r || [], n && (e = n(u, e));
  var i;
  for (i = 0; i < t.length; i += 1) if (t[i] === e) return r[i];
  var o;
  if (Object.prototype.toString.call(e) === "[object Array]") {
    for (t.push(e), o = new Array(e.length), r.push(o), i = 0; i < e.length; i += 1) o[i] = xt(e[i], t, r, n, u);
    return t.pop(), r.pop(), o;
  }
  if (e && e.toJSON && (e = e.toJSON()), _t(e) === "object" && e !== null) {
    t.push(e), o = {}, r.push(o);
    var s = [], a;
    for (a in e) Object.prototype.hasOwnProperty.call(e, a) && s.push(a);
    for (s.sort(), i = 0; i < s.length; i += 1) a = s[i], o[a] = xt(e[a], t, r, n, a);
    t.pop(), r.pop();
  } else o = e;
  return o;
}
var ze = new U();
ze.tokenize = function(e) {
  return e.slice();
};
ze.join = ze.removeEmpty = function(e) {
  return e;
};
function yr(e, t, r) {
  return ze.diff(e, t, r);
}
function Ar(e) {
  let t = e.indexOf("\r");
  return t !== -1 ? e.charAt(t + 1) === `
` ? "crlf" : "cr" : "lf";
}
function be(e) {
  switch (e) {
    case "cr":
      return "\r";
    case "crlf":
      return `\r
`;
    default:
      return `
`;
  }
}
function Nt(e, t) {
  let r;
  switch (t) {
    case `
`:
      r = /\n/gu;
      break;
    case "\r":
      r = /\r/gu;
      break;
    case `\r
`:
      r = /\r\n/gu;
      break;
    default:
      throw new Error(`Unexpected "eol" ${JSON.stringify(t)}.`);
  }
  let n = e.match(r);
  return n ? n.length : 0;
}
function vr(e) {
  return ne(false, e, /\r\n?/gu, `
`);
}
var $ = "string", H = "array", z = "cursor", T = "indent", k = "align", L = "trim", B = "group", N = "fill", w = "if-break", P = "indent-if-break", I = "line-suffix", R = "line-suffix-boundary", y = "line", O = "label", _ = "break-parent", Ke = /* @__PURE__ */ new Set([z, T, k, L, B, N, w, P, I, R, y, O, _]);
var Pu = (e, t, r) => {
  if (!(e && t == null)) return Array.isArray(t) || typeof t == "string" ? t[r < 0 ? t.length + r : r] : t.at(r);
}, A = Pu;
function Iu(e) {
  if (typeof e == "string") return $;
  if (Array.isArray(e)) return H;
  if (!e) return;
  let { type: t } = e;
  if (Ke.has(t)) return t;
}
var M = Iu;
var Ru = (e) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e);
function Yu(e) {
  let t = e === null ? "null" : typeof e;
  if (t !== "string" && t !== "object") return `Unexpected doc '${t}', 
Expected it to be 'string' or 'object'.`;
  if (M(e)) throw new Error("doc is valid.");
  let r = Object.prototype.toString.call(e);
  if (r !== "[object Object]") return `Unexpected doc '${r}'.`;
  let n = Ru([...Ke].map((u) => `'${u}'`));
  return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`;
}
var Ot = class extends Error {
  constructor(t) {
    super(Yu(t));
    __publicField(this, "name", "InvalidDocError");
    this.doc = t;
  }
}, Q = Ot;
var Br = {};
function ju(e, t, r, n) {
  let u = [e];
  for (; u.length > 0; ) {
    let i = u.pop();
    if (i === Br) {
      r(u.pop());
      continue;
    }
    r && u.push(i, Br);
    let o = M(i);
    if (!o) throw new Q(i);
    if ((t == null ? void 0 : t(i)) !== false) switch (o) {
      case H:
      case N: {
        let s = o === H ? i : i.parts;
        for (let a = s.length, D = a - 1; D >= 0; --D) u.push(s[D]);
        break;
      }
      case w:
        u.push(i.flatContents, i.breakContents);
        break;
      case B:
        if (n && i.expandedStates) for (let s = i.expandedStates.length, a = s - 1; a >= 0; --a) u.push(i.expandedStates[a]);
        else u.push(i.contents);
        break;
      case k:
      case T:
      case P:
      case O:
      case I:
        u.push(i.contents);
        break;
      case $:
      case z:
      case L:
      case R:
      case y:
      case _:
        break;
      default:
        throw new Q(i);
    }
  }
}
var Fe = ju;
function Oe(e, t) {
  if (typeof e == "string") return t(e);
  let r = /* @__PURE__ */ new Map();
  return n(e);
  function n(i) {
    if (r.has(i)) return r.get(i);
    let o = u(i);
    return r.set(i, o), o;
  }
  function u(i) {
    switch (M(i)) {
      case H:
        return t(i.map(n));
      case N:
        return t({ ...i, parts: i.parts.map(n) });
      case w:
        return t({ ...i, breakContents: n(i.breakContents), flatContents: n(i.flatContents) });
      case B: {
        let { expandedStates: o, contents: s } = i;
        return o ? (o = o.map(n), s = o[0]) : s = n(s), t({ ...i, contents: s, expandedStates: o });
      }
      case k:
      case T:
      case P:
      case O:
      case I:
        return t({ ...i, contents: n(i.contents) });
      case $:
      case z:
      case L:
      case R:
      case y:
      case _:
        return t(i);
      default:
        throw new Q(i);
    }
  }
}
function Je(e, t, r) {
  let n = r, u = false;
  function i(o) {
    if (u) return false;
    let s = t(o);
    s !== void 0 && (u = true, n = s);
  }
  return Fe(e, i), n;
}
function Hu(e) {
  if (e.type === B && e.break || e.type === y && e.hard || e.type === _) return true;
}
function xr(e) {
  return Je(e, Hu, false);
}
function wr(e) {
  if (e.length > 0) {
    let t = A(false, e, -1);
    !t.expandedStates && !t.break && (t.break = "propagated");
  }
  return null;
}
function br(e) {
  let t = /* @__PURE__ */ new Set(), r = [];
  function n(i) {
    if (i.type === _ && wr(r), i.type === B) {
      if (r.push(i), t.has(i)) return false;
      t.add(i);
    }
  }
  function u(i) {
    i.type === B && r.pop().break && wr(r);
  }
  Fe(e, n, u, true);
}
function Wu(e) {
  return e.type === y && !e.hard ? e.soft ? "" : " " : e.type === w ? e.flatContents : e;
}
function Nr(e) {
  return Oe(e, Wu);
}
function _r(e) {
  for (e = [...e]; e.length >= 2 && A(false, e, -2).type === y && A(false, e, -1).type === _; ) e.length -= 2;
  if (e.length > 0) {
    let t = Ne(A(false, e, -1));
    e[e.length - 1] = t;
  }
  return e;
}
function Ne(e) {
  switch (M(e)) {
    case T:
    case P:
    case B:
    case I:
    case O: {
      let t = Ne(e.contents);
      return { ...e, contents: t };
    }
    case w:
      return { ...e, breakContents: Ne(e.breakContents), flatContents: Ne(e.flatContents) };
    case N:
      return { ...e, parts: _r(e.parts) };
    case H:
      return _r(e);
    case $:
      return e.replace(/[\n\r]*$/u, "");
    case k:
    case z:
    case L:
    case R:
    case y:
    case _:
      break;
    default:
      throw new Q(e);
  }
  return e;
}
function qe(e) {
  return Ne(Mu(e));
}
function $u(e) {
  switch (M(e)) {
    case N:
      if (e.parts.every((t) => t === "")) return "";
      break;
    case B:
      if (!e.contents && !e.id && !e.break && !e.expandedStates) return "";
      if (e.contents.type === B && e.contents.id === e.id && e.contents.break === e.break && e.contents.expandedStates === e.expandedStates) return e.contents;
      break;
    case k:
    case T:
    case P:
    case I:
      if (!e.contents) return "";
      break;
    case w:
      if (!e.flatContents && !e.breakContents) return "";
      break;
    case H: {
      let t = [];
      for (let r of e) {
        if (!r) continue;
        let [n, ...u] = Array.isArray(r) ? r : [r];
        typeof n == "string" && typeof A(false, t, -1) == "string" ? t[t.length - 1] += n : t.push(n), t.push(...u);
      }
      return t.length === 0 ? "" : t.length === 1 ? t[0] : t;
    }
    case $:
    case z:
    case L:
    case R:
    case y:
    case O:
    case _:
      break;
    default:
      throw new Q(e);
  }
  return e;
}
function Mu(e) {
  return Oe(e, (t) => $u(t));
}
function Or(e, t = Xe) {
  return Oe(e, (r) => typeof r == "string" ? Se(t, r.split(`
`)) : r);
}
function Vu(e) {
  if (e.type === y) return true;
}
function Sr(e) {
  return Je(e, Vu, false);
}
function me(e, t) {
  return e.type === O ? { ...e, contents: t(e.contents) } : t(e);
}
var St = () => {
}, Tt = St;
function le(e) {
  return { type: T, contents: e };
}
function De(e, t) {
  return { type: k, contents: t, n: e };
}
function kt(e, t = {}) {
  return Tt(t.expandedStates), { type: B, id: t.id, contents: e, break: !!t.shouldBreak, expandedStates: t.expandedStates };
}
function kr(e) {
  return De(Number.NEGATIVE_INFINITY, e);
}
function Lr(e) {
  return De({ type: "root" }, e);
}
function Pr(e) {
  return De(-1, e);
}
function Ir(e, t) {
  return kt(e[0], { ...t, expandedStates: e });
}
function Rr(e) {
  return { type: N, parts: e };
}
function Yr(e, t = "", r = {}) {
  return { type: w, breakContents: e, flatContents: t, groupId: r.groupId };
}
function jr(e, t) {
  return { type: P, contents: e, groupId: t.groupId, negate: t.negate };
}
function Te(e) {
  return { type: I, contents: e };
}
var Hr = { type: R }, he = { type: _ }, Wr = { type: L }, ke = { type: y, hard: true }, Lt = { type: y, hard: true, literal: true }, Qe = { type: y }, $r = { type: y, soft: true }, K = [ke, he], Xe = [Lt, he], Z = { type: z };
function Se(e, t) {
  let r = [];
  for (let n = 0; n < t.length; n++) n !== 0 && r.push(e), r.push(t[n]);
  return r;
}
function Ze(e, t, r) {
  let n = e;
  if (t > 0) {
    for (let u = 0; u < Math.floor(t / r); ++u) n = le(n);
    n = De(t % r, n), n = De(Number.NEGATIVE_INFINITY, n);
  }
  return n;
}
function Mr(e, t) {
  return e ? { type: O, label: e, contents: t } : t;
}
function ee(e) {
  var t;
  if (!e) return "";
  if (Array.isArray(e)) {
    let r = [];
    for (let n of e) if (Array.isArray(n)) r.push(...ee(n));
    else {
      let u = ee(n);
      u !== "" && r.push(u);
    }
    return r;
  }
  return e.type === w ? { ...e, breakContents: ee(e.breakContents), flatContents: ee(e.flatContents) } : e.type === B ? { ...e, contents: ee(e.contents), expandedStates: (t = e.expandedStates) == null ? void 0 : t.map(ee) } : e.type === N ? { type: "fill", parts: e.parts.map(ee) } : e.contents ? { ...e, contents: ee(e.contents) } : e;
}
function Vr(e) {
  let t = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ new Set();
  return n(ee(e));
  function n(i, o, s) {
    var a, D;
    if (typeof i == "string") return JSON.stringify(i);
    if (Array.isArray(i)) {
      let l = i.map(n).filter(Boolean);
      return l.length === 1 ? l[0] : `[${l.join(", ")}]`;
    }
    if (i.type === y) {
      let l = ((a = s == null ? void 0 : s[o + 1]) == null ? void 0 : a.type) === _;
      return i.literal ? l ? "literalline" : "literallineWithoutBreakParent" : i.hard ? l ? "hardline" : "hardlineWithoutBreakParent" : i.soft ? "softline" : "line";
    }
    if (i.type === _) return ((D = s == null ? void 0 : s[o - 1]) == null ? void 0 : D.type) === y && s[o - 1].hard ? void 0 : "breakParent";
    if (i.type === L) return "trim";
    if (i.type === T) return "indent(" + n(i.contents) + ")";
    if (i.type === k) return i.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + n(i.contents) + ")" : i.n < 0 ? "dedent(" + n(i.contents) + ")" : i.n.type === "root" ? "markAsRoot(" + n(i.contents) + ")" : "align(" + JSON.stringify(i.n) + ", " + n(i.contents) + ")";
    if (i.type === w) return "ifBreak(" + n(i.breakContents) + (i.flatContents ? ", " + n(i.flatContents) : "") + (i.groupId ? (i.flatContents ? "" : ', ""') + `, { groupId: ${u(i.groupId)} }` : "") + ")";
    if (i.type === P) {
      let l = [];
      i.negate && l.push("negate: true"), i.groupId && l.push(`groupId: ${u(i.groupId)}`);
      let p = l.length > 0 ? `, { ${l.join(", ")} }` : "";
      return `indentIfBreak(${n(i.contents)}${p})`;
    }
    if (i.type === B) {
      let l = [];
      i.break && i.break !== "propagated" && l.push("shouldBreak: true"), i.id && l.push(`id: ${u(i.id)}`);
      let p = l.length > 0 ? `, { ${l.join(", ")} }` : "";
      return i.expandedStates ? `conditionalGroup([${i.expandedStates.map((f) => n(f)).join(",")}]${p})` : `group(${n(i.contents)}${p})`;
    }
    if (i.type === N) return `fill([${i.parts.map((l) => n(l)).join(", ")}])`;
    if (i.type === I) return "lineSuffix(" + n(i.contents) + ")";
    if (i.type === R) return "lineSuffixBoundary";
    if (i.type === O) return `label(${JSON.stringify(i.label)}, ${n(i.contents)})`;
    throw new Error("Unknown doc type " + i.type);
  }
  function u(i) {
    if (typeof i != "symbol") return JSON.stringify(String(i));
    if (i in t) return t[i];
    let o = i.description || "symbol";
    for (let s = 0; ; s++) {
      let a = o + (s > 0 ? ` #${s}` : "");
      if (!r.has(a)) return r.add(a), t[i] = `Symbol.for(${JSON.stringify(a)})`;
    }
  }
}
var Ur = () => /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
function zr(e) {
  return e === 12288 || e >= 65281 && e <= 65376 || e >= 65504 && e <= 65510;
}
function Gr(e) {
  return e >= 4352 && e <= 4447 || e === 8986 || e === 8987 || e === 9001 || e === 9002 || e >= 9193 && e <= 9196 || e === 9200 || e === 9203 || e === 9725 || e === 9726 || e === 9748 || e === 9749 || e >= 9776 && e <= 9783 || e >= 9800 && e <= 9811 || e === 9855 || e >= 9866 && e <= 9871 || e === 9875 || e === 9889 || e === 9898 || e === 9899 || e === 9917 || e === 9918 || e === 9924 || e === 9925 || e === 9934 || e === 9940 || e === 9962 || e === 9970 || e === 9971 || e === 9973 || e === 9978 || e === 9981 || e === 9989 || e === 9994 || e === 9995 || e === 10024 || e === 10060 || e === 10062 || e >= 10067 && e <= 10069 || e === 10071 || e >= 10133 && e <= 10135 || e === 10160 || e === 10175 || e === 11035 || e === 11036 || e === 11088 || e === 11093 || e >= 11904 && e <= 11929 || e >= 11931 && e <= 12019 || e >= 12032 && e <= 12245 || e >= 12272 && e <= 12287 || e >= 12289 && e <= 12350 || e >= 12353 && e <= 12438 || e >= 12441 && e <= 12543 || e >= 12549 && e <= 12591 || e >= 12593 && e <= 12686 || e >= 12688 && e <= 12773 || e >= 12783 && e <= 12830 || e >= 12832 && e <= 12871 || e >= 12880 && e <= 42124 || e >= 42128 && e <= 42182 || e >= 43360 && e <= 43388 || e >= 44032 && e <= 55203 || e >= 63744 && e <= 64255 || e >= 65040 && e <= 65049 || e >= 65072 && e <= 65106 || e >= 65108 && e <= 65126 || e >= 65128 && e <= 65131 || e >= 94176 && e <= 94180 || e === 94192 || e === 94193 || e >= 94208 && e <= 100343 || e >= 100352 && e <= 101589 || e >= 101631 && e <= 101640 || e >= 110576 && e <= 110579 || e >= 110581 && e <= 110587 || e === 110589 || e === 110590 || e >= 110592 && e <= 110882 || e === 110898 || e >= 110928 && e <= 110930 || e === 110933 || e >= 110948 && e <= 110951 || e >= 110960 && e <= 111355 || e >= 119552 && e <= 119638 || e >= 119648 && e <= 119670 || e === 126980 || e === 127183 || e === 127374 || e >= 127377 && e <= 127386 || e >= 127488 && e <= 127490 || e >= 127504 && e <= 127547 || e >= 127552 && e <= 127560 || e === 127568 || e === 127569 || e >= 127584 && e <= 127589 || e >= 127744 && e <= 127776 || e >= 127789 && e <= 127797 || e >= 127799 && e <= 127868 || e >= 127870 && e <= 127891 || e >= 127904 && e <= 127946 || e >= 127951 && e <= 127955 || e >= 127968 && e <= 127984 || e === 127988 || e >= 127992 && e <= 128062 || e === 128064 || e >= 128066 && e <= 128252 || e >= 128255 && e <= 128317 || e >= 128331 && e <= 128334 || e >= 128336 && e <= 128359 || e === 128378 || e === 128405 || e === 128406 || e === 128420 || e >= 128507 && e <= 128591 || e >= 128640 && e <= 128709 || e === 128716 || e >= 128720 && e <= 128722 || e >= 128725 && e <= 128727 || e >= 128732 && e <= 128735 || e === 128747 || e === 128748 || e >= 128756 && e <= 128764 || e >= 128992 && e <= 129003 || e === 129008 || e >= 129292 && e <= 129338 || e >= 129340 && e <= 129349 || e >= 129351 && e <= 129535 || e >= 129648 && e <= 129660 || e >= 129664 && e <= 129673 || e >= 129679 && e <= 129734 || e >= 129742 && e <= 129756 || e >= 129759 && e <= 129769 || e >= 129776 && e <= 129784 || e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141;
}
var Kr = (e) => !(zr(e) || Gr(e));
var Uu = /[^\x20-\x7F]/u;
function zu(e) {
  if (!e) return 0;
  if (!Uu.test(e)) return e.length;
  e = e.replace(Ur(), "  ");
  let t = 0;
  for (let r of e) {
    let n = r.codePointAt(0);
    n <= 31 || n >= 127 && n <= 159 || n >= 768 && n <= 879 || (t += Kr(n) ? 1 : 2);
  }
  return t;
}
var Le = zu;
var Y = Symbol("MODE_BREAK"), J = Symbol("MODE_FLAT"), Ee = Symbol("cursor"), Pt = Symbol("DOC_FILL_PRINTED_LENGTH");
function Jr() {
  return { value: "", length: 0, queue: [] };
}
function Gu(e, t) {
  return It(e, { type: "indent" }, t);
}
function Ku(e, t, r) {
  return t === Number.NEGATIVE_INFINITY ? e.root || Jr() : t < 0 ? It(e, { type: "dedent" }, r) : t ? t.type === "root" ? { ...e, root: e } : It(e, { type: typeof t == "string" ? "stringAlign" : "numberAlign", n: t }, r) : e;
}
function It(e, t, r) {
  let n = t.type === "dedent" ? e.queue.slice(0, -1) : [...e.queue, t], u = "", i = 0, o = 0, s = 0;
  for (let c of n) switch (c.type) {
    case "indent":
      l(), r.useTabs ? a(1) : D(r.tabWidth);
      break;
    case "stringAlign":
      l(), u += c.n, i += c.n.length;
      break;
    case "numberAlign":
      o += 1, s += c.n;
      break;
    default:
      throw new Error(`Unexpected type '${c.type}'`);
  }
  return f(), { ...e, value: u, length: i, queue: n };
  function a(c) {
    u += "	".repeat(c), i += r.tabWidth * c;
  }
  function D(c) {
    u += " ".repeat(c), i += c;
  }
  function l() {
    r.useTabs ? p() : f();
  }
  function p() {
    o > 0 && a(o), d();
  }
  function f() {
    s > 0 && D(s), d();
  }
  function d() {
    o = 0, s = 0;
  }
}
function Rt(e) {
  let t = 0, r = 0, n = e.length;
  e: for (; n--; ) {
    let u = e[n];
    if (u === Ee) {
      r++;
      continue;
    }
    for (let i = u.length - 1; i >= 0; i--) {
      let o = u[i];
      if (o === " " || o === "	") t++;
      else {
        e[n] = u.slice(0, i + 1);
        break e;
      }
    }
  }
  if (t > 0 || r > 0) for (e.length = n + 1; r-- > 0; ) e.push(Ee);
  return t;
}
function et(e, t, r, n, u, i) {
  if (r === Number.POSITIVE_INFINITY) return true;
  let o = t.length, s = [e], a = [];
  for (; r >= 0; ) {
    if (s.length === 0) {
      if (o === 0) return true;
      s.push(t[--o]);
      continue;
    }
    let { mode: D, doc: l } = s.pop(), p = M(l);
    switch (p) {
      case $:
        a.push(l), r -= Le(l);
        break;
      case H:
      case N: {
        let f = p === H ? l : l.parts, d = l[Pt] ?? 0;
        for (let c = f.length - 1; c >= d; c--) s.push({ mode: D, doc: f[c] });
        break;
      }
      case T:
      case k:
      case P:
      case O:
        s.push({ mode: D, doc: l.contents });
        break;
      case L:
        r += Rt(a);
        break;
      case B: {
        if (i && l.break) return false;
        let f = l.break ? Y : D, d = l.expandedStates && f === Y ? A(false, l.expandedStates, -1) : l.contents;
        s.push({ mode: f, doc: d });
        break;
      }
      case w: {
        let d = (l.groupId ? u[l.groupId] || J : D) === Y ? l.breakContents : l.flatContents;
        d && s.push({ mode: D, doc: d });
        break;
      }
      case y:
        if (D === Y || l.hard) return true;
        l.soft || (a.push(" "), r--);
        break;
      case I:
        n = true;
        break;
      case R:
        if (n) return false;
        break;
    }
  }
  return false;
}
function Ce(e, t) {
  let r = {}, n = t.printWidth, u = be(t.endOfLine), i = 0, o = [{ ind: Jr(), mode: Y, doc: e }], s = [], a = false, D = [], l = 0;
  for (br(e); o.length > 0; ) {
    let { ind: f, mode: d, doc: c } = o.pop();
    switch (M(c)) {
      case $: {
        let F = u !== `
` ? ne(false, c, `
`, u) : c;
        s.push(F), o.length > 0 && (i += Le(F));
        break;
      }
      case H:
        for (let F = c.length - 1; F >= 0; F--) o.push({ ind: f, mode: d, doc: c[F] });
        break;
      case z:
        if (l >= 2) throw new Error("There are too many 'cursor' in doc.");
        s.push(Ee), l++;
        break;
      case T:
        o.push({ ind: Gu(f, t), mode: d, doc: c.contents });
        break;
      case k:
        o.push({ ind: Ku(f, c.n, t), mode: d, doc: c.contents });
        break;
      case L:
        i -= Rt(s);
        break;
      case B:
        switch (d) {
          case J:
            if (!a) {
              o.push({ ind: f, mode: c.break ? Y : J, doc: c.contents });
              break;
            }
          case Y: {
            a = false;
            let F = { ind: f, mode: J, doc: c.contents }, m = n - i, h = D.length > 0;
            if (!c.break && et(F, o, m, h, r)) o.push(F);
            else if (c.expandedStates) {
              let C = A(false, c.expandedStates, -1);
              if (c.break) {
                o.push({ ind: f, mode: Y, doc: C });
                break;
              } else for (let v = 1; v < c.expandedStates.length + 1; v++) if (v >= c.expandedStates.length) {
                o.push({ ind: f, mode: Y, doc: C });
                break;
              } else {
                let E = c.expandedStates[v], g = { ind: f, mode: J, doc: E };
                if (et(g, o, m, h, r)) {
                  o.push(g);
                  break;
                }
              }
            } else o.push({ ind: f, mode: Y, doc: c.contents });
            break;
          }
        }
        c.id && (r[c.id] = A(false, o, -1).mode);
        break;
      case N: {
        let F = n - i, m = c[Pt] ?? 0, { parts: h } = c, C = h.length - m;
        if (C === 0) break;
        let v = h[m + 0], E = h[m + 1], g = { ind: f, mode: J, doc: v }, j = { ind: f, mode: Y, doc: v }, b = et(g, [], F, D.length > 0, r, true);
        if (C === 1) {
          b ? o.push(g) : o.push(j);
          break;
        }
        let X = { ind: f, mode: J, doc: E }, ae = { ind: f, mode: Y, doc: E };
        if (C === 2) {
          b ? o.push(X, g) : o.push(ae, j);
          break;
        }
        let $e = h[m + 2], yt = { ind: f, mode: d, doc: { ...c, [Pt]: m + 2 } };
        et({ ind: f, mode: J, doc: [v, E, $e] }, [], F, D.length > 0, r, true) ? o.push(yt, X, g) : b ? o.push(yt, ae, g) : o.push(yt, ae, j);
        break;
      }
      case w:
      case P: {
        let F = c.groupId ? r[c.groupId] : d;
        if (F === Y) {
          let m = c.type === w ? c.breakContents : c.negate ? c.contents : le(c.contents);
          m && o.push({ ind: f, mode: d, doc: m });
        }
        if (F === J) {
          let m = c.type === w ? c.flatContents : c.negate ? le(c.contents) : c.contents;
          m && o.push({ ind: f, mode: d, doc: m });
        }
        break;
      }
      case I:
        D.push({ ind: f, mode: d, doc: c.contents });
        break;
      case R:
        D.length > 0 && o.push({ ind: f, mode: d, doc: ke });
        break;
      case y:
        switch (d) {
          case J:
            if (c.hard) a = true;
            else {
              c.soft || (s.push(" "), i += 1);
              break;
            }
          case Y:
            if (D.length > 0) {
              o.push({ ind: f, mode: d, doc: c }, ...D.reverse()), D.length = 0;
              break;
            }
            c.literal ? f.root ? (s.push(u, f.root.value), i = f.root.length) : (s.push(u), i = 0) : (i -= Rt(s), s.push(u + f.value), i = f.length);
            break;
        }
        break;
      case O:
        o.push({ ind: f, mode: d, doc: c.contents });
        break;
      case _:
        break;
      default:
        throw new Q(c);
    }
    o.length === 0 && D.length > 0 && (o.push(...D.reverse()), D.length = 0);
  }
  let p = s.indexOf(Ee);
  if (p !== -1) {
    let f = s.indexOf(Ee, p + 1);
    if (f === -1) return { formatted: s.filter((m) => m !== Ee).join("") };
    let d = s.slice(0, p).join(""), c = s.slice(p + 1, f).join(""), F = s.slice(f + 1).join("");
    return { formatted: d + c + F, cursorNodeStart: d.length, cursorNodeText: c };
  }
  return { formatted: s.join("") };
}
function Ju(e, t, r = 0) {
  let n = 0;
  for (let u = r; u < e.length; ++u) e[u] === "	" ? n = n + t - n % t : n++;
  return n;
}
var ge = Ju;
var te, jt, tt, Yt = class {
  constructor(t) {
    Fr(this, te);
    this.stack = [t];
  }
  get key() {
    let { stack: t, siblings: r } = this;
    return A(false, t, r === null ? -2 : -4) ?? null;
  }
  get index() {
    return this.siblings === null ? null : A(false, this.stack, -2);
  }
  get node() {
    return A(false, this.stack, -1);
  }
  get parent() {
    return this.getNode(1);
  }
  get grandparent() {
    return this.getNode(2);
  }
  get isInArray() {
    return this.siblings !== null;
  }
  get siblings() {
    let { stack: t } = this, r = A(false, t, -3);
    return Array.isArray(r) ? r : null;
  }
  get next() {
    let { siblings: t } = this;
    return t === null ? null : t[this.index + 1];
  }
  get previous() {
    let { siblings: t } = this;
    return t === null ? null : t[this.index - 1];
  }
  get isFirst() {
    return this.index === 0;
  }
  get isLast() {
    let { siblings: t, index: r } = this;
    return t !== null && r === t.length - 1;
  }
  get isRoot() {
    return this.stack.length === 1;
  }
  get root() {
    return this.stack[0];
  }
  get ancestors() {
    return [...pe(this, te, tt).call(this)];
  }
  getName() {
    let { stack: t } = this, { length: r } = t;
    return r > 1 ? A(false, t, -2) : null;
  }
  getValue() {
    return A(false, this.stack, -1);
  }
  getNode(t = 0) {
    let r = pe(this, te, jt).call(this, t);
    return r === -1 ? null : this.stack[r];
  }
  getParentNode(t = 0) {
    return this.getNode(t + 1);
  }
  call(t, ...r) {
    let { stack: n } = this, { length: u } = n, i = A(false, n, -1);
    for (let o of r) i = i[o], n.push(o, i);
    try {
      return t(this);
    } finally {
      n.length = u;
    }
  }
  callParent(t, r = 0) {
    let n = pe(this, te, jt).call(this, r + 1), u = this.stack.splice(n + 1);
    try {
      return t(this);
    } finally {
      this.stack.push(...u);
    }
  }
  each(t, ...r) {
    let { stack: n } = this, { length: u } = n, i = A(false, n, -1);
    for (let o of r) i = i[o], n.push(o, i);
    try {
      for (let o = 0; o < i.length; ++o) n.push(o, i[o]), t(this, o, i), n.length -= 2;
    } finally {
      n.length = u;
    }
  }
  map(t, ...r) {
    let n = [];
    return this.each((u, i, o) => {
      n[i] = t(u, i, o);
    }, ...r), n;
  }
  match(...t) {
    let r = this.stack.length - 1, n = null, u = this.stack[r--];
    for (let i of t) {
      if (u === void 0) return false;
      let o = null;
      if (typeof n == "number" && (o = n, n = this.stack[r--], u = this.stack[r--]), i && !i(u, n, o)) return false;
      n = this.stack[r--], u = this.stack[r--];
    }
    return true;
  }
  findAncestor(t) {
    for (let r of pe(this, te, tt).call(this)) if (t(r)) return r;
  }
  hasAncestor(t) {
    for (let r of pe(this, te, tt).call(this)) if (t(r)) return true;
    return false;
  }
};
te = /* @__PURE__ */ new WeakSet(), jt = function(t) {
  let { stack: r } = this;
  for (let n = r.length - 1; n >= 0; n -= 2) if (!Array.isArray(r[n]) && --t < 0) return n;
  return -1;
}, tt = function* () {
  let { stack: t } = this;
  for (let r = t.length - 3; r >= 0; r -= 2) {
    let n = t[r];
    Array.isArray(n) || (yield n);
  }
};
var qr = Yt;
var Xr = new Proxy(() => {
}, { get: () => Xr }), Pe = Xr;
function qu(e) {
  return e !== null && typeof e == "object";
}
var Qr = qu;
function* ye(e, t) {
  let { getVisitorKeys: r, filter: n = () => true } = t, u = (i) => Qr(i) && n(i);
  for (let i of r(e)) {
    let o = e[i];
    if (Array.isArray(o)) for (let s of o) u(s) && (yield s);
    else u(o) && (yield o);
  }
}
function* Zr(e, t) {
  let r = [e];
  for (let n = 0; n < r.length; n++) {
    let u = r[n];
    for (let i of ye(u, t)) yield i, r.push(i);
  }
}
function en(e, t) {
  return ye(e, t).next().done;
}
function Ae(e) {
  return (t, r, n) => {
    let u = !!(n != null && n.backwards);
    if (r === false) return false;
    let { length: i } = t, o = r;
    for (; o >= 0 && o < i; ) {
      let s = t.charAt(o);
      if (e instanceof RegExp) {
        if (!e.test(s)) return o;
      } else if (!e.includes(s)) return o;
      u ? o-- : o++;
    }
    return o === -1 || o === i ? o : false;
  };
}
var tn = Ae(/\s/u), S = Ae(" 	"), rt = Ae(",; 	"), nt = Ae(/[^\n\r]/u);
function Xu(e, t, r) {
  let n = !!(r != null && r.backwards);
  if (t === false) return false;
  let u = e.charAt(t);
  if (n) {
    if (e.charAt(t - 1) === "\r" && u === `
`) return t - 2;
    if (u === `
` || u === "\r" || u === "\u2028" || u === "\u2029") return t - 1;
  } else {
    if (u === "\r" && e.charAt(t + 1) === `
`) return t + 2;
    if (u === `
` || u === "\r" || u === "\u2028" || u === "\u2029") return t + 1;
  }
  return t;
}
var W = Xu;
function Qu(e, t, r = {}) {
  let n = S(e, r.backwards ? t - 1 : t, r), u = W(e, n, r);
  return n !== u;
}
var V = Qu;
function Zu(e) {
  return Array.isArray(e) && e.length > 0;
}
var Ht = Zu;
var rn = /* @__PURE__ */ new Set(["tokens", "comments", "parent", "enclosingNode", "precedingNode", "followingNode"]), ei = (e) => Object.keys(e).filter((t) => !rn.has(t));
function ti(e) {
  return e ? (t) => e(t, rn) : ei;
}
var q = ti;
function ri(e) {
  let t = e.type || e.kind || "(unknown type)", r = String(e.name || e.id && (typeof e.id == "object" ? e.id.name : e.id) || e.key && (typeof e.key == "object" ? e.key.name : e.key) || e.value && (typeof e.value == "object" ? "" : String(e.value)) || e.operator || "");
  return r.length > 20 && (r = r.slice(0, 19) + "…"), t + (r ? " " + r : "");
}
function Wt(e, t) {
  (e.comments ?? (e.comments = [])).push(t), t.printed = false, t.nodeDescription = ri(e);
}
function ue(e, t) {
  t.leading = true, t.trailing = false, Wt(e, t);
}
function re(e, t, r) {
  t.leading = false, t.trailing = false, r && (t.marker = r), Wt(e, t);
}
function ie(e, t) {
  t.leading = false, t.trailing = true, Wt(e, t);
}
var $t = /* @__PURE__ */ new WeakMap();
function ut(e, t) {
  if ($t.has(e)) return $t.get(e);
  let { printer: { getCommentChildNodes: r, canAttachComment: n, getVisitorKeys: u }, locStart: i, locEnd: o } = t;
  if (!n) return [];
  let s = ((r == null ? void 0 : r(e, t)) ?? [...ye(e, { getVisitorKeys: q(u) })]).flatMap((a) => n(a) ? [a] : ut(a, t));
  return s.sort((a, D) => i(a) - i(D) || o(a) - o(D)), $t.set(e, s), s;
}
function un(e, t, r, n) {
  let { locStart: u, locEnd: i } = r, o = u(t), s = i(t), a = ut(e, r), D, l, p = 0, f = a.length;
  for (; p < f; ) {
    let d = p + f >> 1, c = a[d], F = u(c), m = i(c);
    if (F <= o && s <= m) return un(c, t, r, c);
    if (m <= o) {
      D = c, p = d + 1;
      continue;
    }
    if (s <= F) {
      l = c, f = d;
      continue;
    }
    throw new Error("Comment location overlaps with node location");
  }
  if ((n == null ? void 0 : n.type) === "TemplateLiteral") {
    let { quasis: d } = n, c = Vt(d, t, r);
    D && Vt(d, D, r) !== c && (D = null), l && Vt(d, l, r) !== c && (l = null);
  }
  return { enclosingNode: n, precedingNode: D, followingNode: l };
}
var Mt = () => false;
function on(e, t) {
  let { comments: r } = e;
  if (delete e.comments, !Ht(r) || !t.printer.canAttachComment) return;
  let n = [], { locStart: u, locEnd: i, printer: { experimentalFeatures: { avoidAstMutation: o = false } = {}, handleComments: s = {} }, originalText: a } = t, { ownLine: D = Mt, endOfLine: l = Mt, remaining: p = Mt } = s, f = r.map((d, c) => ({ ...un(e, d, t), comment: d, text: a, options: t, ast: e, isLastComment: r.length - 1 === c }));
  for (let [d, c] of f.entries()) {
    let { comment: F, precedingNode: m, enclosingNode: h, followingNode: C, text: v, options: E, ast: g, isLastComment: j } = c;
    if (E.parser === "json" || E.parser === "json5" || E.parser === "jsonc" || E.parser === "__js_expression" || E.parser === "__ts_expression" || E.parser === "__vue_expression" || E.parser === "__vue_ts_expression") {
      if (u(F) - u(g) <= 0) {
        ue(g, F);
        continue;
      }
      if (i(F) - i(g) >= 0) {
        ie(g, F);
        continue;
      }
    }
    let b;
    if (o ? b = [c] : (F.enclosingNode = h, F.precedingNode = m, F.followingNode = C, b = [F, v, E, g, j]), ni(v, E, f, d)) F.placement = "ownLine", D(...b) || (C ? ue(C, F) : m ? ie(m, F) : h ? re(h, F) : re(g, F));
    else if (ui(v, E, f, d)) F.placement = "endOfLine", l(...b) || (m ? ie(m, F) : C ? ue(C, F) : h ? re(h, F) : re(g, F));
    else if (F.placement = "remaining", !p(...b)) if (m && C) {
      let X = n.length;
      X > 0 && n[X - 1].followingNode !== C && nn(n, E), n.push(c);
    } else m ? ie(m, F) : C ? ue(C, F) : h ? re(h, F) : re(g, F);
  }
  if (nn(n, t), !o) for (let d of r) delete d.precedingNode, delete d.enclosingNode, delete d.followingNode;
}
var sn = (e) => !/[\S\n\u2028\u2029]/u.test(e);
function ni(e, t, r, n) {
  let { comment: u, precedingNode: i } = r[n], { locStart: o, locEnd: s } = t, a = o(u);
  if (i) for (let D = n - 1; D >= 0; D--) {
    let { comment: l, precedingNode: p } = r[D];
    if (p !== i || !sn(e.slice(s(l), a))) break;
    a = o(l);
  }
  return V(e, a, { backwards: true });
}
function ui(e, t, r, n) {
  let { comment: u, followingNode: i } = r[n], { locStart: o, locEnd: s } = t, a = s(u);
  if (i) for (let D = n + 1; D < r.length; D++) {
    let { comment: l, followingNode: p } = r[D];
    if (p !== i || !sn(e.slice(a, o(l)))) break;
    a = s(l);
  }
  return V(e, a);
}
function nn(e, t) {
  var s, a;
  let r = e.length;
  if (r === 0) return;
  let { precedingNode: n, followingNode: u } = e[0], i = t.locStart(u), o;
  for (o = r; o > 0; --o) {
    let { comment: D, precedingNode: l, followingNode: p } = e[o - 1];
    Pe.strictEqual(l, n), Pe.strictEqual(p, u);
    let f = t.originalText.slice(t.locEnd(D), i);
    if (((a = (s = t.printer).isGap) == null ? void 0 : a.call(s, f, t)) ?? /^[\s(]*$/u.test(f)) i = t.locStart(D);
    else break;
  }
  for (let [D, { comment: l }] of e.entries()) D < o ? ie(n, l) : ue(u, l);
  for (let D of [n, u]) D.comments && D.comments.length > 1 && D.comments.sort((l, p) => t.locStart(l) - t.locStart(p));
  e.length = 0;
}
function Vt(e, t, r) {
  let n = r.locStart(t) - 1;
  for (let u = 1; u < e.length; ++u) if (n < r.locStart(e[u])) return u - 1;
  return 0;
}
function ii(e, t) {
  let r = t - 1;
  r = S(e, r, { backwards: true }), r = W(e, r, { backwards: true }), r = S(e, r, { backwards: true });
  let n = W(e, r, { backwards: true });
  return r !== n;
}
var Ie = ii;
function an(e, t) {
  let r = e.node;
  return r.printed = true, t.printer.printComment(e, t);
}
function oi(e, t) {
  var l;
  let r = e.node, n = [an(e, t)], { printer: u, originalText: i, locStart: o, locEnd: s } = t;
  if ((l = u.isBlockComment) == null ? void 0 : l.call(u, r)) {
    let p = V(i, s(r)) ? V(i, o(r), { backwards: true }) ? K : Qe : " ";
    n.push(p);
  } else n.push(K);
  let D = W(i, S(i, s(r)));
  return D !== false && V(i, D) && n.push(K), n;
}
function si(e, t, r) {
  var D;
  let n = e.node, u = an(e, t), { printer: i, originalText: o, locStart: s } = t, a = (D = i.isBlockComment) == null ? void 0 : D.call(i, n);
  if (r != null && r.hasLineSuffix && !(r != null && r.isBlock) || V(o, s(n), { backwards: true })) {
    let l = Ie(o, s(n));
    return { doc: Te([K, l ? K : "", u]), isBlock: a, hasLineSuffix: true };
  }
  return !a || r != null && r.hasLineSuffix ? { doc: [Te([" ", u]), he], isBlock: a, hasLineSuffix: true } : { doc: [" ", u], isBlock: a, hasLineSuffix: false };
}
function ai(e, t) {
  let r = e.node;
  if (!r) return {};
  let n = t[Symbol.for("printedComments")];
  if ((r.comments || []).filter((a) => !n.has(a)).length === 0) return { leading: "", trailing: "" };
  let i = [], o = [], s;
  return e.each(() => {
    let a = e.node;
    if (n != null && n.has(a)) return;
    let { leading: D, trailing: l } = a;
    D ? i.push(oi(e, t)) : l && (s = si(e, t, s), o.push(s.doc));
  }, "comments"), { leading: i, trailing: o };
}
function Dn(e, t, r) {
  let { leading: n, trailing: u } = ai(e, r);
  return !n && !u ? t : me(t, (i) => [n, i, u]);
}
function ln(e) {
  let { [Symbol.for("comments")]: t, [Symbol.for("printedComments")]: r } = e;
  for (let n of t) {
    if (!n.printed && !r.has(n)) throw new Error('Comment "' + n.value.trim() + '" was not printed. Please report this error!');
    delete n.printed;
  }
}
var Re = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "ConfigError");
  }
}, Ye = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "UndefinedParserError");
  }
};
var fn = { cursorOffset: { category: "Special", type: "int", default: -1, range: { start: -1, end: 1 / 0, step: 1 }, description: "Print (to stderr) where a cursor at the given position would move to after formatting.", cliCategory: "Editor" }, endOfLine: { category: "Global", type: "choice", default: "lf", description: "Which end of line characters to apply.", choices: [{ value: "lf", description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos" }, { value: "crlf", description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows" }, { value: "cr", description: "Carriage Return character only (\\r), used very rarely" }, { value: "auto", description: `Maintain existing
(mixed values within one file are normalised by looking at what's used after the first line)` }] }, filepath: { category: "Special", type: "path", description: "Specify the input filepath. This will be used to do parser inference.", cliName: "stdin-filepath", cliCategory: "Other", cliDescription: "Path to the file to pretend that stdin comes from." }, insertPragma: { category: "Special", type: "boolean", default: false, description: "Insert @format pragma into file's first docblock comment.", cliCategory: "Other" }, parser: { category: "Global", type: "choice", default: void 0, description: "Which parser to use.", exception: (e) => typeof e == "string" || typeof e == "function", choices: [{ value: "flow", description: "Flow" }, { value: "babel", description: "JavaScript" }, { value: "babel-flow", description: "Flow" }, { value: "babel-ts", description: "TypeScript" }, { value: "typescript", description: "TypeScript" }, { value: "acorn", description: "JavaScript" }, { value: "espree", description: "JavaScript" }, { value: "meriyah", description: "JavaScript" }, { value: "css", description: "CSS" }, { value: "less", description: "Less" }, { value: "scss", description: "SCSS" }, { value: "json", description: "JSON" }, { value: "json5", description: "JSON5" }, { value: "jsonc", description: "JSON with Comments" }, { value: "json-stringify", description: "JSON.stringify" }, { value: "graphql", description: "GraphQL" }, { value: "markdown", description: "Markdown" }, { value: "mdx", description: "MDX" }, { value: "vue", description: "Vue" }, { value: "yaml", description: "YAML" }, { value: "glimmer", description: "Ember / Handlebars" }, { value: "html", description: "HTML" }, { value: "angular", description: "Angular" }, { value: "lwc", description: "Lightning Web Components" }] }, plugins: { type: "path", array: true, default: [{ value: [] }], category: "Global", description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.", exception: (e) => typeof e == "string" || typeof e == "object", cliName: "plugin", cliCategory: "Config" }, printWidth: { category: "Global", type: "int", default: 80, description: "The line length where Prettier will try wrap.", range: { start: 0, end: 1 / 0, step: 1 } }, rangeEnd: { category: "Special", type: "int", default: 1 / 0, range: { start: 0, end: 1 / 0, step: 1 }, description: `Format code ending at a given character offset (exclusive).
The range will extend forwards to the end of the selected statement.`, cliCategory: "Editor" }, rangeStart: { category: "Special", type: "int", default: 0, range: { start: 0, end: 1 / 0, step: 1 }, description: `Format code starting at a given character offset.
The range will extend backwards to the start of the first line containing the selected statement.`, cliCategory: "Editor" }, requirePragma: { category: "Special", type: "boolean", default: false, description: `Require either '@prettier' or '@format' to be present in the file's first docblock comment
in order for it to be formatted.`, cliCategory: "Other" }, tabWidth: { type: "int", category: "Global", default: 2, description: "Number of spaces per indentation level.", range: { start: 0, end: 1 / 0, step: 1 } }, useTabs: { category: "Global", type: "boolean", default: false, description: "Indent with tabs instead of spaces." }, embeddedLanguageFormatting: { category: "Global", type: "choice", default: "auto", description: "Control how Prettier formats quoted code embedded in the file.", choices: [{ value: "auto", description: "Format embedded code if Prettier can automatically identify it." }, { value: "off", description: "Never automatically format embedded code." }] } };
function it({ plugins: e = [], showDeprecated: t = false } = {}) {
  let r = e.flatMap((u) => u.languages ?? []), n = [];
  for (let u of ci(Object.assign({}, ...e.map(({ options: i }) => i), fn))) !t && u.deprecated || (Array.isArray(u.choices) && (t || (u.choices = u.choices.filter((i) => !i.deprecated)), u.name === "parser" && (u.choices = [...u.choices, ...li(u.choices, r, e)])), u.pluginDefaults = Object.fromEntries(e.filter((i) => {
    var o;
    return ((o = i.defaultOptions) == null ? void 0 : o[u.name]) !== void 0;
  }).map((i) => [i.name, i.defaultOptions[u.name]])), n.push(u));
  return { languages: r, options: n };
}
function* li(e, t, r) {
  let n = new Set(e.map((u) => u.value));
  for (let u of t) if (u.parsers) {
    for (let i of u.parsers) if (!n.has(i)) {
      n.add(i);
      let o = r.find((a) => a.parsers && Object.prototype.hasOwnProperty.call(a.parsers, i)), s = u.name;
      o != null && o.name && (s += ` (plugin: ${o.name})`), yield { value: i, description: s };
    }
  }
}
function ci(e) {
  let t = [];
  for (let [r, n] of Object.entries(e)) {
    let u = { name: r, ...n };
    Array.isArray(u.default) && (u.default = A(false, u.default, -1).value), t.push(u);
  }
  return t;
}
var fi = (e) => String(e).split(/[/\\]/u).pop();
function dn(e, t) {
  if (!t) return;
  let r = fi(t).toLowerCase();
  return e.find(({ filenames: n }) => n == null ? void 0 : n.some((u) => u.toLowerCase() === r)) ?? e.find(({ extensions: n }) => n == null ? void 0 : n.some((u) => r.endsWith(u)));
}
function di(e, t) {
  if (t) return e.find(({ name: r }) => r.toLowerCase() === t) ?? e.find(({ aliases: r }) => r == null ? void 0 : r.includes(t)) ?? e.find(({ extensions: r }) => r == null ? void 0 : r.includes(`.${t}`));
}
function pi(e, t) {
  let r = e.plugins.flatMap((u) => u.languages ?? []), n = di(r, t.language) ?? dn(r, t.physicalFile) ?? dn(r, t.file) ?? (t.physicalFile, void 0);
  return n == null ? void 0 : n.parsers[0];
}
var pn = pi;
var oe = { key: (e) => /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e) ? e : JSON.stringify(e), value(e) {
  if (e === null || typeof e != "object") return JSON.stringify(e);
  if (Array.isArray(e)) return `[${e.map((r) => oe.value(r)).join(", ")}]`;
  let t = Object.keys(e);
  return t.length === 0 ? "{}" : `{ ${t.map((r) => `${oe.key(r)}: ${oe.value(e[r])}`).join(", ")} }`;
}, pair: ({ key: e, value: t }) => oe.value({ [e]: t }) };
var Ut = Me(ot()), hn = (e, t, { descriptor: r }) => {
  let n = [`${Ut.default.yellow(typeof e == "string" ? r.key(e) : r.pair(e))} is deprecated`];
  return t && n.push(`we now treat it as ${Ut.default.blue(typeof t == "string" ? r.key(t) : r.pair(t))}`), n.join("; ") + ".";
};
var ce = Me(ot());
var st = Symbol.for("vnopts.VALUE_NOT_EXIST"), ve = Symbol.for("vnopts.VALUE_UNCHANGED");
var En = " ".repeat(2), gn = (e, t, r) => {
  let { text: n, list: u } = r.normalizeExpectedResult(r.schemas[e].expected(r)), i = [];
  return n && i.push(Cn(e, t, n, r.descriptor)), u && i.push([Cn(e, t, u.title, r.descriptor)].concat(u.values.map((o) => yn(o, r.loggerPrintWidth))).join(`
`)), An(i, r.loggerPrintWidth);
};
function Cn(e, t, r, n) {
  return [`Invalid ${ce.default.red(n.key(e))} value.`, `Expected ${ce.default.blue(r)},`, `but received ${t === st ? ce.default.gray("nothing") : ce.default.red(n.value(t))}.`].join(" ");
}
function yn({ text: e, list: t }, r) {
  let n = [];
  return e && n.push(`- ${ce.default.blue(e)}`), t && n.push([`- ${ce.default.blue(t.title)}:`].concat(t.values.map((u) => yn(u, r - En.length).replace(/^|\n/g, `$&${En}`))).join(`
`)), An(n, r);
}
function An(e, t) {
  if (e.length === 1) return e[0];
  let [r, n] = e, [u, i] = e.map((o) => o.split(`
`, 1)[0].length);
  return u > t && u > i ? n : r;
}
var Kt = Me(ot());
var zt = [], vn = [];
function Gt(e, t) {
  if (e === t) return 0;
  let r = e;
  e.length > t.length && (e = t, t = r);
  let n = e.length, u = t.length;
  for (; n > 0 && e.charCodeAt(~-n) === t.charCodeAt(~-u); ) n--, u--;
  let i = 0;
  for (; i < n && e.charCodeAt(i) === t.charCodeAt(i); ) i++;
  if (n -= i, u -= i, n === 0) return u;
  let o, s, a, D, l = 0, p = 0;
  for (; l < n; ) vn[l] = e.charCodeAt(i + l), zt[l] = ++l;
  for (; p < u; ) for (o = t.charCodeAt(i + p), a = p++, s = p, l = 0; l < n; l++) D = o === vn[l] ? a : a + 1, a = zt[l], s = zt[l] = a > s ? D > s ? s + 1 : D : D > a ? a + 1 : D;
  return s;
}
var at = (e, t, { descriptor: r, logger: n, schemas: u }) => {
  let i = [`Ignored unknown option ${Kt.default.yellow(r.pair({ key: e, value: t }))}.`], o = Object.keys(u).sort().find((s) => Gt(e, s) < 3);
  o && i.push(`Did you mean ${Kt.default.blue(r.key(o))}?`), n.warn(i.join(" "));
};
var Fi = ["default", "expected", "validate", "deprecated", "forward", "redirect", "overlap", "preprocess", "postprocess"];
function mi(e, t) {
  let r = new e(t), n = Object.create(r);
  for (let u of Fi) u in t && (n[u] = hi(t[u], r, x.prototype[u].length));
  return n;
}
var x = class {
  static create(t) {
    return mi(this, t);
  }
  constructor(t) {
    this.name = t.name;
  }
  default(t) {
  }
  expected(t) {
    return "nothing";
  }
  validate(t, r) {
    return false;
  }
  deprecated(t, r) {
    return false;
  }
  forward(t, r) {
  }
  redirect(t, r) {
  }
  overlap(t, r, n) {
    return t;
  }
  preprocess(t, r) {
    return t;
  }
  postprocess(t, r) {
    return ve;
  }
};
function hi(e, t, r) {
  return typeof e == "function" ? (...n) => e(...n.slice(0, r - 1), t, ...n.slice(r - 1)) : () => e;
}
var Dt = class extends x {
  constructor(t) {
    super(t), this._sourceName = t.sourceName;
  }
  expected(t) {
    return t.schemas[this._sourceName].expected(t);
  }
  validate(t, r) {
    return r.schemas[this._sourceName].validate(t, r);
  }
  redirect(t, r) {
    return this._sourceName;
  }
};
var lt = class extends x {
  expected() {
    return "anything";
  }
  validate() {
    return true;
  }
};
var ct = class extends x {
  constructor({ valueSchema: t, name: r = t.name, ...n }) {
    super({ ...n, name: r }), this._valueSchema = t;
  }
  expected(t) {
    let { text: r, list: n } = t.normalizeExpectedResult(this._valueSchema.expected(t));
    return { text: r && `an array of ${r}`, list: n && { title: "an array of the following values", values: [{ list: n }] } };
  }
  validate(t, r) {
    if (!Array.isArray(t)) return false;
    let n = [];
    for (let u of t) {
      let i = r.normalizeValidateResult(this._valueSchema.validate(u, r), u);
      i !== true && n.push(i.value);
    }
    return n.length === 0 ? true : { value: n };
  }
  deprecated(t, r) {
    let n = [];
    for (let u of t) {
      let i = r.normalizeDeprecatedResult(this._valueSchema.deprecated(u, r), u);
      i !== false && n.push(...i.map(({ value: o }) => ({ value: [o] })));
    }
    return n;
  }
  forward(t, r) {
    let n = [];
    for (let u of t) {
      let i = r.normalizeForwardResult(this._valueSchema.forward(u, r), u);
      n.push(...i.map(Bn));
    }
    return n;
  }
  redirect(t, r) {
    let n = [], u = [];
    for (let i of t) {
      let o = r.normalizeRedirectResult(this._valueSchema.redirect(i, r), i);
      "remain" in o && n.push(o.remain), u.push(...o.redirect.map(Bn));
    }
    return n.length === 0 ? { redirect: u } : { redirect: u, remain: n };
  }
  overlap(t, r) {
    return t.concat(r);
  }
};
function Bn({ from: e, to: t }) {
  return { from: [e], to: t };
}
var ft = class extends x {
  expected() {
    return "true or false";
  }
  validate(t) {
    return typeof t == "boolean";
  }
};
function _n(e, t) {
  let r = /* @__PURE__ */ Object.create(null);
  for (let n of e) {
    let u = n[t];
    if (r[u]) throw new Error(`Duplicate ${t} ${JSON.stringify(u)}`);
    r[u] = n;
  }
  return r;
}
function xn(e, t) {
  let r = /* @__PURE__ */ new Map();
  for (let n of e) {
    let u = n[t];
    if (r.has(u)) throw new Error(`Duplicate ${t} ${JSON.stringify(u)}`);
    r.set(u, n);
  }
  return r;
}
function bn() {
  let e = /* @__PURE__ */ Object.create(null);
  return (t) => {
    let r = JSON.stringify(t);
    return e[r] ? true : (e[r] = true, false);
  };
}
function Nn(e, t) {
  let r = [], n = [];
  for (let u of e) t(u) ? r.push(u) : n.push(u);
  return [r, n];
}
function On(e) {
  return e === Math.floor(e);
}
function Sn(e, t) {
  if (e === t) return 0;
  let r = typeof e, n = typeof t, u = ["undefined", "object", "boolean", "number", "string"];
  return r !== n ? u.indexOf(r) - u.indexOf(n) : r !== "string" ? Number(e) - Number(t) : e.localeCompare(t);
}
function Tn(e) {
  return (...t) => {
    let r = e(...t);
    return typeof r == "string" ? new Error(r) : r;
  };
}
function Jt(e) {
  return e === void 0 ? {} : e;
}
function qt(e) {
  if (typeof e == "string") return { text: e };
  let { text: t, list: r } = e;
  return Ei((t || r) !== void 0, "Unexpected `expected` result, there should be at least one field."), r ? { text: t, list: { title: r.title, values: r.values.map(qt) } } : { text: t };
}
function Xt(e, t) {
  return e === true ? true : e === false ? { value: t } : e;
}
function Qt(e, t, r = false) {
  return e === false ? false : e === true ? r ? true : [{ value: t }] : "value" in e ? [e] : e.length === 0 ? false : e;
}
function wn(e, t) {
  return typeof e == "string" || "key" in e ? { from: t, to: e } : "from" in e ? { from: e.from, to: e.to } : { from: t, to: e.to };
}
function dt(e, t) {
  return e === void 0 ? [] : Array.isArray(e) ? e.map((r) => wn(r, t)) : [wn(e, t)];
}
function Zt(e, t) {
  let r = dt(typeof e == "object" && "redirect" in e ? e.redirect : e, t);
  return r.length === 0 ? { remain: t, redirect: r } : typeof e == "object" && "remain" in e ? { remain: e.remain, redirect: r } : { redirect: r };
}
function Ei(e, t) {
  if (!e) throw new Error(t);
}
var pt = class extends x {
  constructor(t) {
    super(t), this._choices = xn(t.choices.map((r) => r && typeof r == "object" ? r : { value: r }), "value");
  }
  expected({ descriptor: t }) {
    let r = Array.from(this._choices.keys()).map((o) => this._choices.get(o)).filter(({ hidden: o }) => !o).map((o) => o.value).sort(Sn).map(t.value), n = r.slice(0, -2), u = r.slice(-2);
    return { text: n.concat(u.join(" or ")).join(", "), list: { title: "one of the following values", values: r } };
  }
  validate(t) {
    return this._choices.has(t);
  }
  deprecated(t) {
    let r = this._choices.get(t);
    return r && r.deprecated ? { value: t } : false;
  }
  forward(t) {
    let r = this._choices.get(t);
    return r ? r.forward : void 0;
  }
  redirect(t) {
    let r = this._choices.get(t);
    return r ? r.redirect : void 0;
  }
};
var Ft = class extends x {
  expected() {
    return "a number";
  }
  validate(t, r) {
    return typeof t == "number";
  }
};
var mt = class extends Ft {
  expected() {
    return "an integer";
  }
  validate(t, r) {
    return r.normalizeValidateResult(super.validate(t, r), t) === true && On(t);
  }
};
var je = class extends x {
  expected() {
    return "a string";
  }
  validate(t) {
    return typeof t == "string";
  }
};
var kn = oe, Ln = at, Pn = gn, In = hn;
var ht = class {
  constructor(t, r) {
    let { logger: n = console, loggerPrintWidth: u = 80, descriptor: i = kn, unknown: o = Ln, invalid: s = Pn, deprecated: a = In, missing: D = () => false, required: l = () => false, preprocess: p = (d) => d, postprocess: f = () => ve } = r || {};
    this._utils = { descriptor: i, logger: n || { warn: () => {
    } }, loggerPrintWidth: u, schemas: _n(t, "name"), normalizeDefaultResult: Jt, normalizeExpectedResult: qt, normalizeDeprecatedResult: Qt, normalizeForwardResult: dt, normalizeRedirectResult: Zt, normalizeValidateResult: Xt }, this._unknownHandler = o, this._invalidHandler = Tn(s), this._deprecatedHandler = a, this._identifyMissing = (d, c) => !(d in c) || D(d, c), this._identifyRequired = l, this._preprocess = p, this._postprocess = f, this.cleanHistory();
  }
  cleanHistory() {
    this._hasDeprecationWarned = bn();
  }
  normalize(t) {
    let r = {}, u = [this._preprocess(t, this._utils)], i = () => {
      for (; u.length !== 0; ) {
        let o = u.shift(), s = this._applyNormalization(o, r);
        u.push(...s);
      }
    };
    i();
    for (let o of Object.keys(this._utils.schemas)) {
      let s = this._utils.schemas[o];
      if (!(o in r)) {
        let a = Jt(s.default(this._utils));
        "value" in a && u.push({ [o]: a.value });
      }
    }
    i();
    for (let o of Object.keys(this._utils.schemas)) {
      if (!(o in r)) continue;
      let s = this._utils.schemas[o], a = r[o], D = s.postprocess(a, this._utils);
      D !== ve && (this._applyValidation(D, o, s), r[o] = D);
    }
    return this._applyPostprocess(r), this._applyRequiredCheck(r), r;
  }
  _applyNormalization(t, r) {
    let n = [], { knownKeys: u, unknownKeys: i } = this._partitionOptionKeys(t);
    for (let o of u) {
      let s = this._utils.schemas[o], a = s.preprocess(t[o], this._utils);
      this._applyValidation(a, o, s);
      let D = ({ from: d, to: c }) => {
        n.push(typeof c == "string" ? { [c]: d } : { [c.key]: c.value });
      }, l = ({ value: d, redirectTo: c }) => {
        let F = Qt(s.deprecated(d, this._utils), a, true);
        if (F !== false) if (F === true) this._hasDeprecationWarned(o) || this._utils.logger.warn(this._deprecatedHandler(o, c, this._utils));
        else for (let { value: m } of F) {
          let h = { key: o, value: m };
          if (!this._hasDeprecationWarned(h)) {
            let C = typeof c == "string" ? { key: c, value: m } : c;
            this._utils.logger.warn(this._deprecatedHandler(h, C, this._utils));
          }
        }
      };
      dt(s.forward(a, this._utils), a).forEach(D);
      let f = Zt(s.redirect(a, this._utils), a);
      if (f.redirect.forEach(D), "remain" in f) {
        let d = f.remain;
        r[o] = o in r ? s.overlap(r[o], d, this._utils) : d, l({ value: d });
      }
      for (let { from: d, to: c } of f.redirect) l({ value: d, redirectTo: c });
    }
    for (let o of i) {
      let s = t[o];
      this._applyUnknownHandler(o, s, r, (a, D) => {
        n.push({ [a]: D });
      });
    }
    return n;
  }
  _applyRequiredCheck(t) {
    for (let r of Object.keys(this._utils.schemas)) if (this._identifyMissing(r, t) && this._identifyRequired(r)) throw this._invalidHandler(r, st, this._utils);
  }
  _partitionOptionKeys(t) {
    let [r, n] = Nn(Object.keys(t).filter((u) => !this._identifyMissing(u, t)), (u) => u in this._utils.schemas);
    return { knownKeys: r, unknownKeys: n };
  }
  _applyValidation(t, r, n) {
    let u = Xt(n.validate(t, this._utils), t);
    if (u !== true) throw this._invalidHandler(r, u.value, this._utils);
  }
  _applyUnknownHandler(t, r, n, u) {
    let i = this._unknownHandler(t, r, this._utils);
    if (i) for (let o of Object.keys(i)) {
      if (this._identifyMissing(o, i)) continue;
      let s = i[o];
      o in this._utils.schemas ? u(o, s) : n[o] = s;
    }
  }
  _applyPostprocess(t) {
    let r = this._postprocess(t, this._utils);
    if (r !== ve) {
      if (r.delete) for (let n of r.delete) delete t[n];
      if (r.override) {
        let { knownKeys: n, unknownKeys: u } = this._partitionOptionKeys(r.override);
        for (let i of n) {
          let o = r.override[i];
          this._applyValidation(o, i, this._utils.schemas[i]), t[i] = o;
        }
        for (let i of u) {
          let o = r.override[i];
          this._applyUnknownHandler(i, o, t, (s, a) => {
            let D = this._utils.schemas[s];
            this._applyValidation(a, s, D), t[s] = a;
          });
        }
      }
    }
  }
};
var er;
function gi(e, t, { logger: r = false, isCLI: n = false, passThrough: u = false, FlagSchema: i, descriptor: o } = {}) {
  if (n) {
    if (!i) throw new Error("'FlagSchema' option is required.");
    if (!o) throw new Error("'descriptor' option is required.");
  } else o = oe;
  let s = u ? Array.isArray(u) ? (f, d) => u.includes(f) ? { [f]: d } : void 0 : (f, d) => ({ [f]: d }) : (f, d, c) => {
    let { _: F, ...m } = c.schemas;
    return at(f, d, { ...c, schemas: m });
  }, a = yi(t, { isCLI: n, FlagSchema: i }), D = new ht(a, { logger: r, unknown: s, descriptor: o }), l = r !== false;
  l && er && (D._hasDeprecationWarned = er);
  let p = D.normalize(e);
  return l && (er = D._hasDeprecationWarned), p;
}
function yi(e, { isCLI: t, FlagSchema: r }) {
  let n = [];
  t && n.push(lt.create({ name: "_" }));
  for (let u of e) n.push(Ai(u, { isCLI: t, optionInfos: e, FlagSchema: r })), u.alias && t && n.push(Dt.create({ name: u.alias, sourceName: u.name }));
  return n;
}
function Ai(e, { isCLI: t, optionInfos: r, FlagSchema: n }) {
  let { name: u } = e, i = { name: u }, o, s = {};
  switch (e.type) {
    case "int":
      o = mt, t && (i.preprocess = Number);
      break;
    case "string":
      o = je;
      break;
    case "choice":
      o = pt, i.choices = e.choices.map((a) => a != null && a.redirect ? { ...a, redirect: { to: { key: e.name, value: a.redirect } } } : a);
      break;
    case "boolean":
      o = ft;
      break;
    case "flag":
      o = n, i.flags = r.flatMap((a) => [a.alias, a.description && a.name, a.oppositeDescription && `no-${a.name}`].filter(Boolean));
      break;
    case "path":
      o = je;
      break;
    default:
      throw new Error(`Unexpected type ${e.type}`);
  }
  if (e.exception ? i.validate = (a, D, l) => e.exception(a) || D.validate(a, l) : i.validate = (a, D, l) => a === void 0 || D.validate(a, l), e.redirect && (s.redirect = (a) => a ? { to: typeof e.redirect == "string" ? e.redirect : { key: e.redirect.option, value: e.redirect.value } } : void 0), e.deprecated && (s.deprecated = true), t && !e.array) {
    let a = i.preprocess || ((D) => D);
    i.preprocess = (D, l, p) => l.preprocess(a(Array.isArray(D) ? A(false, D, -1) : D), p);
  }
  return e.array ? ct.create({ ...t ? { preprocess: (a) => Array.isArray(a) ? a : [a] } : {}, ...s, valueSchema: o.create(i) }) : o.create({ ...i, ...s });
}
var Rn = gi;
var vi = (e, t, r) => {
  if (!(e && t == null)) {
    if (t.findLast) return t.findLast(r);
    for (let n = t.length - 1; n >= 0; n--) {
      let u = t[n];
      if (r(u, n, t)) return u;
    }
  }
}, tr = vi;
function rr(e, t) {
  if (!t) throw new Error("parserName is required.");
  let r = tr(false, e, (u) => u.parsers && Object.prototype.hasOwnProperty.call(u.parsers, t));
  if (r) return r;
  let n = `Couldn't resolve parser "${t}".`;
  throw n += " Plugins must be explicitly added to the standalone bundle.", new Re(n);
}
function Yn(e, t) {
  if (!t) throw new Error("astFormat is required.");
  let r = tr(false, e, (u) => u.printers && Object.prototype.hasOwnProperty.call(u.printers, t));
  if (r) return r;
  let n = `Couldn't find plugin for AST format "${t}".`;
  throw n += " Plugins must be explicitly added to the standalone bundle.", new Re(n);
}
function Et({ plugins: e, parser: t }) {
  let r = rr(e, t);
  return nr(r, t);
}
function nr(e, t) {
  let r = e.parsers[t];
  return typeof r == "function" ? r() : r;
}
function jn(e, t) {
  let r = e.printers[t];
  return typeof r == "function" ? r() : r;
}
var Hn = { astFormat: "estree", printer: {}, originalText: void 0, locStart: null, locEnd: null };
async function Bi(e, t = {}) {
  var p;
  let r = { ...e };
  if (!r.parser) if (r.filepath) {
    if (r.parser = pn(r, { physicalFile: r.filepath }), !r.parser) throw new Ye(`No parser could be inferred for file "${r.filepath}".`);
  } else throw new Ye("No parser and no file path given, couldn't infer a parser.");
  let n = it({ plugins: e.plugins, showDeprecated: true }).options, u = { ...Hn, ...Object.fromEntries(n.filter((f) => f.default !== void 0).map((f) => [f.name, f.default])) }, i = rr(r.plugins, r.parser), o = await nr(i, r.parser);
  r.astFormat = o.astFormat, r.locEnd = o.locEnd, r.locStart = o.locStart;
  let s = (p = i.printers) != null && p[o.astFormat] ? i : Yn(r.plugins, o.astFormat), a = await jn(s, o.astFormat);
  r.printer = a;
  let D = s.defaultOptions ? Object.fromEntries(Object.entries(s.defaultOptions).filter(([, f]) => f !== void 0)) : {}, l = { ...u, ...D };
  for (let [f, d] of Object.entries(l)) (r[f] === null || r[f] === void 0) && (r[f] = d);
  return r.parser === "json" && (r.trailingComma = "none"), Rn(r, n, { passThrough: Object.keys(Hn), ...t });
}
var se = Bi;
var Mn = Me($n());
async function bi(e, t) {
  let r = await Et(t), n = r.preprocess ? r.preprocess(e, t) : e;
  t.originalText = n;
  let u;
  try {
    u = await r.parse(n, t, t);
  } catch (i) {
    Ni(i, e);
  }
  return { text: n, ast: u };
}
function Ni(e, t) {
  let { loc: r } = e;
  if (r) {
    let n = (0, Mn.codeFrameColumns)(t, r, { highlightCode: true });
    throw e.message += `
` + n, e.codeFrame = n, e;
  }
  throw e;
}
var fe = bi;
async function Vn(e, t, r, n, u) {
  let { embeddedLanguageFormatting: i, printer: { embed: o, hasPrettierIgnore: s = () => false, getVisitorKeys: a } } = r;
  if (!o || i !== "auto") return;
  if (o.length > 2) throw new Error("printer.embed has too many parameters. The API changed in Prettier v3. Please update your plugin. See https://prettier.io/docs/plugins#optional-embed");
  let D = q(o.getVisitorKeys ?? a), l = [];
  d();
  let p = e.stack;
  for (let { print: c, node: F, pathStack: m } of l) try {
    e.stack = m;
    let h = await c(f, t, e, r);
    h && u.set(F, h);
  } catch (h) {
    if (globalThis.PRETTIER_DEBUG) throw h;
  }
  e.stack = p;
  function f(c, F) {
    return Oi(c, F, r, n);
  }
  function d() {
    let { node: c } = e;
    if (c === null || typeof c != "object" || s(e)) return;
    for (let m of D(c)) Array.isArray(c[m]) ? e.each(d, m) : e.call(d, m);
    let F = o(e, r);
    if (F) {
      if (typeof F == "function") {
        l.push({ print: F, node: c, pathStack: [...e.stack] });
        return;
      }
      u.set(c, F);
    }
  }
}
async function Oi(e, t, r, n) {
  let u = await se({ ...r, ...t, parentParser: r.parser, originalText: e }, { passThrough: true }), { ast: i } = await fe(e, u), o = await n(i, u);
  return qe(o);
}
function Si(e, t) {
  let { originalText: r, [Symbol.for("comments")]: n, locStart: u, locEnd: i, [Symbol.for("printedComments")]: o } = t, { node: s } = e, a = u(s), D = i(s);
  for (let l of n) u(l) >= a && i(l) <= D && o.add(l);
  return r.slice(a, D);
}
var Un = Si;
async function He(e, t) {
  ({ ast: e } = await ir(e, t));
  let r = /* @__PURE__ */ new Map(), n = new qr(e), i = /* @__PURE__ */ new Map();
  await Vn(n, s, t, He, i);
  let o = await zn(n, t, s, void 0, i);
  if (ln(t), t.nodeAfterCursor && !t.nodeBeforeCursor) return [Z, o];
  if (t.nodeBeforeCursor && !t.nodeAfterCursor) return [o, Z];
  return o;
  function s(D, l) {
    return D === void 0 || D === n ? a(l) : Array.isArray(D) ? n.call(() => a(l), ...D) : n.call(() => a(l), D);
  }
  function a(D) {
    let l = n.node;
    if (l == null) return "";
    let p = l && typeof l == "object" && D === void 0;
    if (p && r.has(l)) return r.get(l);
    let f = zn(n, t, s, D, i);
    return p && r.set(l, f), f;
  }
}
function zn(e, t, r, n, u) {
  var a;
  let { node: i } = e, { printer: o } = t, s;
  switch ((a = o.hasPrettierIgnore) != null && a.call(o, e) ? s = Un(e, t) : u.has(i) ? s = u.get(i) : s = o.print(e, t, r, n), i) {
    case t.cursorNode:
      s = me(s, (D) => [Z, D, Z]);
      break;
    case t.nodeBeforeCursor:
      s = me(s, (D) => [D, Z]);
      break;
    case t.nodeAfterCursor:
      s = me(s, (D) => [Z, D]);
      break;
  }
  return o.printComment && (!o.willPrintOwnComments || !o.willPrintOwnComments(e, t)) && (s = Dn(e, s, t)), s;
}
async function ir(e, t) {
  let r = e.comments ?? [];
  t[Symbol.for("comments")] = r, t[Symbol.for("tokens")] = e.tokens ?? [], t[Symbol.for("printedComments")] = /* @__PURE__ */ new Set(), on(e, t);
  let { printer: { preprocess: n } } = t;
  return e = n ? await n(e, t) : e, { ast: e, comments: r };
}
function Ti(e, t) {
  let { cursorOffset: r, locStart: n, locEnd: u } = t, i = q(t.printer.getVisitorKeys), o = (d) => n(d) <= r && u(d) >= r, s = e, a = [e];
  for (let d of Zr(e, { getVisitorKeys: i, filter: o })) a.push(d), s = d;
  if (en(s, { getVisitorKeys: i })) return { cursorNode: s };
  let D, l, p = -1, f = Number.POSITIVE_INFINITY;
  for (; a.length > 0 && (D === void 0 || l === void 0); ) {
    s = a.pop();
    let d = D !== void 0, c = l !== void 0;
    for (let F of ye(s, { getVisitorKeys: i })) {
      if (!d) {
        let m = u(F);
        m <= r && m > p && (D = F, p = m);
      }
      if (!c) {
        let m = n(F);
        m >= r && m < f && (l = F, f = m);
      }
    }
  }
  return { nodeBeforeCursor: D, nodeAfterCursor: l };
}
var Gn = Ti;
function ki(e, t) {
  let { printer: { massageAstNode: r, getVisitorKeys: n } } = t;
  if (!r) return e;
  let u = q(n), i = r.ignoredProperties ?? /* @__PURE__ */ new Set();
  return o(e);
  function o(s, a) {
    if (!(s !== null && typeof s == "object")) return s;
    if (Array.isArray(s)) return s.map((f) => o(f, a)).filter(Boolean);
    let D = {}, l = new Set(u(s));
    for (let f in s) !Object.prototype.hasOwnProperty.call(s, f) || i.has(f) || (l.has(f) ? D[f] = o(s[f], s) : D[f] = s[f]);
    let p = r(s, D, a);
    if (p !== null) return p ?? D;
  }
}
var Kn = ki;
var Li = (e, t, r) => {
  if (!(e && t == null)) {
    if (t.findLastIndex) return t.findLastIndex(r);
    for (let n = t.length - 1; n >= 0; n--) {
      let u = t[n];
      if (r(u, n, t)) return n;
    }
    return -1;
  }
}, Jn = Li;
var Pi = ({ parser: e }) => e === "json" || e === "json5" || e === "jsonc" || e === "json-stringify";
function Ii(e, t) {
  let r = [e.node, ...e.parentNodes], n = /* @__PURE__ */ new Set([t.node, ...t.parentNodes]);
  return r.find((u) => Qn.has(u.type) && n.has(u));
}
function qn(e) {
  let t = Jn(false, e, (r) => r.type !== "Program" && r.type !== "File");
  return t === -1 ? e : e.slice(0, t + 1);
}
function Ri(e, t, { locStart: r, locEnd: n }) {
  let u = e.node, i = t.node;
  if (u === i) return { startNode: u, endNode: i };
  let o = r(e.node);
  for (let a of qn(t.parentNodes)) if (r(a) >= o) i = a;
  else break;
  let s = n(t.node);
  for (let a of qn(e.parentNodes)) {
    if (n(a) <= s) u = a;
    else break;
    if (u === i) break;
  }
  return { startNode: u, endNode: i };
}
function or(e, t, r, n, u = [], i) {
  let { locStart: o, locEnd: s } = r, a = o(e), D = s(e);
  if (!(t > D || t < a || i === "rangeEnd" && t === a || i === "rangeStart" && t === D)) {
    for (let l of ut(e, r)) {
      let p = or(l, t, r, n, [e, ...u], i);
      if (p) return p;
    }
    if (!n || n(e, u[0])) return { node: e, parentNodes: u };
  }
}
function Yi(e, t) {
  return t !== "DeclareExportDeclaration" && e !== "TypeParameterDeclaration" && (e === "Directive" || e === "TypeAlias" || e === "TSExportAssignment" || e.startsWith("Declare") || e.startsWith("TSDeclare") || e.endsWith("Statement") || e.endsWith("Declaration"));
}
var Qn = /* @__PURE__ */ new Set(["JsonRoot", "ObjectExpression", "ArrayExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "UnaryExpression", "TemplateLiteral"]), ji = /* @__PURE__ */ new Set(["OperationDefinition", "FragmentDefinition", "VariableDefinition", "TypeExtensionDefinition", "ObjectTypeDefinition", "FieldDefinition", "DirectiveDefinition", "EnumTypeDefinition", "EnumValueDefinition", "InputValueDefinition", "InputObjectTypeDefinition", "SchemaDefinition", "OperationTypeDefinition", "InterfaceTypeDefinition", "UnionTypeDefinition", "ScalarTypeDefinition"]);
function Xn(e, t, r) {
  if (!t) return false;
  switch (e.parser) {
    case "flow":
    case "babel":
    case "babel-flow":
    case "babel-ts":
    case "typescript":
    case "acorn":
    case "espree":
    case "meriyah":
    case "__babel_estree":
      return Yi(t.type, r == null ? void 0 : r.type);
    case "json":
    case "json5":
    case "jsonc":
    case "json-stringify":
      return Qn.has(t.type);
    case "graphql":
      return ji.has(t.kind);
    case "vue":
      return t.tag !== "root";
  }
  return false;
}
function Zn(e, t, r) {
  let { rangeStart: n, rangeEnd: u, locStart: i, locEnd: o } = t;
  Pe.ok(u > n);
  let s = e.slice(n, u).search(/\S/u), a = s === -1;
  if (!a) for (n += s; u > n && !/\S/u.test(e[u - 1]); --u) ;
  let D = or(r, n, t, (d, c) => Xn(t, d, c), [], "rangeStart"), l = a ? D : or(r, u, t, (d) => Xn(t, d), [], "rangeEnd");
  if (!D || !l) return { rangeStart: 0, rangeEnd: 0 };
  let p, f;
  if (Pi(t)) {
    let d = Ii(D, l);
    p = d, f = d;
  } else ({ startNode: p, endNode: f } = Ri(D, l, t));
  return { rangeStart: Math.min(i(p), i(f)), rangeEnd: Math.max(o(p), o(f)) };
}
var nu = "\uFEFF", eu = Symbol("cursor");
async function uu(e, t, r = 0) {
  if (!e || e.trim().length === 0) return { formatted: "", cursorOffset: -1, comments: [] };
  let { ast: n, text: u } = await fe(e, t);
  t.cursorOffset >= 0 && (t = { ...t, ...Gn(n, t) });
  let i = await He(n, t);
  r > 0 && (i = Ze([K, i], r, t.tabWidth));
  let o = Ce(i, t);
  if (r > 0) {
    let a = o.formatted.trim();
    o.cursorNodeStart !== void 0 && (o.cursorNodeStart -= o.formatted.indexOf(a), o.cursorNodeStart < 0 && (o.cursorNodeStart = 0, o.cursorNodeText = o.cursorNodeText.trimStart()), o.cursorNodeStart + o.cursorNodeText.length > a.length && (o.cursorNodeText = o.cursorNodeText.trimEnd())), o.formatted = a + be(t.endOfLine);
  }
  let s = t[Symbol.for("comments")];
  if (t.cursorOffset >= 0) {
    let a, D, l, p;
    if ((t.cursorNode || t.nodeBeforeCursor || t.nodeAfterCursor) && o.cursorNodeText) if (l = o.cursorNodeStart, p = o.cursorNodeText, t.cursorNode) a = t.locStart(t.cursorNode), D = u.slice(a, t.locEnd(t.cursorNode));
    else {
      if (!t.nodeBeforeCursor && !t.nodeAfterCursor) throw new Error("Cursor location must contain at least one of cursorNode, nodeBeforeCursor, nodeAfterCursor");
      a = t.nodeBeforeCursor ? t.locEnd(t.nodeBeforeCursor) : 0;
      let h = t.nodeAfterCursor ? t.locStart(t.nodeAfterCursor) : u.length;
      D = u.slice(a, h);
    }
    else a = 0, D = u, l = 0, p = o.formatted;
    let f = t.cursorOffset - a;
    if (D === p) return { formatted: o.formatted, cursorOffset: l + f, comments: s };
    let d = D.split("");
    d.splice(f, 0, eu);
    let c = p.split(""), F = yr(d, c), m = l;
    for (let h of F) if (h.removed) {
      if (h.value.includes(eu)) break;
    } else m += h.count;
    return { formatted: o.formatted, cursorOffset: m, comments: s };
  }
  return { formatted: o.formatted, cursorOffset: -1, comments: s };
}
async function Hi(e, t) {
  let { ast: r, text: n } = await fe(e, t), { rangeStart: u, rangeEnd: i } = Zn(n, t, r), o = n.slice(u, i), s = Math.min(u, n.lastIndexOf(`
`, u) + 1), a = n.slice(s, u).match(/^\s*/u)[0], D = ge(a, t.tabWidth), l = await uu(o, { ...t, rangeStart: 0, rangeEnd: Number.POSITIVE_INFINITY, cursorOffset: t.cursorOffset > u && t.cursorOffset <= i ? t.cursorOffset - u : -1, endOfLine: "lf" }, D), p = l.formatted.trimEnd(), { cursorOffset: f } = t;
  f > i ? f += p.length - o.length : l.cursorOffset >= 0 && (f = l.cursorOffset + u);
  let d = n.slice(0, u) + p + n.slice(i);
  if (t.endOfLine !== "lf") {
    let c = be(t.endOfLine);
    f >= 0 && c === `\r
` && (f += Nt(d.slice(0, f), `
`)), d = ne(false, d, `
`, c);
  }
  return { formatted: d, cursorOffset: f, comments: l.comments };
}
function sr(e, t, r) {
  return typeof t != "number" || Number.isNaN(t) || t < 0 || t > e.length ? r : t;
}
function tu(e, t) {
  let { cursorOffset: r, rangeStart: n, rangeEnd: u } = t;
  return r = sr(e, r, -1), n = sr(e, n, 0), u = sr(e, u, e.length), { ...t, cursorOffset: r, rangeStart: n, rangeEnd: u };
}
function iu(e, t) {
  let { cursorOffset: r, rangeStart: n, rangeEnd: u, endOfLine: i } = tu(e, t), o = e.charAt(0) === nu;
  if (o && (e = e.slice(1), r--, n--, u--), i === "auto" && (i = Ar(e)), e.includes("\r")) {
    let s = (a) => Nt(e.slice(0, Math.max(a, 0)), `\r
`);
    r -= s(r), n -= s(n), u -= s(u), e = vr(e);
  }
  return { hasBOM: o, text: e, options: tu(e, { ...t, cursorOffset: r, rangeStart: n, rangeEnd: u, endOfLine: i }) };
}
async function ru(e, t) {
  let r = await Et(t);
  return !r.hasPragma || r.hasPragma(e);
}
async function ar(e, t) {
  let { hasBOM: r, text: n, options: u } = iu(e, await se(t));
  if (u.rangeStart >= u.rangeEnd && n !== "" || u.requirePragma && !await ru(n, u)) return { formatted: e, cursorOffset: t.cursorOffset, comments: [] };
  let i;
  return u.rangeStart > 0 || u.rangeEnd < n.length ? i = await Hi(n, u) : (!u.requirePragma && u.insertPragma && u.printer.insertPragma && !await ru(n, u) && (n = u.printer.insertPragma(n)), i = await uu(n, u)), r && (i.formatted = nu + i.formatted, i.cursorOffset >= 0 && i.cursorOffset++), i;
}
async function ou(e, t, r) {
  let { text: n, options: u } = iu(e, await se(t)), i = await fe(n, u);
  return r && (r.preprocessForPrint && (i.ast = await ir(i.ast, u)), r.massage && (i.ast = Kn(i.ast, u))), i;
}
async function su(e, t) {
  t = await se(t);
  let r = await He(e, t);
  return Ce(r, t);
}
async function au(e, t) {
  let r = Vr(e), { formatted: n } = await ar(r, { ...t, parser: "__js_expression" });
  return n;
}
async function Du(e, t) {
  t = await se(t);
  let { ast: r } = await fe(e, t);
  return He(r, t);
}
async function lu(e, t) {
  return Ce(e, await se(t));
}
var Dr = {};
vt(Dr, { builders: () => $i, printer: () => Mi, utils: () => Vi });
var $i = { join: Se, line: Qe, softline: $r, hardline: K, literalline: Xe, group: kt, conditionalGroup: Ir, fill: Rr, lineSuffix: Te, lineSuffixBoundary: Hr, cursor: Z, breakParent: he, ifBreak: Yr, trim: Wr, indent: le, indentIfBreak: jr, align: De, addAlignmentToDoc: Ze, markAsRoot: Lr, dedentToRoot: kr, dedent: Pr, hardlineWithoutBreakParent: ke, literallineWithoutBreakParent: Lt, label: Mr, concat: (e) => e }, Mi = { printDocToString: Ce }, Vi = { willBreak: xr, traverseDoc: Fe, findInDoc: Je, mapDoc: Oe, removeLines: Nr, stripTrailingHardline: qe, replaceEndOfLine: Or, canBreak: Sr };
var cu = "3.5.3";
var cr = {};
vt(cr, { addDanglingComment: () => re, addLeadingComment: () => ue, addTrailingComment: () => ie, getAlignmentSize: () => ge, getIndentSize: () => fu, getMaxContinuousCount: () => du, getNextNonSpaceNonCommentCharacter: () => pu, getNextNonSpaceNonCommentCharacterIndex: () => no, getPreferredQuote: () => mu, getStringWidth: () => Le, hasNewline: () => V, hasNewlineInRange: () => hu, hasSpaces: () => Eu, isNextLineEmpty: () => so, isNextLineEmptyAfterIndex: () => Ct, isPreviousLineEmpty: () => io, makeString: () => Cu, skip: () => Ae, skipEverythingButNewLine: () => nt, skipInlineComment: () => Be, skipNewline: () => W, skipSpaces: () => S, skipToLineEnd: () => rt, skipTrailingComment: () => we, skipWhitespace: () => tn });
function Ui(e, t) {
  if (t === false) return false;
  if (e.charAt(t) === "/" && e.charAt(t + 1) === "*") {
    for (let r = t + 2; r < e.length; ++r) if (e.charAt(r) === "*" && e.charAt(r + 1) === "/") return r + 2;
  }
  return t;
}
var Be = Ui;
function zi(e, t) {
  return t === false ? false : e.charAt(t) === "/" && e.charAt(t + 1) === "/" ? nt(e, t) : t;
}
var we = zi;
function Gi(e, t) {
  let r = null, n = t;
  for (; n !== r; ) r = n, n = S(e, n), n = Be(e, n), n = we(e, n), n = W(e, n);
  return n;
}
var We = Gi;
function Ki(e, t) {
  let r = null, n = t;
  for (; n !== r; ) r = n, n = rt(e, n), n = Be(e, n), n = S(e, n);
  return n = we(e, n), n = W(e, n), n !== false && V(e, n);
}
var Ct = Ki;
function Ji(e, t) {
  let r = e.lastIndexOf(`
`);
  return r === -1 ? 0 : ge(e.slice(r + 1).match(/^[\t ]*/u)[0], t);
}
var fu = Ji;
function lr(e) {
  if (typeof e != "string") throw new TypeError("Expected a string");
  return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function qi(e, t) {
  let r = e.match(new RegExp(`(${lr(t)})+`, "gu"));
  return r === null ? 0 : r.reduce((n, u) => Math.max(n, u.length / t.length), 0);
}
var du = qi;
function Xi(e, t) {
  let r = We(e, t);
  return r === false ? "" : e.charAt(r);
}
var pu = Xi;
var gt = "'", Fu = '"';
function Qi(e, t) {
  let r = t === true || t === gt ? gt : Fu, n = r === gt ? Fu : gt, u = 0, i = 0;
  for (let o of e) o === r ? u++ : o === n && i++;
  return u > i ? n : r;
}
var mu = Qi;
function Zi(e, t, r) {
  for (let n = t; n < r; ++n) if (e.charAt(n) === `
`) return true;
  return false;
}
var hu = Zi;
function eo(e, t, r = {}) {
  return S(e, r.backwards ? t - 1 : t, r) !== t;
}
var Eu = eo;
function to(e, t, r) {
  let n = t === '"' ? "'" : '"', i = ne(false, e, /\\(.)|(["'])/gsu, (o, s, a) => s === n ? s : a === t ? "\\" + a : a || (r && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(s) ? s : "\\" + s));
  return t + i + t;
}
var Cu = to;
function ro(e, t, r) {
  return We(e, r(t));
}
function no(e, t) {
  return arguments.length === 2 || typeof t == "number" ? We(e, t) : ro(...arguments);
}
function uo(e, t, r) {
  return Ie(e, r(t));
}
function io(e, t) {
  return arguments.length === 2 || typeof t == "number" ? Ie(e, t) : uo(...arguments);
}
function oo(e, t, r) {
  return Ct(e, r(t));
}
function so(e, t) {
  return arguments.length === 2 || typeof t == "number" ? Ct(e, t) : oo(...arguments);
}
function de(e, t = 1) {
  return async (...r) => {
    let n = r[t] ?? {}, u = n.plugins ?? [];
    return r[t] = { ...n, plugins: Array.isArray(u) ? u : Object.values(u) }, e(...r);
  };
}
var gu = de(ar);
async function yu(e, t) {
  let { formatted: r } = await gu(e, { ...t, cursorOffset: -1 });
  return r;
}
async function ao(e, t) {
  return await yu(e, t) === e;
}
var Do = de(it, 0), lo = { parse: de(ou), formatAST: de(su), formatDoc: de(au), printToDoc: de(Du), printDocToString: de(lu) };
const {
  builders: { group, hardline, indent, softline }
} = Dr;
async function printTemplateContent(text, textToDoc, options2) {
  return await textToDoc(text.trim(), {
    ...options2,
    parser: "glimmer",
    singleQuote: getTemplateSingleQuote(options2)
  });
}
function printTemplateTag(content) {
  const contents = flattenDoc(content);
  const useHardline = contents.some(
    (c) => (
      // contains angle bracket tag
      /<.+>/.test(c) || // contains hbs block
      /{{~?#.+}}/.test(c)
    )
  );
  const line = useHardline ? hardline : softline;
  const doc2 = [
    TEMPLATE_TAG_OPEN,
    indent([line, group(content)]),
    line,
    TEMPLATE_TAG_CLOSE
  ];
  return [group(doc2)];
}
const estreePrinter = estreeExports.printers["estree"];
const printer = {
  ...estreePrinter,
  getVisitorKeys(node2, nonTraversableKeys) {
    var _a;
    if (node2 && isGlimmerTemplate(node2)) {
      return [];
    }
    return ((_a = estreePrinter.getVisitorKeys) == null ? void 0 : _a.call(estreePrinter, node2, nonTraversableKeys)) || [];
  },
  print(path2, options2, print, args) {
    var _a;
    const { node: node2 } = path2;
    if (isGlimmerTemplateParent(node2)) {
      if (checkPrettierIgnore(path2)) {
        return printRawText(path2, options2);
      } else {
        let printed = estreePrinter.print(path2, options2, print, args);
        assert("Expected Glimmer doc to be an array", Array.isArray(printed));
        trimPrinted(printed);
        if (docMatchesString(printed[0], ";")) {
          printed.shift();
        }
        if (docMatchesString(printed.at(-1), ";")) {
          printed.pop();
        }
        trimPrinted(printed);
        if (docMatchesString(printed[0], "export") && docMatchesString(printed[1], "default")) {
          printed = printed.slice(2);
          trimPrinted(printed);
        }
        if (options2.templateExportDefault) {
          printed.unshift("export ", "default ");
        }
        saveCurrentPrintOnSiblingNode(path2, printed);
        return printed;
      }
    }
    if (options2.semi && ((_a = node2 == null ? void 0 : node2.extra) == null ? void 0 : _a["prevTemplatePrinted"])) {
      fixPreviousPrint(
        node2.extra["prevTemplatePrinted"],
        path2,
        options2,
        print,
        args
      );
    }
    return estreePrinter.print(path2, options2, print, args);
  },
  /** Prints embedded GlimmerExpressions/GlimmerTemplates. */
  embed(path2, embedOptions) {
    const { node: node2 } = path2;
    return async (textToDoc) => {
      if (node2 && isGlimmerTemplate(node2)) {
        if (checkPrettierIgnore(path2)) {
          return printRawText(path2, embedOptions);
        }
        try {
          const content = await printTemplateContent(
            node2.extra.template.contents,
            textToDoc,
            embedOptions
          );
          const printed = printTemplateTag(content);
          saveCurrentPrintOnSiblingNode(path2, printed);
          return printed;
        } catch (error2) {
          console.error(error2);
          const printed = [printRawText(path2, embedOptions)];
          saveCurrentPrintOnSiblingNode(path2, printed);
          return printed;
        }
      }
      return;
    };
  }
};
function trimPrinted(printed) {
  while (docMatchesString(printed[0], "")) {
    printed.shift();
  }
  while (docMatchesString(printed.at(-1), "")) {
    printed.pop();
  }
}
function printRawText({ node: node2 }, options2) {
  if (!node2) {
    return "";
  }
  if (isGlimmerTemplate(node2)) {
    return TEMPLATE_TAG_OPEN + node2.extra.template.contents + TEMPLATE_TAG_CLOSE;
  }
  assert("expected start", typeof node2.start == "number");
  assert("expected end", typeof node2.end == "number");
  return options2.originalText.slice(node2.start, node2.end);
}
function hasPrettierIgnore(path2) {
  var _a, _b, _c;
  return ((_c = (_b = (_a = path2.node) == null ? void 0 : _a.leadingComments) == null ? void 0 : _b.at(-1)) == null ? void 0 : _c.value.trim()) === "prettier-ignore";
}
function checkPrettierIgnore(path2) {
  return hasPrettierIgnore(path2) || !!path2.getParentNode() && path2.callParent((parent) => checkPrettierIgnore(parent));
}
function docMatchesString(doc, string2) {
  return typeof doc === "string" && doc.trim() === string2;
}
const languages = [
  {
    name: "Ember Template Tag (gjs)",
    aliases: ["gjs", "glimmer-js"],
    extensions: [".gjs"],
    vscodeLanguageIds: ["glimmer-js"],
    parsers: [PARSER_NAME],
    group: "JavaScript"
  },
  {
    name: "Ember Template Tag (gts)",
    aliases: ["gts", "glimmer-ts"],
    extensions: [".gts"],
    vscodeLanguageIds: ["glimmer-ts"],
    parsers: [PARSER_NAME],
    group: "TypeScript"
  }
];
const parsers = {
  [PARSER_NAME]: parser
};
const printers = {
  [PRINTER_NAME]: printer
};
const plugin = {
  languages,
  parsers,
  printers,
  options: options$3
};
module.exports = plugin;
