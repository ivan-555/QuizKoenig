export function isAsyncCallExpression(callExpressionNode: import("estree").Node, assertVar: string): boolean;
export function isStop(calleeNode: import("estree").Node): boolean;
export function isStart(calleeNode: import("estree").Node): boolean;
export function isTest(calleeNode: import("estree").Node): boolean;
export function isModule(calleeNode: import("estree").Node): boolean;
export function isInModule(propertyNode: import("eslint").Rule.Node): boolean;
export function isModuleHookPropertyKey(identifierNode: import("estree").Node): boolean;
export function isAsyncTest(calleeNode: import("estree").Node): boolean;
export function isOnly(calleeNode: import("estree").Node): boolean;
export function isSkip(calleeNode: import("estree").Node): boolean;
export function getAssertContextNameForTest(argumentsNodes: import("estree").Node[]): string | null;
export function getAssertContextName(functionExpr: import("estree").Node): string | null;
export function isAssertion(calleeNode: import("estree").Node, assertVar: string | null): boolean;
export function getAllowedArities(calleeNode: import("estree").Node, assertVar: string): number[];
export function isComparativeAssertion(calleeNode: import("estree").Node, assertVar: string | null): boolean;
export function shouldCompareActualFirst(calleeNode: import("estree").Node, assertVar: string | null): boolean;
export function createAssertionCheck(assertions: string[], errorMessageConfig: Record<string, {
    unexpectedGlobalAssertionMessage?: string;
    unexpectedLocalAssertionMessage?: string;
    unexpectedGlobalAssertionMessageId?: string;
    unexpectedLocalAssertionMessageId?: string;
}>): (context: import("eslint").Rule.RuleContext) => {
    /**
     * @param {import('estree').Node} node
     */
    CallExpression: (node: import("estree").Node) => void;
    /**
     * @param {import('estree').Node} node
     */
    "CallExpression:exit": (node: import("estree").Node) => void;
};
export function getAssertionNames(): string[];
