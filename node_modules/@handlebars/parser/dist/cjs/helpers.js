var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import Exception from './exception.js';
function validateClose(open, close) {
    close = close.path ? close.path.original : close;
    if (open.path.original !== close) {
        var errorNode = { loc: open.path.loc };
        throw new Exception(open.path.original + " doesn't match " + close, errorNode);
    }
}
export function SourceLocation(source, locInfo) {
    this.source = source;
    this.start = {
        line: locInfo.first_line,
        column: locInfo.first_column,
    };
    this.end = {
        line: locInfo.last_line,
        column: locInfo.last_column,
    };
}
export function id(token) {
    if (/^\[.*\]$/.test(token)) {
        return token.substring(1, token.length - 1);
    }
    else {
        return token;
    }
}
export function stripFlags(open, close) {
    return {
        open: open.charAt(2) === '~',
        close: close.charAt(close.length - 3) === '~',
    };
}
export function stripComment(comment) {
    return comment.replace(/^\{\{~?!-?-?/, '').replace(/-?-?~?\}\}$/, '');
}
export function preparePath(data, sexpr, parts, loc) {
    loc = this.locInfo(loc);
    var original;
    if (data) {
        original = '@';
    }
    else if (sexpr) {
        original = sexpr.original + '.';
    }
    else {
        original = '';
    }
    var tail = [];
    var depth = 0;
    for (var i = 0, l = parts.length; i < l; i++) {
        var part = parts[i].part;
        // If we have [] syntax then we do not treat path references as operators,
        // i.e. foo.[this] resolves to approximately context.foo['this']
        var isLiteral = parts[i].original !== part;
        var separator = parts[i].separator;
        var partPrefix = separator === '.#' ? '#' : '';
        original += (separator || '') + part;
        if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
            if (tail.length > 0) {
                throw new Exception('Invalid path: ' + original, { loc: loc });
            }
            else if (part === '..') {
                depth++;
            }
        }
        else {
            tail.push("".concat(partPrefix).concat(part));
        }
    }
    var head = sexpr || tail.shift();
    return {
        type: 'PathExpression',
        this: original.startsWith('this.'),
        data: data,
        depth: depth,
        head: head,
        tail: tail,
        parts: head ? __spreadArray([head], tail, true) : tail,
        original: original,
        loc: loc,
    };
}
export function prepareMustache(path, params, hash, open, strip, locInfo) {
    // Must use charAt to support IE pre-10
    var escapeFlag = open.charAt(3) || open.charAt(2), escaped = escapeFlag !== '{' && escapeFlag !== '&';
    var decorator = /\*/.test(open);
    return {
        type: decorator ? 'Decorator' : 'MustacheStatement',
        path: path,
        params: params,
        hash: hash,
        escaped: escaped,
        strip: strip,
        loc: this.locInfo(locInfo),
    };
}
export function prepareRawBlock(openRawBlock, contents, close, locInfo) {
    validateClose(openRawBlock, close);
    locInfo = this.locInfo(locInfo);
    var program = {
        type: 'Program',
        body: contents,
        strip: {},
        loc: locInfo,
    };
    return {
        type: 'BlockStatement',
        path: openRawBlock.path,
        params: openRawBlock.params,
        hash: openRawBlock.hash,
        program: program,
        openStrip: {},
        inverseStrip: {},
        closeStrip: {},
        loc: locInfo,
    };
}
export function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
    if (close && close.path) {
        validateClose(openBlock, close);
    }
    var decorator = /\*/.test(openBlock.open);
    program.blockParams = openBlock.blockParams;
    var inverse, inverseStrip;
    if (inverseAndProgram) {
        if (decorator) {
            throw new Exception('Unexpected inverse block on decorator', inverseAndProgram);
        }
        if (inverseAndProgram.chain) {
            inverseAndProgram.program.body[0].closeStrip = close.strip;
        }
        inverseStrip = inverseAndProgram.strip;
        inverse = inverseAndProgram.program;
    }
    if (inverted) {
        inverted = inverse;
        inverse = program;
        program = inverted;
    }
    return {
        type: decorator ? 'DecoratorBlock' : 'BlockStatement',
        path: openBlock.path,
        params: openBlock.params,
        hash: openBlock.hash,
        program: program,
        inverse: inverse,
        openStrip: openBlock.strip,
        inverseStrip: inverseStrip,
        closeStrip: close && close.strip,
        loc: this.locInfo(locInfo),
    };
}
export function prepareProgram(statements, loc) {
    if (!loc && statements.length) {
        var firstLoc = statements[0].loc, lastLoc = statements[statements.length - 1].loc;
        /* istanbul ignore else */
        if (firstLoc && lastLoc) {
            loc = {
                source: firstLoc.source,
                start: {
                    line: firstLoc.start.line,
                    column: firstLoc.start.column,
                },
                end: {
                    line: lastLoc.end.line,
                    column: lastLoc.end.column,
                },
            };
        }
    }
    return {
        type: 'Program',
        body: statements,
        strip: {},
        loc: loc,
    };
}
export function preparePartialBlock(open, program, close, locInfo) {
    validateClose(open, close);
    return {
        type: 'PartialBlockStatement',
        name: open.path,
        params: open.params,
        hash: open.hash,
        program: program,
        openStrip: open.strip,
        closeStrip: close && close.strip,
        loc: this.locInfo(locInfo),
    };
}
//# sourceMappingURL=data:application/json;base64,