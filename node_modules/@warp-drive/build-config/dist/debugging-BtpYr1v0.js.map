{"version":3,"file":"debugging-BtpYr1v0.js","sources":["../src/debugging.ts"],"sourcesContent":["/**\n  @module @warp-drive/build-config\n */\n/**\n * ## Debug Logging\n *\n * Many portions of the internals are helpfully instrumented with logging.\n * This instrumentation is always removed from production builds.\n *\n * Log instrumentation is \"regionalized\" to specific concepts and concerns\n * to enable you to enable/disable just the areas you are interested in.\n *\n * To activate a particular group of logs set the appropriate flag to `true`\n * either in your build config or via the runtime helper.\n *\n *\n * ### Activation Via Runtime Helper\n *\n * A runtime helper is attached to `globalThis` to enable activation of the logs\n * from anywhere in your application including from the devtools panel.\n *\n * The runtime helper overrides any build config settings for the given flag\n * for the current browser tab. It stores the configuration you give it in\n * `sessionStorage` so that it persists across page reloads of the current tab,\n * but not across browser tabs or windows. Thus if you need to deactivate the\n * logging, you can call the helper again with the same flag set to `false` or\n * just open a new tab/window.\n *\n * Example Usage:\n *\n * ```ts\n * setWarpDriveLogging({\n *   LOG_CACHE: true,\n *   LOG_REQUESTS: true,\n * })\n * ```\n *\n * ### Activation Via Build Config\n *\n * ```ts\n * setConfig(__dirname, app, {\n *   debug: {\n *     LOG_CACHE: false, // data store received to update cache with\n *     LOG_NOTIFICATIONS: false,\n *     LOG_REQUESTS: false,\n *     LOG_REQUEST_STATUS: false,\n *     LOG_IDENTIFIERS: false,\n *     LOG_GRAPH: false,\n *     LOG_INSTANCE_CACHE: false,\n *     LOG_METRIC_COUNTS: false,\n *     DEBUG_RELATIONSHIP_NOTIFICATIONS: false,\n *   }\n * });\n * ```\n *\n * @class DebugLogging\n * @public\n */\n/**\n * log cache updates for both local\n * and remote state. Note in some older versions\n * this was called `LOG_PAYLOADS` and was one\n * of three flags that controlled logging of\n * cache updates. This is now the only flag.\n *\n * The others were `LOG_OPERATIONS` and `LOG_MUTATIONS`.\n *\n * @property LOG_CACHE\n * @type {Boolean}\n * @public\n */\nexport const LOG_CACHE: boolean = false;\n/**\n * Log decisions made by the Basic CachePolicy\n *\n * @property LOG_CACHE_POLICY\n * @type {Boolean}\n * @public\n */\nexport const LOG_CACHE_POLICY: boolean = false;\n\n/**\n * log notifications received by the NotificationManager\n *\n * @property LOG_NOTIFICATIONS\n * @type {Boolean}\n * @public\n */\nexport const LOG_NOTIFICATIONS: boolean = false;\n/**\n * log requests issued by the RequestManager\n *\n * @property LOG_REQUESTS\n * @type {Boolean}\n * @public\n */\nexport const LOG_REQUESTS: boolean = false;\n/**\n * log updates to requests the store has issued to\n * the network (adapter) to fulfill.\n *\n * @property LOG_REQUEST_STATUS\n * @type {Boolean}\n * @public\n */\nexport const LOG_REQUEST_STATUS: boolean = false;\n/**\n * log peek, generation and updates to\n * Record Identifiers.\n *\n * @property LOG_IDENTIFIERS\n * @type {Boolean}\n\n * @public\n */\nexport const LOG_IDENTIFIERS: boolean = false;\n/**\n * log updates received by the graph (relationship pointer storage)\n *\n * @property LOG_GRAPH\n * @type {Boolean}\n * @public\n */\nexport const LOG_GRAPH: boolean = false;\n/**\n * log creation/removal of RecordData and Record\n * instances.\n *\n * @property LOG_INSTANCE_CACHE\n * @type {Boolean}\n * @public\n */\nexport const LOG_INSTANCE_CACHE: boolean = false;\n/**\n * Log key count metrics, useful for performance\n * debugging.\n *\n * @property LOG_METRIC_COUNTS\n * @type {Boolean}\n * @public\n */\nexport const LOG_METRIC_COUNTS: boolean = false;\n/**\n * Helps when debugging causes of a change notification\n * when processing an update to a hasMany relationship.\n *\n * @property DEBUG_RELATIONSHIP_NOTIFICATIONS\n * @type {Boolean}\n * @public\n */\nexport const DEBUG_RELATIONSHIP_NOTIFICATIONS: boolean = false;\n\n/**\n * A private flag to enable logging of the native Map/Set\n * constructor and method calls.\n *\n * EXTREMELY MALPERFORMANT\n *\n * LOG_METRIC_COUNTS must also be enabled.\n *\n * @typedoc\n */\nexport const __INTERNAL_LOG_NATIVE_MAP_SET_COUNTS: boolean = false;\n"],"names":["LOG_CACHE","LOG_CACHE_POLICY","LOG_NOTIFICATIONS","LOG_REQUESTS","LOG_REQUEST_STATUS","LOG_IDENTIFIERS","LOG_GRAPH","LOG_INSTANCE_CACHE","LOG_METRIC_COUNTS","DEBUG_RELATIONSHIP_NOTIFICATIONS","__INTERNAL_LOG_NATIVE_MAP_SET_COUNTS"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,SAAkB,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,gBAAyB,GAAG;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAA0B,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,YAAqB,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,kBAA2B,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO,MAAMC,eAAwB,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,SAAkB,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,kBAA2B,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAA0B,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,gCAAyC,GAAG;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,oCAA6C,GAAG;;;;;;;;;;;;;;;;;;;"}