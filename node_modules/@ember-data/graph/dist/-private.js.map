{"version":3,"file":"-private.js","sources":["../src/-private/coerce-id.ts","../src/-private/-utils.ts","../src/-private/-edge-definition.ts","../src/-private/debug/assert-polymorphic-type.ts","../src/-private/operations/replace-related-records.ts","../src/-private/operations/replace-related-record.ts","../src/-private/-diff.ts","../src/-private/-state.ts","../src/-private/edges/collection.ts","../src/-private/edges/implicit.ts","../src/-private/edges/resource.ts","../src/-private/operations/add-to-related-records.ts","../src/-private/operations/merge-identifier.ts","../src/-private/operations/remove-from-related-records.ts","../src/-private/normalize-link.ts","../src/-private/operations/update-relationship.ts","../src/-private/graph.ts","../src/-private.ts"],"sourcesContent":["import { deprecate } from '@ember/debug';\n\nimport { DEPRECATE_NON_STRICT_ID } from '@warp-drive/build-config/deprecations';\nimport { assert } from '@warp-drive/build-config/macros';\n\n// Used by the store to normalize IDs entering the store.  Despite the fact\n// that developers may provide IDs as numbers (e.g., `store.findRecord('person', 1)`),\n// it is important that internally we use strings, since IDs may be serialized\n// and lose type information.  For example, Ember's router may put a record's\n// ID into the URL, and if we later try to deserialize that URL and find the\n// corresponding record, we will not know if it is a string or a number.\ntype Coercable = string | number | boolean | null | undefined | symbol;\n\nexport function coerceId(id: Coercable): string | null {\n  if (DEPRECATE_NON_STRICT_ID) {\n    let normalized: string | null;\n    if (id === null || id === undefined || id === '') {\n      normalized = null;\n    } else {\n      normalized = String(id);\n    }\n\n    deprecate(\n      `The resource id '<${typeof id}> ${String(\n        id\n      )} ' is not normalized. Update your application code to use '${JSON.stringify(normalized)}' instead.`,\n      normalized === id,\n      {\n        id: 'ember-data:deprecate-non-strict-id',\n        until: '6.0',\n        for: 'ember-data',\n        since: {\n          available: '4.13',\n          enabled: '5.3',\n        },\n      }\n    );\n\n    return normalized;\n  }\n\n  assert(\n    `Resource IDs must be a non-empty string or null. Received '${String(id)}'.`,\n    id === null || (typeof id === 'string' && id.length > 0)\n  );\n\n  return id;\n}\n\nexport function ensureStringId(id: Coercable): string {\n  let normalized: string | null = null;\n  if (typeof id === 'string') {\n    normalized = id.length > 0 ? id : null;\n  } else if (typeof id === 'number' && !isNaN(id)) {\n    normalized = String(id);\n  }\n\n  assert(`Expected id to be a string or number, received ${String(id)}`, normalized !== null);\n\n  return normalized;\n}\n","import { warn } from '@ember/debug';\n\nimport type { Store } from '@ember-data/store/-private';\nimport { peekCache } from '@ember-data/store/-private';\nimport type { CacheCapabilitiesManager } from '@ember-data/store/types';\nimport { LOG_GRAPH } from '@warp-drive/build-config/debugging';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { UpdateResourceRelationshipOperation } from '@warp-drive/core-types/cache/operations';\nimport type { UpdateRelationshipOperation } from '@warp-drive/core-types/graph';\nimport type { ResourceIdentifierObject } from '@warp-drive/core-types/spec/json-api-raw';\n\nimport type { UpgradedMeta } from './-edge-definition';\nimport { coerceId } from './coerce-id';\nimport type { CollectionEdge } from './edges/collection';\nimport type { ImplicitEdge } from './edges/implicit';\nimport type { ResourceEdge } from './edges/resource';\nimport type { Graph, GraphEdge } from './graph';\n\nexport function getStore(wrapper: CacheCapabilitiesManager | { _store: Store }): Store {\n  assert(`expected a private _store property`, '_store' in wrapper);\n  return wrapper._store;\n}\n\nexport function expandingGet<T>(cache: Record<string, Record<string, T>>, key1: string, key2: string): T | undefined {\n  const mainCache = (cache[key1] = cache[key1] || Object.create(null));\n  return mainCache[key2];\n}\n\nexport function expandingSet<T>(cache: Record<string, Record<string, T>>, key1: string, key2: string, value: T): void {\n  const mainCache = (cache[key1] = cache[key1] || Object.create(null));\n  mainCache[key2] = value;\n}\n\nexport function assertValidRelationshipPayload(\n  graph: Graph,\n  op: UpdateRelationshipOperation | UpdateResourceRelationshipOperation\n) {\n  const relationship = graph.get(op.record, op.field);\n  assert(`Cannot update an implicit relationship`, isHasMany(relationship) || isBelongsTo(relationship));\n  const payload = op.value;\n  const { definition, identifier, state } = relationship;\n  const { type } = identifier;\n  const { field } = op;\n  const { isAsync, kind } = definition;\n\n  if (payload.links) {\n    warn(\n      `You pushed a record of type '${type}' with a relationship '${field}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`,\n      isAsync || !!payload.data || state.hasReceivedData,\n      {\n        id: 'ds.store.push-link-for-sync-relationship',\n      }\n    );\n  } else if (payload.data) {\n    if (kind === 'belongsTo') {\n      assert(\n        `A ${type} record was pushed into the store with the value of ${field} being ${inspect(\n          payload.data\n        )}, but ${field} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`,\n        !Array.isArray(payload.data)\n      );\n      assertRelationshipData(getStore(graph.store), identifier, payload.data, definition);\n    } else if (kind === 'hasMany') {\n      assert(\n        `A ${type} record was pushed into the store with the value of ${field} being '${inspect(\n          payload.data\n        )}', but ${field} is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.`,\n        Array.isArray(payload.data)\n      );\n      if (Array.isArray(payload.data)) {\n        for (let i = 0; i < payload.data.length; i++) {\n          assertRelationshipData(getStore(graph.store), identifier, payload.data[i], definition);\n        }\n      }\n    }\n  }\n}\n\nfunction inspect(value: unknown) {\n  const type = typeof value;\n  if (value === null) {\n    return 'null';\n  }\n  if (type !== 'object') {\n    return type;\n  }\n  if (Array.isArray(value)) {\n    return 'Array';\n  }\n  if (value instanceof Date) {\n    return 'Date';\n  }\n  if (value instanceof RegExp) {\n    return 'RegExp';\n  }\n  if (value instanceof Map) {\n    return 'Map';\n  }\n  if (value instanceof Set) {\n    return 'Set';\n  }\n  return 'object';\n}\n\nexport function isNew(identifier: StableRecordIdentifier): boolean {\n  if (!identifier.id) {\n    return true;\n  }\n  const cache = peekCache(identifier);\n  return Boolean(cache?.isNew(identifier));\n}\n\nexport function isBelongsTo(relationship: GraphEdge): relationship is ResourceEdge {\n  return relationship.definition.kind === 'belongsTo';\n}\n\nexport function isImplicit(relationship: GraphEdge): relationship is ImplicitEdge {\n  return relationship.definition.isImplicit;\n}\n\nexport function isHasMany(relationship: GraphEdge): relationship is CollectionEdge {\n  return relationship.definition.kind === 'hasMany';\n}\n\nexport function forAllRelatedIdentifiers(rel: GraphEdge, cb: (identifier: StableRecordIdentifier) => void): void {\n  if (isBelongsTo(rel)) {\n    if (rel.remoteState) {\n      cb(rel.remoteState);\n    }\n    if (rel.localState && rel.localState !== rel.remoteState) {\n      cb(rel.localState);\n    }\n  } else if (isHasMany(rel)) {\n    // TODO\n    // rel.remoteMembers.forEach(cb);\n    // might be simpler if performance is not a concern\n    for (let i = 0; i < rel.remoteState.length; i++) {\n      const inverseIdentifier = rel.remoteState[i];\n      cb(inverseIdentifier);\n    }\n    rel.additions?.forEach(cb);\n  } else {\n    rel.localMembers.forEach(cb);\n    rel.remoteMembers.forEach((inverseIdentifier) => {\n      if (!rel.localMembers.has(inverseIdentifier)) {\n        cb(inverseIdentifier);\n      }\n    });\n  }\n}\n\n/*\n  Removes the given identifier from BOTH remote AND local state.\n\n  This method is useful when either a deletion or a rollback on a new record\n  needs to entirely purge itself from an inverse relationship.\n  */\nexport function removeIdentifierCompletelyFromRelationship(\n  graph: Graph,\n  relationship: GraphEdge,\n  value: StableRecordIdentifier,\n  silenceNotifications?: boolean\n): void {\n  if (isBelongsTo(relationship)) {\n    if (relationship.remoteState === value) {\n      relationship.remoteState = null;\n    }\n\n    if (relationship.localState === value) {\n      relationship.localState = null;\n      // This allows dematerialized inverses to be rematerialized\n      // we shouldn't be notifying here though, figure out where\n      // a notification was missed elsewhere.\n      if (!silenceNotifications) {\n        notifyChange(graph, relationship);\n      }\n    }\n  } else if (isHasMany(relationship)) {\n    relationship.remoteMembers.delete(value);\n    relationship.additions?.delete(value);\n    const wasInRemovals = relationship.removals?.delete(value);\n\n    const canonicalIndex = relationship.remoteState.indexOf(value);\n    if (canonicalIndex !== -1) {\n      relationship.remoteState.splice(canonicalIndex, 1);\n    }\n\n    if (!wasInRemovals) {\n      const currentIndex = relationship.localState?.indexOf(value);\n      if (currentIndex !== -1 && currentIndex !== undefined) {\n        relationship.localState!.splice(currentIndex, 1);\n        // This allows dematerialized inverses to be rematerialized\n        // we shouldn't be notifying here though, figure out where\n        // a notification was missed elsewhere.\n        if (!silenceNotifications) {\n          notifyChange(graph, relationship);\n        }\n      }\n    }\n  } else {\n    relationship.remoteMembers.delete(value);\n    relationship.localMembers.delete(value);\n  }\n}\n\nexport function notifyChange(graph: Graph, relationship: CollectionEdge | ResourceEdge): void {\n  if (!relationship.accessed) {\n    return;\n  }\n\n  const identifier = relationship.identifier;\n  const key = relationship.definition.key;\n\n  if (identifier === graph._removing) {\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`Graph: ignoring relationship change for removed identifier ${String(identifier)} ${key}`);\n    }\n    return;\n  }\n  if (LOG_GRAPH) {\n    // eslint-disable-next-line no-console\n    console.log(`Graph: notifying relationship change for ${String(identifier)} ${key}`);\n  }\n\n  graph.store.notifyChange(identifier, 'relationships', key);\n}\n\nexport function assertRelationshipData(\n  store: Store,\n  identifier: StableRecordIdentifier,\n  data: ResourceIdentifierObject,\n  meta: UpgradedMeta\n) {\n  assert(\n    `A ${identifier.type} record was pushed into the store with the value of ${meta.key} being '${JSON.stringify(\n      data\n    )}', but ${\n      meta.key\n    } is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`,\n    !Array.isArray(data)\n  );\n  assert(\n    `Encountered a relationship identifier without a type for the ${meta.kind} relationship '${meta.key}' on <${\n      identifier.type\n    }:${String(identifier.id)}>, expected an identifier with type '${meta.type}' but found\\n\\n'${JSON.stringify(\n      data,\n      null,\n      2\n    )}'\\n\\nPlease check your serializer and make sure it is serializing the relationship payload into a JSON API format.`,\n    data === null || ('type' in data && typeof data.type === 'string' && data.type.length)\n  );\n  assert(\n    `Encountered a relationship identifier without an id for the ${meta.kind} relationship '${meta.key}' on <${\n      identifier.type\n    }:${String(identifier.id)}>, expected an identifier but found\\n\\n'${JSON.stringify(\n      data,\n      null,\n      2\n    )}'\\n\\nPlease check your serializer and make sure it is serializing the relationship payload into a JSON API format.`,\n    data === null || !!coerceId(data.id)\n  );\n  if (data?.type === meta.type) {\n    assert(\n      `Missing Schema: Encountered a relationship identifier { type: '${data.type}', id: '${String(\n        data.id\n      )}' } for the '${identifier.type}.${meta.key}' ${meta.kind} relationship on <${identifier.type}:${String(\n        identifier.id\n      )}>, but no schema exists for that type.`,\n      store.schema.hasResource(data)\n    );\n  } else {\n    assert(\n      `Missing Schema: Encountered a relationship identifier with type '${data.type}' for the ${\n        meta.kind\n      } relationship '${meta.key}' on <${identifier.type}:${String(\n        identifier.id\n      )}>, Expected an identifier with type '${meta.type}'. No schema was found for '${data.type}'.`,\n      data === null || !data.type || store.schema.hasResource(data)\n    );\n  }\n}\n","import type Store from '@ember-data/store';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type {\n  CollectionField,\n  FieldSchema,\n  LegacyBelongsToField,\n  LegacyHasManyField,\n  ResourceField,\n} from '@warp-drive/core-types/schema/fields';\n\nimport { expandingGet, expandingSet, getStore } from './-utils';\nimport { assertInheritedSchema } from './debug/assert-polymorphic-type';\nimport type { Graph } from './graph';\n\nexport type EdgeCache = Record<string, Record<string, EdgeDefinition | null>>;\n\nexport type RelationshipField = LegacyBelongsToField | LegacyHasManyField | ResourceField | CollectionField;\nexport type RelationshipFieldKind = RelationshipField['kind'];\nexport type CollectionKind = 'hasMany' | 'collection';\nexport type ResourceKind = 'belongsTo' | 'resource';\nexport const RELATIONSHIP_KINDS = ['belongsTo', 'hasMany', 'resource', 'collection'];\n\nexport function isLegacyField(field: FieldSchema): field is LegacyBelongsToField | LegacyHasManyField {\n  return field.kind === 'belongsTo' || field.kind === 'hasMany';\n}\n\nexport function isRelationshipField(field: FieldSchema): field is RelationshipField {\n  return RELATIONSHIP_KINDS.includes(field.kind);\n}\n\nexport function temporaryConvertToLegacy(\n  field: ResourceField | CollectionField\n): LegacyBelongsToField | LegacyHasManyField {\n  return {\n    kind: field.kind === 'resource' ? 'belongsTo' : 'hasMany',\n    name: field.name,\n    type: field.type,\n    options: Object.assign({}, { async: false, inverse: null, resetOnRemoteUpdate: false as const }, field.options),\n  };\n}\n\n/**\n *\n * Given RHS (Right Hand Side)\n *\n * ```ts\n * class User extends Model {\n *   @hasMany('animal', { async: false, inverse: 'owner' }) pets;\n * }\n * ```\n *\n * Given LHS (Left Hand Side)\n *\n * ```ts\n * class Animal extends Model {\n *  @belongsTo('user', { async: false, inverse: 'pets' }) owner;\n * }\n * ```\n *\n * The UpgradedMeta for the RHS would be:\n *\n * ```ts\n * {\n *   kind: 'hasMany',\n *   key: 'pets',\n *   type: 'animal',\n *   isAsync: false,\n *   isImplicit: false,\n *   isCollection: true,\n *   isPolymorphic: false,\n *   inverseKind: 'belongsTo',\n *   inverseKey: 'owner',\n *   inverseType: 'user',\n *   inverseIsAsync: false,\n *   inverseIsImplicit: false,\n *   inverseIsCollection: false,\n *   inverseIsPolymorphic: false,\n * }\n * ```\n *\n * The UpgradeMeta for the LHS would be:\n *\n * ```ts\n * {\n *   kind: 'belongsTo',\n *   key: 'owner',\n *   type: 'user',\n *   isAsync: false,\n *   isImplicit: false,\n *   isCollection: false,\n *   isPolymorphic: false,\n *   inverseKind: 'hasMany',\n *   inverseKey: 'pets',\n *   inverseType: 'animal',\n *   inverseIsAsync: false,\n *   inverseIsImplicit: false,\n *   inverseIsCollection: true,\n *   inverseIsPolymorphic: false,\n * }\n * ```\n *\n *\n * @class UpgradedMeta\n * @internal\n */\nexport interface UpgradedMeta {\n  kind: 'implicit' | RelationshipFieldKind;\n  /**\n   * The field name on `this` record\n   *\n   * @internal\n   */\n  key: string;\n  /**\n   * The `type` of the related record\n   *\n   * @internal\n   */\n  type: string;\n  isAsync: boolean;\n  isImplicit: boolean;\n  isCollection: boolean;\n  isPolymorphic: boolean;\n  resetOnRemoteUpdate: boolean;\n  isLinksMode: boolean;\n\n  inverseKind: 'implicit' | RelationshipFieldKind;\n  /**\n   * The field name on the opposing record\n   * @internal\n   */\n  inverseKey: string;\n  /**\n   * The `type` of `this` record\n   * @internal\n   */\n  inverseType: string;\n  inverseIsAsync: boolean;\n  inverseIsImplicit: boolean;\n  inverseIsCollection: boolean;\n  inverseIsPolymorphic: boolean;\n  inverseIsLinksMode: boolean;\n}\n\nexport interface EdgeDefinition {\n  lhs_key: string;\n  lhs_modelNames: string[];\n  lhs_baseModelName: string;\n  lhs_relationshipName: string;\n  lhs_definition: UpgradedMeta;\n  lhs_isPolymorphic: boolean;\n\n  rhs_key: string;\n  rhs_modelNames: string[];\n  rhs_baseModelName: string;\n  rhs_relationshipName: string;\n  rhs_definition: UpgradedMeta | null;\n  rhs_isPolymorphic: boolean;\n\n  hasInverse: boolean;\n\n  /**\n   * Whether this relationship points back at the same type.\n   *\n   * If the relationship is polymorphic, this will be true if\n   * it points back at the same abstract type.\n   *\n   * @internal\n   */\n  isSelfReferential: boolean;\n\n  /**\n   * If this is a reflexive relationship, this is true\n   * if the relationship also points back at the same\n   * field.\n   *\n   * @internal\n   */\n  isReflexive: boolean;\n}\n\nconst BOOL_LATER = null as unknown as boolean;\nconst STR_LATER = '';\nconst IMPLICIT_KEY_RAND = Date.now();\n\nfunction implicitKeyFor(type: string, key: string): string {\n  return `implicit-${type}:${key}${IMPLICIT_KEY_RAND}`;\n}\n\nfunction syncMeta(definition: UpgradedMeta, inverseDefinition: UpgradedMeta) {\n  definition.inverseKind = inverseDefinition.kind;\n  definition.inverseKey = inverseDefinition.key;\n  definition.inverseType = inverseDefinition.type;\n  definition.inverseIsAsync = inverseDefinition.isAsync;\n  definition.inverseIsCollection = inverseDefinition.isCollection;\n  definition.inverseIsPolymorphic = inverseDefinition.isPolymorphic;\n  definition.inverseIsImplicit = inverseDefinition.isImplicit;\n  definition.inverseIsLinksMode = inverseDefinition.isLinksMode;\n  const resetOnRemoteUpdate =\n    definition.resetOnRemoteUpdate === false || inverseDefinition.resetOnRemoteUpdate === false ? false : true;\n  definition.resetOnRemoteUpdate = resetOnRemoteUpdate;\n  inverseDefinition.resetOnRemoteUpdate = resetOnRemoteUpdate;\n}\n\nfunction upgradeMeta(meta: RelationshipField): UpgradedMeta {\n  if (!isLegacyField(meta)) {\n    meta = temporaryConvertToLegacy(meta);\n  }\n  const niceMeta: UpgradedMeta = {} as UpgradedMeta;\n  const options = meta.options;\n  niceMeta.kind = meta.kind;\n  niceMeta.key = meta.name;\n  niceMeta.type = meta.type;\n  assert(`Expected relationship definition to specify async`, typeof options?.async === 'boolean');\n  niceMeta.isAsync = options.async;\n  niceMeta.isImplicit = false;\n  niceMeta.isCollection = meta.kind === 'hasMany';\n  niceMeta.isPolymorphic = options && !!options.polymorphic;\n  niceMeta.isLinksMode = options.linksMode ?? false;\n\n  niceMeta.inverseKey = (options && options.inverse) || STR_LATER;\n  niceMeta.inverseType = STR_LATER;\n  niceMeta.inverseIsAsync = BOOL_LATER;\n  niceMeta.inverseIsImplicit = (options && options.inverse === null) || BOOL_LATER;\n  niceMeta.inverseIsCollection = BOOL_LATER;\n  niceMeta.inverseIsLinksMode = BOOL_LATER;\n\n  // prettier-ignore\n  niceMeta.resetOnRemoteUpdate = !isLegacyField(meta) ? false\n    : meta.options?.linksMode ? false\n    : meta.options?.resetOnRemoteUpdate === false ? false\n    : true;\n\n  return niceMeta;\n}\n\nfunction assertConfiguration(info: EdgeDefinition, type: string, key: string) {\n  if (DEBUG) {\n    const isSelfReferential = info.isSelfReferential;\n\n    if (isSelfReferential) {\n      return true;\n    }\n\n    const _isRHS =\n      key === info.rhs_relationshipName &&\n      (type === info.rhs_baseModelName || // base or non-polymorphic\n        // if the other side is polymorphic then we need to scan our modelNames\n        (info.lhs_isPolymorphic && info.rhs_modelNames.includes(type))); // polymorphic\n    const _isLHS =\n      key === info.lhs_relationshipName &&\n      (type === info.lhs_baseModelName || // base or non-polymorphic\n        // if the other side is polymorphic then we need to scan our modelNames\n        (info.rhs_isPolymorphic && info.lhs_modelNames.includes(type))); // polymorphic;\n\n    if (!_isRHS && !_isLHS) {\n      /*\n        this occurs when we are likely polymorphic but not configured to be polymorphic\n        most often due to extending a class that has a relationship definition on it.\n\n        e.g.\n\n        ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet' }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner' }) pet;\n        }\n        class Farmer extends Human {}\n        ```\n\n        In the above case, the following would trigger this error:\n\n        ```ts\n        let pet = store.createRecord('pet');\n        let farmer = store.createRecord('farmer');\n        farmer.pet = pet; // error\n        ```\n\n        The correct way to fix this is to specify the polymorphic option on Pet\n        and to specify the abstract type 'human' on the Human base class.\n\n        ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet', polymorphic: true }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        class Farmer extends Human {}\n        ```\n\n        Alternatively both Human and Farmer could declare the relationship, because relationship\n        definitions are \"structural\".\n\n        ```ts\n        class Pet extends Model {\n          @belongsTo('human', { async: false, inverse: 'pet', polymorphic: true }) owner;\n        }\n        class Human extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        class Farmer extends Model {\n          @belongsTo('pet', { async: false, inverse: 'owner', as: 'human' }) pet;\n        }\n        ```\n\n       */\n      if (key === info.lhs_relationshipName && info.lhs_modelNames.includes(type)) {\n        // parentIdentifier, parentDefinition, addedIdentifier, store\n        assertInheritedSchema(info.lhs_definition, type);\n      } else if (key === info.rhs_relationshipName && info.rhs_modelNames.includes(type)) {\n        assertInheritedSchema(info.lhs_definition, type);\n      }\n      // OPEN AN ISSUE :: we would like to improve our errors but need to understand what corner case got us here\n      throw new Error(\n        `PLEASE OPEN AN ISSUE :: Found a relationship that is neither the LHS nor RHS of the same edge. This is not supported. Please report this to the EmberData team.`\n      );\n    }\n\n    if (_isRHS && _isLHS) {\n      // not sure how we get here but it's probably the result of some form of inheritance\n      // without having specified polymorphism correctly leading to it not being self-referential\n      // OPEN AN ISSUE :: we would like to improve our errors but need to understand what corner case got us here\n      throw new Error(\n        `PLEASE OPEN AN ISSUE :: Found a relationship that is both the LHS and RHS of the same edge but is not self-referential. This is not supported. Please report this to the EmberData team.`\n      );\n    }\n  }\n}\n\nexport function isLHS(info: EdgeDefinition, type: string, key: string): boolean {\n  const isSelfReferential = info.isSelfReferential;\n  const isRelationship = key === info.lhs_relationshipName;\n\n  if (DEBUG) {\n    assertConfiguration(info, type, key);\n  }\n\n  if (isRelationship === true) {\n    return (\n      isSelfReferential === true || // itself\n      type === info.lhs_baseModelName || // base or non-polymorphic\n      // if the other side is polymorphic then we need to scan our modelNames\n      (info.rhs_isPolymorphic && info.lhs_modelNames.includes(type)) // polymorphic\n    );\n  }\n\n  return false;\n}\n\nexport function isRHS(info: EdgeDefinition, type: string, key: string): boolean {\n  const isSelfReferential = info.isSelfReferential;\n  const isRelationship = key === info.rhs_relationshipName;\n\n  if (DEBUG) {\n    assertConfiguration(info, type, key);\n  }\n\n  if (isRelationship === true) {\n    return (\n      isSelfReferential === true || // itself\n      type === info.rhs_baseModelName || // base or non-polymorphic\n      // if the other side is polymorphic then we need to scan our modelNames\n      (info.lhs_isPolymorphic && info.rhs_modelNames.includes(type)) // polymorphic\n    );\n  }\n\n  return false;\n}\n\nexport function upgradeDefinition(\n  graph: Graph,\n  identifier: StableRecordIdentifier,\n  propertyName: string,\n  isImplicit = false\n): EdgeDefinition | null {\n  const cache = graph._definitionCache;\n  const storeWrapper = graph.store;\n  const polymorphicLookup = graph._potentialPolymorphicTypes;\n\n  const { type } = identifier;\n  let cached = /*#__NOINLINE__*/ expandingGet<EdgeDefinition | null>(cache, type, propertyName);\n\n  // CASE: We have a cached resolution (null if no relationship exists)\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  assert(\n    `Expected to find relationship definition in the cache for the implicit relationship ${propertyName}`,\n    !isImplicit\n  );\n\n  const relationships = storeWrapper.schema.fields(identifier);\n  assert(`Expected to have a relationship definition for ${type} but none was found.`, relationships);\n  const meta = relationships.get(propertyName);\n\n  if (!meta) {\n    // TODO potentially we should just be permissive here since this is an implicit relationship\n    // and not require the lookup table to be populated\n    if (polymorphicLookup[type]) {\n      const altTypes = Object.keys(polymorphicLookup[type]);\n      for (let i = 0; i < altTypes.length; i++) {\n        const _cached = expandingGet<EdgeDefinition | null>(cache, altTypes[i], propertyName);\n        if (_cached) {\n          /*#__NOINLINE__*/ expandingSet<EdgeDefinition | null>(cache, type, propertyName, _cached);\n          _cached.rhs_modelNames.push(type);\n          return _cached;\n        }\n      }\n    }\n\n    // CASE: We don't have a relationship at all\n    // we should only hit this in prod\n    assert(`Expected a relationship schema for '${type}.${propertyName}', but no relationship schema was found.`, meta);\n\n    cache[type][propertyName] = null;\n    return null;\n  }\n\n  assert(`Expected ${propertyName} to be a relationship`, isRelationshipField(meta));\n  const definition = /*#__NOINLINE__*/ upgradeMeta(meta);\n\n  let inverseDefinition: UpgradedMeta | null;\n  let inverseKey: string | null;\n  const inverseType = definition.type;\n\n  // CASE: Inverse is explicitly null\n  if (definition.inverseKey === null) {\n    // TODO probably dont need this assertion if polymorphic\n    assert(`Expected the inverse model to exist`, getStore(storeWrapper).modelFor(inverseType));\n    inverseDefinition = null;\n  } else {\n    inverseKey = /*#__NOINLINE__*/ inverseForRelationship(getStore(storeWrapper), identifier, propertyName);\n\n    // CASE: If we are polymorphic, and we declared an inverse that is non-null\n    // we must assume that the lack of inverseKey means that there is no\n    // concrete type as the baseType, so we must construct and artificial\n    // placeholder\n    if (!inverseKey && definition.isPolymorphic && definition.inverseKey) {\n      inverseDefinition = {\n        kind: 'belongsTo', // this must be updated when we find the first belongsTo or hasMany definition that matches\n        key: definition.inverseKey,\n        type: type,\n        isAsync: false, // this must be updated when we find the first belongsTo or hasMany definition that matches\n        isImplicit: false,\n        isCollection: false, // this must be updated when we find the first belongsTo or hasMany definition that matches\n        isPolymorphic: false,\n      } as UpgradedMeta; // the rest of the fields are populated by syncMeta\n\n      // CASE: Inverse resolves to null\n    } else if (!inverseKey) {\n      inverseDefinition = null;\n    } else {\n      // CASE: We have an explicit inverse or were able to resolve one\n      const inverseDefinitions = storeWrapper.schema.fields({ type: inverseType });\n      assert(`Expected to have a relationship definition for ${inverseType} but none was found.`, inverseDefinitions);\n      const metaFromInverse = inverseDefinitions.get(inverseKey);\n      assert(\n        `Expected a relationship schema for '${inverseType}.${inverseKey}' to match the inverse of '${type}.${propertyName}', but no relationship schema was found.`,\n        metaFromInverse\n      );\n      assert(`Expected ${inverseKey} to be a relationship`, isRelationshipField(metaFromInverse));\n\n      inverseDefinition = upgradeMeta(metaFromInverse);\n    }\n  }\n\n  // CASE: We have no inverse\n  if (!inverseDefinition) {\n    // polish off meta\n    inverseKey = /*#__NOINLINE__*/ implicitKeyFor(type, propertyName);\n    inverseDefinition = {\n      kind: 'implicit',\n      key: inverseKey,\n      type: type,\n      isAsync: false,\n      isImplicit: true,\n      isCollection: true, // with implicits any number of records could point at us\n      isPolymorphic: false,\n    } as UpgradedMeta; // the rest of the fields are populated by syncMeta\n\n    syncMeta(definition, inverseDefinition);\n    syncMeta(inverseDefinition, definition);\n\n    const info = {\n      lhs_key: `${type}:${propertyName}`,\n      lhs_modelNames: [type],\n      lhs_baseModelName: type,\n      lhs_relationshipName: propertyName,\n      lhs_definition: definition,\n      lhs_isPolymorphic: definition.isPolymorphic,\n\n      rhs_key: inverseDefinition.key,\n      rhs_modelNames: [inverseType],\n      rhs_baseModelName: inverseType,\n      rhs_relationshipName: inverseDefinition.key,\n      rhs_definition: inverseDefinition,\n      rhs_isPolymorphic: false,\n\n      hasInverse: false,\n      isSelfReferential: type === inverseType, // this could be wrong if we are self-referential but also polymorphic\n      isReflexive: false, // we can't be reflexive if we don't define an inverse\n    };\n\n    expandingSet<EdgeDefinition | null>(cache, inverseType, inverseKey, info);\n    expandingSet<EdgeDefinition | null>(cache, type, propertyName, info);\n    return info;\n  }\n\n  // CASE: We do have an inverse\n  const baseType = inverseDefinition.type;\n\n  // TODO we want to assert this but this breaks all of our shoddily written tests\n  /*\n    if (DEBUG) {\n      let inverseDoubleCheck = inverseFor(inverseRelationshipName, store);\n\n      assert(`The ${inverseBaseModelName}:${inverseRelationshipName} relationship declares 'inverse: null', but it was resolved as the inverse for ${baseModelName}:${relationshipName}.`, inverseDoubleCheck);\n    }\n  */\n  // CASE: We may have already discovered the inverse for the baseModelName\n  // CASE: We have already discovered the inverse\n  assert(\n    `We should have determined an inverseKey by now, open an issue if this is hit`,\n    typeof inverseKey! === 'string' && inverseKey.length > 0\n  );\n  cached = expandingGet(cache, baseType, propertyName) || expandingGet(cache, inverseType, inverseKey);\n\n  if (cached) {\n    // TODO this assert can be removed if the above assert is enabled\n    assert(\n      `The ${inverseType}:${inverseKey} relationship declares 'inverse: null', but it was resolved as the inverse for ${type}:${propertyName}.`,\n      cached.hasInverse !== false\n    );\n\n    const _isLHS = cached.lhs_baseModelName === baseType;\n    const modelNames = _isLHS ? cached.lhs_modelNames : cached.rhs_modelNames;\n    // make this lookup easier in the future by caching the key\n    modelNames.push(type);\n    expandingSet<EdgeDefinition | null>(cache, type, propertyName, cached);\n\n    return cached;\n  }\n\n  // this is our first time so polish off the metas\n  syncMeta(definition, inverseDefinition);\n  syncMeta(inverseDefinition, definition);\n\n  const lhs_modelNames = [type];\n  if (type !== baseType) {\n    lhs_modelNames.push(baseType);\n  }\n  const isSelfReferential = baseType === inverseType;\n  const info = {\n    lhs_key: `${baseType}:${propertyName}`,\n    lhs_modelNames,\n    lhs_baseModelName: baseType,\n    lhs_relationshipName: propertyName,\n    lhs_definition: definition,\n    lhs_isPolymorphic: definition.isPolymorphic,\n\n    rhs_key: `${inverseType}:${inverseKey}`,\n    rhs_modelNames: [inverseType],\n    rhs_baseModelName: inverseType,\n    rhs_relationshipName: inverseKey,\n    rhs_definition: inverseDefinition,\n    rhs_isPolymorphic: inverseDefinition.isPolymorphic,\n    hasInverse: true,\n    isSelfReferential,\n    isReflexive: isSelfReferential && propertyName === inverseKey,\n  };\n\n  // Create entries for the baseModelName as well as modelName to speed up\n  //  inverse lookups\n  expandingSet<EdgeDefinition | null>(cache, baseType, propertyName, info);\n  expandingSet<EdgeDefinition | null>(cache, type, propertyName, info);\n\n  // Greedily populate the inverse\n  expandingSet<EdgeDefinition | null>(cache, inverseType, inverseKey, info);\n\n  return info;\n}\n\nfunction inverseForRelationship(store: Store, identifier: StableRecordIdentifier | { type: string }, key: string) {\n  const definition = store.schema.fields(identifier).get(key);\n  if (!definition) {\n    return null;\n  }\n\n  assert(`Expected ${key} to be a relationship`, isRelationshipField(definition));\n  assert(\n    `Expected the relationship defintion to specify the inverse type or null.`,\n    definition.options?.inverse === null ||\n      (typeof definition.options?.inverse === 'string' && definition.options.inverse.length > 0)\n  );\n  return definition.options.inverse;\n}\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport type { CacheCapabilitiesManager } from '@ember-data/store/types';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\n\nimport { isLegacyField, isRelationshipField, temporaryConvertToLegacy, type UpgradedMeta } from '../-edge-definition';\n\n/*\n  Assert that `addedRecord` has a valid type so it can be added to the\n  relationship of the `record`.\n\n  The assert basically checks if the `addedRecord` can be added to the\n  relationship (specified via `relationshipMeta`) of the `record`.\n\n  This utility should only be used internally, as both record parameters must\n  be stable record identifiers and the `relationshipMeta` needs to be the meta\n  information about the relationship, retrieved via\n  `record.relationshipFor(key)`.\n*/\nlet assertPolymorphicType: (\n  parentIdentifier: StableRecordIdentifier,\n  parentDefinition: UpgradedMeta,\n  addedIdentifier: StableRecordIdentifier,\n  store: CacheCapabilitiesManager\n) => void;\nlet assertInheritedSchema: (definition: UpgradedMeta, type: string) => void;\n\nif (DEBUG) {\n  function validateSchema(definition: UpgradedMeta, meta: PrintConfig) {\n    const errors = new Map();\n\n    if (definition.inverseKey !== meta.name) {\n      errors.set('name', ` <---- should be '${definition.inverseKey}'`);\n    }\n    if (definition.inverseType !== meta.type) {\n      errors.set('type', ` <---- should be '${definition.inverseType}'`);\n    }\n    if (definition.inverseKind !== meta.kind) {\n      errors.set('type', ` <---- should be '${definition.inverseKind}'`);\n    }\n    if (definition.inverseIsAsync !== meta.options.async) {\n      errors.set('async', ` <---- should be ${definition.inverseIsAsync}`);\n    }\n    if (definition.inverseIsPolymorphic && definition.inverseIsPolymorphic !== meta.options.polymorphic) {\n      errors.set('polymorphic', ` <---- should be ${definition.inverseIsPolymorphic}`);\n    }\n    if (definition.key !== meta.options.inverse) {\n      errors.set('inverse', ` <---- should be '${definition.key}'`);\n    }\n    if (definition.type !== meta.options.as) {\n      errors.set('as', ` <---- should be '${definition.type}'`);\n    }\n\n    return errors;\n  }\n\n  type PrintConfig = {\n    name: string;\n    type: string;\n    kind: string;\n    options: {\n      as?: string;\n      async: boolean;\n      polymorphic?: boolean;\n      inverse: string | null;\n    };\n  };\n  type RelationshipSchemaError = 'name' | 'type' | 'kind' | 'as' | 'async' | 'polymorphic' | 'inverse';\n\n  function expectedSchema(definition: UpgradedMeta) {\n    return printSchema({\n      name: definition.inverseKey,\n      type: definition.inverseType,\n      kind: definition.inverseKind,\n      options: {\n        as: definition.type,\n        async: definition.inverseIsAsync,\n        polymorphic: definition.inverseIsPolymorphic || false,\n        inverse: definition.key,\n      },\n    });\n  }\n\n  function printSchema(config: PrintConfig, errors?: Map<RelationshipSchemaError, string>) {\n    return `\n\n\\`\\`\\`\n{\n  ${config.name}: {\n    name: '${config.name}',${errors?.get('name') || ''}\n    type: '${config.type}',${errors?.get('type') || ''}\n    kind: '${config.kind}',${errors?.get('kind') || ''}\n    options: {\n      as: '${config.options.as}',${errors?.get('as') || ''}\n      async: ${config.options.async},${errors?.get('async') || ''}\n      polymorphic: ${config.options.polymorphic},${errors?.get('polymorphic') || ''}\n      inverse: '${config.options.inverse}'${errors?.get('inverse') || ''}\n    }\n  }\n}\n\\`\\`\\`\n\n`;\n  }\n\n  function metaFrom(definition: UpgradedMeta) {\n    return {\n      name: definition.key,\n      type: definition.type,\n      kind: definition.kind,\n      options: {\n        async: definition.isAsync,\n        polymorphic: definition.isPolymorphic,\n        inverse: definition.inverseKey,\n      },\n    };\n  }\n  function inverseMetaFrom(definition: UpgradedMeta) {\n    return {\n      name: definition.inverseKey,\n      type: definition.inverseType,\n      kind: definition.inverseKind,\n      options: {\n        as: definition.isPolymorphic ? definition.type : undefined,\n        async: definition.inverseIsAsync,\n        polymorphic: definition.inverseIsPolymorphic,\n        inverse: definition.key,\n      },\n    };\n  }\n  function inverseDefinition(definition: UpgradedMeta): UpgradedMeta {\n    return {\n      key: definition.inverseKey,\n      type: definition.inverseType,\n      kind: definition.inverseKind,\n      isAsync: definition.inverseIsAsync,\n      isPolymorphic: true,\n      isLinksMode: definition.isLinksMode,\n      isCollection: definition.inverseIsCollection,\n      isImplicit: definition.inverseIsImplicit,\n      inverseKey: definition.key,\n      inverseType: definition.type,\n      inverseKind: definition.kind,\n      inverseIsAsync: definition.isAsync,\n      inverseIsPolymorphic: definition.isPolymorphic,\n      inverseIsLinksMode: definition.inverseIsLinksMode,\n      inverseIsImplicit: definition.isImplicit,\n      inverseIsCollection: definition.isCollection,\n      resetOnRemoteUpdate: definition.resetOnRemoteUpdate,\n    };\n  }\n  function definitionWithPolymorphic(definition: UpgradedMeta) {\n    return Object.assign({}, definition, { inverseIsPolymorphic: true });\n  }\n\n  assertInheritedSchema = function assertInheritedSchema(definition: UpgradedMeta, type: string) {\n    const meta1 = metaFrom(definition);\n    const meta2 = inverseMetaFrom(definition);\n    const errors1 = validateSchema(inverseDefinition(definition), meta1);\n    const errors2 = validateSchema(definitionWithPolymorphic(definition), meta2);\n\n    if (errors2.size === 0 && errors1.size > 0) {\n      throw new Error(\n        `The schema for the relationship '${type}.${definition.key}' is not configured to satisfy '${\n          definition.inverseType\n        }' and thus cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${\n          definition.type\n        }.${\n          definition.inverseKey\n        }'\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${type}' should include:${printSchema(\n          meta1,\n          errors1\n        )}`\n      );\n    } else if (errors1.size > 0) {\n      throw new Error(\n        `The schema for the relationship '${type}.${definition.key}' is not configured to satisfy '${\n          definition.inverseType\n        }' and thus cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${\n          definition.type\n        }.${\n          definition.inverseKey\n        }'\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${type}' should include:${printSchema(\n          meta1,\n          errors1\n        )} and the relationships schema definition for '${definition.type}' should include:${printSchema(\n          meta2,\n          errors2\n        )}`\n      );\n    } else if (errors2.size > 0) {\n      throw new Error(\n        `The schema for the relationship '${type}.${definition.key}' satisfies '${\n          definition.inverseType\n        }' but cannot utilize the '${definition.inverseType}.${definition.key}' relationship to connect with '${\n          definition.type\n        }.${\n          definition.inverseKey\n        }' because that relationship is not polymorphic.\\n\\nIf using this relationship in a polymorphic manner is desired, the relationships schema definition for '${\n          definition.type\n        }' should include:${printSchema(meta2, errors2)}`\n      );\n    }\n  };\n\n  assertPolymorphicType = function assertPolymorphicType(\n    parentIdentifier: StableRecordIdentifier,\n    parentDefinition: UpgradedMeta,\n    addedIdentifier: StableRecordIdentifier,\n    store: CacheCapabilitiesManager\n  ) {\n    if (parentDefinition.inverseIsImplicit) {\n      return;\n    }\n    if (parentDefinition.isPolymorphic) {\n      let meta = store.schema.fields(addedIdentifier).get(parentDefinition.inverseKey);\n      assert(\n        `No '${parentDefinition.inverseKey}' field exists on '${\n          addedIdentifier.type\n        }'. To use this type in the polymorphic relationship '${parentDefinition.inverseType}.${\n          parentDefinition.key\n        }' the relationships schema definition for ${addedIdentifier.type} should include:${expectedSchema(\n          parentDefinition\n        )}`,\n        meta\n      );\n      assert(\n        `Expected the field ${parentDefinition.inverseKey} to be a relationship`,\n        meta && isRelationshipField(meta)\n      );\n      meta = isLegacyField(meta) ? meta : temporaryConvertToLegacy(meta);\n      assert(\n        `You should not specify both options.as and options.inverse as null on ${addedIdentifier.type}.${parentDefinition.inverseKey}, as if there is no inverse field there is no abstract type to conform to. You may have intended for this relationship to be polymorphic, or you may have mistakenly set inverse to null.`,\n        !(meta.options.inverse === null && meta?.options.as?.length)\n      );\n      const errors = validateSchema(parentDefinition, meta);\n      assert(\n        `The schema for the relationship '${parentDefinition.inverseKey}' on '${\n          addedIdentifier.type\n        }' type does not correctly implement '${parentDefinition.type}' and thus cannot be assigned to the '${\n          parentDefinition.key\n        }' relationship in '${\n          parentIdentifier.type\n        }'. If using this record in this polymorphic relationship is desired, correct the errors in the schema shown below:${printSchema(\n          meta,\n          errors\n        )}`,\n        errors.size === 0\n      );\n    } else if (addedIdentifier.type !== parentDefinition.type) {\n      // if we are not polymorphic\n      // then the addedIdentifier.type must be the same as the parentDefinition.type\n      let meta = store.schema.fields(addedIdentifier).get(parentDefinition.inverseKey);\n      assert(\n        `Expected the field ${parentDefinition.inverseKey} to be a relationship`,\n        !meta || isRelationshipField(meta)\n      );\n      meta = meta && (isLegacyField(meta) ? meta : temporaryConvertToLegacy(meta));\n      if (meta?.options.as === parentDefinition.type) {\n        // inverse is likely polymorphic but missing the polymorphic flag\n        let meta = store.schema.fields({ type: parentDefinition.inverseType }).get(parentDefinition.key);\n        assert(`Expected the field ${parentDefinition.key} to be a relationship`, meta && isRelationshipField(meta));\n        meta = isLegacyField(meta) ? meta : temporaryConvertToLegacy(meta);\n        const errors = validateSchema(definitionWithPolymorphic(inverseDefinition(parentDefinition)), meta);\n        assert(\n          `The '<${addedIdentifier.type}>.${\n            parentDefinition.inverseKey\n          }' relationship cannot be used polymorphically because '<${parentDefinition.inverseType}>.${\n            parentDefinition.key\n          } is not a polymorphic relationship. To use this relationship in a polymorphic manner, fix the following schema issues on the relationships schema for '${\n            parentDefinition.inverseType\n          }':${printSchema(meta, errors)}`\n        );\n      } else {\n        assert(\n          `The '${addedIdentifier.type}' type does not implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. If this relationship should be polymorphic, mark ${parentDefinition.inverseType}.${parentDefinition.key} as \\`polymorphic: true\\` and ${addedIdentifier.type}.${parentDefinition.inverseKey} as implementing it via \\`as: '${parentDefinition.type}'\\`.`\n        );\n      }\n    }\n  };\n}\n\nexport { assertPolymorphicType, assertInheritedSchema };\n","import { deprecate } from '@ember/debug';\n\nimport { DEBUG_RELATIONSHIP_NOTIFICATIONS, LOG_METRIC_COUNTS } from '@warp-drive/build-config/debugging';\nimport { DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE } from '@warp-drive/build-config/deprecations';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { ReplaceRelatedRecordsOperation } from '@warp-drive/core-types/graph';\n\nimport { _add, _removeLocal, _removeRemote, diffCollection } from '../-diff';\nimport { isBelongsTo, isHasMany, isNew, notifyChange } from '../-utils';\nimport { assertPolymorphicType } from '../debug/assert-polymorphic-type';\nimport type { CollectionEdge } from '../edges/collection';\nimport type { Graph } from '../graph';\n\nfunction count(label: string) {\n  // @ts-expect-error\n  // eslint-disable-next-line\n  globalThis.__WarpDriveMetricCountData[label] = (globalThis.__WarpDriveMetricCountData[label] || 0) + 1;\n}\n\n/*\n    case many:1\n    ========\n    In a bi-directional graph with Many:1 edges, adding a value\n    results in up-to 3 discrete value transitions, while removing\n    a value is only 2 transitions.\n\n    For adding C to A\n    If: A <<-> B, C <->> D is the initial state,\n    and: B <->> A <<-> C, D is the final state\n\n    then we would undergo the following transitions.\n\n    add C to A\n    remove C from D\n    add A to C\n\n    For removing B from A\n    If: A <<-> B, C <->> D is the initial state,\n    and: A, B, C <->> D is the final state\n\n    then we would undergo the following transitions.\n\n    remove B from A\n    remove A from B\n\n    case many:many\n    ===========\n    In a bi-directional graph with Many:Many edges, adding or\n    removing a value requires only 2 value transitions.\n\n    For Adding\n    If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)\n    And: D<<->>C<<->>A<<->>B is the final state\n\n    Then we would undergo two transitions.\n\n    add C to A.\n    add A to C\n\n    For Removing\n    If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)\n    And: A, B, C<<->>D is the final state\n\n    Then we would undergo two transitions.\n\n    remove B from A\n    remove A from B\n\n    case many:?\n    ========\n    In a uni-directional graph with Many:? edges (modeled in EmberData with `inverse:null`) with\n    artificial (implicit) inverses, replacing a value results in 2 discrete value transitions.\n    This is because a Many:? relationship is effectively Many:Many.\n  */\nexport default function replaceRelatedRecords(graph: Graph, op: ReplaceRelatedRecordsOperation, isRemote: boolean) {\n  if (isRemote) {\n    replaceRelatedRecordsRemote(graph, op, isRemote);\n  } else {\n    replaceRelatedRecordsLocal(graph, op, isRemote);\n  }\n}\n\nfunction replaceRelatedRecordsLocal(graph: Graph, op: ReplaceRelatedRecordsOperation, isRemote: boolean) {\n  const identifiers = op.value;\n  const relationship = graph.get(op.record, op.field);\n  assert(`expected hasMany relationship`, isHasMany(relationship));\n\n  relationship.state.hasReceivedData = true;\n  const { additions, removals } = relationship;\n  const { inverseKey, type } = relationship.definition;\n  const { record } = op;\n  const wasDirty = relationship.isDirty;\n  let localBecameDirty = false;\n\n  if (LOG_METRIC_COUNTS) {\n    count(`replaceRelatedRecordsLocal ${'type' in record ? record.type : '<document>'} ${op.field}`);\n  }\n\n  const onAdd = (identifier: StableRecordIdentifier) => {\n    // Since we are diffing against the remote state, we check\n    // if our previous local state did not contain this identifier\n    const removalsHas = removals?.has(identifier);\n    if (removalsHas || !additions?.has(identifier)) {\n      if (type !== identifier.type) {\n        if (DEBUG) {\n          assertPolymorphicType(relationship.identifier, relationship.definition, identifier, graph.store);\n        }\n        graph.registerPolymorphicType(type, identifier.type);\n      }\n\n      // we've added a record locally that wasn't in the local state before\n      localBecameDirty = true;\n      addToInverse(graph, identifier, inverseKey, op.record, isRemote);\n\n      if (removalsHas) {\n        removals!.delete(identifier);\n      }\n    }\n  };\n\n  const onRemove = (identifier: StableRecordIdentifier) => {\n    // Since we are diffing against the remote state, we check\n    // if our previous local state had contained this identifier\n    const additionsHas = additions?.has(identifier);\n    if (additionsHas || !removals?.has(identifier)) {\n      // we've removed a record locally that was in the local state before\n      localBecameDirty = true;\n      removeFromInverse(graph, identifier, inverseKey, record, isRemote);\n\n      if (additionsHas) {\n        additions!.delete(identifier);\n      }\n    }\n  };\n\n  const diff = diffCollection(identifiers, relationship, onAdd, onRemove);\n\n  // any additions no longer in the local state\n  // also need to be removed from the inverse\n  if (additions && additions.size > 0) {\n    additions.forEach((identifier) => {\n      if (!diff.add.has(identifier)) {\n        localBecameDirty = true;\n        onRemove(identifier);\n      }\n    });\n  }\n\n  // any removals no longer in the local state\n  // also need to be added back to the inverse\n  if (removals && removals.size > 0) {\n    removals.forEach((identifier) => {\n      if (!diff.del.has(identifier)) {\n        localBecameDirty = true;\n        onAdd(identifier);\n      }\n    });\n  }\n\n  const becameDirty = diff.changed || localBecameDirty;\n  relationship.additions = diff.add;\n  relationship.removals = diff.del;\n  relationship.localState = diff.finalState;\n\n  // we only notify if the localState changed and were not already dirty before\n  // because if we were already dirty then we have already notified\n  if (becameDirty && !wasDirty) {\n    notifyChange(graph, relationship);\n  }\n}\n\nfunction replaceRelatedRecordsRemote(graph: Graph, op: ReplaceRelatedRecordsOperation, isRemote: boolean) {\n  const identifiers = op.value;\n  const relationship = graph.get(op.record, op.field);\n\n  if (LOG_METRIC_COUNTS) {\n    count(`replaceRelatedRecordsRemote ${'type' in op.record ? op.record.type : '<document>'}  ${op.field}`);\n  }\n\n  assert(\n    `You can only '${op.op}' on a hasMany relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`,\n    isHasMany(relationship)\n  );\n  if (isRemote) {\n    graph._addToTransaction(relationship);\n  }\n\n  const wasDirty = relationship.isDirty;\n  // if this is our first time receiving data\n  // we need to mark the relationship as dirty\n  // so that non-materializing APIs like `hasManyReference.value()`\n  // will get notified and updated.\n  if (!relationship.state.hasReceivedData) {\n    relationship.isDirty = true;\n  }\n  relationship.state.hasReceivedData = true;\n\n  // cache existing state\n  const { definition } = relationship;\n\n  const { type } = relationship.definition;\n\n  const diff = diffCollection(\n    identifiers,\n    relationship,\n    (identifier) => {\n      if (type !== identifier.type) {\n        if (DEBUG) {\n          assertPolymorphicType(relationship.identifier, relationship.definition, identifier, graph.store);\n        }\n        graph.registerPolymorphicType(type, identifier.type);\n      }\n      // commit additions\n      // TODO build this into the diff?\n      // because we are not dirty if this was a committed local addition\n      if (relationship.additions?.has(identifier)) {\n        relationship.additions.delete(identifier);\n      } else {\n        if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n          if (!relationship.isDirty) {\n            // eslint-disable-next-line no-console\n            console.log(\n              `setting relationship to dirty because the remote addition was not in our previous list of local additions`\n            );\n          }\n        }\n      }\n      addToInverse(graph, identifier, definition.inverseKey, op.record, isRemote);\n    },\n    (identifier) => {\n      // commit removals\n      // TODO build this into the diff?\n      // because we are not dirty if this was a committed local addition\n      if (relationship.removals?.has(identifier)) {\n        relationship.removals.delete(identifier);\n      } else {\n        if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n          if (!relationship.isDirty) {\n            // eslint-disable-next-line no-console\n            console.log(\n              `setting relationship to dirty because the remote removal was not in our previous list of local removals`\n            );\n          }\n        }\n      }\n      removeFromInverse(graph, identifier, definition.inverseKey, op.record, isRemote);\n    }\n  );\n\n  // replace existing state\n  relationship.remoteMembers = diff.finalSet;\n  relationship.remoteState = diff.finalState;\n\n  // changed also indicates a change in order\n  if (diff.changed) {\n    relationship.isDirty = true;\n  }\n\n  // TODO unsure if we need this but it\n  // may allow us to more efficiently patch\n  // the associated ManyArray\n  relationship._diff = diff;\n\n  if (DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE) {\n    // only do this for legacy hasMany, not collection\n    // and provide a way to incrementally migrate\n    if (\n      // we do not guard by diff.changed here\n      // because we want to clear local changes even if\n      // no change has occurred to preserve the legacy behavior\n      relationship.definition.kind === 'hasMany' &&\n      relationship.definition.resetOnRemoteUpdate !== false &&\n      (diff.changed || wasDirty)\n    ) {\n      const deprecationInfo: {\n        removals: StableRecordIdentifier[];\n        additions: StableRecordIdentifier[];\n        triggered: boolean;\n      } = {\n        removals: [],\n        additions: [],\n        triggered: false,\n      };\n      if (relationship.removals) {\n        relationship.isDirty = true;\n        relationship.removals.forEach((identifier) => {\n          deprecationInfo.triggered = true;\n          deprecationInfo.removals.push(identifier);\n          // reverse the removal\n          // if we are still in removals at this point then\n          // we were not \"committed\" which means we are present\n          // in the remoteMembers. So we \"add back\" on the inverse.\n          addToInverse(graph, identifier, definition.inverseKey, op.record, false);\n        });\n        relationship.removals = null;\n      }\n      if (relationship.additions) {\n        relationship.additions.forEach((identifier) => {\n          // reverse the addition\n          // if we are still in additions at this point then\n          // we were not \"committed\" which means we are not present\n          // in the remoteMembers. So we \"remove\" from the inverse.\n          // however we only do this if we are not a \"new\" record.\n          if (!isNew(identifier)) {\n            deprecationInfo.triggered = true;\n            deprecationInfo.additions.push(identifier);\n            relationship.isDirty = true;\n            relationship.additions!.delete(identifier);\n            removeFromInverse(graph, identifier, definition.inverseKey, op.record, false);\n          }\n        });\n        if (relationship.additions.size === 0) {\n          relationship.additions = null;\n        }\n      }\n\n      if (deprecationInfo.triggered) {\n        deprecate(\n          `EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${\n            relationship.identifier.type\n          }>.${\n            relationship.definition.key\n          } hasMany relationship but will not be once this deprecation is resolved by opting into the new behavior:\\n\\n\\tAdded: [${deprecationInfo.additions\n            .map((i) => i.lid)\n            .join(', ')}]\\n\\tRemoved: [${deprecationInfo.removals.map((i) => i.lid).join(', ')}]`,\n          false,\n          {\n            id: 'ember-data:deprecate-relationship-remote-update-clearing-local-state',\n            for: 'ember-data',\n            since: { enabled: '5.3', available: '4.13' },\n            until: '6.0',\n            url: 'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state',\n          }\n        );\n      }\n    }\n  }\n\n  if (relationship.isDirty && !wasDirty) {\n    flushCanonical(graph, relationship);\n  }\n}\n\nexport function addToInverse(\n  graph: Graph,\n  identifier: StableRecordIdentifier,\n  key: string,\n  value: StableRecordIdentifier,\n  isRemote: boolean\n) {\n  const relationship = graph.get(identifier, key);\n  const { type } = relationship.definition;\n\n  if (type !== value.type) {\n    if (DEBUG) {\n      assertPolymorphicType(relationship.identifier, relationship.definition, value, graph.store);\n    }\n    graph.registerPolymorphicType(type, value.type);\n  }\n\n  if (isBelongsTo(relationship)) {\n    relationship.state.hasReceivedData = true;\n    relationship.state.isEmpty = false;\n\n    if (isRemote) {\n      graph._addToTransaction(relationship);\n      if (relationship.remoteState !== null) {\n        removeFromInverse(graph, relationship.remoteState, relationship.definition.inverseKey, identifier, isRemote);\n      }\n      relationship.remoteState = value;\n    }\n\n    if (relationship.localState !== value) {\n      if (!isRemote && relationship.localState) {\n        removeFromInverse(graph, relationship.localState, relationship.definition.inverseKey, identifier, isRemote);\n      }\n      relationship.localState = value;\n\n      notifyChange(graph, relationship);\n    }\n  } else if (isHasMany(relationship)) {\n    if (isRemote) {\n      // TODO this needs to alert stuffs\n      // And patch state better\n      // This is almost definitely wrong\n      // WARNING WARNING WARNING\n\n      if (!relationship.remoteMembers.has(value)) {\n        graph._addToTransaction(relationship);\n        relationship.remoteState.push(value);\n        relationship.remoteMembers.add(value);\n        if (relationship.additions?.has(value)) {\n          relationship.additions.delete(value);\n        } else {\n          relationship.isDirty = true;\n          relationship.state.hasReceivedData = true;\n          flushCanonical(graph, relationship);\n        }\n      }\n    } else {\n      // if we are not dirty but have a null localState then we\n      // are mutating a relationship that has never been fetched\n      // so we initialize localState to an empty array\n      if (!relationship.isDirty && !relationship.localState) {\n        relationship.localState = [];\n      }\n\n      if (_add(graph, identifier, relationship, value, null, isRemote)) {\n        notifyChange(graph, relationship);\n      }\n    }\n  } else {\n    if (isRemote) {\n      if (!relationship.remoteMembers.has(value)) {\n        relationship.remoteMembers.add(value);\n        relationship.localMembers.add(value);\n      }\n    } else {\n      if (!relationship.localMembers.has(value)) {\n        relationship.localMembers.add(value);\n      }\n    }\n  }\n}\n\nexport function notifyInverseOfPotentialMaterialization(\n  graph: Graph,\n  identifier: StableRecordIdentifier,\n  key: string,\n  value: StableRecordIdentifier,\n  isRemote: boolean\n) {\n  const relationship = graph.get(identifier, key);\n  if (isHasMany(relationship) && isRemote && relationship.remoteMembers.has(value)) {\n    notifyChange(graph, relationship);\n  }\n}\n\nexport function removeFromInverse(\n  graph: Graph,\n  identifier: StableRecordIdentifier,\n  key: string,\n  value: StableRecordIdentifier,\n  isRemote: boolean\n) {\n  const relationship = graph.get(identifier, key);\n\n  if (isBelongsTo(relationship)) {\n    relationship.state.isEmpty = true;\n    if (isRemote) {\n      graph._addToTransaction(relationship);\n      relationship.remoteState = null;\n    }\n    if (relationship.localState === value) {\n      relationship.localState = null;\n\n      notifyChange(graph, relationship);\n    }\n  } else if (isHasMany(relationship)) {\n    if (isRemote) {\n      graph._addToTransaction(relationship);\n      if (_removeRemote(relationship, value)) {\n        notifyChange(graph, relationship);\n      }\n    } else {\n      if (_removeLocal(relationship, value)) {\n        notifyChange(graph, relationship);\n      }\n    }\n  } else {\n    if (isRemote) {\n      relationship.remoteMembers.delete(value);\n      relationship.localMembers.delete(value);\n    } else {\n      if (value && relationship.localMembers.has(value)) {\n        relationship.localMembers.delete(value);\n      }\n    }\n  }\n}\n\nfunction flushCanonical(graph: Graph, rel: CollectionEdge) {\n  if (rel.accessed) {\n    graph._scheduleLocalSync(rel);\n  }\n}\n","import { deprecate } from '@ember/debug';\n\nimport { DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE } from '@warp-drive/build-config/deprecations';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { ReplaceRelatedRecordOperation } from '@warp-drive/core-types/graph';\n\nimport { isBelongsTo, isNew, notifyChange } from '../-utils';\nimport { assertPolymorphicType } from '../debug/assert-polymorphic-type';\nimport type { Graph } from '../graph';\nimport { addToInverse, notifyInverseOfPotentialMaterialization, removeFromInverse } from './replace-related-records';\n\nexport default function replaceRelatedRecord(graph: Graph, op: ReplaceRelatedRecordOperation, isRemote = false) {\n  const relationship = graph.get(op.record, op.field);\n  assert(\n    `You can only '${op.op}' on a belongsTo relationship. ${op.record.type}.${op.field} is a ${relationship.definition.kind}`,\n    isBelongsTo(relationship)\n  );\n  if (isRemote) {\n    graph._addToTransaction(relationship);\n  }\n  const { definition, state } = relationship;\n  const prop = isRemote ? 'remoteState' : 'localState';\n  const existingState: StableRecordIdentifier | null = relationship[prop];\n\n  /*\n    case 1:1\n    ========\n    In a bi-directional graph with 1:1 edges, replacing a value\n    results in up-to 4 discrete value transitions.\n\n    If: A <-> B, C <-> D is the initial state,\n    and: A <-> C, B, D is the final state\n\n    then we would undergo the following 4 transitions.\n\n    remove A from B\n    add C to A\n    remove C from D\n    add A to C\n\n    case 1:many\n    ===========\n    In a bi-directional graph with 1:Many edges, replacing a value\n    results in up-to 3 discrete value transitions.\n\n    If: A<->>B<<->D, C<<->D is the initial state (double arrows representing the many side)\n    And: A<->>C<<->D, B<<->D is the final state\n\n    Then we would undergo three transitions.\n\n    remove A from B\n    add C to A.\n    add A to C\n\n    case 1:?\n    ========\n    In a uni-directional graph with 1:? edges (modeled in EmberData with `inverse:null`) with\n    artificial (implicit) inverses, replacing a value results in up-to 3 discrete value transitions.\n    This is because a 1:? relationship is effectively 1:many.\n\n    If: A->B, C->B is the initial state\n    And: A->C, C->B is the final state\n\n    Then we would undergo three transitions.\n\n    Remove A from B\n    Add C to A\n    Add A to C\n  */\n\n  // nothing for us to do\n  if (op.value === existingState) {\n    // if we were empty before but now know we are empty this needs to be true\n    state.hasReceivedData = true;\n    // if this is a remote update we still sync\n    if (isRemote) {\n      const { localState } = relationship;\n      // don't sync if localState is a new record and our remoteState is null\n      if (localState && isNew(localState) && !existingState) {\n        return;\n      }\n      if (existingState && localState === existingState) {\n        notifyInverseOfPotentialMaterialization(graph, existingState, definition.inverseKey, op.record, isRemote);\n      } else if (DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE) {\n        // if localState does not match existingState then we know\n        // we have a local mutation that has not been persisted yet\n        if (localState !== op.value && relationship.definition.resetOnRemoteUpdate !== false) {\n          relationship.localState = existingState;\n\n          deprecate(\n            `EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${\n              relationship.identifier.type\n            }>.${\n              relationship.definition.key\n            } belongsTo relationship but will not be once this deprecation is resolved:\\n\\n\\t${\n              localState ? 'Added: ' + localState.lid + '\\n\\t' : ''\n            }${existingState ? 'Removed: ' + existingState.lid : ''}`,\n            false,\n            {\n              id: 'ember-data:deprecate-relationship-remote-update-clearing-local-state',\n              for: 'ember-data',\n              since: { enabled: '5.3', available: '4.13' },\n              until: '6.0',\n              url: 'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state',\n            }\n          );\n\n          notifyChange(graph, relationship);\n        }\n      }\n    }\n    return;\n  }\n\n  // remove this value from the inverse if required\n  if (existingState) {\n    removeFromInverse(graph, existingState, definition.inverseKey, op.record, isRemote);\n  }\n\n  // update value to the new value\n  relationship[prop] = op.value;\n  state.hasReceivedData = true;\n  state.isEmpty = op.value === null;\n  state.isStale = false;\n  state.hasFailedLoadAttempt = false;\n\n  if (op.value) {\n    if (definition.type !== op.value.type) {\n      // assert(\n      //   `The '<${definition.inverseType}>.${op.field}' relationship expects only '${definition.type}' records since it is not polymorphic. Received a Record of type '${op.value.type}'`,\n      //   definition.isPolymorphic\n      // );\n\n      // TODO this should now handle the deprecation warning if isPolymorphic is not set\n      // but the record does turn out to be polymorphic\n      // this should still assert if the user is relying on legacy inheritance/mixins to\n      // provide polymorphic behavior and has not yet added the polymorphic flags\n      if (DEBUG) {\n        assertPolymorphicType(relationship.identifier, definition, op.value, graph.store);\n      }\n\n      graph.registerPolymorphicType(definition.type, op.value.type);\n    }\n    addToInverse(graph, op.value, definition.inverseKey, op.record, isRemote);\n  }\n\n  if (isRemote) {\n    const { localState, remoteState } = relationship;\n    if (localState && isNew(localState) && !remoteState) {\n      return;\n    }\n    // when localState does not match the new remoteState and\n    // localState === existingState then we had no local mutation\n    // and we can safely sync the new remoteState to local\n    if (localState !== remoteState && localState === existingState) {\n      relationship.localState = remoteState;\n      notifyChange(graph, relationship);\n      // But when localState does not match the new remoteState and\n      // and localState !== existingState then we know we have a local mutation\n      // that has not been persisted yet.\n    } else if (DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE) {\n      if (\n        localState !== remoteState &&\n        localState !== existingState &&\n        relationship.definition.resetOnRemoteUpdate !== false\n      ) {\n        relationship.localState = remoteState;\n\n        deprecate(\n          `EmberData is changing the default semantics of updates to the remote state of relationships.\\n\\nThe following local state was cleared from the <${\n            relationship.identifier.type\n          }>.${\n            relationship.definition.key\n          } belongsTo relationship but will not be once this deprecation is resolved:\\n\\n\\t${\n            localState ? 'Added: ' + localState.lid + '\\n\\t' : ''\n          }${existingState ? 'Removed: ' + existingState.lid : ''}`,\n          false,\n          {\n            id: 'ember-data:deprecate-relationship-remote-update-clearing-local-state',\n            for: 'ember-data',\n            since: { enabled: '5.3', available: '4.13' },\n            until: '6.0',\n            url: 'https://deprecations.emberjs.com/v5.x#ember-data-deprecate-relationship-remote-update-clearing-local-state',\n          }\n        );\n\n        notifyChange(graph, relationship);\n      }\n    }\n  } else {\n    notifyChange(graph, relationship);\n  }\n}\n","import { deprecate } from '@ember/debug';\n\nimport { DEBUG_RELATIONSHIP_NOTIFICATIONS } from '@warp-drive/build-config/debugging';\nimport {\n  DEPRECATE_NON_UNIQUE_PAYLOADS,\n  DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE,\n} from '@warp-drive/build-config/deprecations';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\n\nimport { isBelongsTo, notifyChange } from './-utils';\nimport { assertPolymorphicType } from './debug/assert-polymorphic-type';\nimport type { CollectionEdge } from './edges/collection';\nimport type { ResourceEdge } from './edges/resource';\nimport type { Graph } from './graph';\nimport replaceRelatedRecord from './operations/replace-related-record';\nimport replaceRelatedRecords from './operations/replace-related-records';\n\nfunction _deprecatedCompare<T>(\n  priorLocalState: T[] | null,\n  newState: T[],\n  newMembers: Set<T>,\n  prevState: T[],\n  prevSet: Set<T>,\n  onAdd: (v: T) => void,\n  onDel: (v: T) => void,\n  remoteClearsLocal: boolean\n): { duplicates: Map<T, number[]>; diff: Diff<T> } {\n  const newLength = newState.length;\n  const prevLength = prevState.length;\n  const iterationLength = Math.max(newLength, prevLength);\n  let changed: boolean = newMembers.size !== prevSet.size;\n  let remoteOrderChanged = false;\n  const added = new Set<T>();\n  const removed = new Set<T>();\n  const duplicates = new Map<T, number[]>();\n  const finalSet = new Set<T>();\n  const finalState: T[] = [];\n  const priorLocalLength = priorLocalState?.length ?? 0;\n\n  for (let i = 0, j = 0; i < iterationLength; i++) {\n    let adv = false;\n    let member: T | undefined;\n\n    // accumulate anything added\n    if (i < newLength) {\n      member = newState[i];\n\n      if (!finalSet.has(member)) {\n        finalState[j] = member;\n        finalSet.add(member);\n        adv = true;\n\n        if (!prevSet.has(member)) {\n          // Avoid unnecessarily notifying a change that already exists locally\n          if (i < priorLocalLength) {\n            const priorLocalMember = priorLocalState![i];\n            if (priorLocalMember !== member) {\n              changed = true;\n            }\n          }\n          added.add(member);\n          onAdd(member);\n        }\n      } else {\n        let list = duplicates.get(member);\n\n        if (list === undefined) {\n          list = [];\n          duplicates.set(member, list);\n        }\n\n        list.push(i);\n      }\n    }\n\n    // accumulate anything removed\n    if (i < prevLength) {\n      const prevMember = prevState[i];\n\n      // detect reordering, adjusting index for duplicates\n      // j is always less than i and so if i < prevLength, j < prevLength\n      if (member !== prevState[j]) {\n        // the new remote order does not match the current remote order\n        // indicating a change in membership or reordering\n        remoteOrderChanged = true;\n        // however: if the new remote order matches the current local order\n        // we can disregard the change notification generation so long as\n        // we are not configured to reset on remote update (which is deprecated)\n        if (DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE) {\n          if (!remoteClearsLocal && i < priorLocalLength) {\n            const priorLocalMember = priorLocalState![j];\n            if (priorLocalMember !== member) {\n              changed = true;\n            }\n          } else {\n            changed = true;\n          }\n        } else {\n          if (i < priorLocalLength) {\n            const priorLocalMember = priorLocalState![j];\n            if (priorLocalMember !== member) {\n              changed = true;\n            }\n          } else {\n            changed = true;\n          }\n        }\n\n        // if remote order hasn't changed but local order differs\n        // and we are configured to reset on remote update (which is deprecated)\n        // then we still need to mark the relationship as changed\n      } else if (DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE) {\n        if (remoteClearsLocal) {\n          if (!changed && j < priorLocalLength) {\n            const priorLocalMember = priorLocalState![j];\n            if (priorLocalMember !== member) {\n              changed = true;\n            }\n          }\n        }\n      }\n\n      if (!newMembers.has(prevMember)) {\n        changed = true;\n        removed.add(prevMember);\n        onDel(prevMember);\n      }\n    } else if (adv && j < prevLength && member !== prevState[j]) {\n      changed = true;\n    }\n\n    if (adv) {\n      j++;\n    }\n  }\n\n  const diff = {\n    add: added,\n    del: removed,\n    finalState,\n    finalSet,\n    changed,\n    remoteOrderChanged,\n  };\n\n  return {\n    diff,\n    duplicates,\n  };\n}\n\nfunction _compare<T>(\n  priorLocalState: T[] | null,\n  finalState: T[],\n  finalSet: Set<T>,\n  prevState: T[],\n  prevSet: Set<T>,\n  onAdd: (v: T) => void,\n  onDel: (v: T) => void,\n  remoteClearsLocal: boolean\n): Diff<T> {\n  const finalLength = finalState.length;\n  const prevLength = prevState.length;\n  const iterationLength = Math.max(finalLength, prevLength);\n  const equalLength = priorLocalState ? finalLength === priorLocalState.length : finalLength === prevLength;\n  let remoteOrderChanged = finalSet.size !== prevSet.size;\n  let changed: boolean = priorLocalState ? finalSet.size !== priorLocalState.length : remoteOrderChanged;\n  const added = new Set<T>();\n  const removed = new Set<T>();\n  const priorLocalLength = priorLocalState?.length ?? 0;\n\n  if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n    if (changed) {\n      // console.log({\n      //   priorState: priorLocalState?.slice(),\n      //   finalState: finalState.slice(),\n      //   prevState: prevState.slice(),\n      // });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    changed &&\n      // eslint-disable-next-line no-console\n      console.log(\n        `changed because ${priorLocalState ? 'finalSet.size !== priorLocalState.length' : 'finalSet.size !== prevSet.size'}`\n      );\n  }\n\n  for (let i = 0; i < iterationLength; i++) {\n    let member: T | undefined;\n\n    // accumulate anything added\n    if (i < finalLength) {\n      member = finalState[i];\n      if (!prevSet.has(member)) {\n        // Avoid unnecessarily notifying a change that already exists locally\n        if (i < priorLocalLength) {\n          const priorLocalMember = priorLocalState![i];\n          if (priorLocalMember !== member) {\n            if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n              if (!changed) {\n                // console.log({\n                //   priorLocalMember,\n                //   member,\n                //   i,\n                //   priorState: priorLocalState?.slice(),\n                //   finalState: finalState.slice(),\n                //   prevState: prevState.slice(),\n                // });\n              }\n\n              // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n              !changed && console.log(`changed because priorLocalMember !== member && !prevSet.has(member)`);\n            }\n            changed = true;\n          }\n        }\n        added.add(member);\n        onAdd(member);\n      }\n    }\n\n    // accumulate anything removed\n    if (i < prevLength) {\n      const prevMember = prevState[i];\n\n      // detect reordering\n      if (equalLength && member !== prevMember) {\n        // the new remote order does not match the current remote order\n        // indicating a change in membership or reordering\n        remoteOrderChanged = true;\n        // however: if the new remote order matches the current local order\n        // we can disregard the change notification generation so long as\n        // we are not configured to reset on remote update (which is deprecated)\n\n        if (i < priorLocalLength) {\n          const priorLocalMember = priorLocalState![i];\n          if (priorLocalMember !== member) {\n            if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n              // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n              !changed && console.log(`changed because priorLocalMember !== member && member !== prevMember`);\n            }\n            changed = true;\n          }\n        } else if (i < finalLength) {\n          // if we have exceeded the length of priorLocalState and we are within the range\n          // of the finalState then we must have changed\n          if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n            !changed && console.log(`changed because priorMember !== member && index >= priorLocalLength`);\n          }\n          changed = true;\n        }\n\n        // if remote order hasn't changed but local order differs\n        // and we are configured to reset on remote update (which is deprecated)\n        // then we still need to mark the relationship as changed\n      } else if (DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE) {\n        if (remoteClearsLocal) {\n          if (equalLength && !changed && i < priorLocalLength) {\n            const priorLocalMember = priorLocalState![i];\n            if (priorLocalMember !== prevMember) {\n              if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-console\n                !changed && console.log(`changed because priorLocalMember !== prevMember && remoteClearsLocal`);\n              }\n              changed = true;\n            }\n          }\n        }\n      }\n\n      if (!finalSet.has(prevMember)) {\n        // if we are within finalLength, we can only be \"changed\" if we've already exceeded\n        // the index range of priorLocalState, as otherwise the previous member may still\n        // be removed.\n        //\n        // prior local: [1, 2, 3, 4]\n        // final state: [1, 2, 3]\n        // prev remote state: [1, 2, 5, 3, 4]\n        // i === 2\n        // prevMember === 5\n        // !finalSet.has(prevMember) === true\n        //\n        // because we will become changed at i===3,\n        // we do not need to worry about becoming changed at i===2\n        // as the arrays until now are still the same\n        //\n        // prior local: [1, 2, 3]\n        // final state: [1, 2, 3, 4]\n        // prev remote state: [1, 2, 5, 3, 4]\n        // i === 2\n        // prevMember === 5\n        // !finalSet.has(prevMember) === true\n        //\n        // because we will become changed at i===3\n        // we do not need to worry about becoming changed at i===2\n        //\n        // prior local: [1, 2, 3]\n        // final state: [1, 2, 3]\n        // prev remote state: [1, 2, 5, 3, 4]\n        // i === 2\n        // prevMember === 5\n        // !finalSet.has(prevMember) === true\n        //\n        // because we have same length and same membership order\n        // we do not need to worry about becoming changed at i===2\n        //\n        // if you do not have a priorLocalState you can't be changed\n        // ergo, we never need to set changed in this branch.\n        // this log can still be useful for debugging.\n        if (DEBUG_RELATIONSHIP_NOTIFICATIONS) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n          !changed &&\n            // eslint-disable-next-line no-console\n            console.log(`changed because i >= priorLocalLength && i < finalLength && !finalSet.has(prevMember)`);\n        }\n        //\n        // we do still set remoteOrderChanged as it has\n        remoteOrderChanged = true;\n        removed.add(prevMember);\n        onDel(prevMember);\n      }\n    }\n  }\n\n  return {\n    add: added,\n    del: removed,\n    finalState,\n    finalSet,\n    changed,\n    remoteOrderChanged,\n  };\n}\n\ntype Diff<T> = {\n  add: Set<T>;\n  del: Set<T>;\n  finalState: T[];\n  finalSet: Set<T>;\n  changed: boolean;\n  remoteOrderChanged: boolean;\n};\n\nexport function diffCollection(\n  finalState: StableRecordIdentifier[],\n  relationship: CollectionEdge,\n  onAdd: (v: StableRecordIdentifier) => void,\n  onDel: (v: StableRecordIdentifier) => void\n): Diff<StableRecordIdentifier> {\n  const finalSet = new Set(finalState);\n  const { localState: priorLocalState, remoteState, remoteMembers } = relationship;\n\n  if (DEPRECATE_NON_UNIQUE_PAYLOADS) {\n    if (finalState.length !== finalSet.size) {\n      const { diff, duplicates } = _deprecatedCompare(\n        priorLocalState,\n        finalState,\n        finalSet,\n        remoteState,\n        remoteMembers,\n        onAdd,\n        onDel,\n        relationship.definition.resetOnRemoteUpdate\n      );\n\n      if (DEBUG) {\n        deprecate(\n          `Expected all entries in the relationship ${relationship.definition.type}:${relationship.definition.key} to be unique, see log for a list of duplicate entry indeces`,\n          false,\n          {\n            id: 'ember-data:deprecate-non-unique-relationship-entries',\n            for: 'ember-data',\n            until: '6.0',\n            since: { available: '4.13', enabled: '5.3' },\n          }\n        );\n        // eslint-disable-next-line no-console\n        console.log(duplicates);\n      }\n\n      return diff;\n    }\n  } else {\n    assert(\n      `Expected all entries in the relationship to be unique, found duplicates`,\n      finalState.length === finalSet.size\n    );\n  }\n\n  return _compare(\n    priorLocalState,\n    finalState,\n    finalSet,\n    remoteState,\n    remoteMembers,\n    onAdd,\n    onDel,\n    relationship.definition.resetOnRemoteUpdate\n  );\n}\n\nexport function computeLocalState(storage: CollectionEdge): StableRecordIdentifier[] {\n  if (!storage.isDirty) {\n    assert(`Expected localState to be present`, Array.isArray(storage.localState));\n    return storage.localState;\n  }\n\n  const state = storage.remoteState.slice();\n\n  storage.removals?.forEach((v) => {\n    const index = state.indexOf(v);\n    state.splice(index, 1);\n  });\n\n  storage.additions?.forEach((v) => {\n    state.push(v);\n  });\n  storage.localState = state;\n  storage.isDirty = false;\n\n  return state;\n}\n\n/**\n * A function which attempts to add a value to the local state of a collection\n * relationship, and returns true if the value was added, or false if it was\n * already present.\n *\n * It will not generate a notification, will not update the relationships to dirty,\n * and will not update the inverse relationships, making it suitable for use as\n * an internal util to perform the just the addition to a specific side of a\n * relationship.\n *\n * @internal\n */\nexport function _add(\n  graph: Graph,\n  record: StableRecordIdentifier,\n  relationship: CollectionEdge,\n  value: StableRecordIdentifier,\n  index: number | null,\n  isRemote: boolean\n) {\n  return !isRemote\n    ? _addLocal(graph, record, relationship, value, index)\n    : _addRemote(graph, record, relationship, value, index);\n}\n\nfunction _addRemote(\n  graph: Graph,\n  record: StableRecordIdentifier,\n  relationship: CollectionEdge,\n  value: StableRecordIdentifier,\n  index: number | null\n) {\n  assert(`expected an identifier to add to the collection relationship`, value);\n  const { remoteMembers, additions, removals, remoteState } = relationship;\n\n  assert(`Cannot add a resource that is already present`, !remoteMembers.has(value));\n  if (remoteMembers.has(value)) {\n    return false;\n  }\n\n  // add to the remote state\n  remoteMembers.add(value);\n  assert(\n    `Cannot insert at an index that is not in bounds`,\n    index === null || (index >= 0 && index < remoteState.length)\n  );\n  const hasValidIndex = index !== null && index >= 0 && index < remoteState.length;\n  if (hasValidIndex) {\n    remoteState.splice(index, 0, value);\n  } else {\n    remoteState.push(value);\n  }\n\n  // remove from additions if present\n  if (additions?.has(value)) {\n    additions.delete(value);\n\n    // nothing more to do this was our state already\n    return false;\n  }\n\n  assert(\n    `Remote state indicated addition of a resource that was present only as a local mutation`,\n    !removals?.has(value)\n  );\n\n  // if the relationship already needs to recalc, we don't bother\n  // attempting to patch the localState\n  if (relationship.isDirty) {\n    return true;\n  }\n\n  // if we have existing localState\n  // we attempt to patch it without blowing it away\n  // as this is more efficient than recomputing\n  // it allows us to preserve local ordering\n  // to a small extent. Local ordering should not\n  // be relied upon as any remote change could blow it away\n  if (relationship.localState) {\n    if (!hasValidIndex) {\n      relationship.localState.push(value);\n    } else if (index === 0) {\n      relationship.localState.unshift(value);\n    } else if (!removals?.size) {\n      relationship.localState.splice(index, 0, value);\n    } else {\n      relationship.isDirty = true;\n    }\n  }\n\n  return true;\n}\n\nfunction _addLocal(\n  graph: Graph,\n  record: StableRecordIdentifier,\n  relationship: CollectionEdge,\n  value: StableRecordIdentifier,\n  index: number | null\n): boolean {\n  const { remoteMembers, removals } = relationship;\n  let additions = relationship.additions;\n  const hasPresence = remoteMembers.has(value) || additions?.has(value);\n\n  if (hasPresence && !removals?.has(value)) {\n    assert(\n      `Attempted to add the resource '${value.lid}' to the collection <${relationship.identifier.type}>.${relationship.definition.key} it was already in`,\n      hasPresence && !removals?.has(value)\n    );\n    return false;\n  }\n\n  if (removals?.has(value)) {\n    removals.delete(value);\n  } else {\n    if (!additions) {\n      additions = relationship.additions = new Set();\n    }\n\n    relationship.state.hasReceivedData = true;\n    additions.add(value);\n\n    const { type } = relationship.definition;\n    if (type !== value.type) {\n      if (DEBUG) {\n        assertPolymorphicType(record, relationship.definition, value, graph.store);\n      }\n      graph.registerPolymorphicType(value.type, type);\n    }\n  }\n\n  // if we have existing localState\n  // and we have an index\n  // apply the change, as this is more efficient\n  // than recomputing localState and\n  // it allows us to preserve local ordering\n  // to a small extend. Local ordering should not\n  // be relied upon as any remote change will blow it away\n  if (relationship.localState) {\n    if (index !== null) {\n      relationship.localState.splice(index, 0, value);\n    } else {\n      relationship.localState.push(value);\n    }\n  }\n\n  return true;\n}\n\nexport function _remove(\n  graph: Graph,\n  record: StableRecordIdentifier,\n  relationship: CollectionEdge,\n  value: StableRecordIdentifier,\n  index: number | null,\n  isRemote: boolean\n): boolean {\n  return !isRemote ? _removeLocal(relationship, value) : _removeRemote(relationship, value);\n}\n\nexport function _removeLocal(relationship: CollectionEdge, value: StableRecordIdentifier): boolean {\n  assert(`expected an identifier to remove from the collection relationship`, value);\n  const { remoteMembers, additions } = relationship;\n  let removals = relationship.removals;\n  const hasPresence = remoteMembers.has(value) || additions?.has(value);\n\n  if (!hasPresence || removals?.has(value)) {\n    assert(\n      `Attempted to remove the resource '${value.lid}' from the collection <${relationship.identifier.type}>.${relationship.definition.key} but it was not present`,\n      !hasPresence || removals?.has(value)\n    );\n    return false;\n  }\n\n  if (additions?.has(value)) {\n    additions.delete(value);\n  } else {\n    if (!removals) {\n      removals = relationship.removals = new Set();\n    }\n\n    removals.add(value);\n  }\n\n  // if we have existing localState\n  // apply the change, as this is more efficient\n  // than recomputing localState and\n  // it allows us to preserve local ordering\n  // to a small extend. Local ordering should not\n  // be relied upon as any remote change will blow it away\n  if (relationship.localState) {\n    const index = relationship.localState.indexOf(value);\n    assert(`Cannot remove a resource that is not present`, index !== -1);\n    relationship.localState.splice(index, 1);\n  }\n  assert(\n    `Expected relationship to be dirty when performing a local mutation`,\n    relationship.localState || relationship.isDirty\n  );\n\n  return true;\n}\n\nexport function _removeRemote(relationship: CollectionEdge, value: StableRecordIdentifier): boolean {\n  assert(`expected an identifier to remove from the collection relationship`, value);\n  const { remoteMembers, additions, removals, remoteState } = relationship;\n\n  assert(`Cannot remove a resource that is not present`, remoteMembers.has(value));\n  if (!remoteMembers.has(value)) {\n    return false;\n  }\n\n  // remove from remote state\n  remoteMembers.delete(value);\n  let index = remoteState.indexOf(value);\n  assert(`Cannot remove a resource that is not present`, index !== -1);\n  remoteState.splice(index, 1);\n\n  // remove from removals if present\n  if (removals?.has(value)) {\n    removals.delete(value);\n\n    // nothing more to do this was our state already\n    return false;\n  }\n\n  assert(\n    `Remote state indicated removal of a resource that was present only as a local mutation`,\n    !additions?.has(value)\n  );\n\n  // if we have existing localState\n  // and we have an index\n  // apply the change, as this is more efficient\n  // than recomputing localState and\n  // it allows us to preserve local ordering\n  // to a small extend. Local ordering should not\n  // be relied upon as any remote change will blow it away\n  if (relationship.localState) {\n    index = relationship.localState.indexOf(value);\n    assert(`Cannot remove a resource that is not present`, index !== -1);\n    relationship.localState.splice(index, 1);\n  }\n  assert(\n    `Expected relationship to be dirty when performing a local mutation`,\n    relationship.localState || relationship.isDirty\n  );\n\n  return true;\n}\n\nexport function rollbackRelationship(\n  graph: Graph,\n  identifier: StableRecordIdentifier,\n  field: string,\n  relationship: CollectionEdge | ResourceEdge\n): void {\n  if (isBelongsTo(relationship)) {\n    replaceRelatedRecord(\n      graph,\n      {\n        op: 'replaceRelatedRecord',\n        record: identifier,\n        field,\n        value: relationship.remoteState,\n      },\n      false\n    );\n  } else {\n    replaceRelatedRecords(\n      graph,\n      {\n        op: 'replaceRelatedRecords',\n        record: identifier,\n        field,\n        value: relationship.remoteState.slice(),\n      },\n      false\n    );\n\n    // when the change was a \"reorder\" only we wont have generated\n    // a notification yet.\n    // if we give rollback a unique operation we can use the ability of\n    // diff to report a separate `remoteOrderChanged` flag to trigger this\n    // if needed to avoid the duplicate.\n    notifyChange(graph, relationship);\n  }\n}\n","export interface RelationshipState {\n  /*\n      This flag indicates whether we should consider the content\n       of this relationship \"known\".\n\n      If we have no relationship knowledge, and the relationship\n       is `async`, we will attempt to fetch the relationship on\n       access if it is also stale.\n\n     Snapshot uses this to tell the difference between unknown\n      (`undefined`) or empty (`null`). The reason for this is that\n      we wouldn't want to serialize  unknown relationships as `null`\n      as that might overwrite remote state.\n\n      All relationships for a newly created (`store.createRecord()`) are\n       considered known (`hasReceivedData === true`).\n\n      true when\n        => we receive a push with either new data or explicit empty (`[]` or `null`)\n        => the relationship is a belongsTo and we have received data from\n             the other side.\n\n      false when\n        => we have received no signal about what data belongs in this relationship\n        => the relationship is a hasMany and we have only received data from\n            the other side.\n     */\n  hasReceivedData: boolean;\n  /*\n      Flag that indicates whether an empty relationship is explicitly empty\n        (signaled by push giving us an empty array or null relationship)\n        e.g. an API response has told us that this relationship is empty.\n\n      Thus far, it does not appear that we actually need this flag; however,\n        @runspired has found it invaluable when debugging relationship tests\n        to determine whether (and why if so) we are in an incorrect state.\n\n      true when\n        => we receive a push with explicit empty (`[]` or `null`)\n        => we have received no signal about what data belongs in this relationship\n        => on initial create (as no signal is known yet)\n\n      false at all other times\n     */\n\n  isEmpty: boolean;\n  /*\n       This flag indicates whether we should\n        re-fetch the relationship the next time\n        it is accessed.\n\n        The difference between this flag and `shouldForceReload`\n        is in how we treat the presence of partially missing data:\n          - for a forced reload, we will reload the link or EVERY record\n          - for a stale reload, we will reload the link (if present) else only MISSING records\n\n        Ideally these flags could be merged, but because we don't give the\n        request layer the option of deciding how to resolve the data being queried\n        we are forced to differentiate for now.\n\n        It is also possible for a relationship to remain stale after a forced reload; however,\n        in this case `state.hasFailedLoadAttempt` ought to be `true`.\n\n      false when\n        => cache.isNew(identifier) on initial setup\n        => a previously triggered request has resolved\n        => we get relationship data via push\n\n      true when\n        => !cache.isNew(identifier) on initial setup\n        => an inverse has been unloaded\n        => we get a new link for the relationship\n\n      TODO @runspired unskip the acceptance tests and fix these flags\n     */\n  isStale: boolean;\n\n  hasFailedLoadAttempt: boolean;\n  /*\n     This flag forces fetch. `true` for a single request once `reload()`\n       has been called `false` at all other times.\n    */\n  shouldForceReload: boolean;\n  /*\n     This flag indicates whether we should\n      **partially** re-fetch the relationship the\n      next time it is accessed.\n\n    false when\n      => initial setup\n      => a previously triggered request has resolved\n\n    true when\n      => an inverse has been unloaded\n    */\n  hasDematerializedInverse: boolean;\n\n  // TODO do we want this anymore? Seems somewhat useful\n  //   especially if we rename to `hasUpdatedLink`\n  //   which would tell us slightly more about why the\n  //   relationship is stale\n  // updatedLink: boolean;\n}\n\nexport function createState(): RelationshipState {\n  return {\n    hasReceivedData: false,\n    isEmpty: true,\n    isStale: false,\n    hasFailedLoadAttempt: false,\n    shouldForceReload: false,\n    hasDematerializedInverse: false,\n  };\n}\n","import type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { CollectionRelationship } from '@warp-drive/core-types/cache/relationship';\nimport type { Links, Meta, PaginationLinks } from '@warp-drive/core-types/spec/json-api-raw';\n\nimport { computeLocalState } from '../-diff';\nimport type { UpgradedMeta } from '../-edge-definition';\nimport type { RelationshipState } from '../-state';\nimport { createState } from '../-state';\n\nexport interface CollectionEdge {\n  definition: UpgradedMeta;\n  identifier: StableRecordIdentifier;\n  state: RelationshipState;\n\n  remoteMembers: Set<StableRecordIdentifier>;\n  remoteState: StableRecordIdentifier[];\n\n  additions: Set<StableRecordIdentifier> | null;\n  removals: Set<StableRecordIdentifier> | null;\n\n  meta: Meta | null;\n  links: Links | PaginationLinks | null;\n\n  localState: StableRecordIdentifier[] | null;\n  /**\n   * Whether the localState for this edge is out-of-sync\n   * with the remoteState.\n   *\n   * if state.hasReceivedData=false we are also\n   * not dirty since there is nothing to sync with.\n   *\n   * @typedoc\n   */\n  isDirty: boolean;\n  transactionRef: number;\n  /**\n   * Whether data for this edge has been accessed at least once\n   * via `graph.getData`\n   *\n   * @typedoc\n   */\n  accessed: boolean;\n\n  _diff?: {\n    add: Set<StableRecordIdentifier>;\n    del: Set<StableRecordIdentifier>;\n  };\n}\n\nexport function createCollectionEdge(definition: UpgradedMeta, identifier: StableRecordIdentifier): CollectionEdge {\n  return {\n    definition,\n    identifier,\n    state: createState(),\n    remoteMembers: new Set(),\n    remoteState: [],\n    additions: null,\n    removals: null,\n\n    meta: null,\n    links: null,\n\n    localState: null,\n    isDirty: false,\n    transactionRef: 0,\n    accessed: false,\n    _diff: undefined,\n  };\n}\n\nexport function legacyGetCollectionRelationshipData(\n  source: CollectionEdge,\n  getRemoteState: boolean\n): CollectionRelationship {\n  source.accessed = true;\n  const payload: CollectionRelationship = {};\n\n  if (source.state.hasReceivedData) {\n    payload.data = getRemoteState ? source.remoteState.slice() : computeLocalState(source);\n  }\n\n  if (source.links) {\n    payload.links = source.links;\n  }\n\n  if (source.meta) {\n    payload.meta = source.meta;\n  }\n\n  return payload;\n}\n","import type { StableRecordIdentifier } from '@warp-drive/core-types';\n\nimport type { UpgradedMeta } from '../-edge-definition';\n\nexport type ImplicitMeta = UpgradedMeta & { kind: 'implicit'; isImplicit: true };\n\nexport interface ImplicitEdge {\n  definition: ImplicitMeta;\n  identifier: StableRecordIdentifier;\n  localMembers: Set<StableRecordIdentifier>;\n  remoteMembers: Set<StableRecordIdentifier>;\n}\n\nexport function createImplicitEdge(definition: ImplicitMeta, identifier: StableRecordIdentifier): ImplicitEdge {\n  return {\n    definition,\n    identifier,\n    localMembers: new Set(),\n    remoteMembers: new Set(),\n  };\n}\n","import type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { ResourceRelationship } from '@warp-drive/core-types/cache/relationship';\nimport type { Links, Meta, PaginationLinks } from '@warp-drive/core-types/spec/json-api-raw';\n\nimport type { UpgradedMeta } from '../-edge-definition';\nimport type { RelationshipState } from '../-state';\nimport { createState } from '../-state';\n\n/*\n * @module @ember-data/graph\n *\n * Stores the data for one side of a \"single\" resource relationship.\n *\n * @class ResourceEdge\n * @internal\n */\nexport interface ResourceEdge {\n  definition: UpgradedMeta;\n  identifier: StableRecordIdentifier;\n  state: RelationshipState;\n  localState: StableRecordIdentifier | null;\n  remoteState: StableRecordIdentifier | null;\n  meta: Meta | null;\n  links: Links | PaginationLinks | null;\n  transactionRef: number;\n  accessed: boolean;\n}\n\nexport function createResourceEdge(definition: UpgradedMeta, identifier: StableRecordIdentifier): ResourceEdge {\n  return {\n    definition,\n    identifier,\n    state: createState(),\n    transactionRef: 0,\n    localState: null,\n    remoteState: null,\n    meta: null,\n    links: null,\n    accessed: false,\n  };\n}\n\nexport function legacyGetResourceRelationshipData(source: ResourceEdge, getRemoteState: boolean): ResourceRelationship {\n  source.accessed = true;\n  let data: StableRecordIdentifier | null | undefined;\n  const payload: ResourceRelationship = {};\n  if (getRemoteState && source.remoteState) {\n    data = source.remoteState;\n  } else if (!getRemoteState && source.localState) {\n    data = source.localState;\n  }\n  if (((getRemoteState && source.remoteState === null) || source.localState === null) && source.state.hasReceivedData) {\n    data = null;\n  }\n\n  if (source.links) {\n    payload.links = source.links;\n  }\n  if (data !== undefined) {\n    payload.data = data;\n  }\n  if (source.meta) {\n    payload.meta = source.meta;\n  }\n\n  return payload;\n}\n","import { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { AddToResourceRelationshipMutation } from '@warp-drive/core-types/cache/mutations';\nimport type { AddToResourceRelationshipOperation } from '@warp-drive/core-types/cache/operations';\nimport type { ReplaceRelatedRecordOperation } from '@warp-drive/core-types/graph';\n\nimport { _add } from '../-diff';\nimport { isBelongsTo, isHasMany, notifyChange } from '../-utils';\nimport type { CollectionEdge } from '../edges/collection';\nimport type { Graph } from '../graph';\nimport replaceRelatedRecord from './replace-related-record';\nimport { addToInverse } from './replace-related-records';\n\nexport default function addToRelatedRecords(\n  graph: Graph,\n  op: AddToResourceRelationshipOperation | AddToResourceRelationshipMutation,\n  isRemote: boolean\n) {\n  const { record, value, index } = op;\n  const relationship = graph.get(record, op.field);\n\n  const _isBelongsTo = isBelongsTo(relationship);\n  if (isRemote && _isBelongsTo) {\n    if (value !== relationship.remoteState) {\n      const newOp: ReplaceRelatedRecordOperation = {\n        op: 'replaceRelatedRecord',\n        record,\n        field: op.field,\n        value: value as StableRecordIdentifier,\n      };\n      return replaceRelatedRecord(graph, newOp, isRemote);\n    }\n    assert(\n      `Expected '${value?.lid}' (the value to add) to NOT be the same as the remote state '${relationship.remoteState?.lid ?? '<null>'}'`,\n      value === relationship.remoteState\n    );\n    return;\n  }\n\n  assert(\n    `You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`,\n    isHasMany(relationship)\n  );\n\n  // if we are not dirty but have a null localState then we\n  // are mutating a relationship that has never been fetched\n  // so we initialize localState to an empty array\n  if (!relationship.isDirty && !relationship.localState) {\n    relationship.localState = [];\n  }\n\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      addRelatedRecord(graph, relationship, record, value[i], index !== undefined ? index + i : null, isRemote);\n    }\n  } else {\n    addRelatedRecord(graph, relationship, record, value, index ?? null, isRemote);\n  }\n\n  notifyChange(graph, relationship);\n}\n\nfunction addRelatedRecord(\n  graph: Graph,\n  relationship: CollectionEdge,\n  record: StableRecordIdentifier,\n  value: StableRecordIdentifier,\n  index: number | null,\n  isRemote: boolean\n) {\n  assert(`expected an identifier to add to the collection relationship`, value);\n\n  if (_add(graph, record, relationship, value, index, isRemote)) {\n    addToInverse(graph, value, relationship.definition.inverseKey, record, isRemote);\n  }\n}\n","import type { MergeOperation } from '@warp-drive/core-types/cache/operations';\n\nimport { forAllRelatedIdentifiers, isBelongsTo, isHasMany, notifyChange } from '../-utils';\nimport type { CollectionEdge } from '../edges/collection';\nimport type { ImplicitEdge } from '../edges/implicit';\nimport type { ResourceEdge } from '../edges/resource';\nimport type { Graph, GraphEdge } from '../graph';\n\nexport function mergeIdentifier(graph: Graph, op: MergeOperation, relationships: Record<string, GraphEdge>) {\n  Object.keys(relationships).forEach((key) => {\n    const rel = relationships[key];\n    if (!rel) {\n      return;\n    }\n    mergeIdentifierForRelationship(graph, op, rel);\n  });\n}\n\nfunction mergeIdentifierForRelationship(graph: Graph, op: MergeOperation, rel: GraphEdge): void {\n  rel.identifier = op.value;\n  forAllRelatedIdentifiers(rel, (identifier) => {\n    const inverse = graph.get(identifier, rel.definition.inverseKey);\n    mergeInRelationship(graph, inverse, op);\n  });\n}\n\nfunction mergeInRelationship(graph: Graph, rel: GraphEdge, op: MergeOperation): void {\n  if (isBelongsTo(rel)) {\n    mergeBelongsTo(graph, rel, op);\n  } else if (isHasMany(rel)) {\n    mergeHasMany(graph, rel, op);\n  } else {\n    mergeImplicit(graph, rel, op);\n  }\n}\n\nfunction mergeBelongsTo(graph: Graph, rel: ResourceEdge, op: MergeOperation): void {\n  if (rel.remoteState === op.record) {\n    rel.remoteState = op.value;\n  }\n  if (rel.localState === op.record) {\n    rel.localState = op.value;\n    notifyChange(graph, rel);\n  }\n}\n\nfunction mergeHasMany(graph: Graph, rel: CollectionEdge, op: MergeOperation): void {\n  if (rel.remoteMembers.has(op.record)) {\n    rel.remoteMembers.delete(op.record);\n    rel.remoteMembers.add(op.value);\n    const index = rel.remoteState.indexOf(op.record);\n    rel.remoteState.splice(index, 1, op.value);\n    rel.isDirty = true;\n  }\n  if (rel.additions?.has(op.record)) {\n    rel.additions.delete(op.record);\n    rel.additions.add(op.value);\n    rel.isDirty = true;\n  }\n  if (rel.removals?.has(op.record)) {\n    rel.removals.delete(op.record);\n    rel.removals.add(op.value);\n    rel.isDirty = true;\n  }\n  if (rel.isDirty) {\n    notifyChange(graph, rel);\n  }\n}\n\nfunction mergeImplicit(graph: Graph, rel: ImplicitEdge, op: MergeOperation): void {\n  if (rel.remoteMembers.has(op.record)) {\n    rel.remoteMembers.delete(op.record);\n    rel.remoteMembers.add(op.value);\n  }\n  if (rel.localMembers.has(op.record)) {\n    rel.localMembers.delete(op.record);\n    rel.localMembers.add(op.value);\n  }\n}\n","import { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { RemoveFromResourceRelationshipMutation } from '@warp-drive/core-types/cache/mutations';\nimport type { RemoveFromResourceRelationshipOperation } from '@warp-drive/core-types/cache/operations';\nimport type { ReplaceRelatedRecordOperation } from '@warp-drive/core-types/graph';\n\nimport { _remove } from '../-diff';\nimport { isBelongsTo, isHasMany, notifyChange } from '../-utils';\nimport type { CollectionEdge } from '../edges/collection';\nimport type { Graph } from '../graph';\nimport replaceRelatedRecord from './replace-related-record';\nimport { removeFromInverse } from './replace-related-records';\n\nexport default function removeFromRelatedRecords(\n  graph: Graph,\n  op: RemoveFromResourceRelationshipOperation | RemoveFromResourceRelationshipMutation,\n  isRemote: boolean\n) {\n  const { record, value } = op;\n  const relationship = graph.get(record, op.field);\n\n  const _isBelongsTo = isBelongsTo(relationship);\n  if (isRemote && _isBelongsTo) {\n    if (value === relationship.remoteState) {\n      const newOp: ReplaceRelatedRecordOperation = {\n        op: 'replaceRelatedRecord',\n        record,\n        field: op.field,\n        value: null,\n      };\n      return replaceRelatedRecord(graph, newOp, isRemote);\n    }\n    assert(\n      `Expected '${(value as StableRecordIdentifier)?.lid}' (the value to remove) to be the same as the remote state '${relationship.remoteState?.lid ?? '<null>'}'`,\n      value === relationship.remoteState\n    );\n    return;\n  }\n\n  assert(\n    `You can only '${op.op}' on a hasMany relationship. ${record.type}.${op.field} is a ${relationship.definition.kind}`,\n    isHasMany(relationship)\n  );\n\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      removeRelatedRecord(graph, record, relationship, value[i], op.index ?? null, isRemote);\n    }\n  } else {\n    removeRelatedRecord(graph, record, relationship, value, op.index ?? null, isRemote);\n  }\n\n  notifyChange(graph, relationship);\n}\n\nfunction removeRelatedRecord(\n  graph: Graph,\n  record: StableRecordIdentifier,\n  relationship: CollectionEdge,\n  value: StableRecordIdentifier,\n  index: number | null,\n  isRemote: boolean\n) {\n  assert(`expected an identifier to remove from the collection relationship`, value);\n  if (_remove(graph, record, relationship, value, index, isRemote)) {\n    removeFromInverse(graph, value, relationship.definition.inverseKey, record, isRemote);\n  }\n}\n","import type { Link, LinkObject } from '@warp-drive/core-types/spec/json-api-raw';\n\n/*\n  This method normalizes a link to an \"links object\". If the passed link is\n  already an object it's returned without any modifications.\n\n  See http://jsonapi.org/format/#document-links for more information.\n*/\nexport default function _normalizeLink(link: Link): LinkObject | null {\n  switch (typeof link) {\n    case 'object':\n      return link;\n    case 'string':\n      return { href: link };\n  }\n}\n","import { warn } from '@ember/debug';\n\nimport type Store from '@ember-data/store';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { UpdateResourceRelationshipOperation } from '@warp-drive/core-types/cache/operations';\nimport type { UpdateRelationshipOperation } from '@warp-drive/core-types/graph';\nimport type {\n  ExistingResourceIdentifierObject,\n  NewResourceIdentifierObject,\n} from '@warp-drive/core-types/spec/json-api-raw';\n\nimport { isBelongsTo, isHasMany, notifyChange } from '../-utils';\nimport type { Graph } from '../graph';\nimport _normalizeLink from '../normalize-link';\n\ntype IdentifierCache = Store['identifierCache'];\n\n/*\n    Updates the \"canonical\" or \"remote\" state of a relationship, replacing any existing\n    state and blowing away any local changes (excepting new records).\n*/\nexport default function updateRelationshipOperation(\n  graph: Graph,\n  op: UpdateRelationshipOperation | UpdateResourceRelationshipOperation\n) {\n  const relationship = graph.get(op.record, op.field);\n  assert(`Cannot update an implicit relationship`, isHasMany(relationship) || isBelongsTo(relationship));\n  const { definition, state, identifier } = relationship;\n  const { isCollection } = definition;\n\n  const payload = op.value;\n\n  let hasRelationshipDataProperty = false;\n  let hasUpdatedLink = false;\n\n  if (payload.meta) {\n    relationship.meta = payload.meta;\n  }\n\n  if (payload.data !== undefined) {\n    hasRelationshipDataProperty = true;\n    if (isCollection) {\n      // TODO deprecate this case. We\n      // have tests saying we support it.\n      if (payload.data === null) {\n        payload.data = [];\n      }\n      assert(`Expected an array`, Array.isArray(payload.data));\n      const cache = graph.store.identifierCache;\n      graph.update(\n        {\n          op: 'replaceRelatedRecords',\n          record: identifier,\n          field: op.field,\n          value: upgradeIdentifiers(payload.data, cache),\n        },\n        true\n      );\n    } else {\n      graph.update(\n        {\n          op: 'replaceRelatedRecord',\n          record: identifier,\n          field: op.field,\n          value: payload.data\n            ? graph.store.identifierCache.upgradeIdentifier(payload.data as ExistingResourceIdentifierObject)\n            : null,\n        },\n        true\n      );\n    }\n  } else if (definition.isAsync === false && !state.hasReceivedData) {\n    hasRelationshipDataProperty = true;\n\n    if (isCollection) {\n      graph.update(\n        {\n          op: 'replaceRelatedRecords',\n          record: identifier,\n          field: op.field,\n          value: [],\n        },\n        true\n      );\n    } else {\n      graph.update(\n        {\n          op: 'replaceRelatedRecord',\n          record: identifier,\n          field: op.field,\n          value: null,\n        },\n        true\n      );\n    }\n  }\n\n  if (payload.links) {\n    const originalLinks = relationship.links;\n    relationship.links = payload.links;\n    if (payload.links.related) {\n      const relatedLink = _normalizeLink(payload.links.related);\n      const currentLink = originalLinks && originalLinks.related ? _normalizeLink(originalLinks.related) : null;\n      const currentLinkHref = currentLink ? currentLink.href : null;\n\n      if (relatedLink && relatedLink.href && relatedLink.href !== currentLinkHref) {\n        warn(\n          `You pushed a record of type '${identifier.type}' with a relationship '${definition.key}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload. EmberData will treat this relationship as known-to-be-empty.`,\n          definition.isAsync || state.hasReceivedData,\n          {\n            id: 'ds.store.push-link-for-sync-relationship',\n          }\n        );\n        assert(\n          `You have pushed a record of type '${identifier.type}' with '${definition.key}' as a link, but the value of that link is not a string.`,\n          typeof relatedLink.href === 'string' || relatedLink.href === null\n        );\n        hasUpdatedLink = true;\n      }\n    }\n  }\n\n  /*\n       Data being pushed into the relationship might contain only data or links,\n       or a combination of both.\n\n       IF contains only data\n       IF contains both links and data\n        state.isEmpty -> true if is empty array (has-many) or is null (belongs-to)\n        state.hasReceivedData -> true\n        hasDematerializedInverse -> false\n        state.isStale -> false\n        allInverseRecordsAreLoaded -> run-check-to-determine\n\n       IF contains only links\n        state.isStale -> true\n       */\n  relationship.state.hasFailedLoadAttempt = false;\n  if (hasRelationshipDataProperty) {\n    const relationshipIsEmpty = payload.data === null || (Array.isArray(payload.data) && payload.data.length === 0);\n\n    // we don't need to notify here as the update op we pushed in above will notify once\n    // membership is in the correct state.\n    relationship.state.hasReceivedData = true;\n    relationship.state.isStale = false;\n    relationship.state.hasDematerializedInverse = false;\n    relationship.state.isEmpty = relationshipIsEmpty;\n  } else if (hasUpdatedLink) {\n    // only notify stale if we have not previously received membership data.\n    // within this same transaction\n    // this prevents refetching when only one side of the relationship in the\n    // payload contains the info while the other side contains just a link\n    // this only works when the side with just a link is a belongsTo, as we\n    // don't know if a hasMany has full information or not.\n    // see #7049 for context.\n    if (\n      isCollection ||\n      !relationship.state.hasReceivedData ||\n      isStaleTransaction(relationship.transactionRef, graph._transaction)\n    ) {\n      relationship.state.isStale = true;\n\n      notifyChange(graph, relationship);\n    } else {\n      relationship.state.isStale = false;\n    }\n  }\n}\n\nfunction isStaleTransaction(relationshipTransactionId: number, graphTransactionId: number | null) {\n  return (\n    relationshipTransactionId === 0 || // relationship has never notified\n    graphTransactionId === null || // we are not in a transaction\n    relationshipTransactionId < graphTransactionId // we are not part of the current transaction\n  );\n}\n\nexport function upgradeIdentifiers(\n  arr: (ExistingResourceIdentifierObject | NewResourceIdentifierObject | StableRecordIdentifier)[],\n  cache: IdentifierCache\n): StableRecordIdentifier[] {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = cache.upgradeIdentifier(arr[i]);\n  }\n  return arr as StableRecordIdentifier[];\n}\n","import type { CacheCapabilitiesManager } from '@ember-data/store/types';\nimport { LOG_GRAPH } from '@warp-drive/build-config/debugging';\nimport { DEBUG } from '@warp-drive/build-config/env';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport { getOrSetGlobal, peekTransient, setTransient } from '@warp-drive/core-types/-private';\nimport type { RelationshipDiff } from '@warp-drive/core-types/cache';\nimport type { MergeOperation } from '@warp-drive/core-types/cache/operations';\nimport type { CollectionRelationship, ResourceRelationship } from '@warp-drive/core-types/cache/relationship';\nimport type {\n  DeleteRecordOperation,\n  LocalRelationshipOperation,\n  RemoteRelationshipOperation,\n  UnknownOperation,\n} from '@warp-drive/core-types/graph';\n\nimport { rollbackRelationship } from './-diff';\nimport type { EdgeCache, UpgradedMeta } from './-edge-definition';\nimport { isLHS, upgradeDefinition } from './-edge-definition';\nimport {\n  assertValidRelationshipPayload,\n  forAllRelatedIdentifiers,\n  getStore,\n  isBelongsTo,\n  isHasMany,\n  isImplicit,\n  isNew,\n  notifyChange,\n  removeIdentifierCompletelyFromRelationship,\n} from './-utils';\nimport { type CollectionEdge, createCollectionEdge, legacyGetCollectionRelationshipData } from './edges/collection';\nimport type { ImplicitEdge, ImplicitMeta } from './edges/implicit';\nimport { createImplicitEdge } from './edges/implicit';\nimport { createResourceEdge, legacyGetResourceRelationshipData, type ResourceEdge } from './edges/resource';\nimport addToRelatedRecords from './operations/add-to-related-records';\nimport { mergeIdentifier } from './operations/merge-identifier';\nimport removeFromRelatedRecords from './operations/remove-from-related-records';\nimport replaceRelatedRecord from './operations/replace-related-record';\nimport replaceRelatedRecords from './operations/replace-related-records';\nimport updateRelationshipOperation from './operations/update-relationship';\n\nexport type GraphEdge = ImplicitEdge | CollectionEdge | ResourceEdge;\n\nexport const Graphs = getOrSetGlobal('Graphs', new Map<CacheCapabilitiesManager, Graph>());\n\ntype PendingOps = {\n  belongsTo?: Map<string, Map<string, RemoteRelationshipOperation[]>>;\n  hasMany?: Map<string, Map<string, RemoteRelationshipOperation[]>>;\n  deletions: DeleteRecordOperation[];\n};\n\n/*\n * Graph acts as the cache for relationship data. It allows for\n * us to ask about and update relationships for a given Identifier\n * without requiring other objects for that Identifier to be\n * instantiated (such as `RecordData` or a `Record`)\n *\n * This also allows for us to make more substantive changes to relationships\n * with increasingly minor alterations to other portions of the internals\n * over time.\n *\n * The graph is made up of nodes and edges. Each unique identifier gets\n * its own node, which is a dictionary with a list of that node's edges\n * (or connections) to other nodes. In `Model` terms, a node represents a\n * record instance, with each key (an edge) in the dictionary correlating\n * to either a `hasMany` or `belongsTo` field on that record instance.\n *\n * The value for each key, or `edge` is the identifier(s) the node relates\n * to in the graph from that key.\n */\nexport class Graph {\n  declare _definitionCache: EdgeCache;\n  declare _metaCache: Record<string, Record<string, UpgradedMeta>>;\n  declare _potentialPolymorphicTypes: Record<string, Record<string, boolean>>;\n  declare identifiers: Map<StableRecordIdentifier, Record<string, GraphEdge>>;\n  declare store: CacheCapabilitiesManager;\n  declare isDestroyed: boolean;\n  declare _willSyncRemote: boolean;\n  declare _willSyncLocal: boolean;\n  declare silenceNotifications: boolean;\n  declare _pushedUpdates: PendingOps;\n  declare _updatedRelationships: Set<CollectionEdge>;\n  declare _transaction: number | null;\n  declare _removing: StableRecordIdentifier | null;\n\n  constructor(store: CacheCapabilitiesManager) {\n    this._definitionCache = Object.create(null) as EdgeCache;\n    this._metaCache = Object.create(null) as Record<string, Record<string, UpgradedMeta>>;\n    this._potentialPolymorphicTypes = Object.create(null) as Record<string, Record<string, boolean>>;\n    this.identifiers = new Map();\n    this.store = store;\n    this.isDestroyed = false;\n    this._willSyncRemote = false;\n    this._willSyncLocal = false;\n    this._pushedUpdates = {\n      belongsTo: undefined,\n      hasMany: undefined,\n      deletions: [],\n    };\n    this._updatedRelationships = new Set();\n    this._transaction = null;\n    this._removing = null;\n    this.silenceNotifications = false;\n  }\n\n  has(identifier: StableRecordIdentifier, propertyName: string): boolean {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return false;\n    }\n    return relationships[propertyName] !== undefined;\n  }\n\n  getDefinition(identifier: StableRecordIdentifier, propertyName: string): UpgradedMeta {\n    let defs = this._metaCache[identifier.type];\n    let meta: UpgradedMeta | null | undefined = defs?.[propertyName];\n    if (!meta) {\n      const info = /*#__NOINLINE__*/ upgradeDefinition(this, identifier, propertyName);\n      assert(`Could not determine relationship information for ${identifier.type}.${propertyName}`, info !== null);\n\n      // if (info.rhs_definition?.kind === 'implicit') {\n      // we should possibly also do this\n      // but it would result in being extremely permissive for other relationships by accident\n      // this.registerPolymorphicType(info.rhs_baseModelName, identifier.type);\n      // }\n\n      meta = /*#__NOINLINE__*/ isLHS(info, identifier.type, propertyName) ? info.lhs_definition : info.rhs_definition!;\n      defs = this._metaCache[identifier.type] = defs || {};\n      defs[propertyName] = meta;\n    }\n    return meta;\n  }\n\n  get(identifier: StableRecordIdentifier, propertyName: string): GraphEdge {\n    assert(`expected propertyName`, propertyName);\n    let relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      relationships = Object.create(null) as Record<string, GraphEdge>;\n      this.identifiers.set(identifier, relationships);\n    }\n\n    let relationship = relationships[propertyName];\n    if (!relationship) {\n      const meta = this.getDefinition(identifier, propertyName);\n\n      if (meta.kind === 'belongsTo') {\n        relationship = relationships[propertyName] = createResourceEdge(meta, identifier);\n      } else if (meta.kind === 'hasMany') {\n        relationship = relationships[propertyName] = createCollectionEdge(meta, identifier);\n      } else {\n        assert(`Expected kind to be implicit`, meta.kind === 'implicit' && meta.isImplicit === true);\n        relationship = relationships[propertyName] = createImplicitEdge(meta as ImplicitMeta, identifier);\n      }\n    }\n\n    return relationship;\n  }\n\n  getData(identifier: StableRecordIdentifier, propertyName: string): ResourceRelationship | CollectionRelationship {\n    const relationship = this.get(identifier, propertyName);\n\n    assert(`Cannot getData() on an implicit relationship`, !isImplicit(relationship));\n\n    if (isBelongsTo(relationship)) {\n      return legacyGetResourceRelationshipData(relationship, false);\n    }\n\n    return legacyGetCollectionRelationshipData(relationship, false);\n  }\n\n  getRemoteData(\n    identifier: StableRecordIdentifier,\n    propertyName: string\n  ): ResourceRelationship | CollectionRelationship {\n    const relationship = this.get(identifier, propertyName);\n\n    assert(`Cannot getRemoteData() on an implicit relationship`, !isImplicit(relationship));\n\n    if (isBelongsTo(relationship)) {\n      return legacyGetResourceRelationshipData(relationship, true);\n    }\n\n    return legacyGetCollectionRelationshipData(relationship, true);\n  }\n\n  /*\n   * Allows for the graph to dynamically discover polymorphic connections\n   * without needing to walk prototype chains.\n   *\n   * Used by edges when an added `type` does not match the expected `type`\n   * for that edge.\n   *\n   * Currently we assert before calling this. For a public API we will want\n   * to call out to the schema manager to ask if we should consider these\n   * types as equivalent for a given relationship.\n   */\n  registerPolymorphicType(type1: string, type2: string): void {\n    const typeCache = this._potentialPolymorphicTypes;\n    let t1 = typeCache[type1];\n    if (!t1) {\n      t1 = typeCache[type1] = Object.create(null) as Record<string, boolean>;\n    }\n    t1[type2] = true;\n\n    let t2 = typeCache[type2];\n    if (!t2) {\n      t2 = typeCache[type2] = Object.create(null) as Record<string, boolean>;\n    }\n    t2[type1] = true;\n  }\n\n  /*\n   TODO move this comment somewhere else\n   implicit relationships are relationships which have not been declared but the inverse side exists on\n   another record somewhere\n\n   For example if there was:\n\n   ```app/models/comment.js\n   import Model, { attr } from '@ember-data/model';\n\n   export default class Comment extends Model {\n     @attr text;\n   }\n   ```\n\n   and there is also:\n\n   ```app/models/post.js\n   import Model, { attr, hasMany } from '@ember-data/model';\n\n   export default class Post extends Model {\n     @attr title;\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   Then we would have a implicit 'post' relationship for the comment record in order\n   to be do things like remove the comment from the post if the comment were to be deleted.\n  */\n\n  isReleasable(identifier: StableRecordIdentifier): boolean {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      if (LOG_GRAPH) {\n        // eslint-disable-next-line no-console\n        console.log(`graph: RELEASABLE ${String(identifier)}`);\n      }\n      return true;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      const relationship: GraphEdge = relationships[keys[i]];\n      // account for previously unloaded relationships\n      // typically from a prior deletion of a record that pointed to this one implicitly\n      if (relationship === undefined) {\n        continue;\n      }\n      assert(`Expected a relationship`, relationship);\n      if (relationship.definition.inverseIsAsync && !isNew(identifier)) {\n        if (LOG_GRAPH) {\n          // eslint-disable-next-line no-console\n          console.log(`graph: <<NOT>> RELEASABLE ${String(identifier)}`);\n        }\n        return false;\n      }\n    }\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`graph: RELEASABLE ${String(identifier)}`);\n    }\n    return true;\n  }\n\n  unload(identifier: StableRecordIdentifier, silenceNotifications?: boolean) {\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`graph: unload ${String(identifier)}`);\n    }\n    const relationships = this.identifiers.get(identifier);\n\n    if (relationships) {\n      // cleans up the graph but retains some nodes\n      // to allow for rematerialization\n      Object.keys(relationships).forEach((key) => {\n        const rel = relationships[key];\n        if (!rel) {\n          return;\n        }\n        /*#__NOINLINE__*/ destroyRelationship(this, rel, silenceNotifications);\n        if (/*#__NOINLINE__*/ isImplicit(rel)) {\n          // @ts-expect-error\n          relationships[key] = undefined;\n        }\n      });\n    }\n  }\n\n  _isDirty(identifier: StableRecordIdentifier, field: string): boolean {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return false;\n    }\n    const relationship = relationships[field];\n    if (!relationship) {\n      return false;\n    }\n    if (isBelongsTo(relationship)) {\n      return relationship.localState !== relationship.remoteState;\n    } else if (isHasMany(relationship)) {\n      const hasAdditions = relationship.additions !== null && relationship.additions.size > 0;\n      const hasRemovals = relationship.removals !== null && relationship.removals.size > 0;\n      return hasAdditions || hasRemovals || isReordered(relationship);\n    }\n    return false;\n  }\n\n  getChanged(identifier: StableRecordIdentifier): Map<string, RelationshipDiff> {\n    const relationships = this.identifiers.get(identifier);\n    const changed = new Map<string, RelationshipDiff>();\n\n    if (!relationships) {\n      return changed;\n    }\n\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      const field = keys[i];\n      const relationship = relationships[field];\n      if (!relationship) {\n        continue;\n      }\n      if (isBelongsTo(relationship)) {\n        if (relationship.localState !== relationship.remoteState) {\n          changed.set(field, {\n            kind: 'resource',\n            remoteState: relationship.remoteState,\n            localState: relationship.localState,\n          });\n        }\n      } else if (isHasMany(relationship)) {\n        const hasAdditions = relationship.additions !== null && relationship.additions.size > 0;\n        const hasRemovals = relationship.removals !== null && relationship.removals.size > 0;\n        const reordered = isReordered(relationship);\n\n        if (hasAdditions || hasRemovals || reordered) {\n          changed.set(field, {\n            kind: 'collection',\n            additions: new Set(relationship.additions),\n            removals: new Set(relationship.removals),\n            remoteState: relationship.remoteState,\n            localState: legacyGetCollectionRelationshipData(relationship, false).data || [],\n            reordered,\n          });\n        }\n      }\n    }\n\n    return changed;\n  }\n\n  hasChanged(identifier: StableRecordIdentifier): boolean {\n    const relationships = this.identifiers.get(identifier);\n    if (!relationships) {\n      return false;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      if (this._isDirty(identifier, keys[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  rollback(identifier: StableRecordIdentifier): string[] {\n    const relationships = this.identifiers.get(identifier);\n    const changed: string[] = [];\n    if (!relationships) {\n      return changed;\n    }\n    const keys = Object.keys(relationships);\n    for (let i = 0; i < keys.length; i++) {\n      const field = keys[i];\n      const relationship = relationships[field];\n      if (!relationship) {\n        continue;\n      }\n\n      if (this._isDirty(identifier, field)) {\n        rollbackRelationship(this, identifier, field, relationship as CollectionEdge | ResourceEdge);\n        changed.push(field);\n      }\n    }\n\n    return changed;\n  }\n\n  remove(identifier: StableRecordIdentifier) {\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`graph: remove ${String(identifier)}`);\n    }\n    assert(`Cannot remove ${String(identifier)} while still removing ${String(this._removing)}`, !this._removing);\n    this._removing = identifier;\n    this.unload(identifier);\n    this.identifiers.delete(identifier);\n    this._removing = null;\n  }\n\n  /*\n   * Remote state changes\n   */\n  push(op: RemoteRelationshipOperation) {\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`graph: push ${String(op.record)}`, op);\n    }\n    if (op.op === 'deleteRecord') {\n      this._pushedUpdates.deletions.push(op);\n    } else {\n      const definition = this.getDefinition(op.record, op.field);\n      assert(`Cannot push a remote update for an implicit relationship`, definition.kind !== 'implicit');\n      addPending(this._pushedUpdates, definition, op);\n    }\n    if (!this._willSyncRemote) {\n      this._willSyncRemote = true;\n      const store = getStore(this.store);\n      if (!store._cbs) {\n        store._run(() => this._flushRemoteQueue());\n      } else {\n        store._schedule('coalesce', () => this._flushRemoteQueue());\n      }\n    }\n  }\n\n  /*\n   * Local state changes\n   */\n  update(op: RemoteRelationshipOperation | MergeOperation, isRemote: true): void;\n  update(op: LocalRelationshipOperation, isRemote?: false): void;\n  update(\n    op: MergeOperation | LocalRelationshipOperation | RemoteRelationshipOperation | UnknownOperation,\n    isRemote = false\n  ): void {\n    assert(\n      `Cannot update an implicit relationship`,\n      op.op === 'deleteRecord' || op.op === 'mergeIdentifiers' || !isImplicit(this.get(op.record, op.field))\n    );\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`graph: update (${isRemote ? 'remote' : 'local'}) ${String(op.record)}`, op);\n    }\n\n    switch (op.op) {\n      case 'mergeIdentifiers': {\n        const relationships = this.identifiers.get(op.record);\n        if (relationships) {\n          /*#__NOINLINE__*/ mergeIdentifier(this, op, relationships);\n        }\n        break;\n      }\n      case 'update':\n      case 'updateRelationship':\n        assert(`Can only perform the operation updateRelationship on remote state`, isRemote);\n        if (DEBUG) {\n          // in debug, assert payload validity eagerly\n          // TODO add deprecations/assertion here for duplicates\n          assertValidRelationshipPayload(this, op);\n        }\n        /*#__NOINLINE__*/ updateRelationshipOperation(this, op);\n        break;\n      case 'deleteRecord': {\n        assert(`Can only perform the operation deleteRelationship on remote state`, isRemote);\n        const identifier = op.record;\n        const relationships = this.identifiers.get(identifier);\n\n        if (relationships) {\n          Object.keys(relationships).forEach((key) => {\n            const rel = relationships[key];\n            if (!rel) {\n              return;\n            }\n            // works together with the has check\n            // @ts-expect-error\n            relationships[key] = undefined;\n            /*#__NOINLINE__*/ removeCompletelyFromInverse(this, rel);\n          });\n          this.identifiers.delete(identifier);\n        }\n        break;\n      }\n      case 'replaceRelatedRecord':\n        /*#__NOINLINE__*/ replaceRelatedRecord(this, op, isRemote);\n        break;\n      case 'add':\n        /*#__NOINLINE__*/ addToRelatedRecords(this, op, isRemote);\n        break;\n      case 'remove':\n        /*#__NOINLINE__*/ removeFromRelatedRecords(this, op, isRemote);\n        break;\n      case 'replaceRelatedRecords':\n        /*#__NOINLINE__*/ replaceRelatedRecords(this, op, isRemote);\n        break;\n      default:\n        assert(`No local relationship update operation exists for '${op.op}'`);\n    }\n  }\n\n  _scheduleLocalSync(relationship: CollectionEdge) {\n    this._updatedRelationships.add(relationship);\n    if (!this._willSyncLocal) {\n      this._willSyncLocal = true;\n      getStore(this.store)._schedule('sync', () => this._flushLocalQueue());\n    }\n  }\n\n  _flushRemoteQueue() {\n    if (!this._willSyncRemote) {\n      return;\n    }\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.groupCollapsed(`Graph: Initialized Transaction`);\n    }\n    let transactionRef = peekTransient<number>('transactionRef') ?? 0;\n    this._transaction = ++transactionRef;\n    setTransient('transactionRef', transactionRef);\n    this._willSyncRemote = false;\n    const updates = this._pushedUpdates;\n    const { deletions, hasMany, belongsTo } = updates;\n    updates.deletions = [];\n    updates.hasMany = undefined;\n    updates.belongsTo = undefined;\n\n    for (let i = 0; i < deletions.length; i++) {\n      this.update(deletions[i], true);\n    }\n\n    if (hasMany) {\n      flushPending(this, hasMany);\n    }\n    if (belongsTo) {\n      flushPending(this, belongsTo);\n    }\n\n    this._transaction = null;\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`Graph: transaction finalized`);\n      // eslint-disable-next-line no-console\n      console.groupEnd();\n    }\n  }\n\n  _addToTransaction(relationship: CollectionEdge | ResourceEdge) {\n    assert(`expected a transaction`, this._transaction !== null);\n    if (LOG_GRAPH) {\n      // eslint-disable-next-line no-console\n      console.log(`Graph: ${String(relationship.identifier)} ${relationship.definition.key} added to transaction`);\n    }\n    relationship.transactionRef = this._transaction;\n  }\n\n  _flushLocalQueue() {\n    if (!this._willSyncLocal) {\n      return;\n    }\n\n    if (this.silenceNotifications) {\n      this.silenceNotifications = false;\n      this._updatedRelationships = new Set();\n      return;\n    }\n\n    this._willSyncLocal = false;\n    const updated = this._updatedRelationships;\n    this._updatedRelationships = new Set();\n    updated.forEach((rel) => notifyChange(this, rel));\n  }\n\n  destroy() {\n    Graphs.delete(this.store);\n\n    if (DEBUG) {\n      Graphs.delete(getStore(this.store) as unknown as CacheCapabilitiesManager);\n      if (Graphs.size) {\n        Graphs.forEach((_, key) => {\n          assert(\n            `Memory Leak Detected, likely the test or app instance previous to this was not torn down properly`,\n            !(key as unknown as { isDestroyed: boolean }).isDestroyed &&\n              !(key as unknown as { isDestroying: boolean }).isDestroying\n          );\n        });\n      }\n    }\n\n    this.identifiers.clear();\n    this.store = null as unknown as CacheCapabilitiesManager;\n    this.isDestroyed = true;\n  }\n}\n\nfunction flushPending(graph: Graph, ops: Map<string, Map<string, RemoteRelationshipOperation[]>>) {\n  ops.forEach((type) => {\n    type.forEach((opList) => {\n      flushPendingList(graph, opList);\n    });\n  });\n}\nfunction flushPendingList(graph: Graph, opList: RemoteRelationshipOperation[]) {\n  for (let i = 0; i < opList.length; i++) {\n    graph.update(opList[i], true);\n  }\n}\n\n// Handle dematerialization for relationship `rel`.  In all cases, notify the\n// relationship of the dematerialization: this is done so the relationship can\n// notify its inverse which needs to update state\n//\n// If the inverse is sync, unloading this record is treated as a client-side\n// delete, so we remove the inverse records from this relationship to\n// disconnect the graph.  Because it's not async, we don't need to keep around\n// the identifier as an id-wrapper for references\nfunction destroyRelationship(graph: Graph, rel: GraphEdge, silenceNotifications?: boolean) {\n  if (isImplicit(rel)) {\n    if (graph.isReleasable(rel.identifier)) {\n      /*#__NOINLINE__*/ removeCompletelyFromInverse(graph, rel);\n    }\n    return;\n  }\n\n  const { identifier } = rel;\n  const { inverseKey } = rel.definition;\n\n  if (!rel.definition.inverseIsImplicit) {\n    /*#__NOINLINE__*/ forAllRelatedIdentifiers(rel, (inverseIdentifer: StableRecordIdentifier) =>\n      /*#__NOINLINE__*/ notifyInverseOfDematerialization(\n        graph,\n        inverseIdentifer,\n        inverseKey,\n        identifier,\n        silenceNotifications\n      )\n    );\n  }\n\n  if (!rel.definition.inverseIsImplicit && !rel.definition.inverseIsAsync) {\n    rel.state.isStale = true;\n    /*#__NOINLINE__*/ clearRelationship(rel);\n\n    // necessary to clear relationships in the ui from dematerialized records\n    // hasMany is managed by Model which calls `retreiveLatest` after\n    // dematerializing the resource-cache instance.\n    // but sync belongsTo requires this since they don't have a proxy to update.\n    // so we have to notify so it will \"update\" to null.\n    // we should discuss whether we still care about this, probably fine to just\n    // leave the ui relationship populated since the record is destroyed and\n    // internally we've fully cleaned up.\n    if (!rel.definition.isAsync && !silenceNotifications) {\n      /*#__NOINLINE__*/ notifyChange(graph, rel);\n    }\n  }\n}\n\nfunction notifyInverseOfDematerialization(\n  graph: Graph,\n  inverseIdentifier: StableRecordIdentifier,\n  inverseKey: string,\n  identifier: StableRecordIdentifier,\n  silenceNotifications?: boolean\n) {\n  if (!graph.has(inverseIdentifier, inverseKey)) {\n    return;\n  }\n\n  const relationship = graph.get(inverseIdentifier, inverseKey);\n  assert(`expected no implicit`, !isImplicit(relationship));\n\n  // For remote members, it is possible that inverseRecordData has already been associated to\n  // to another record. For such cases, do not dematerialize the inverseRecordData\n  if (!isBelongsTo(relationship) || !relationship.localState || identifier === relationship.localState) {\n    /*#__NOINLINE__*/ removeDematerializedInverse(graph, relationship, identifier, silenceNotifications);\n  }\n}\n\nfunction clearRelationship(relationship: CollectionEdge | ResourceEdge) {\n  if (isBelongsTo(relationship)) {\n    relationship.localState = null;\n    relationship.remoteState = null;\n    relationship.state.hasReceivedData = false;\n    relationship.state.isEmpty = true;\n  } else {\n    relationship.remoteMembers.clear();\n    relationship.remoteState = [];\n    relationship.additions = null;\n    relationship.removals = null;\n    relationship.localState = null;\n  }\n}\n\nfunction removeDematerializedInverse(\n  graph: Graph,\n  relationship: CollectionEdge | ResourceEdge,\n  inverseIdentifier: StableRecordIdentifier,\n  silenceNotifications?: boolean\n) {\n  if (isBelongsTo(relationship)) {\n    const localInverse = relationship.localState;\n    if (!relationship.definition.isAsync || (localInverse && isNew(localInverse))) {\n      // unloading inverse of a sync relationship is treated as a client-side\n      // delete, so actually remove the models don't merely invalidate the cp\n      // cache.\n      // if the record being unloaded only exists on the client, we similarly\n      // treat it as a client side delete\n      if (relationship.localState === localInverse && localInverse !== null) {\n        relationship.localState = null;\n      }\n\n      if (relationship.remoteState === localInverse && localInverse !== null) {\n        relationship.remoteState = null;\n        relationship.state.hasReceivedData = true;\n        relationship.state.isEmpty = true;\n        if (relationship.localState && !isNew(relationship.localState)) {\n          relationship.localState = null;\n        }\n      }\n    } else {\n      relationship.state.hasDematerializedInverse = true;\n    }\n\n    if (!silenceNotifications) {\n      notifyChange(graph, relationship);\n    }\n  } else {\n    if (!relationship.definition.isAsync || (inverseIdentifier && isNew(inverseIdentifier))) {\n      // unloading inverse of a sync relationship is treated as a client-side\n      // delete, so actually remove the models don't merely invalidate the cp\n      // cache.\n      // if the record being unloaded only exists on the client, we similarly\n      // treat it as a client side delete\n      /*#__NOINLINE__*/ removeIdentifierCompletelyFromRelationship(graph, relationship, inverseIdentifier);\n    } else {\n      relationship.state.hasDematerializedInverse = true;\n    }\n\n    if (!silenceNotifications) {\n      notifyChange(graph, relationship);\n    }\n  }\n}\n\nfunction removeCompletelyFromInverse(graph: Graph, relationship: GraphEdge) {\n  const { identifier } = relationship;\n  const { inverseKey } = relationship.definition;\n\n  forAllRelatedIdentifiers(relationship, (inverseIdentifier: StableRecordIdentifier) => {\n    if (graph.has(inverseIdentifier, inverseKey)) {\n      removeIdentifierCompletelyFromRelationship(graph, graph.get(inverseIdentifier, inverseKey), identifier);\n    }\n  });\n\n  if (isBelongsTo(relationship)) {\n    if (!relationship.definition.isAsync) {\n      clearRelationship(relationship);\n    }\n\n    relationship.localState = null;\n  } else if (isHasMany(relationship)) {\n    if (!relationship.definition.isAsync) {\n      clearRelationship(relationship);\n\n      notifyChange(graph, relationship);\n    }\n  } else {\n    relationship.remoteMembers.clear();\n    relationship.localMembers.clear();\n  }\n}\n\nfunction addPending(\n  cache: PendingOps,\n  definition: UpgradedMeta,\n  op: RemoteRelationshipOperation & { field: string }\n): void {\n  const cacheForKind = (cache[definition.kind as 'hasMany' | 'belongsTo'] =\n    cache[definition.kind as 'hasMany' | 'belongsTo'] || new Map<string, Map<string, RemoteRelationshipOperation[]>>());\n\n  let cacheForType = cacheForKind.get(definition.inverseType);\n  if (!cacheForType) {\n    cacheForType = new Map<string, RemoteRelationshipOperation[]>();\n    cacheForKind.set(definition.inverseType, cacheForType);\n  }\n\n  let cacheForField = cacheForType.get(op.field);\n  if (!cacheForField) {\n    cacheForField = [];\n    cacheForType.set(op.field, cacheForField);\n  }\n\n  cacheForField.push(op);\n}\n\nfunction isReordered(relationship: CollectionEdge): boolean {\n  // if we are dirty we are never re-ordered because accessing\n  // the state would flush away any reordering.\n  if (relationship.isDirty) {\n    return false;\n  }\n\n  const { remoteState, localState, additions, removals } = relationship;\n\n  if (localState === null) {\n    // the relationship has never been accessed, so it hasn't been reordered either\n    return false;\n  }\n\n  for (let i = 0, j = 0; i < remoteState.length; i++) {\n    const member = remoteState[i];\n    const localMember = localState[j];\n\n    if (member !== localMember) {\n      if (removals && removals.has(member)) {\n        // dont increment j because we want to skip this\n        continue;\n      }\n      if (additions && additions.has(localMember)) {\n        // increment j to skip this localMember\n        // decrement i to repeat this remoteMember\n        j++;\n        i--;\n        continue;\n      }\n      return true;\n    }\n\n    // if we made it here, increment j\n    j++;\n  }\n\n  return false;\n}\n","/**\n * <p align=\"center\">\n  <img\n    class=\"project-logo\"\n    src=\"https://raw.githubusercontent.com/emberjs/data/4612c9354e4c54d53327ec2cf21955075ce21294/ember-data-logo-light.svg#gh-light-mode-only\"\n    alt=\"EmberData\"\n    width=\"240px\"\n    title=\"EmberData\"\n    />\n</p>\n\n<p align=\"center\">Provides a performance tuned normalized graph for intelligently managing relationships between resources based on identity</p>\n\nWhile this Graph is abstract, it currently is a private implementation required as a peer-dependency by the [JSON:API Cache Implementation](https://github.com/emberjs/data/tree/main/packages/json-api).\n\nWe intend to make this Graph public API after some additional iteration during the 5.x timeframe, until then all APIs should be considered experimental and unstable, not fit for direct application or 3rd party library usage.\n\n## Installation\n\nInstall using your javascript package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n```no-highlight\npnpm add @ember-data/graph\n```\n\n  @module @ember-data/graph\n  @main @ember-data/graph\n*/\nimport type Store from '@ember-data/store';\nimport type { CacheCapabilitiesManager } from '@ember-data/store/types';\nimport { DEBUG } from '@warp-drive/build-config/env';\n\nimport { getStore } from './-private/-utils';\nimport { Graph, Graphs } from './-private/graph';\n\nexport { isBelongsTo } from './-private/-utils';\nexport type { CollectionEdge } from './-private/edges/collection';\nexport type { ResourceEdge } from './-private/edges/resource';\nexport type { ImplicitEdge } from './-private/edges/implicit';\nexport type { GraphEdge } from './-private/graph';\nexport type { UpgradedMeta } from './-private/-edge-definition';\nexport type { Graph };\n\nfunction isStore(maybeStore: unknown): maybeStore is Store {\n  return (maybeStore as Store)._instanceCache !== undefined;\n}\n\nfunction getWrapper(store: CacheCapabilitiesManager | Store): CacheCapabilitiesManager {\n  return isStore(store) ? store._instanceCache._storeWrapper : store;\n}\n\nexport function peekGraph(store: CacheCapabilitiesManager | Store): Graph | undefined {\n  return Graphs.get(getWrapper(store));\n}\nexport type peekGraph = typeof peekGraph;\n\nexport function graphFor(store: CacheCapabilitiesManager | Store): Graph {\n  const wrapper = getWrapper(store);\n  let graph = Graphs.get(wrapper);\n\n  if (!graph) {\n    graph = new Graph(wrapper);\n    Graphs.set(wrapper, graph);\n    getStore(wrapper)._graph = graph;\n\n    if (DEBUG) {\n      if (getStore(wrapper).isDestroying) {\n        throw new Error(`Memory Leak Detected During Teardown`);\n      }\n    }\n  }\n  return graph;\n}\n"],"names":["coerceId","id","macroCondition","getGlobalConfig","WarpDrive","deprecations","DEPRECATE_NON_STRICT_ID","normalized","undefined","String","deprecate","JSON","stringify","until","for","since","available","enabled","env","DEBUG","test","Error","length","getStore","wrapper","_store","expandingGet","cache","key1","key2","mainCache","Object","create","expandingSet","value","assertValidRelationshipPayload","graph","op","relationship","get","record","field","isHasMany","isBelongsTo","payload","definition","identifier","state","type","isAsync","kind","links","warn","data","hasReceivedData","inspect","Array","isArray","assertRelationshipData","store","i","Date","RegExp","Map","Set","isNew","peekCache","Boolean","isImplicit","forAllRelatedIdentifiers","rel","cb","remoteState","localState","inverseIdentifier","additions","forEach","localMembers","remoteMembers","has","removeIdentifierCompletelyFromRelationship","silenceNotifications","notifyChange","delete","wasInRemovals","removals","canonicalIndex","indexOf","splice","currentIndex","accessed","key","_removing","activeLogging","LOG_GRAPH","debug","globalThis","getWarpDriveRuntimeConfig","console","log","meta","schema","hasResource","RELATIONSHIP_KINDS","isLegacyField","isRelationshipField","includes","temporaryConvertToLegacy","name","options","assign","async","inverse","resetOnRemoteUpdate","BOOL_LATER","STR_LATER","IMPLICIT_KEY_RAND","now","implicitKeyFor","syncMeta","inverseDefinition","inverseKind","inverseKey","inverseType","inverseIsAsync","inverseIsCollection","isCollection","inverseIsPolymorphic","isPolymorphic","inverseIsImplicit","inverseIsLinksMode","isLinksMode","upgradeMeta","niceMeta","polymorphic","linksMode","assertConfiguration","info","isSelfReferential","_isRHS","rhs_relationshipName","rhs_baseModelName","lhs_isPolymorphic","rhs_modelNames","_isLHS","lhs_relationshipName","lhs_baseModelName","rhs_isPolymorphic","lhs_modelNames","assertInheritedSchema","lhs_definition","isLHS","isRelationship","upgradeDefinition","propertyName","_definitionCache","storeWrapper","polymorphicLookup","_potentialPolymorphicTypes","cached","relationships","fields","altTypes","keys","_cached","push","modelFor","inverseForRelationship","inverseDefinitions","metaFromInverse","lhs_key","rhs_key","rhs_definition","hasInverse","isReflexive","baseType","modelNames","assertPolymorphicType","validateSchema","errors","set","as","expectedSchema","printSchema","config","metaFrom","inverseMetaFrom","definitionWithPolymorphic","meta1","meta2","errors1","errors2","size","parentIdentifier","parentDefinition","addedIdentifier","count","label","__WarpDriveMetricCountData","replaceRelatedRecords","isRemote","replaceRelatedRecordsRemote","replaceRelatedRecordsLocal","identifiers","wasDirty","isDirty","localBecameDirty","LOG_METRIC_COUNTS","onAdd","removalsHas","registerPolymorphicType","addToInverse","onRemove","additionsHas","removeFromInverse","diff","diffCollection","add","del","becameDirty","changed","finalState","_addToTransaction","DEBUG_RELATIONSHIP_NOTIFICATIONS","finalSet","_diff","DEPRECATE_RELATIONSHIP_REMOTE_UPDATE_CLEARING_LOCAL_STATE","deprecationInfo","triggered","map","lid","join","url","flushCanonical","isEmpty","_add","notifyInverseOfPotentialMaterialization","_removeRemote","_removeLocal","_scheduleLocalSync","replaceRelatedRecord","prop","existingState","isStale","hasFailedLoadAttempt","_deprecatedCompare","priorLocalState","newState","newMembers","prevState","prevSet","onDel","remoteClearsLocal","newLength","prevLength","iterationLength","Math","max","remoteOrderChanged","added","removed","duplicates","priorLocalLength","j","adv","member","priorLocalMember","list","prevMember","_compare","finalLength","equalLength","DEPRECATE_NON_UNIQUE_PAYLOADS","computeLocalState","storage","slice","v","index","_addLocal","_addRemote","hasValidIndex","unshift","hasPresence","_remove","rollbackRelationship","createState","shouldForceReload","hasDematerializedInverse","createCollectionEdge","transactionRef","legacyGetCollectionRelationshipData","source","getRemoteState","createImplicitEdge","createResourceEdge","legacyGetResourceRelationshipData","addToRelatedRecords","_isBelongsTo","newOp","addRelatedRecord","mergeIdentifier","mergeIdentifierForRelationship","mergeInRelationship","mergeBelongsTo","mergeHasMany","mergeImplicit","removeFromRelatedRecords","removeRelatedRecord","_normalizeLink","link","href","updateRelationshipOperation","hasRelationshipDataProperty","hasUpdatedLink","identifierCache","update","upgradeIdentifiers","upgradeIdentifier","originalLinks","related","relatedLink","currentLink","currentLinkHref","relationshipIsEmpty","isStaleTransaction","_transaction","relationshipTransactionId","graphTransactionId","arr","Graphs","getOrSetGlobal","Graph","constructor","_metaCache","isDestroyed","_willSyncRemote","_willSyncLocal","_pushedUpdates","belongsTo","hasMany","deletions","_updatedRelationships","getDefinition","defs","getData","getRemoteData","type1","type2","typeCache","t1","t2","isReleasable","unload","destroyRelationship","_isDirty","hasAdditions","hasRemovals","isReordered","getChanged","reordered","hasChanged","rollback","remove","addPending","_cbs","_run","_flushRemoteQueue","_schedule","removeCompletelyFromInverse","_flushLocalQueue","groupCollapsed","peekTransient","setTransient","updates","flushPending","groupEnd","updated","destroy","_","isDestroying","clear","ops","opList","flushPendingList","inverseIdentifer","notifyInverseOfDematerialization","clearRelationship","removeDematerializedInverse","localInverse","cacheForKind","cacheForType","cacheForField","localMember","isStore","maybeStore","_instanceCache","getWrapper","_storeWrapper","peekGraph","graphFor","_graph"],"mappings":"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"}