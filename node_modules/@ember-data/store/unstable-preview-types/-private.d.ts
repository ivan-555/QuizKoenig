declare module '@ember-data/store/-private' {
  /**
    @module @ember-data/store
  */
  export { Store, storeFor } from '@ember-data/store/-private/store-service';
  export { recordIdentifierFor } from '@ember-data/store/-private/caches/instance-cache';
  export { CacheHandler, type StoreRequestContext } from '@ember-data/store/-private/cache-handler/handler';
  export { type CachePolicy } from '@ember-data/store/-private/cache-handler/types';
  export { isStableIdentifier, isDocumentIdentifier } from '@ember-data/store/-private/caches/identifier-cache';
  export { constructResource } from '@ember-data/store/-private/utils/construct-resource';
  export type { ReactiveDocument as Document } from '@ember-data/store/-private/document';
  export type { InstanceCache } from '@ember-data/store/-private/caches/instance-cache';
  export type { FindRecordQuery, Request, SaveRecordMutation, RequestCacheRequestState, RequestStateService, } from '@ember-data/store/-private/network/request-cache';
  export type { CreateRecordProperties } from '@ember-data/store/-private/store-service';
  export { coerceId, ensureStringId } from '@ember-data/store/-private/utils/coerce-id';
  export type { NativeProxy } from '@ember-data/store/-private/record-arrays/native-proxy-type-fix';
  export { IdentifierArray as LiveArray, Collection as CollectionRecordArray, SOURCE, MUTATE, } from '@ember-data/store/-private/record-arrays/identifier-array';
  export { RecordArrayManager, fastPush } from '@ember-data/store/-private/managers/record-array-manager';
  export { _clearCaches } from '@ember-data/store/-private/caches/instance-cache';
  export { peekCache, removeRecordDataFor } from '@ember-data/store/-private/caches/cache-utils';
  export { setRecordIdentifier, StoreMap } from '@ember-data/store/-private/caches/instance-cache';
  export { setCacheFor } from '@ember-data/store/-private/caches/cache-utils';
  export { normalizeModelName as _deprecatingNormalize } from '@ember-data/store/-private/utils/normalize-model-name';
  export type { StoreRequestInput } from '@ember-data/store/-private/cache-handler/handler';
  export { RelatedCollection } from '@ember-data/store/-private/record-arrays/many-array';
  export { log, logGroup } from '@ember-data/store/-private/debug/utils';
  export { getPromiseState, type PromiseState } from '@ember-data/store/-private/new-core-tmp/promise-state';
  export { getRequestState, type RequestLoadingState, type RequestCacheRequestState as RequestState, } from '@ember-data/store/-private/new-core-tmp/request-state';
  export { createMemo, type SignalHooks } from '@ember-data/store/-private/new-core-tmp/reactivity/configure';
  export { memoized, gate, entangleSignal, defineSignal, defineNonEnumerableSignal, } from '@ember-data/store/-private/new-core-tmp/reactivity/signal';
  export { ARRAY_SIGNAL, OBJECT_SIGNAL, Signals, type WarpDriveSignal, peekInternalSignal, withSignalStore, notifyInternalSignal, consumeInternalSignal, getOrCreateInternalSignal, } from '@ember-data/store/-private/new-core-tmp/reactivity/internal';
}
//# sourceMappingURL=-private.d.ts.map