declare module '@ember-data/store/-private/new-core-tmp/reactivity/signal' {
  import type { SignalStore, WarpDriveSignal } from '@ember-data/store/-private/new-core-tmp/reactivity/internal';
  /**
   * Creates a signal for the key/object pairing and subscribes to the signal.
   *
   * Use when you need to ensure a signal exists and is subscribed to.
   *
   * @internal
   */
  export function entangleSignal<T extends object>(signals: SignalStore, obj: T, key: string | symbol, initialValue: unknown): WarpDriveSignal;
  /**
   * define an enumerable signal property.
   *
   * Akin to Object.defineProperty.
   *
   * The signal will be lazily created when accessed and scoped to the
   * instance of the object.
   *
   * @internal
   */
  export function defineSignal<T extends object>(obj: T, key: string, v?: unknown): void;
  /**
   * Define a non-enumerable signal property.
   *
   * @internal
   */
  export function defineNonEnumerableSignal<T extends object>(obj: T, key: string, v?: unknown): void;
  export function memoized<T extends object, K extends keyof T & string>(target: T, key: K, descriptor: PropertyDescriptor): PropertyDescriptor;
  export function gate<T extends object, K extends keyof T & string>(_target: T, key: K, desc: PropertyDescriptor): PropertyDescriptor;
  export function defineGate<T extends object>(obj: T, key: string, desc: PropertyDescriptor): void;
}
//# sourceMappingURL=signal.d.ts.map