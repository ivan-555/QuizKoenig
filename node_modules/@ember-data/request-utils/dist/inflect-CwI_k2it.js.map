{"version":3,"file":"inflect-CwI_k2it.js","sources":["../src/-private/string/inflections.ts","../src/-private/string/inflect.ts"],"sourcesContent":["export type RulesArray = Array<[RegExp, string]>;\ntype DefaultRulesType = {\n  plurals: RulesArray;\n  singular: RulesArray;\n  irregularPairs: Array<[string, string]>;\n  uncountable: string[];\n};\n\nexport const defaultRules: DefaultRulesType = {\n  plurals: [\n    [/$/, 's'],\n    [/s$/i, 's'],\n    [/^(ax|test)is$/i, '$1es'],\n    [/(octop|vir)us$/i, '$1i'],\n    [/(octop|vir)i$/i, '$1i'],\n    [/(alias|status|bonus)$/i, '$1es'],\n    [/(bu)s$/i, '$1ses'],\n    [/(buffal|tomat)o$/i, '$1oes'],\n    [/([ti])um$/i, '$1a'],\n    [/([ti])a$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'],\n    [/(hive)$/i, '$1s'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/(x|ch|ss|sh)$/i, '$1es'],\n    [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'],\n    [/^(m|l)ouse$/i, '$1ice'],\n    [/^(m|l)ice$/i, '$1ice'],\n    [/^(ox)$/i, '$1en'],\n    [/^(oxen)$/i, '$1'],\n    [/(quiz)$/i, '$1zes'],\n  ],\n\n  singular: [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(n)ews$/i, '$1ews'],\n    [/([ti])a$/i, '$1um'],\n    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'],\n    [/(^analy)(sis|ses)$/i, '$1sis'],\n    [/([^f])ves$/i, '$1fe'],\n    [/(hive)s$/i, '$1'],\n    [/(tive)s$/i, '$1'],\n    [/([lr])ves$/i, '$1f'],\n    [/([^aeiouy]|qu)ies$/i, '$1y'],\n    [/(s)eries$/i, '$1eries'],\n    [/(m)ovies$/i, '$1ovie'],\n    [/(x|ch|ss|sh)es$/i, '$1'],\n    [/^(m|l)ice$/i, '$1ouse'],\n    [/(bus)(es)?$/i, '$1'],\n    [/(o)es$/i, '$1'],\n    [/(shoe)s$/i, '$1'],\n    [/(cris|test)(is|es)$/i, '$1is'],\n    [/^(a)x[ie]s$/i, '$1xis'],\n    [/(octop|vir)(us|i)$/i, '$1us'],\n    [/(alias|status|bonus)(es)?$/i, '$1'],\n    [/^(ox)en/i, '$1'],\n    [/(vert|ind)ices$/i, '$1ex'],\n    [/(matr)ices$/i, '$1ix'],\n    [/(quiz)zes$/i, '$1'],\n    [/(database)s$/i, '$1'],\n  ],\n\n  irregularPairs: [\n    ['person', 'people'],\n    ['man', 'men'],\n    ['child', 'children'],\n    ['sex', 'sexes'],\n    ['move', 'moves'],\n    ['cow', 'kine'],\n    ['zombie', 'zombies'],\n  ],\n\n  uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police'],\n};\n","/**\n * @module @ember-data/request-utils/string\n */\nimport { assert } from '@warp-drive/build-config/macros';\n\nimport { defaultRules } from './inflections';\nimport { capitalize, LRUCache } from './transform';\n\nconst BLANK_REGEX = /^\\s*$/;\nconst LAST_WORD_DASHED_REGEX = /([\\w/-]+[_/\\s-])([a-z\\d]+$)/;\nconst LAST_WORD_CAMELIZED_REGEX = /([\\w/\\s-]+)([A-Z][a-z\\d]*$)/;\nconst CAMELIZED_REGEX = /[A-Z][a-z\\d]*$/;\n\nconst SINGULARS = new LRUCache<string, string>((word: string) => {\n  return _singularize(word);\n});\nconst PLURALS = new LRUCache<string, string>((word: string) => {\n  return _pluralize(word);\n});\nconst UNCOUNTABLE = new Set(defaultRules.uncountable);\nconst IRREGULAR: Map<string, string> = new Map();\nconst INVERSE_IRREGULAR: Map<string, string> = new Map();\nconst SINGULAR_RULES = new Map(defaultRules.singular.reverse());\nconst PLURAL_RULES = new Map(defaultRules.plurals.reverse());\n\n/**\n * Marks a word as uncountable. Uncountable words are not pluralized\n * or singularized.\n *\n * @method uncountable\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {String} word\n * @return {void}\n * @since 4.13.0\n */\nexport function uncountable(word: string) {\n  UNCOUNTABLE.add(word.toLowerCase());\n}\n\n/**\n * Marks a list of words as uncountable. Uncountable words are not pluralized\n * or singularized.\n *\n * @method loadUncountable\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {Array<String>} uncountables\n * @return {void}\n * @since 4.13.0\n */\nexport function loadUncountable(uncountables: string[]) {\n  uncountables.forEach((word) => {\n    uncountable(word);\n  });\n}\n\n/**\n * Marks a word as irregular. Irregular words have unique\n * pluralization and singularization rules.\n *\n * @method irregular\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {String} single\n * @param {String} plur\n * @return {void}\n * @since 4.13.0\n */\nexport function irregular(single: string, plur: string) {\n  //pluralizing\n  IRREGULAR.set(single.toLowerCase(), plur);\n  IRREGULAR.set(plur.toLowerCase(), plur);\n\n  //singularizing\n  INVERSE_IRREGULAR.set(plur.toLowerCase(), single);\n  INVERSE_IRREGULAR.set(single.toLowerCase(), single);\n}\n\n/**\n * Marks a list of word pairs as irregular. Irregular words have unique\n * pluralization and singularization rules.\n *\n * @method loadIrregular\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {Array<Array<String>>} irregularPairs\n * @return {void}\n * @since 4.13.0\n */\nexport function loadIrregular(irregularPairs: Array<[string, string]>) {\n  irregularPairs.forEach((pair) => {\n    //pluralizing\n    IRREGULAR.set(pair[0].toLowerCase(), pair[1]);\n    IRREGULAR.set(pair[1].toLowerCase(), pair[1]);\n\n    //singularizing\n    INVERSE_IRREGULAR.set(pair[1].toLowerCase(), pair[0]);\n    INVERSE_IRREGULAR.set(pair[0].toLowerCase(), pair[0]);\n  });\n}\nloadIrregular(defaultRules.irregularPairs);\n\n/**\n * Clears the caches for singularize and pluralize.\n *\n * @method clear\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @return {void}\n * @since 4.13.0\n */\nexport function clear() {\n  SINGULARS.clear();\n  PLURALS.clear();\n}\n\n/**\n * Resets the inflection rules to the defaults.\n *\n * @method resetToDefaults\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @return {void}\n * @since 4.13.0\n */\nexport function resetToDefaults() {\n  clearRules();\n  defaultRules.uncountable.forEach((v) => UNCOUNTABLE.add(v));\n  defaultRules.singular.forEach((v) => SINGULAR_RULES.set(v[0], v[1]));\n  defaultRules.plurals.forEach((v) => PLURAL_RULES.set(v[0], v[1]));\n  loadIrregular(defaultRules.irregularPairs);\n}\n\n/**\n * Clears all inflection rules\n * and resets the caches for singularize and pluralize.\n *\n * @method clearRules\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @return {void}\n * @since 4.13.0\n */\nexport function clearRules() {\n  SINGULARS.clear();\n  PLURALS.clear();\n  UNCOUNTABLE.clear();\n  IRREGULAR.clear();\n  INVERSE_IRREGULAR.clear();\n  SINGULAR_RULES.clear();\n  PLURAL_RULES.clear();\n}\n\n/**\n * Singularizes a word.\n *\n * @method singularize\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {String} word\n * @return {String}\n * @since 4.13.0\n */\nexport function singularize(word: string) {\n  assert(`singularize expects to receive a non-empty string`, typeof word === 'string' && word.length > 0);\n  if (!word) return '';\n  return SINGULARS.get(word);\n}\n\n/**\n * Pluralizes a word.\n *\n * @method pluralize\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {String} word\n * @return {String}\n * @since 4.13.0\n */\nexport function pluralize(word: string) {\n  assert(`pluralize expects to receive a non-empty string`, typeof word === 'string' && word.length > 0);\n  if (!word) return '';\n  return PLURALS.get(word);\n}\n\nfunction unshiftMap<K, V>(v: [K, V], map: Map<K, V>) {\n  // reorder\n  const rules = [v, ...map.entries()];\n  map.clear();\n  rules.forEach((rule) => {\n    map.set(rule[0], rule[1]);\n  });\n}\n\n/**\n * Adds a pluralization rule.\n *\n * @method plural\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {RegExp} regex\n * @param {String} string\n * @return {void}\n * @since 4.13.0\n */\nexport function plural(regex: RegExp, string: string) {\n  // rule requires reordering if exists, so remove it first\n  if (PLURAL_RULES.has(regex)) {\n    PLURAL_RULES.delete(regex);\n  }\n\n  // reorder\n  unshiftMap([regex, string], PLURAL_RULES);\n}\n\n/**\n * Adds a singularization rule.\n *\n * @method singular\n * @public\n * @static\n * @for @ember-data/request-utils/string\n * @param {RegExp} regex\n * @param {String} string\n * @return {void}\n * @since 4.13.0\n */\nexport function singular(regex: RegExp, string: string) {\n  // rule requires reordering if exists, so remove it first\n  if (SINGULAR_RULES.has(regex)) {\n    SINGULAR_RULES.delete(regex);\n  }\n\n  // reorder\n  unshiftMap([regex, string], SINGULAR_RULES);\n}\n\nfunction _pluralize(word: string) {\n  return inflect(word, PLURAL_RULES, IRREGULAR);\n}\n\nfunction _singularize(word: string) {\n  return inflect(word, SINGULAR_RULES, INVERSE_IRREGULAR);\n}\n\nfunction inflect(word: string, typeRules: Map<RegExp, string>, irregulars: Map<string, string>) {\n  // empty strings\n  const isBlank = !word || BLANK_REGEX.test(word);\n  if (isBlank) {\n    return word;\n  }\n\n  // basic uncountables\n  const lowercase = word.toLowerCase();\n  if (UNCOUNTABLE.has(lowercase)) {\n    return word;\n  }\n\n  // adv uncountables\n  const wordSplit = LAST_WORD_DASHED_REGEX.exec(word) || LAST_WORD_CAMELIZED_REGEX.exec(word);\n  const lastWord = wordSplit ? wordSplit[2].toLowerCase() : null;\n  if (lastWord && UNCOUNTABLE.has(lastWord)) {\n    return word;\n  }\n\n  // handle irregulars\n  const isCamelized = CAMELIZED_REGEX.test(word);\n  for (let [rule, substitution] of irregulars) {\n    if (lowercase.match(rule + '$')) {\n      if (isCamelized && lastWord && irregulars.has(lastWord)) {\n        substitution = capitalize(substitution);\n        rule = capitalize(rule);\n      }\n\n      return word.replace(new RegExp(rule, 'i'), substitution);\n    }\n  }\n\n  // do the actual inflection\n  for (const [rule, substitution] of typeRules) {\n    if (rule.test(word)) {\n      return word.replace(rule, substitution);\n    }\n  }\n\n  return word;\n}\n"],"names":["defaultRules","plurals","singular","irregularPairs","uncountable","BLANK_REGEX","LAST_WORD_DASHED_REGEX","LAST_WORD_CAMELIZED_REGEX","CAMELIZED_REGEX","SINGULARS","LRUCache","word","_singularize","PLURALS","_pluralize","UNCOUNTABLE","Set","IRREGULAR","Map","INVERSE_IRREGULAR","SINGULAR_RULES","reverse","PLURAL_RULES","add","toLowerCase","loadUncountable","uncountables","forEach","irregular","single","plur","set","loadIrregular","pair","clear","resetToDefaults","clearRules","v","singularize","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Error","length","get","pluralize","unshiftMap","map","rules","entries","rule","plural","regex","string","has","delete","inflect","typeRules","irregulars","isBlank","lowercase","wordSplit","exec","lastWord","isCamelized","substitution","match","capitalize","replace","RegExp"],"mappings":"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"}